2021-03-11 23:58:11,146 [main:66] - Compilation checking started
2021-03-11 23:58:12,466 [main:50] - replacing val value: String String
2021-03-11 23:58:12,467 [main:54] - Getting value of type String
2021-03-11 23:58:12,635 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:12,640 [main:58] - GENERATED VALUE OF TYPE String = "ngnsn"
2021-03-11 23:58:12,641 [main:61] - GENERATED IS CALL =false
2021-03-11 23:58:13,232 [main:67] - randomType = Boolean
2021-03-11 23:58:13,352 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:58:13,398 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-11 23:58:13,527 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:58:13,528 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-11 23:58:13,658 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:13,660 [main:78] - Generated call from random type = (false).compareTo(true).toString(-1127308591)
2021-03-11 23:58:13,661 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 23:58:13,662 [main:66] - Compilation checking started
2021-03-11 23:58:14,146 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters

@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String = (false).compareTo(true).toString(-1127308591))

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}
2021-03-11 23:58:14,147 [main:50] - replacing @Simple("OK") val z: String String
2021-03-11 23:58:14,147 [main:54] - Getting value of type String
2021-03-11 23:58:14,261 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:14,261 [main:58] - GENERATED VALUE OF TYPE String = "mxgrx"
2021-03-11 23:58:14,262 [main:61] - GENERATED IS CALL =false
2021-03-11 23:58:15,140 [main:67] - randomType = HashMap<Pair<Boolean?, Function1<Simple, HashSet<Sequence<Simple>>>>, Simple>
2021-03-11 23:58:15,236 [main:302] - generating value of type = HashMap<Pair<Boolean?, Function1<Simple, HashSet<Sequence<Simple>>>>, Simple> false depth = 0
2021-03-11 23:58:15,405 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Pair<Boolean?, Function1<Simple, HashSet<Sequence<Simple>>>>, Simple>): HashMap<Pair<Boolean?, Function1<Simple, HashSet<Sequence<Simple>>>>, Simple> = TODO()
2021-03-11 23:58:15,413 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Pair<Boolean?, Function1<Simple, HashSet<Sequence<Simple>>>>, Simple>): HashMap<Pair<Boolean?, Function1<Simple, HashSet<Sequence<Simple>>>>, Simple> = TODO()
2021-03-11 23:58:15,522 [main:302] - generating value of type = Pair<Pair<Boolean?, Function1<Simple, HashSet<Sequence<Simple>>>>, Simple> false depth = 3
2021-03-11 23:58:15,659 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Pair<Boolean?, Function1<Simple, HashSet<Sequence<Simple>>>>, second: Simple): Pair<Pair<Boolean?, Function1<Simple, HashSet<Sequence<Simple>>>>, Simple> = TODO()
2021-03-11 23:58:15,663 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Pair<Boolean?, Function1<Simple, HashSet<Sequence<Simple>>>>, second: Simple): Pair<Pair<Boolean?, Function1<Simple, HashSet<Sequence<Simple>>>>, Simple> = TODO()
2021-03-11 23:58:15,805 [main:302] - generating value of type = Pair<Boolean?, Function1<Simple, HashSet<Sequence<Simple>>>> false depth = 6
2021-03-11 23:58:15,954 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Boolean?, second: Function1<Simple, HashSet<Sequence<Simple>>>): Pair<Boolean?, Function1<Simple, HashSet<Sequence<Simple>>>> = TODO()
2021-03-11 23:58:15,957 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Boolean?, second: Function1<Simple, HashSet<Sequence<Simple>>>): Pair<Boolean?, Function1<Simple, HashSet<Sequence<Simple>>>> = TODO()
2021-03-11 23:58:16,079 [main:302] - generating value of type = Function1<Simple, HashSet<Sequence<Simple>>> false depth = 9
2021-03-11 23:58:16,079 [main:302] - generating value of type = HashSet<Sequence<Simple>> false depth = 10
2021-03-11 23:58:16,202 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<Sequence<Simple>> = TODO()
2021-03-11 23:58:16,205 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<Sequence<Simple>> = TODO()
2021-03-11 23:58:16,298 [main:95] - GENERATED = hashSetOf<Sequence<Simple>>()
2021-03-11 23:58:16,299 [main:95] - GENERATED = Pair<Boolean?, Function1<Simple, HashSet<Sequence<Simple>>>>(null, {a: Simple -> hashSetOf<Sequence<Simple>>()})
2021-03-11 23:58:16,299 [main:302] - generating value of type = Simple false depth = 6
2021-03-11 23:58:16,300 [main:112] - generating klass Simple text = @Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)
2021-03-11 23:58:16,300 [main:385] - Cant generate call of fun <A, B> Pair(first: Pair<Boolean?, Function1<Simple, HashSet<Sequence<Simple>>>>, second: Simple): Pair<Pair<Boolean?, Function1<Simple, HashSet<Sequence<Simple>>>>, Simple> = TODO()
2021-03-11 23:58:16,300 [main:385] - Cant generate call of fun <K, V> linkedMapOf(pairs: Pair<Pair<Boolean?, Function1<Simple, HashSet<Sequence<Simple>>>>, Simple>): HashMap<Pair<Boolean?, Function1<Simple, HashSet<Sequence<Simple>>>>, Simple> = TODO()
2021-03-11 23:58:16,632 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-11 23:58:16,737 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:16,739 [main:78] - Generated call from random type = ().size.toString(-1675671356)
2021-03-11 23:58:16,739 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 23:58:16,739 [main:66] - Compilation checking started
2021-03-11 23:58:16,741 [main:71] - Wrong syntax or breaks conditions
2021-03-11 23:58:16,741 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters

@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String = ().size.toString(-1675671356))
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}


2021-03-11 23:58:16,742 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:16,743 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 23:58:16,743 [main:66] - Compilation checking started
2021-03-11 23:58:17,374 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters

@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String = "tmyyv") {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}


2021-03-11 23:58:17,595 [main:112] - generating klass Simple text = @Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)
2021-03-11 23:58:17,595 [main:112] - generating klass A text = class A(@Simple("OK") val z: String)
2021-03-11 23:58:17,596 [main:112] - generating klass A text = class A(@Simple("K") val z: String) {
        val x = z
    }
2021-03-11 23:58:17,804 [main:45] - Trying to change 12 nodes
2021-03-11 23:58:17,806 [main:53] - replacing ("OK", String)
2021-03-11 23:58:17,807 [main:50] - replacing "OK" String
2021-03-11 23:58:17,807 [main:54] - Getting value of type String
2021-03-11 23:58:17,911 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:17,911 [main:58] - GENERATED VALUE OF TYPE String = "pgwrv"
2021-03-11 23:58:17,912 [main:61] - GENERATED IS CALL =false
2021-03-11 23:58:18,024 [main:67] - randomType = Float
2021-03-11 23:58:18,124 [main:302] - generating value of type = Float true depth = 0
2021-03-11 23:58:18,193 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@77f42b47]
2021-03-11 23:58:18,194 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6015949f]
2021-03-11 23:58:18,303 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:18,305 [main:78] - Generated call from random type = (0.7151286f).toShort().toString(2035472407)
2021-03-11 23:58:18,308 [main:106] - GETTING String from Any
2021-03-11 23:58:18,314 [main:106] - GETTING String from String
2021-03-11 23:58:18,359 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cd32eb5]]
2021-03-11 23:58:18,360 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cd32eb5]
2021-03-11 23:58:18,360 [main:117] - GENERATED CALL = (z).replaceIndent(z)
2021-03-11 23:58:18,361 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]]
2021-03-11 23:58:18,361 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]
2021-03-11 23:58:18,361 [main:117] - GENERATED CALL = (z).uppercase()
2021-03-11 23:58:18,361 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@160250e6]]
2021-03-11 23:58:18,361 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@160250e6]
2021-03-11 23:58:18,447 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:18,448 [main:117] - GENERATED CALL = (z).dropLast(-1155505697)
2021-03-11 23:58:18,448 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b710b79]]
2021-03-11 23:58:18,448 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b710b79]
2021-03-11 23:58:18,535 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:58:18,654 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:18,655 [main:117] - GENERATED CALL = (z).substringAfter('뀱', "yspeo")
2021-03-11 23:58:18,655 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2748ca6f]]
2021-03-11 23:58:18,656 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2748ca6f]
2021-03-11 23:58:18,748 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:58:18,834 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:18,835 [main:117] - GENERATED CALL = (z).substringBefore('げ', "tviwp")
2021-03-11 23:58:18,835 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@788dfd0b]]
2021-03-11 23:58:18,835 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@788dfd0b]
2021-03-11 23:58:18,917 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:58:19,000 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:19,001 [main:117] - GENERATED CALL = (z).substringBeforeLast('।', "weoxt")
2021-03-11 23:58:19,001 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@235e9bb0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]]
2021-03-11 23:58:19,001 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@235e9bb0]
2021-03-11 23:58:19,101 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:19,102 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-11 23:58:19,201 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:19,202 [main:117] - GENERATED CALL = (z).compareTo("gjqnn").toString(-1879307719)
2021-03-11 23:58:19,202 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@742bca8e]]
2021-03-11 23:58:19,202 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@742bca8e]
2021-03-11 23:58:19,203 [main:117] - GENERATED CALL = (z).toUpperCase()
2021-03-11 23:58:19,203 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4e18e7b3], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]]
2021-03-11 23:58:19,203 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-11 23:58:19,287 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:19,288 [main:117] - GENERATED CALL = (z).length.toString(289764676)
2021-03-11 23:58:19,288 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70796165]]
2021-03-11 23:58:19,289 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70796165]
2021-03-11 23:58:19,373 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 23:58:19,374 [main:302] - generating value of type = Char true depth = 1
2021-03-11 23:58:19,376 [main:117] - GENERATED CALL = (z).replaceFirstChar({a: Char -> '䧘'})
2021-03-11 23:58:19,376 [main:61] - replacement of "OK" of type String is (0.7151286f).toShort().toString(2035472407)
2021-03-11 23:58:19,474 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:58:19,474 [main:66] - Compilation checking started
2021-03-11 23:58:19,783 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters

@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple((0.7151286f).toShort().toString(2035472407)) val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}
2021-03-11 23:58:19,785 [main:53] - replacing ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value, String)
2021-03-11 23:58:19,785 [main:50] - replacing (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value String
2021-03-11 23:58:19,785 [main:54] - Getting value of type String
2021-03-11 23:58:19,899 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:19,899 [main:58] - GENERATED VALUE OF TYPE String = "rodib"
2021-03-11 23:58:19,900 [main:61] - GENERATED IS CALL =false
2021-03-11 23:58:19,989 [main:67] - randomType = Boolean
2021-03-11 23:58:20,071 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:58:20,083 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-11 23:58:20,174 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:58:20,175 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-11 23:58:20,266 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:20,267 [main:78] - Generated call from random type = (true).compareTo(false).toString(510873958)
2021-03-11 23:58:20,268 [main:106] - GETTING String from Any
2021-03-11 23:58:20,274 [main:106] - GETTING String from Any
2021-03-11 23:58:20,274 [main:61] - replacement of (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value of type String is "rodib"
2021-03-11 23:58:20,358 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 23:58:20,358 [main:66] - Compilation checking started
2021-03-11 23:58:20,631 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters

@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return "rodib"
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}
2021-03-11 23:58:20,632 [main:53] - replacing ("OK", String)
2021-03-11 23:58:20,632 [main:50] - replacing "OK" String
2021-03-11 23:58:20,632 [main:54] - Getting value of type String
2021-03-11 23:58:20,713 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:20,714 [main:58] - GENERATED VALUE OF TYPE String = "yfugg"
2021-03-11 23:58:20,714 [main:61] - GENERATED IS CALL =false
2021-03-11 23:58:20,798 [main:67] - randomType = Simple?
2021-03-11 23:58:20,894 [main:302] - generating value of type = Simple false depth = 0
2021-03-11 23:58:20,894 [main:112] - generating klass Simple text = @Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)
2021-03-11 23:58:20,907 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bdf8378]
2021-03-11 23:58:20,987 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:58:20,987 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:58:20,989 [main:78] - Generated call from random type = ()?.value.filter({a: Char -> false})
2021-03-11 23:58:20,991 [main:106] - GETTING String from Any
2021-03-11 23:58:20,996 [main:106] - GETTING String from Any
2021-03-11 23:58:20,996 [main:61] - replacement of "OK" of type String is "yfugg"
2021-03-11 23:58:21,079 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 23:58:21,079 [main:66] - Compilation checking started
2021-03-11 23:58:21,344 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters

@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("yfugg")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return "rodib"
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}
2021-03-11 23:58:21,346 [main:53] - replacing (z, Int)
2021-03-11 23:58:21,346 [main:50] - replacing z Int
2021-03-11 23:58:21,346 [main:54] - Getting value of type Int
2021-03-11 23:58:21,424 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:21,424 [main:58] - GENERATED VALUE OF TYPE Int = 1543545389
2021-03-11 23:58:21,425 [main:61] - GENERATED IS CALL =false
2021-03-11 23:58:21,425 [main:67] - randomType = Simple
2021-03-11 23:58:21,503 [main:302] - generating value of type = Simple false depth = 0
2021-03-11 23:58:21,504 [main:112] - generating klass Simple text = @Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)
2021-03-11 23:58:21,523 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@7f547f44]
2021-03-11 23:58:21,604 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:58:21,605 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-11 23:58:21,686 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:58:21,688 [main:78] - Generated call from random type = ().equals("oegyq").compareTo(false)
2021-03-11 23:58:21,690 [main:106] - GETTING Int from Any
2021-03-11 23:58:21,694 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]]
2021-03-11 23:58:21,694 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:58:21,774 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:58:21,775 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-11 23:58:21,854 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:58:21,856 [main:117] - GENERATED CALL = (localCaptured()).equals("enppc").compareTo(true)
2021-03-11 23:58:21,856 [main:61] - replacement of z of type Int is ().equals("oegyq").compareTo(false)
2021-03-11 23:58:21,938 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:58:21,938 [main:66] - Compilation checking started
2021-03-11 23:58:21,940 [main:71] - Wrong syntax or breaks conditions
2021-03-11 23:58:21,940 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters

@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("yfugg")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = ().equals("oegyq").compareTo(false)
    }
    return A("K")
}

fun box(): String {
    return "rodib"
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}
2021-03-11 23:58:21,941 [main:53] - replacing ("K", String)
2021-03-11 23:58:21,941 [main:50] - replacing "K" String
2021-03-11 23:58:21,942 [main:54] - Getting value of type String
2021-03-11 23:58:22,067 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:22,068 [main:58] - GENERATED VALUE OF TYPE String = "wtrno"
2021-03-11 23:58:22,068 [main:61] - GENERATED IS CALL =false
2021-03-11 23:58:22,163 [main:67] - randomType = ArrayDeque<String>
2021-03-11 23:58:22,249 [main:302] - generating value of type = ArrayDeque<String> false depth = 0
2021-03-11 23:58:22,337 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<String>): ArrayDeque<String> = TODO()
2021-03-11 23:58:22,339 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<String>): ArrayDeque<String> = TODO()
2021-03-11 23:58:22,532 [main:302] - generating value of type = Collection<String> false depth = 3
2021-03-11 23:58:22,631 [main:43] - GENERATING CALL OF fun <T> setOf(elements: String): Collection<Strg> = TODO()
2021-03-11 23:58:22,633 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(elements: String): Collection<Strg> = TODO()
2021-03-11 23:58:22,726 [main:302] - generating value of type = String true depth = 6
2021-03-11 23:58:22,726 [main:95] - GENERATED = setOf<String>("egpvi")
2021-03-11 23:58:22,727 [main:95] - GENERATED = ArrayDeque<String>(setOf<String>("egpvi"))
2021-03-11 23:58:22,939 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.AbstractMutableList[DeserializedSimpleFunctionDescriptor@701458e5]
2021-03-11 23:58:22,939 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31e6d0e1]
2021-03-11 23:58:23,015 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:58:23,016 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:58:23,017 [main:78] - Generated call from random type = (ArrayDeque<String>(setOf<String>("egpvi"))).get(z).dropLastWhile({a: Char -> false})
2021-03-11 23:58:23,018 [main:106] - GETTING String from Any
2021-03-11 23:58:23,023 [main:106] - GETTING String from String
2021-03-11 23:58:23,052 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f2eeae5]]
2021-03-11 23:58:23,053 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f2eeae5]
2021-03-11 23:58:23,053 [main:117] - GENERATED CALL = (z).removeRange(z, z)
2021-03-11 23:58:23,053 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b106cd8]]
2021-03-11 23:58:23,054 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b106cd8]
2021-03-11 23:58:23,054 [main:117] - GENERATED CALL = (z).trimEnd()
2021-03-11 23:58:23,054 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c69b29d]]
2021-03-11 23:58:23,054 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c69b29d]
2021-03-11 23:58:23,133 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:58:23,133 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:58:23,134 [main:117] - GENERATED CALL = (z).dropWhile({a: Char -> true})
2021-03-11 23:58:23,134 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7707aa0e], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70929d54]]
2021-03-11 23:58:23,135 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7707aa0e]
2021-03-11 23:58:23,135 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70929d54]
2021-03-11 23:58:23,225 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 23:58:23,305 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 23:58:23,307 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 23:58:23,478 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:58:23,479 [main:95] - GENERATED = Regex("gaukx")
2021-03-11 23:58:23,556 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 23:58:23,557 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 23:58:23,562 [main:117] - GENERATED CALL = (z).subSequence(z, z).replace(Regex("gaukx"), {a: MatchResult -> "gkidy"})
2021-03-11 23:58:23,562 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b710b79]]
2021-03-11 23:58:23,562 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b710b79]
2021-03-11 23:58:23,648 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:58:23,732 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:23,733 [main:117] - GENERATED CALL = (z).substringAfter('', "xundj")
2021-03-11 23:58:23,734 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7707aa0e], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15007a46]]
2021-03-11 23:58:23,734 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7707aa0e]
2021-03-11 23:58:23,812 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:23,889 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:23,890 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15007a46]
2021-03-11 23:58:23,965 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:23,966 [main:117] - GENERATED CALL = (z).subSequence(-231250140, -767377582).repeat(580697723)
2021-03-11 23:58:23,966 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cd32eb5]]
2021-03-11 23:58:23,966 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cd32eb5]
2021-03-11 23:58:24,053 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:24,054 [main:117] - GENERATED CALL = (z).replaceIndent("gdfgf")
2021-03-11 23:58:24,054 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32fb11a4]]
2021-03-11 23:58:24,054 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32fb11a4]
2021-03-11 23:58:24,054 [main:117] - GENERATED CALL = (z).concat(z)
2021-03-11 23:58:24,055 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4635417e]]
2021-03-11 23:58:24,055 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4635417e]
2021-03-11 23:58:24,055 [main:117] - GENERATED CALL = (z).reversed()
2021-03-11 23:58:24,055 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7941dfad]]
2021-03-11 23:58:24,055 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7941dfad]
2021-03-11 23:58:24,137 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:58:24,138 [main:117] - GENERATED CALL = (z).substringAfterLast('ꆅ', z)
2021-03-11 23:58:24,138 [main:61] - replacement of "K" of type String is (z).subSequence(-231250140, -767377582).repeat(580697723)
2021-03-11 23:58:24,216 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:58:24,216 [main:66] - Compilation checking started
2021-03-11 23:58:24,402 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters

@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("yfugg")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple((z).subSequence(-231250140, -767377582).repeat(580697723)) val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return "rodib"
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}


2021-03-11 23:58:24,403 [main:53] - replacing (z, Int)
2021-03-11 23:58:24,403 [main:50] - replacing z Int
2021-03-11 23:58:24,403 [main:54] - Getting value of type Int
2021-03-11 23:58:24,477 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:24,478 [main:58] - GENERATED VALUE OF TYPE Int = -602517889
2021-03-11 23:58:24,478 [main:61] - GENERATED IS CALL =false
2021-03-11 23:58:24,558 [main:67] - randomType = Simple?
2021-03-11 23:58:24,645 [main:302] - generating value of type = Simple false depth = 0
2021-03-11 23:58:24,645 [main:112] - generating klass Simple text = @Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)
2021-03-11 23:58:24,655 [main:78] - Generated call from random type = ()?.value.length
2021-03-11 23:58:24,655 [main:61] - replacement of z of type Int is ()?.value.length
2021-03-11 23:58:24,738 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:58:24,739 [main:66] - Compilation checking started
2021-03-11 23:58:24,740 [main:71] - Wrong syntax or breaks conditions
2021-03-11 23:58:24,740 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters

@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("yfugg")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = ()?.value.length
    }
    return A("K")
}

fun box(): String {
    return "rodib"
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}


2021-03-11 23:58:24,741 [main:53] - replacing (z, Int)
2021-03-11 23:58:24,741 [main:50] - replacing z Int
2021-03-11 23:58:24,741 [main:54] - Getting value of type Int
2021-03-11 23:58:24,817 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:24,817 [main:58] - GENERATED VALUE OF TYPE Int = 525072571
2021-03-11 23:58:24,817 [main:61] - GENERATED IS CALL =false
2021-03-11 23:58:24,984 [main:67] - randomType = Float?
2021-03-11 23:58:25,090 [main:302] - generating value of type = Float true depth = 0
2021-03-11 23:58:25,160 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5027e367]
2021-03-11 23:58:25,160 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4277c363]
2021-03-11 23:58:25,161 [main:78] - Generated call from random type = (0.24958688f)?.toInt().countTrailingZeroBits()
2021-03-11 23:58:25,161 [main:106] - GETTING Int from Int
2021-03-11 23:58:25,214 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67911796], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@e602e78]]
2021-03-11 23:58:25,214 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67911796]
2021-03-11 23:58:25,214 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@e602e78]
2021-03-11 23:58:25,215 [main:117] - GENERATED CALL = (x).toShort().countOneBits()
2021-03-11 23:58:25,215 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5c3a8215], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@7fc3ec3f]]
2021-03-11 23:58:25,215 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5c3a8215]
2021-03-11 23:58:25,215 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@7fc3ec3f]
2021-03-11 23:58:25,215 [main:117] - GENERATED CALL = (x).toLong().toInt()
2021-03-11 23:58:25,215 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3add5d6f], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5c15e5f7]]
2021-03-11 23:58:25,215 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3add5d6f]
2021-03-11 23:58:25,216 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5c15e5f7]
2021-03-11 23:58:25,216 [main:117] - GENERATED CALL = (x).compareTo(z).and(x)
2021-03-11 23:58:25,216 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67911796], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@547bdcf8]]
2021-03-11 23:58:25,216 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67911796]
2021-03-11 23:58:25,216 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@547bdcf8]
2021-03-11 23:58:25,291 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:58:25,292 [main:117] - GENERATED CALL = (x).toShort().minus(19)
2021-03-11 23:58:25,292 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3add5d6f], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7100b724]]
2021-03-11 23:58:25,292 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3add5d6f]
2021-03-11 23:58:25,293 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7100b724]
2021-03-11 23:58:25,293 [main:117] - GENERATED CALL = (x).compareTo(x).unaryPlus()
2021-03-11 23:58:25,293 [main:113] - Case = [public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@267f6b32]]
2021-03-11 23:58:25,293 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@267f6b32]
2021-03-11 23:58:25,293 [main:117] - GENERATED CALL = (x).xor(z)
2021-03-11 23:58:25,294 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3add5d6f], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@3883b27a]]
2021-03-11 23:58:25,294 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3add5d6f]
2021-03-11 23:58:25,368 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:25,369 [main:117] - GENERATED CALL = (x).compareTo(-541184555).absoluteValue
2021-03-11 23:58:25,369 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5027e367], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fd7bf93]]
2021-03-11 23:58:25,369 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5027e367]
2021-03-11 23:58:25,369 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fd7bf93]
2021-03-11 23:58:25,370 [main:117] - GENERATED CALL = (x).toInt().inv()
2021-03-11 23:58:25,370 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67911796], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@519427cd]]
2021-03-11 23:58:25,370 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67911796]
2021-03-11 23:58:25,370 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@519427cd]
2021-03-11 23:58:25,449 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:58:25,450 [main:117] - GENERATED CALL = (x).toShort().div(-75)
2021-03-11 23:58:25,450 [main:113] - Case = [public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5b47e4da]]
2021-03-11 23:58:25,450 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5b47e4da]
2021-03-11 23:58:25,450 [main:117] - GENERATED CALL = (x).coerceAtLeast(z)
2021-03-11 23:58:25,450 [main:61] - replacement of z of type Int is 525072571
2021-03-11 23:58:25,533 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 23:58:25,534 [main:66] - Compilation checking started
2021-03-11 23:58:25,826 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters

@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("yfugg")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = 525072571
    }
    return A("K")
}

fun box(): String {
    return "rodib"
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}


2021-03-11 23:58:25,827 [main:53] - replacing (A("K"), A)
2021-03-11 23:58:25,827 [main:50] - replacing A("K") A
2021-03-11 23:58:25,827 [main:54] - Getting value of type A
2021-03-11 23:58:25,902 [main:302] - generating value of type = A false depth = 0
2021-03-11 23:58:25,903 [main:112] - generating klass A text = class A(@Simple("OK") val z: String)
2021-03-11 23:58:25,903 [main:58] - GENERATED VALUE OF TYPE A = 
2021-03-11 23:58:26,061 [main:67] - randomType = Char?
2021-03-11 23:58:26,135 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:58:26,169 [main:106] - GETTING A from Int
2021-03-11 23:58:26,227 [main:106] - GETTING A from Any
2021-03-11 23:58:26,233 [main:106] - GETTING A from Any
2021-03-11 23:58:26,233 [main:58] - Cant find and generate replacement for A("K") type A
2021-03-11 23:58:26,336 [main:41] - AFTER TRY 0 res = import kotlin.reflect.full.valueParameters

@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}
2021-03-11 23:58:26,568 [main:112] - generating klass Simple text = @Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)
2021-03-11 23:58:26,568 [main:112] - generating klass A text = class A(@Simple("OK") val z: String)
2021-03-11 23:58:26,568 [main:112] - generating klass A text = class A(@Simple("K") val z: String) {
        val x = z
    }
2021-03-11 23:58:26,764 [main:43] - Try №0
2021-03-11 23:58:37,519 [main:48] - Already checked
2021-03-11 23:58:41,243 [main:69] - Trying to insert override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }
2021-03-11 23:58:41,478 [main:66] - Compilation checking started
2021-03-11 23:58:42,687 [main:103] - Trying to change 154 nodes
2021-03-11 23:58:42,687 [main:107] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-11 23:58:42,687 [main:50] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-11 23:58:42,687 [main:54] - Getting value of type Function0<Boolean>
2021-03-11 23:58:42,843 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 23:58:42,845 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:58:42,847 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-11 23:58:42,847 [main:61] - GENERATED IS CALL =false
2021-03-11 23:58:43,030 [main:67] - randomType = Short
2021-03-11 23:58:43,228 [main:302] - generating value of type = Short true depth = 0
2021-03-11 23:58:43,306 [main:106] - GETTING Function0<Boolean> from KClass<out Any>
2021-03-11 23:58:43,326 [main:106] - GETTING Function0<Boolean> from Simple
2021-03-11 23:58:43,342 [main:106] - GETTING Function0<Boolean> from Simple
2021-03-11 23:58:43,344 [main:106] - GETTING Function0<Boolean> from Any
2021-03-11 23:58:43,350 [main:106] - GETTING Function0<Boolean> from Any
2021-03-11 23:58:43,352 [main:106] - GETTING Function0<Boolean> from Any
2021-03-11 23:58:43,352 [main:114] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { false}
2021-03-11 23:58:43,537 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 23:58:43,537 [main:66] - Compilation checking started
2021-03-11 23:58:44,239 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("") + fu0("K")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:58:44,241 [main:107] - replacing ("Continuation ", String)
2021-03-11 23:58:44,241 [main:50] - replacing "Continuation " String
2021-03-11 23:58:44,241 [main:54] - Getting value of type String
2021-03-11 23:58:44,392 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:44,394 [main:58] - GENERATED VALUE OF TYPE String = "duzhp"
2021-03-11 23:58:44,395 [main:61] - GENERATED IS CALL =false
2021-03-11 23:58:44,557 [main:67] - randomType = UInt
2021-03-11 23:58:44,741 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 23:58:44,785 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@1c2ca465]
2021-03-11 23:58:44,786 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25c6171f]
2021-03-11 23:58:44,948 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:44,951 [main:78] - Generated call from random type = (16802779.toUInt()).toUByte().toString(1595937494)
2021-03-11 23:58:44,952 [main:106] - GETTING String from Any
2021-03-11 23:58:44,958 [main:106] - GETTING String from Any
2021-03-11 23:58:44,959 [main:106] - GETTING String from Any
2021-03-11 23:58:44,961 [main:106] - GETTING String from Simple
2021-03-11 23:58:44,973 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2748ca6f]]
2021-03-11 23:58:44,973 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2748ca6f]
2021-03-11 23:58:45,132 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:58:45,295 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:45,297 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.substringBefore('ᤕ', "mbuqz")
2021-03-11 23:58:45,298 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4635417e]]
2021-03-11 23:58:45,298 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4635417e]
2021-03-11 23:58:45,298 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.reversed()
2021-03-11 23:58:45,298 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25ea4871]]
2021-03-11 23:58:45,298 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25ea4871]
2021-03-11 23:58:45,456 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:58:45,463 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.removeSurrounding("isqzd")
2021-03-11 23:58:45,463 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726c729e]]
2021-03-11 23:58:45,463 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726c729e]
2021-03-11 23:58:45,610 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 23:58:45,766 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): Iterable<Int> = TODO()
2021-03-11 23:58:45,769 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): Iterable<Int> = TODO()
2021-03-11 23:58:45,938 [main:95] - GENERATED = arrayListOf<Int>()
2021-03-11 23:58:45,938 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.slice(arrayListOf<Int>())
2021-03-11 23:58:45,938 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@160250e6]]
2021-03-11 23:58:45,939 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@160250e6]
2021-03-11 23:58:46,149 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:46,152 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(-826626201)
2021-03-11 23:58:46,152 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55fca0d2]]
2021-03-11 23:58:46,152 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55fca0d2]
2021-03-11 23:58:46,152 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart()
2021-03-11 23:58:46,153 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65c791d4]]
2021-03-11 23:58:46,153 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65c791d4]
2021-03-11 23:58:46,153 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimIndent()
2021-03-11 23:58:46,153 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3f6d2d]]
2021-03-11 23:58:46,153 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3f6d2d]
2021-03-11 23:58:46,313 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:46,475 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:46,625 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:58:46,778 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:58:46,781 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:58:47,177 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:58:47,181 [main:95] - GENERATED = StringBuilder("qnwav")
2021-03-11 23:58:47,181 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(1860157628, 177940597, StringBuilder("qnwav"))
2021-03-11 23:58:47,182 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9d455b0]]
2021-03-11 23:58:47,182 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9d455b0]
2021-03-11 23:58:47,340 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:47,342 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.take(2023542510)
2021-03-11 23:58:47,342 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]]
2021-03-11 23:58:47,342 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]
2021-03-11 23:58:47,343 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.uppercase()
2021-03-11 23:58:47,343 [main:114] - replacement of "Continuation " of type String is ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart()
2021-03-11 23:58:47,482 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:58:47,483 [main:66] - Compilation checking started
2021-03-11 23:58:48,139 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("") + fu0("K")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:58:48,142 [main:107] - replacing (prope1.prope6, Function0<Unit>)
2021-03-11 23:58:48,142 [main:50] - replacing prope1.prope6 Function0<Unit>
2021-03-11 23:58:48,142 [main:54] - Getting value of type Function0<Unit>
2021-03-11 23:58:48,287 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 23:58:48,289 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:58:48,442 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:58:48,447 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:58:48,763 [main:302] - generating value of type = Any false depth = 4
2021-03-11 23:58:48,764 [main:95] - GENERATED = print("sdqxa")
2021-03-11 23:58:48,764 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("sdqxa")}
2021-03-11 23:58:48,764 [main:61] - GENERATED IS CALL =false
2021-03-11 23:58:48,934 [main:67] - randomType = Double
2021-03-11 23:58:49,079 [main:302] - generating value of type = Double true depth = 0
2021-03-11 23:58:49,142 [main:106] - GETTING Function0<Unit> from KClass<out Any>
2021-03-11 23:58:49,154 [main:106] - GETTING Function0<Unit> from Simple
2021-03-11 23:58:49,162 [main:106] - GETTING Function0<Unit> from Any
2021-03-11 23:58:49,166 [main:106] - GETTING Function0<Unit> from Any
2021-03-11 23:58:49,167 [main:106] - GETTING Function0<Unit> from Simple
2021-03-11 23:58:49,168 [main:106] - GETTING Function0<Unit> from Any
2021-03-11 23:58:49,168 [main:114] - replacement of prope1.prope6 of type Function0<Unit> is { print("sdqxa")}
2021-03-11 23:58:49,295 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 23:58:49,296 [main:66] - Compilation checking started
2021-03-11 23:58:49,719 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("") + fu0("K")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        { print("sdqxa")} = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:58:49,721 [main:107] - replacing (Kla3(), Kla3)
2021-03-11 23:58:49,721 [main:50] - replacing Kla3() Kla3
2021-03-11 23:58:49,721 [main:54] - Getting value of type Kla3
2021-03-11 23:58:49,853 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 23:58:49,855 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-11 23:58:49,855 [main:58] - GENERATED VALUE OF TYPE Kla3 = Kla3()
2021-03-11 23:58:49,855 [main:61] - GENERATED IS CALL =true
2021-03-11 23:58:49,864 [main:67] - randomType = Kla1
2021-03-11 23:58:49,995 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 23:58:49,997 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-11 23:58:50,020 [main:106] - GETTING Kla3 from Simple
2021-03-11 23:58:50,031 [main:106] - GETTING Kla3 from Any
2021-03-11 23:58:50,036 [main:106] - GETTING Kla3 from Simple
2021-03-11 23:58:50,038 [main:106] - GETTING Kla3 from Any
2021-03-11 23:58:50,038 [main:106] - GETTING Kla3 from KClass<out Any>
2021-03-11 23:58:50,047 [main:106] - GETTING Kla3 from Any
2021-03-11 23:58:50,047 [main:114] - replacement of Kla3() of type Kla3 is Kla3()
2021-03-11 23:58:50,175 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:58:50,177 [main:107] - replacing ("tail-call optimization hit: method ", String)
2021-03-11 23:58:50,177 [main:50] - replacing "tail-call optimization hit: method " String
2021-03-11 23:58:50,177 [main:54] - Getting value of type String
2021-03-11 23:58:50,310 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:50,312 [main:58] - GENERATED VALUE OF TYPE String = "pnrun"
2021-03-11 23:58:50,313 [main:61] - GENERATED IS CALL =false
2021-03-11 23:58:50,974 [main:67] - randomType = Triple<String, HashMap<Kla4, Kla1>, Double?>
2021-03-11 23:58:51,109 [main:302] - generating value of type = Triple<String, HashMap<Kla4, Kla1>, Double?> false depth = 0
2021-03-11 23:58:51,253 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: String, second: HashMap<Kla4, Kla1>, third: Double?): Triple<String, HashMap<Kla4, Kla1>, Double?> = TODO()
2021-03-11 23:58:51,257 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: String, second: HashMap<Kla4, Kla1>, third: Double?): Triple<String, HashMap<Kla4, Kla1>, Double?> = TODO()
2021-03-11 23:58:51,390 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:58:51,393 [main:302] - generating value of type = HashMap<Kla4, Kla1> false depth = 3
2021-03-11 23:58:51,524 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<Kla4, Kla1>): HashMap<Kla4, Kla1> = TODO()
2021-03-11 23:58:51,527 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<Kla4, Kla1>): HashMap<Kla4, Kla1> = TODO()
2021-03-11 23:58:51,658 [main:302] - generating value of type = Pair<Kla4, Kla1> false depth = 6
2021-03-11 23:58:51,836 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla4, second: Kla1): Pair<Kla4, Kla1> = TODO()
2021-03-11 23:58:51,840 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla4, second: Kla1): Pair<Kla4, Kla1> = TODO()
2021-03-11 23:58:51,972 [main:302] - generating value of type = Kla4 false depth = 9
2021-03-11 23:58:51,974 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 23:58:51,974 [main:302] - generating value of type = Kla1 false depth = 9
2021-03-11 23:58:51,976 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-11 23:58:51,976 [main:95] - GENERATED = Pair<Kla4, Kla1>(Kla4(), Kla1())
2021-03-11 23:58:51,977 [main:95] - GENERATED = hashMapOf<Kla4, Kla1>(Pair<Kla4, Kla1>(Kla4(), Kla1()))
2021-03-11 23:58:51,977 [main:302] - generating value of type = Double true depth = 3
2021-03-11 23:58:51,979 [main:95] - GENERATED = Triple<String, HashMap<Kla4, Kla1>, Double?>("kckzo", hashMapOf<Kla4, Kla1>(Pair<Kla4, Kla1>(Kla4(), Kla1())), 0.5975608610519685)
2021-03-11 23:58:52,003 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34b77bd5]
2021-03-11 23:58:52,133 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:52,135 [main:78] - Generated call from random type = (Triple<String, HashMap<Kla4, Kla1>, Double?>("kckzo", hashMapOf<Kla4, Kla1>(Pair<Kla4, Kla1>(Kla4(), Kla1())), 0.5975608610519685)).first.drop(1964927246)
2021-03-11 23:58:52,137 [main:106] - GETTING String from Simple
2021-03-11 23:58:52,149 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b1b626e]]
2021-03-11 23:58:52,149 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b1b626e]
2021-03-11 23:58:52,275 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:58:52,401 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:52,531 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:52,534 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceAfterLast('䉑', "cncoh", "kvrkn")
2021-03-11 23:58:52,534 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f51d7e]]
2021-03-11 23:58:52,534 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f51d7e]
2021-03-11 23:58:52,534 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.toLowerCase()
2021-03-11 23:58:52,534 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9d455b0]]
2021-03-11 23:58:52,535 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9d455b0]
2021-03-11 23:58:52,672 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:52,675 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.take(-684885358)
2021-03-11 23:58:52,675 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@419cb17]]
2021-03-11 23:58:52,675 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@419cb17]
2021-03-11 23:58:52,833 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:58:52,968 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:58:53,091 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:58:53,093 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('㇇', '腼', true)
2021-03-11 23:58:53,094 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bdf8378]]
2021-03-11 23:58:53,094 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bdf8378]
2021-03-11 23:58:53,217 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:58:53,219 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:58:53,222 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filter({a: Char -> false})
2021-03-11 23:58:53,222 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@742bca8e]]
2021-03-11 23:58:53,222 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@742bca8e]
2021-03-11 23:58:53,222 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.toUpperCase()
2021-03-11 23:58:53,222 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31e6d0e1]]
2021-03-11 23:58:53,222 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31e6d0e1]
2021-03-11 23:58:53,353 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:58:53,355 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:58:53,358 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true})
2021-03-11 23:58:53,358 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]]
2021-03-11 23:58:53,359 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]
2021-03-11 23:58:53,359 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.uppercase()
2021-03-11 23:58:53,359 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f2eeae5]]
2021-03-11 23:58:53,359 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f2eeae5]
2021-03-11 23:58:53,488 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:53,649 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:53,653 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.removeRange(-1096347760, 1169224319)
2021-03-11 23:58:53,653 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65c791d4]]
2021-03-11 23:58:53,653 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65c791d4]
2021-03-11 23:58:53,654 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimIndent()
2021-03-11 23:58:53,654 [main:114] - replacement of "tail-call optimization hit: method " of type String is ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true})
2021-03-11 23:58:53,806 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:58:53,806 [main:66] - Compilation checking started
2021-03-11 23:58:54,445 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("") + fu0("K")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:58:54,447 [main:107] - replacing (" is not subtype of CoroutineStackFrame", String)
2021-03-11 23:58:54,448 [main:50] - replacing " is not subtype of CoroutineStackFrame" String
2021-03-11 23:58:54,448 [main:54] - Getting value of type String
2021-03-11 23:58:54,586 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:54,589 [main:58] - GENERATED VALUE OF TYPE String = "iuahr"
2021-03-11 23:58:54,589 [main:61] - GENERATED IS CALL =false
2021-03-11 23:58:54,731 [main:67] - randomType = Char
2021-03-11 23:58:54,851 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:58:54,871 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@44a25091]
2021-03-11 23:58:54,871 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12649ad8]
2021-03-11 23:58:54,997 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:55,000 [main:78] - Generated call from random type = ('襦').toLong().toString(-305154817)
2021-03-11 23:58:55,001 [main:106] - GETTING String from Any
2021-03-11 23:58:55,006 [main:106] - GETTING String from Simple
2021-03-11 23:58:55,012 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4632cdd]]
2021-03-11 23:58:55,013 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4632cdd]
2021-03-11 23:58:55,137 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:58:55,258 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:58:55,384 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:58:55,387 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.replace('䛶', '桬', false)
2021-03-11 23:58:55,387 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e73de07]]
2021-03-11 23:58:55,387 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e73de07]
2021-03-11 23:58:55,514 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:55,642 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:58:55,645 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.padEnd(535615965, '㑐')
2021-03-11 23:58:55,645 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@788dfd0b]]
2021-03-11 23:58:55,645 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@788dfd0b]
2021-03-11 23:58:55,766 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:58:55,895 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:55,898 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.substringBeforeLast('䍎', "iwrkb")
2021-03-11 23:58:55,898 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fc35b5f]]
2021-03-11 23:58:55,898 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fc35b5f]
2021-03-11 23:58:56,050 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:58:56,052 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:58:56,055 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.takeLastWhile({a: Char -> false})
2021-03-11 23:58:56,055 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f2eeae5]]
2021-03-11 23:58:56,055 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f2eeae5]
2021-03-11 23:58:56,176 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:56,306 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:56,308 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removeRange(1257322919, 2027317627)
2021-03-11 23:58:56,308 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@270e28fd]]
2021-03-11 23:58:56,308 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@270e28fd]
2021-03-11 23:58:56,309 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.lowercase()
2021-03-11 23:58:56,309 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40de1f8a]]
2021-03-11 23:58:56,309 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40de1f8a]
2021-03-11 23:58:56,309 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.capitalize()
2021-03-11 23:58:56,309 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b71787]]
2021-03-11 23:58:56,309 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b71787]
2021-03-11 23:58:56,431 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:58:56,556 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:56,686 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:56,690 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.replaceBeforeLast('', "jcubr", "dgpnr")
2021-03-11 23:58:56,690 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55fca0d2]]
2021-03-11 23:58:56,690 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55fca0d2]
2021-03-11 23:58:56,691 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart()
2021-03-11 23:58:56,691 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31e6d0e1]]
2021-03-11 23:58:56,691 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31e6d0e1]
2021-03-11 23:58:56,856 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:58:56,859 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:58:56,861 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.dropLastWhile({a: Char -> false})
2021-03-11 23:58:56,861 [main:114] - replacement of " is not subtype of CoroutineStackFrame" of type String is (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart()
2021-03-11 23:58:56,984 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:58:56,984 [main:66] - Compilation checking started
2021-03-11 23:58:57,621 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("") + fu0("K")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:58:57,624 [main:107] - replacing ("\n", String)
2021-03-11 23:58:57,624 [main:50] - replacing "\n" String
2021-03-11 23:58:57,624 [main:54] - Getting value of type String
2021-03-11 23:58:57,778 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:57,780 [main:58] - GENERATED VALUE OF TYPE String = "whhkm"
2021-03-11 23:58:57,781 [main:61] - GENERATED IS CALL =false
2021-03-11 23:58:57,785 [main:67] - randomType = Boolean
2021-03-11 23:58:57,907 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:58:57,922 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-11 23:58:58,061 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:58:58,063 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-11 23:58:58,204 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:58,206 [main:78] - Generated call from random type = (true).compareTo(true).toString(-580293015)
2021-03-11 23:58:58,207 [main:106] - GETTING String from Any
2021-03-11 23:58:58,213 [main:106] - GETTING String from KClass<out Any>
2021-03-11 23:58:58,223 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@25c78878]]
2021-03-11 23:58:58,224 [main:117] - GENERATED CALL = (local()::class).qualifiedName
2021-03-11 23:58:58,224 [main:113] - Case = [public abstract val simpleName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@3d0734a6]]
2021-03-11 23:58:58,224 [main:117] - GENERATED CALL = (local()::class).simpleName
2021-03-11 23:58:58,224 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@25c78878], @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c057cac]]
2021-03-11 23:58:58,224 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c057cac]
2021-03-11 23:58:58,225 [main:117] - GENERATED CALL = (local()::class).qualifiedName?.orEmpty()
2021-03-11 23:58:58,225 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@25c78878], public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6519cd8a]]
2021-03-11 23:58:58,225 [main:149] - GENERATING call of type public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6519cd8a]
2021-03-11 23:58:58,357 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:58:58,357 [main:117] - GENERATED CALL = (local()::class).qualifiedName?.plus("rjbhn")
2021-03-11 23:58:58,357 [main:114] - replacement of "\n" of type String is (local()::class).qualifiedName?.plus("rjbhn")
2021-03-11 23:58:58,496 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 23:58:58,497 [main:66] - Compilation checking started
2021-03-11 23:58:58,939 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("") + fu0("K")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = (local()::class).qualifiedName?.plus("rjbhn")))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:58:58,941 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got ", String)
2021-03-11 23:58:58,941 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " String
2021-03-11 23:58:58,941 [main:54] - Getting value of type String
2021-03-11 23:58:59,083 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:59,085 [main:58] - GENERATED VALUE OF TYPE String = "epvef"
2021-03-11 23:58:59,086 [main:61] - GENERATED IS CALL =false
2021-03-11 23:58:59,094 [main:67] - randomType = Simple
2021-03-11 23:58:59,220 [main:302] - generating value of type = Simple false depth = 0
2021-03-11 23:58:59,222 [main:112] - generating klass Simple text = @Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)
2021-03-11 23:58:59,229 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e95deba]
2021-03-11 23:58:59,349 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:58:59,351 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:58:59,354 [main:78] - Generated call from random type = ().value.filterNot({a: Char -> false})
2021-03-11 23:58:59,355 [main:106] - GETTING String from Simple
2021-03-11 23:58:59,362 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb7f30e]]
2021-03-11 23:58:59,362 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb7f30e]
2021-03-11 23:58:59,481 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:58:59,603 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:59,724 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:58:59,727 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceAfter('ឞ', "osunb", "wyblj")
2021-03-11 23:58:59,727 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34b77bd5]]
2021-03-11 23:58:59,727 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34b77bd5]
2021-03-11 23:58:59,849 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:58:59,851 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.drop(-1620885878)
2021-03-11 23:58:59,851 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fc35b5f]]
2021-03-11 23:58:59,851 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fc35b5f]
2021-03-11 23:58:59,976 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:58:59,978 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:58:59,980 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.takeLastWhile({a: Char -> false})
2021-03-11 23:58:59,980 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3f6d2d]]
2021-03-11 23:58:59,980 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3f6d2d]
2021-03-11 23:59:00,116 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:59:00,257 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:59:00,387 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:59:00,394 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-116655489, 453843075, StringBuilder())
2021-03-11 23:59:00,394 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f51d7e]]
2021-03-11 23:59:00,394 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f51d7e]
2021-03-11 23:59:00,394 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.toLowerCase()
2021-03-11 23:59:00,394 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@742bca8e]]
2021-03-11 23:59:00,394 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@742bca8e]
2021-03-11 23:59:00,395 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.toUpperCase()
2021-03-11 23:59:00,395 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bd56c93]]
2021-03-11 23:59:00,395 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bd56c93]
2021-03-11 23:59:00,528 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 23:59:00,530 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:59:00,533 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false})
2021-03-11 23:59:00,533 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4632cdd]]
2021-03-11 23:59:00,533 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4632cdd]
2021-03-11 23:59:00,653 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:59:00,773 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:59:00,914 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:00,924 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replace('Ꮍ', '햧', true)
2021-03-11 23:59:00,925 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@419cb17]]
2021-03-11 23:59:00,925 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@419cb17]
2021-03-11 23:59:01,044 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:59:01,162 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:59:01,280 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:01,283 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true)
2021-03-11 23:59:01,283 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d703db2]]
2021-03-11 23:59:01,283 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d703db2]
2021-03-11 23:59:01,401 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:59:01,403 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.takeLast(-1155769436)
2021-03-11 23:59:01,404 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " of type String is ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true)
2021-03-11 23:59:01,519 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:59:01,520 [main:66] - Compilation checking started
2021-03-11 23:59:02,204 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("") + fu0("K")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:02,206 [main:107] - replacing (prope4 != i, Boolean)
2021-03-11 23:59:02,206 [main:50] - replacing prope4 != i Boolean
2021-03-11 23:59:02,206 [main:54] - Getting value of type Boolean
2021-03-11 23:59:02,332 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:02,334 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 23:59:02,334 [main:61] - GENERATED IS CALL =false
2021-03-11 23:59:02,630 [main:67] - randomType = Double?
2021-03-11 23:59:02,752 [main:302] - generating value of type = Double true depth = 0
2021-03-11 23:59:02,785 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5adaa8a5]
2021-03-11 23:59:02,785 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@41820105]
2021-03-11 23:59:02,786 [main:78] - Generated call from random type = (0.8244142176481342)?.toDouble().isInfinite()
2021-03-11 23:59:02,787 [main:106] - GETTING Boolean from Simple
2021-03-11 23:59:02,793 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]]
2021-03-11 23:59:02,793 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-11 23:59:02,912 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:02,912 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-11 23:59:03,047 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:03,047 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).equals("vpdeu").equals("dktzt")
2021-03-11 23:59:03,048 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@267127f2]]
2021-03-11 23:59:03,048 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@267127f2]
2021-03-11 23:59:03,048 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()
2021-03-11 23:59:03,048 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@510c7163]]
2021-03-11 23:59:03,048 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@510c7163]
2021-03-11 23:59:03,171 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:03,291 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:03,293 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("bzatp", true)
2021-03-11 23:59:03,293 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]]
2021-03-11 23:59:03,293 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-11 23:59:03,412 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:03,413 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]
2021-03-11 23:59:03,413 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).equals("onbai").not()
2021-03-11 23:59:03,413 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]]
2021-03-11 23:59:03,413 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-11 23:59:03,546 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).equals(null)
2021-03-11 23:59:03,547 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]]
2021-03-11 23:59:03,547 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-11 23:59:03,688 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:03,688 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]
2021-03-11 23:59:03,814 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:03,816 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).equals("qcurp").and(true)
2021-03-11 23:59:03,816 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3d965cb4]]
2021-03-11 23:59:03,816 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3d965cb4]
2021-03-11 23:59:03,951 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:03,952 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.equals("gutie")
2021-03-11 23:59:03,952 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1914b520]]
2021-03-11 23:59:03,952 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1914b520]
2021-03-11 23:59:04,083 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:04,086 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.matches("dtjbv")
2021-03-11 23:59:04,086 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e68f004]]
2021-03-11 23:59:04,086 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e68f004]
2021-03-11 23:59:04,208 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:04,329 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:04,331 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.startsWith("dvqiy", false)
2021-03-11 23:59:04,331 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]]
2021-03-11 23:59:04,331 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-11 23:59:04,453 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]
2021-03-11 23:59:04,575 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:04,578 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).equals(null).xor(false)
2021-03-11 23:59:04,578 [main:114] - replacement of prope4 != i of type Boolean is (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()
2021-03-11 23:59:04,695 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:59:04,696 [main:66] - Compilation checking started
2021-03-11 23:59:05,365 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("") + fu0("K")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:05,368 [main:107] - replacing (prope6, Function0<Unit>)
2021-03-11 23:59:05,369 [main:50] - replacing prope6 Function0<Unit>
2021-03-11 23:59:05,369 [main:54] - Getting value of type Function0<Unit>
2021-03-11 23:59:05,490 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 23:59:05,492 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:59:05,627 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:59:05,633 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:59:06,075 [main:302] - generating value of type = Int true depth = 4
2021-03-11 23:59:06,077 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 23:59:06,080 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 23:59:06,086 [main:95] - GENERATED = repeat(-676882215, {a: Int -> println()})
2021-03-11 23:59:06,086 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-676882215, {a: Int -> println()})}
2021-03-11 23:59:06,086 [main:61] - GENERATED IS CALL =false
2021-03-11 23:59:06,556 [main:67] - randomType = LinkedHashMap<Float, Char?>
2021-03-11 23:59:06,687 [main:302] - generating value of type = LinkedHashMap<Float, Char?> false depth = 0
2021-03-11 23:59:06,814 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Float, Char?> = TODO()
2021-03-11 23:59:06,818 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Float, Char?> = TODO()
2021-03-11 23:59:06,951 [main:95] - GENERATED = linkedMapOf<Float, Char?>()
2021-03-11 23:59:07,110 [main:106] - GETTING Function0<Unit> from Any
2021-03-11 23:59:07,113 [main:106] - GETTING Function0<Unit> from Simple
2021-03-11 23:59:07,121 [main:106] - GETTING Function0<Unit> from Any
2021-03-11 23:59:07,122 [main:106] - GETTING Function0<Unit> from Simple
2021-03-11 23:59:07,123 [main:106] - GETTING Function0<Unit> from Any
2021-03-11 23:59:07,125 [main:106] - GETTING Function0<Unit> from KClass<out Any>
2021-03-11 23:59:07,132 [main:114] - replacement of prope6 of type Function0<Unit> is { repeat(-676882215, {a: Int -> println()})}
2021-03-11 23:59:07,252 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 23:59:07,252 [main:66] - Compilation checking started
2021-03-11 23:59:07,730 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("") + fu0("K")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        { repeat(-676882215, {a: Int -> println()})}()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:07,733 [main:107] - replacing (checkFinished, Boolean)
2021-03-11 23:59:07,734 [main:50] - replacing checkFinished Boolean
2021-03-11 23:59:07,734 [main:54] - Getting value of type Boolean
2021-03-11 23:59:07,880 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:07,882 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 23:59:07,882 [main:61] - GENERATED IS CALL =false
2021-03-11 23:59:07,887 [main:67] - randomType = Boolean
2021-03-11 23:59:08,017 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:08,032 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@30dad9b9]
2021-03-11 23:59:08,158 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:08,158 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-11 23:59:08,283 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:08,283 [main:78] - Generated call from random type = (true).equals("bigok").equals("fwdqa")
2021-03-11 23:59:08,285 [main:106] - GETTING Boolean from Any
2021-03-11 23:59:08,290 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]]
2021-03-11 23:59:08,290 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:08,416 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:08,416 [main:117] - GENERATED CALL = (local()).equals("vapmd")
2021-03-11 23:59:08,416 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]]
2021-03-11 23:59:08,416 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:08,546 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:08,547 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]
2021-03-11 23:59:08,687 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:08,689 [main:117] - GENERATED CALL = (local()).equals("ekyfc").xor(false)
2021-03-11 23:59:08,690 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]]
2021-03-11 23:59:08,690 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:08,816 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:08,817 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]
2021-03-11 23:59:08,942 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:08,945 [main:117] - GENERATED CALL = (local()).equals("vqhiu").and(false)
2021-03-11 23:59:08,945 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]]
2021-03-11 23:59:08,945 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:09,067 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:09,068 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]
2021-03-11 23:59:09,068 [main:117] - GENERATED CALL = (local()).equals("uhxmd").not()
2021-03-11 23:59:09,068 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]]
2021-03-11 23:59:09,068 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:09,186 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:09,186 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-11 23:59:09,305 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:09,305 [main:117] - GENERATED CALL = (local()).equals("ughqk").equals("wvoey")
2021-03-11 23:59:09,305 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]]
2021-03-11 23:59:09,305 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:09,427 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:09,427 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:59:09,551 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:09,554 [main:117] - GENERATED CALL = (local()).equals("evqnf").or(false)
2021-03-11 23:59:09,555 [main:114] - replacement of checkFinished of type Boolean is (local()).equals("vqhiu").and(false)
2021-03-11 23:59:09,673 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:59:09,673 [main:66] - Compilation checking started
2021-03-11 23:59:10,301 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("") + fu0("K")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:10,304 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 23:59:10,304 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 23:59:10,304 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 23:59:10,448 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 23:59:10,455 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 23:59:10,602 [main:67] - randomType = Double
2021-03-11 23:59:10,746 [main:302] - generating value of type = Double true depth = 0
2021-03-11 23:59:10,780 [main:106] - GETTING EmptyCoroutineContext from Simple
2021-03-11 23:59:10,789 [main:106] - GETTING EmptyCoroutineContext from KClass<out Any>
2021-03-11 23:59:10,799 [main:106] - GETTING EmptyCoroutineContext from Any
2021-03-11 23:59:10,803 [main:106] - GETTING EmptyCoroutineContext from Simple
2021-03-11 23:59:10,804 [main:106] - GETTING EmptyCoroutineContext from Any
2021-03-11 23:59:10,805 [main:106] - GETTING EmptyCoroutineContext from Any
2021-03-11 23:59:10,805 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 23:59:10,805 [main:107] - replacing (prope5, Boolean)
2021-03-11 23:59:10,805 [main:50] - replacing prope5 Boolean
2021-03-11 23:59:10,805 [main:54] - Getting value of type Boolean
2021-03-11 23:59:10,922 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:10,925 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 23:59:10,925 [main:61] - GENERATED IS CALL =false
2021-03-11 23:59:11,211 [main:67] - randomType = HashSet<Float>
2021-03-11 23:59:11,328 [main:302] - generating value of type = HashSet<Float> false depth = 0
2021-03-11 23:59:11,451 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int): HashSet<Float> = TODO()
2021-03-11 23:59:11,454 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int): HashSet<Float> = TODO()
2021-03-11 23:59:11,712 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:59:11,714 [main:95] - GENERATED = HashSet<Float>(-751118173)
2021-03-11 23:59:11,843 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@5d5b6a6]
2021-03-11 23:59:11,844 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public infix fun <T> kotlin.Array<out T>.contentDeepEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1d5ba943]
2021-03-11 23:59:11,961 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 23:59:12,090 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<T> = TODO()
2021-03-11 23:59:12,095 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<T> = TODO()
2021-03-11 23:59:12,389 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:59:12,391 [main:95] - GENERATED = arrayOfNulls<T>(1840082420)
2021-03-11 23:59:12,391 [main:78] - Generated call from random type = (HashSet<Float>(-751118173)).toArray().contentDeepEquals(arrayOfNulls<T>(1840082420))
2021-03-11 23:59:12,393 [main:106] - GETTING Boolean from Simple
2021-03-11 23:59:12,403 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e68f004]]
2021-03-11 23:59:12,403 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e68f004]
2021-03-11 23:59:12,520 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:12,641 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:12,643 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.startsWith("fohjs", true)
2021-03-11 23:59:12,643 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]]
2021-03-11 23:59:12,644 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-11 23:59:12,766 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:12,767 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).equals("lbhey")
2021-03-11 23:59:12,767 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]]
2021-03-11 23:59:12,767 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-11 23:59:12,895 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:12,896 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:59:13,015 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:13,018 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).equals("iwzeh").or(false)
2021-03-11 23:59:13,018 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3d965cb4]]
2021-03-11 23:59:13,018 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3d965cb4]
2021-03-11 23:59:13,137 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:13,138 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.equals("etgnp")
2021-03-11 23:59:13,138 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1914b520]]
2021-03-11 23:59:13,138 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1914b520]
2021-03-11 23:59:13,254 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:13,257 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.matches("niwyd")
2021-03-11 23:59:13,257 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]]
2021-03-11 23:59:13,257 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-11 23:59:13,375 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:13,376 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-11 23:59:13,516 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:13,516 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).equals("vcukh").equals("pjbpr")
2021-03-11 23:59:13,516 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]]
2021-03-11 23:59:13,516 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-11 23:59:13,636 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:13,636 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]
2021-03-11 23:59:13,636 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).equals("ayamo").not()
2021-03-11 23:59:13,636 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@510c7163]]
2021-03-11 23:59:13,636 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@510c7163]
2021-03-11 23:59:13,759 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:13,884 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:13,887 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("twmnn", true)
2021-03-11 23:59:13,887 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]]
2021-03-11 23:59:13,887 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-11 23:59:14,006 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:14,006 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]
2021-03-11 23:59:14,125 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:14,128 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).equals("qwxkc").xor(true)
2021-03-11 23:59:14,128 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]]
2021-03-11 23:59:14,128 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-11 23:59:14,246 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:14,246 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]
2021-03-11 23:59:14,365 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:14,368 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).equals("lsfts").and(false)
2021-03-11 23:59:14,368 [main:114] - replacement of prope5 of type Boolean is (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("twmnn", true)
2021-03-11 23:59:14,484 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:59:14,484 [main:66] - Compilation checking started
2021-03-11 23:59:14,880 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("") + fu0("K")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("twmnn", true) = false
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:14,883 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got ", String)
2021-03-11 23:59:14,883 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " String
2021-03-11 23:59:14,883 [main:54] - Getting value of type String
2021-03-11 23:59:15,003 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:15,006 [main:58] - GENERATED VALUE OF TYPE String = "wuzyh"
2021-03-11 23:59:15,006 [main:61] - GENERATED IS CALL =false
2021-03-11 23:59:15,139 [main:67] - randomType = UInt
2021-03-11 23:59:15,261 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 23:59:15,300 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@37278fc4]
2021-03-11 23:59:15,301 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25c6171f]
2021-03-11 23:59:15,422 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:59:15,425 [main:78] - Generated call from random type = (1609991021.toUInt()).toUByte().toString(40122863)
2021-03-11 23:59:15,426 [main:106] - GETTING String from Simple
2021-03-11 23:59:15,436 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@788dfd0b]]
2021-03-11 23:59:15,437 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@788dfd0b]
2021-03-11 23:59:15,559 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:59:15,682 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:15,685 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.substringBeforeLast('Ỽ', "stgyq")
2021-03-11 23:59:15,685 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3067e7b5]]
2021-03-11 23:59:15,685 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3067e7b5]
2021-03-11 23:59:15,803 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:59:15,805 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:59:15,808 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.takeWhile({a: Char -> true})
2021-03-11 23:59:15,808 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30ecd0aa]]
2021-03-11 23:59:15,808 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30ecd0aa]
2021-03-11 23:59:15,808 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trim()
2021-03-11 23:59:15,808 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55fca0d2]]
2021-03-11 23:59:15,808 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55fca0d2]
2021-03-11 23:59:15,809 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart()
2021-03-11 23:59:15,809 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@467f48e7]]
2021-03-11 23:59:15,809 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@467f48e7]
2021-03-11 23:59:15,923 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:59:16,040 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:59:16,043 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-494281908, '삉')
2021-03-11 23:59:16,043 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@160250e6]]
2021-03-11 23:59:16,043 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@160250e6]
2021-03-11 23:59:16,184 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:59:16,187 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189)
2021-03-11 23:59:16,187 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b71787]]
2021-03-11 23:59:16,187 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b71787]
2021-03-11 23:59:16,303 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:59:16,419 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:16,536 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:16,538 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceBeforeLast('蘮', "lwusp", "cpxwb")
2021-03-11 23:59:16,539 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6920716c]]
2021-03-11 23:59:16,539 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6920716c]
2021-03-11 23:59:16,655 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:16,657 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimMargin("mdjah")
2021-03-11 23:59:16,657 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]]
2021-03-11 23:59:16,657 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]
2021-03-11 23:59:16,658 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.uppercase()
2021-03-11 23:59:16,658 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25ea4871]]
2021-03-11 23:59:16,658 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25ea4871]
2021-03-11 23:59:16,773 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:59:16,780 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.removeSurrounding("hexjr")
2021-03-11 23:59:16,780 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " of type String is ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189)
2021-03-11 23:59:16,895 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:59:16,895 [main:66] - Compilation checking started
2021-03-11 23:59:17,496 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("") + fu0("K")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:17,499 [main:107] - replacing (prope1.prope5, Boolean)
2021-03-11 23:59:17,499 [main:50] - replacing prope1.prope5 Boolean
2021-03-11 23:59:17,499 [main:54] - Getting value of type Boolean
2021-03-11 23:59:17,628 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:17,630 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 23:59:17,630 [main:61] - GENERATED IS CALL =false
2021-03-11 23:59:17,636 [main:67] - randomType = Int
2021-03-11 23:59:17,769 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:59:17,802 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5027e367]
2021-03-11 23:59:17,802 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67d8431d]
2021-03-11 23:59:17,918 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:17,918 [main:78] - Generated call from random type = (-820757783).toInt().equals("siycy")
2021-03-11 23:59:17,919 [main:106] - GETTING Boolean from Any
2021-03-11 23:59:17,923 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]]
2021-03-11 23:59:17,923 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:18,042 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:18,042 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]
2021-03-11 23:59:18,160 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:18,163 [main:117] - GENERATED CALL = (local()).equals("kaeav").xor(false)
2021-03-11 23:59:18,163 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]]
2021-03-11 23:59:18,163 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:18,279 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:18,279 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:59:18,395 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:18,398 [main:117] - GENERATED CALL = (local()).equals("vvibu").or(false)
2021-03-11 23:59:18,398 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]]
2021-03-11 23:59:18,398 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:18,517 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:18,517 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]
2021-03-11 23:59:18,517 [main:117] - GENERATED CALL = (local()).equals("jzaxk").not()
2021-03-11 23:59:18,517 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]]
2021-03-11 23:59:18,518 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:18,633 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:18,634 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-11 23:59:18,755 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:18,755 [main:117] - GENERATED CALL = (local()).equals("aisjh").equals("ziifx")
2021-03-11 23:59:18,755 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]]
2021-03-11 23:59:18,755 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:18,872 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:18,872 [main:117] - GENERATED CALL = (local()).equals("arjju")
2021-03-11 23:59:18,872 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]]
2021-03-11 23:59:18,872 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:19,030 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:19,030 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]
2021-03-11 23:59:19,179 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:19,182 [main:117] - GENERATED CALL = (local()).equals("oruwv").and(true)
2021-03-11 23:59:19,182 [main:114] - replacement of prope1.prope5 of type Boolean is (local()).equals("vvibu").or(false)
2021-03-11 23:59:19,298 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:59:19,298 [main:66] - Compilation checking started
2021-03-11 23:59:19,671 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("") + fu0("K")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            (local()).equals("vvibu").or(false) = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:19,673 [main:107] - replacing (x, Continuation<String>)
2021-03-11 23:59:19,674 [main:50] - replacing x Continuation<String>
2021-03-11 23:59:19,674 [main:54] - Getting value of type Continuation<String>
2021-03-11 23:59:19,797 [main:302] - generating value of type = Continuation<String> false depth = 0
2021-03-11 23:59:19,918 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-11 23:59:19,922 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-11 23:59:20,391 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 23:59:20,530 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:59:20,533 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:59:20,830 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 23:59:20,975 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:59:20,978 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:59:21,455 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:59:21,456 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:59:21,456 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-11 23:59:21,456 [main:58] - GENERATED VALUE OF TYPE Continuation<String> = 
2021-03-11 23:59:21,865 [main:67] - randomType = ArrayDeque<UInt?>
2021-03-11 23:59:21,985 [main:302] - generating value of type = ArrayDeque<UInt?> false depth = 0
2021-03-11 23:59:22,116 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<UInt?>): ArrayDeque<UInt?> = TODO()
2021-03-11 23:59:22,120 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<UInt?>): ArrayDeque<UInt?> = TODO()
2021-03-11 23:59:22,422 [main:302] - generating value of type = Collection<UInt?> false depth = 3
2021-03-11 23:59:22,547 [main:43] - GENERATING CALL OF fun <T> setOf(): Collection<UInt?> = TODO()
2021-03-11 23:59:22,551 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(): Collection<UInt?> = TODO()
2021-03-11 23:59:22,675 [main:95] - GENERATED = setOf<UInt?>()
2021-03-11 23:59:22,676 [main:95] - GENERATED = ArrayDeque<UInt?>(setOf<UInt?>())
2021-03-11 23:59:22,804 [main:106] - GETTING Continuation<String> from Any
2021-03-11 23:59:22,809 [main:106] - GETTING Continuation<String> from KClass<out Any>
2021-03-11 23:59:22,819 [main:106] - GETTING Continuation<String> from Any
2021-03-11 23:59:22,820 [main:106] - GETTING Continuation<String> from Simple
2021-03-11 23:59:22,829 [main:106] - GETTING Continuation<String> from Any
2021-03-11 23:59:22,830 [main:106] - GETTING Continuation<String> from Simple
2021-03-11 23:59:22,830 [main:111] - Cant find and generate replacement for x type Continuation<String>
2021-03-11 23:59:22,830 [main:107] - replacing (prope6, Function0<Unit>)
2021-03-11 23:59:22,831 [main:50] - replacing prope6 Function0<Unit>
2021-03-11 23:59:22,831 [main:54] - Getting value of type Function0<Unit>
2021-03-11 23:59:22,952 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 23:59:22,954 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:59:23,082 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:59:23,086 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:59:23,351 [main:302] - generating value of type = Any false depth = 4
2021-03-11 23:59:23,351 [main:95] - GENERATED = print("nuepo")
2021-03-11 23:59:23,351 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("nuepo")}
2021-03-11 23:59:23,352 [main:61] - GENERATED IS CALL =false
2021-03-11 23:59:23,494 [main:67] - randomType = Double
2021-03-11 23:59:23,623 [main:302] - generating value of type = Double true depth = 0
2021-03-11 23:59:23,674 [main:106] - GETTING Function0<Unit> from Simple
2021-03-11 23:59:23,686 [main:106] - GETTING Function0<Unit> from Any
2021-03-11 23:59:23,691 [main:106] - GETTING Function0<Unit> from KClass<out Any>
2021-03-11 23:59:23,704 [main:106] - GETTING Function0<Unit> from Simple
2021-03-11 23:59:23,706 [main:106] - GETTING Function0<Unit> from Any
2021-03-11 23:59:23,707 [main:106] - GETTING Function0<Unit> from Any
2021-03-11 23:59:23,707 [main:114] - replacement of prope6 of type Function0<Unit> is { print("nuepo")}
2021-03-11 23:59:23,823 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 23:59:23,824 [main:66] - Compilation checking started
2021-03-11 23:59:24,215 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("") + fu0("K")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        { print("nuepo")}()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:24,217 [main:107] - replacing (prope4, Int)
2021-03-11 23:59:24,217 [main:50] - replacing prope4 Int
2021-03-11 23:59:24,217 [main:54] - Getting value of type Int
2021-03-11 23:59:24,359 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:59:24,361 [main:58] - GENERATED VALUE OF TYPE Int = 289790143
2021-03-11 23:59:24,362 [main:61] - GENERATED IS CALL =false
2021-03-11 23:59:25,153 [main:67] - randomType = MutableMap<Function2<Kla3, Kla5, Sequence<HashSet<Kla0>>>, Char>
2021-03-11 23:59:25,154 [main:106] - GETTING Int from Simple
2021-03-11 23:59:25,165 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9e6aba]]
2021-03-11 23:59:25,165 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9e6aba]
2021-03-11 23:59:25,166 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.toInt()
2021-03-11 23:59:25,166 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4e18e7b3]]
2021-03-11 23:59:25,166 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.length
2021-03-11 23:59:25,166 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4583dd64]]
2021-03-11 23:59:25,166 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4583dd64]
2021-03-11 23:59:25,284 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:25,404 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:25,407 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true)
2021-03-11 23:59:25,407 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]]
2021-03-11 23:59:25,407 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-11 23:59:25,525 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:25,525 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-11 23:59:25,641 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:25,644 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals("ntmuq").compareTo(true)
2021-03-11 23:59:25,644 [main:114] - replacement of prope4 of type Int is ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true)
2021-03-11 23:59:25,759 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:59:25,759 [main:66] - Compilation checking started
2021-03-11 23:59:26,374 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("") + fu0("K")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:26,376 [main:107] - replacing ("", String)
2021-03-11 23:59:26,377 [main:50] - replacing "" String
2021-03-11 23:59:26,377 [main:54] - Getting value of type String
2021-03-11 23:59:26,508 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:26,512 [main:58] - GENERATED VALUE OF TYPE String = "fkrie"
2021-03-11 23:59:26,512 [main:61] - GENERATED IS CALL =false
2021-03-11 23:59:26,878 [main:67] - randomType = Float?
2021-03-11 23:59:26,995 [main:302] - generating value of type = Float true depth = 0
2021-03-11 23:59:27,027 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@77f42b47]
2021-03-11 23:59:27,027 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6015949f]
2021-03-11 23:59:27,144 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:59:27,147 [main:78] - Generated call from random type = (0.73418087f)?.toShort().toString(2062610904)
2021-03-11 23:59:27,148 [main:106] - GETTING String from Any
2021-03-11 23:59:27,153 [main:106] - GETTING String from KClass<out Any>
2021-03-11 23:59:27,162 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@25c78878], @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c057cac]]
2021-03-11 23:59:27,162 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c057cac]
2021-03-11 23:59:27,162 [main:117] - GENERATED CALL = (local()::class).qualifiedName?.orEmpty()
2021-03-11 23:59:27,162 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@25c78878]]
2021-03-11 23:59:27,162 [main:117] - GENERATED CALL = (local()::class).qualifiedName
2021-03-11 23:59:27,162 [main:113] - Case = [public abstract val simpleName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@3d0734a6]]
2021-03-11 23:59:27,162 [main:117] - GENERATED CALL = (local()::class).simpleName
2021-03-11 23:59:27,162 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@25c78878], public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6519cd8a]]
2021-03-11 23:59:27,162 [main:149] - GENERATING call of type public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6519cd8a]
2021-03-11 23:59:27,280 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:27,280 [main:117] - GENERATED CALL = (local()::class).qualifiedName?.plus("ccesy")
2021-03-11 23:59:27,280 [main:114] - replacement of "" of type String is "fkrie"
2021-03-11 23:59:27,396 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 23:59:27,397 [main:66] - Compilation checking started
2021-03-11 23:59:27,976 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("fkrie") + fu0("K")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:27,979 [main:107] - replacing (getOrThrow(), Any?)
2021-03-11 23:59:27,979 [main:50] - replacing getOrThrow() Any?
2021-03-11 23:59:27,979 [main:54] - Getting value of type Any?
2021-03-11 23:59:28,096 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:28,096 [main:58] - GENERATED VALUE OF TYPE Any? = "tyhjr"
2021-03-11 23:59:28,096 [main:61] - GENERATED IS CALL =false
2021-03-11 23:59:28,239 [main:67] - randomType = HashSet<String>
2021-03-11 23:59:28,355 [main:302] - generating value of type = HashSet<String> false depth = 0
2021-03-11 23:59:28,480 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<Strg> = TODO()
2021-03-11 23:59:28,484 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<Strg> = TODO()
2021-03-11 23:59:28,607 [main:95] - GENERATED = linkedSetOf<String>()
2021-03-11 23:59:28,702 [main:149] - GENERATING call of type @kotlin.js.JsName public open fun toJSON(): kotlin.Any defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@309ba806]
2021-03-11 23:59:28,703 [main:78] - Generated call from random type = (linkedSetOf<String>()).toJSON()
2021-03-11 23:59:28,705 [main:106] - GETTING Any? from Simple
2021-03-11 23:59:28,712 [main:106] - GETTING Any? from Any
2021-03-11 23:59:28,715 [main:114] - replacement of getOrThrow() of type Any? is localCaptured()
2021-03-11 23:59:28,833 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:59:28,833 [main:66] - Compilation checking started
2021-03-11 23:59:29,224 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("fkrie") + fu0("K")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.localCaptured()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:29,226 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-11 23:59:29,226 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-11 23:59:29,226 [main:54] - Getting value of type Throwable?
2021-03-11 23:59:29,346 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 23:59:29,353 [main:58] - GENERATED VALUE OF TYPE Throwable? = ArithmeticException()
2021-03-11 23:59:29,353 [main:61] - GENERATED IS CALL =true
2021-03-11 23:59:29,486 [main:67] - randomType = UByte
2021-03-11 23:59:29,602 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 23:59:29,632 [main:106] - GETTING Throwable? from Simple
2021-03-11 23:59:29,639 [main:106] - GETTING Throwable? from KClass<out Any>
2021-03-11 23:59:29,647 [main:106] - GETTING Throwable? from Any
2021-03-11 23:59:29,651 [main:106] - GETTING Throwable? from Any
2021-03-11 23:59:29,652 [main:106] - GETTING Throwable? from Simple
2021-03-11 23:59:29,652 [main:106] - GETTING Throwable? from Any
2021-03-11 23:59:29,653 [main:114] - replacement of exceptionOrNull() of type Throwable? is ArithmeticException()
2021-03-11 23:59:29,768 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:59:29,768 [main:66] - Compilation checking started
2021-03-11 23:59:30,156 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("fkrie") + fu0("K")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.ArithmeticException()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:30,158 [main:107] - replacing ({ x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}, Function1<Continuation<String>, Any?>)
2021-03-11 23:59:30,158 [main:50] - replacing { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
} Function1<Continuation<String>, Any?>
2021-03-11 23:59:30,158 [main:54] - Getting value of type Function1<Continuation<String>, Any?>
2021-03-11 23:59:30,281 [main:302] - generating value of type = Function1<Continuation<String>, Any?> false depth = 0
2021-03-11 23:59:30,284 [main:302] - generating value of type = Any false depth = 1
2021-03-11 23:59:30,284 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<String>, Any?> = {a: Continuation<String> -> "kjamm"}
2021-03-11 23:59:30,284 [main:61] - GENERATED IS CALL =false
2021-03-11 23:59:30,294 [main:67] - randomType = Kla4
2021-03-11 23:59:30,412 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 23:59:30,415 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 23:59:30,426 [main:106] - GETTING Function1<Continuation<String>, Any?> from Simple
2021-03-11 23:59:30,437 [main:106] - GETTING Function1<Continuation<String>, Any?> from KClass<out Any>
2021-03-11 23:59:30,449 [main:106] - GETTING Function1<Continuation<String>, Any?> from Any
2021-03-11 23:59:30,455 [main:106] - GETTING Function1<Continuation<String>, Any?> from Any
2021-03-11 23:59:30,456 [main:106] - GETTING Function1<Continuation<String>, Any?> from Simple
2021-03-11 23:59:30,458 [main:106] - GETTING Function1<Continuation<String>, Any?> from Any
2021-03-11 23:59:30,458 [main:114] - replacement of { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
} of type Function1<Continuation<String>, Any?> is {a: Continuation<String> -> "kjamm"}
2021-03-11 23:59:30,584 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 23:59:30,585 [main:66] - Compilation checking started
2021-03-11 23:59:31,176 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("fkrie") + fu0("K")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:31,178 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 23:59:31,178 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 23:59:31,178 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 23:59:31,300 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 23:59:31,305 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 23:59:31,316 [main:67] - randomType = Kla4
2021-03-11 23:59:31,445 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 23:59:31,447 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 23:59:31,458 [main:106] - GETTING EmptyCoroutineContext from Simple
2021-03-11 23:59:31,470 [main:106] - GETTING EmptyCoroutineContext from Any
2021-03-11 23:59:31,477 [main:106] - GETTING EmptyCoroutineContext from Simple
2021-03-11 23:59:31,478 [main:106] - GETTING EmptyCoroutineContext from Any
2021-03-11 23:59:31,480 [main:106] - GETTING EmptyCoroutineContext from Any
2021-03-11 23:59:31,482 [main:106] - GETTING EmptyCoroutineContext from KClass<out Any>
2021-03-11 23:59:31,498 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 23:59:31,498 [main:107] - replacing (prope2.isSuccess, Boolean)
2021-03-11 23:59:31,498 [main:50] - replacing prope2.isSuccess Boolean
2021-03-11 23:59:31,499 [main:54] - Getting value of type Boolean
2021-03-11 23:59:31,621 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:31,623 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 23:59:31,624 [main:61] - GENERATED IS CALL =false
2021-03-11 23:59:31,762 [main:67] - randomType = Short
2021-03-11 23:59:31,882 [main:302] - generating value of type = Short true depth = 0
2021-03-11 23:59:31,917 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@fe54627]
2021-03-11 23:59:32,040 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:59:32,042 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@61e2865]
2021-03-11 23:59:32,169 [main:78] - Generated call from random type = (-14217).rangeTo(-70).contains(null)
2021-03-11 23:59:32,169 [main:114] - replacement of prope2.isSuccess of type Boolean is (-14217).rangeTo(-70).contains(null)
2021-03-11 23:59:32,286 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:59:32,287 [main:66] - Compilation checking started
2021-03-11 23:59:32,959 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("fkrie") + fu0("K")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:32,962 [main:107] - replacing (false, Boolean)
2021-03-11 23:59:32,962 [main:50] - replacing false Boolean
2021-03-11 23:59:32,962 [main:54] - Getting value of type Boolean
2021-03-11 23:59:33,118 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:33,121 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 23:59:33,121 [main:61] - GENERATED IS CALL =false
2021-03-11 23:59:33,456 [main:67] - randomType = Function1<String, Kla5>
2021-03-11 23:59:33,457 [main:106] - GETTING Boolean from Any
2021-03-11 23:59:33,462 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]]
2021-03-11 23:59:33,462 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:33,588 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:33,588 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]
2021-03-11 23:59:33,588 [main:117] - GENERATED CALL = (local()).equals("nmjsq").not()
2021-03-11 23:59:33,588 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]]
2021-03-11 23:59:33,588 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:33,718 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:33,718 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]
2021-03-11 23:59:33,871 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:33,874 [main:117] - GENERATED CALL = (local()).equals("qxzhw").xor(true)
2021-03-11 23:59:33,874 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]]
2021-03-11 23:59:33,874 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:34,027 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:34,028 [main:117] - GENERATED CALL = (local()).equals("azvcn")
2021-03-11 23:59:34,028 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]]
2021-03-11 23:59:34,028 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:34,160 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:34,160 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:59:34,294 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:34,297 [main:117] - GENERATED CALL = (local()).equals("wbiaq").or(true)
2021-03-11 23:59:34,297 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]]
2021-03-11 23:59:34,297 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:34,418 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:34,418 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]
2021-03-11 23:59:34,539 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:34,542 [main:117] - GENERATED CALL = (local()).equals("oevrd").and(false)
2021-03-11 23:59:34,542 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]]
2021-03-11 23:59:34,542 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:34,664 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:34,664 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-11 23:59:34,788 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:34,788 [main:117] - GENERATED CALL = (local()).equals("avssx").equals("bzhvm")
2021-03-11 23:59:34,788 [main:114] - replacement of false of type Boolean is (local()).equals("wbiaq").or(true)
2021-03-11 23:59:34,911 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:59:34,912 [main:66] - Compilation checking started
2021-03-11 23:59:35,519 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("fkrie") + fu0("K")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:35,523 [main:107] - replacing ("K", String)
2021-03-11 23:59:35,523 [main:50] - replacing "K" String
2021-03-11 23:59:35,523 [main:54] - Getting value of type String
2021-03-11 23:59:35,662 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:35,665 [main:58] - GENERATED VALUE OF TYPE String = "qohqp"
2021-03-11 23:59:35,665 [main:61] - GENERATED IS CALL =false
2021-03-11 23:59:35,944 [main:67] - randomType = Collection<UShort>
2021-03-11 23:59:35,946 [main:106] - GETTING String from Simple
2021-03-11 23:59:35,952 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@788dfd0b]]
2021-03-11 23:59:35,952 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@788dfd0b]
2021-03-11 23:59:36,074 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:59:36,198 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:36,201 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.substringBeforeLast('ꦕ', "likgz")
2021-03-11 23:59:36,201 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fc35b5f]]
2021-03-11 23:59:36,201 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fc35b5f]
2021-03-11 23:59:36,321 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:59:36,324 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:59:36,326 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.takeLastWhile({a: Char -> true})
2021-03-11 23:59:36,326 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9d455b0]]
2021-03-11 23:59:36,326 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9d455b0]
2021-03-11 23:59:36,452 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:59:36,455 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.take(1376982810)
2021-03-11 23:59:36,455 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@406dcd44]]
2021-03-11 23:59:36,455 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@406dcd44]
2021-03-11 23:59:36,580 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:59:36,724 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:36,850 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:36,853 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceBefore('隳', "wvzli", "rrqvb")
2021-03-11 23:59:36,853 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7941dfad]]
2021-03-11 23:59:36,853 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7941dfad]
2021-03-11 23:59:36,973 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:59:37,101 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:37,104 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.substringAfterLast('魄', "owxrf")
2021-03-11 23:59:37,104 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bdf8378]]
2021-03-11 23:59:37,104 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bdf8378]
2021-03-11 23:59:37,234 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:59:37,237 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:59:37,240 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filter({a: Char -> false})
2021-03-11 23:59:37,240 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b1b626e]]
2021-03-11 23:59:37,240 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b1b626e]
2021-03-11 23:59:37,373 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:59:37,501 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:37,628 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:37,631 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceAfterLast('⌝', "mqfnu", "cpfzk")
2021-03-11 23:59:37,631 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d]]
2021-03-11 23:59:37,631 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
2021-03-11 23:59:37,631 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30ecd0aa]]
2021-03-11 23:59:37,631 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30ecd0aa]
2021-03-11 23:59:37,631 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trim()
2021-03-11 23:59:37,631 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@742bca8e]]
2021-03-11 23:59:37,631 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@742bca8e]
2021-03-11 23:59:37,632 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.toUpperCase()
2021-03-11 23:59:37,632 [main:114] - replacement of "K" of type String is "qohqp"
2021-03-11 23:59:37,752 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 23:59:37,753 [main:66] - Compilation checking started
2021-03-11 23:59:38,351 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("fkrie") + fu0("qohqp")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:38,354 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-11 23:59:38,354 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-11 23:59:38,354 [main:54] - Getting value of type Throwable?
2021-03-11 23:59:38,495 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 23:59:38,625 [main:43] - GENERATING CALL OF fun UnsupportedOperationException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 23:59:38,628 [main:61] - WITHOUT TYPE PARAMS = fun UnsupportedOperationException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 23:59:38,890 [main:302] - generating value of type = Throwable false depth = 3
2021-03-11 23:59:39,017 [main:43] - GENERATING CALL OF fun ArithmeticException(message: kotlin.String?): Throwable = TODO()
2021-03-11 23:59:39,020 [main:61] - WITHOUT TYPE PARAMS = fun ArithmeticException(message: kotlin.String?): Throwable = TODO()
2021-03-11 23:59:39,288 [main:302] - generating value of type = String true depth = 6
2021-03-11 23:59:39,291 [main:95] - GENERATED = ArithmeticException("zyxuw")
2021-03-11 23:59:39,291 [main:95] - GENERATED = UnsupportedOperationException(ArithmeticException("zyxuw"))
2021-03-11 23:59:39,291 [main:58] - GENERATED VALUE OF TYPE Throwable? = UnsupportedOperationException(ArithmeticException("zyxuw"))
2021-03-11 23:59:39,291 [main:61] - GENERATED IS CALL =true
2021-03-11 23:59:39,435 [main:67] - randomType = UInt
2021-03-11 23:59:39,558 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 23:59:39,601 [main:106] - GETTING Throwable? from Any
2021-03-11 23:59:39,606 [main:106] - GETTING Throwable? from Any
2021-03-11 23:59:39,607 [main:106] - GETTING Throwable? from Simple
2021-03-11 23:59:39,617 [main:106] - GETTING Throwable? from Simple
2021-03-11 23:59:39,618 [main:106] - GETTING Throwable? from KClass<out Any>
2021-03-11 23:59:39,626 [main:106] - GETTING Throwable? from Any
2021-03-11 23:59:39,626 [main:114] - replacement of exceptionOrNull() of type Throwable? is UnsupportedOperationException(ArithmeticException("zyxuw"))
2021-03-11 23:59:39,758 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:59:39,759 [main:66] - Compilation checking started
2021-03-11 23:59:40,153 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("fkrie") + fu0("qohqp")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.UnsupportedOperationException(ArithmeticException("zyxuw"))?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:40,155 [main:107] - replacing ("\n", String)
2021-03-11 23:59:40,156 [main:50] - replacing "\n" String
2021-03-11 23:59:40,156 [main:54] - Getting value of type String
2021-03-11 23:59:40,280 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:40,282 [main:58] - GENERATED VALUE OF TYPE String = "wnurn"
2021-03-11 23:59:40,282 [main:61] - GENERATED IS CALL =false
2021-03-11 23:59:40,420 [main:67] - randomType = Float
2021-03-11 23:59:40,543 [main:302] - generating value of type = Float true depth = 0
2021-03-11 23:59:40,574 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@6dae65b4]
2021-03-11 23:59:40,575 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bd5a71c]
2021-03-11 23:59:40,575 [main:78] - Generated call from random type = (0.19363588f).toChar().titlecase()
2021-03-11 23:59:40,576 [main:106] - GETTING String from KClass<out Any>
2021-03-11 23:59:40,583 [main:113] - Case = [public abstract val simpleName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@3d0734a6]]
2021-03-11 23:59:40,583 [main:117] - GENERATED CALL = (local()::class).simpleName
2021-03-11 23:59:40,583 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@25c78878]]
2021-03-11 23:59:40,583 [main:117] - GENERATED CALL = (local()::class).qualifiedName
2021-03-11 23:59:40,583 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@25c78878], @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c057cac]]
2021-03-11 23:59:40,583 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c057cac]
2021-03-11 23:59:40,584 [main:117] - GENERATED CALL = (local()::class).qualifiedName?.orEmpty()
2021-03-11 23:59:40,584 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@25c78878], public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6519cd8a]]
2021-03-11 23:59:40,584 [main:149] - GENERATING call of type public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6519cd8a]
2021-03-11 23:59:40,706 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:40,706 [main:117] - GENERATED CALL = (local()::class).qualifiedName?.plus("ehmni")
2021-03-11 23:59:40,706 [main:114] - replacement of "\n" of type String is (local()::class).qualifiedName?.plus("ehmni")
2021-03-11 23:59:40,831 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 23:59:40,832 [main:66] - Compilation checking started
2021-03-11 23:59:41,256 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("fkrie") + fu0("qohqp")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (local()::class).qualifiedName?.plus("ehmni"))) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:41,258 [main:107] - replacing (false, Boolean)
2021-03-11 23:59:41,258 [main:50] - replacing false Boolean
2021-03-11 23:59:41,258 [main:54] - Getting value of type Boolean
2021-03-11 23:59:41,384 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:41,387 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 23:59:41,387 [main:61] - GENERATED IS CALL =false
2021-03-11 23:59:41,684 [main:67] - randomType = ArrayList<Long>
2021-03-11 23:59:41,813 [main:302] - generating value of type = ArrayList<Long> false depth = 0
2021-03-11 23:59:41,947 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Long> = TODO()
2021-03-11 23:59:41,953 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Long> = TODO()
2021-03-11 23:59:42,091 [main:95] - GENERATED = arrayListOf<Long>()
2021-03-11 23:59:42,221 [main:149] - GENERATING call of type public open fun contains(element: kotlin.Long): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@358bc49d]
2021-03-11 23:59:42,344 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:59:42,347 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-11 23:59:42,469 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:42,470 [main:78] - Generated call from random type = (arrayListOf<Long>()).contains(7492078256465729671).equals("zpqva")
2021-03-11 23:59:42,471 [main:106] - GETTING Boolean from Any
2021-03-11 23:59:42,475 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]]
2021-03-11 23:59:42,475 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:42,595 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:42,595 [main:117] - GENERATED CALL = (local()).equals("hzgdu")
2021-03-11 23:59:42,595 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]]
2021-03-11 23:59:42,595 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:42,739 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:42,740 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-11 23:59:42,859 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:42,859 [main:117] - GENERATED CALL = (local()).equals("gdqax").equals("qbgwf")
2021-03-11 23:59:42,859 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]]
2021-03-11 23:59:42,859 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:42,979 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:42,980 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]
2021-03-11 23:59:43,100 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:43,103 [main:117] - GENERATED CALL = (local()).equals("ldqpk").and(true)
2021-03-11 23:59:43,103 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]]
2021-03-11 23:59:43,103 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:43,225 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:43,225 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]
2021-03-11 23:59:43,225 [main:117] - GENERATED CALL = (local()).equals("qqnxi").not()
2021-03-11 23:59:43,225 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]]
2021-03-11 23:59:43,225 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:43,343 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]
2021-03-11 23:59:43,463 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:43,466 [main:117] - GENERATED CALL = (local()).equals(null).xor(false)
2021-03-11 23:59:43,466 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]]
2021-03-11 23:59:43,466 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-11 23:59:43,589 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:43,589 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:59:43,709 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:43,712 [main:117] - GENERATED CALL = (local()).equals("llhjy").or(false)
2021-03-11 23:59:43,712 [main:114] - replacement of false of type Boolean is (local()).equals(null).xor(false)
2021-03-11 23:59:43,831 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:59:43,832 [main:66] - Compilation checking started
2021-03-11 23:59:44,442 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("fkrie") + fu0("qohqp")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:44,444 [main:107] - replacing ("\n", String)
2021-03-11 23:59:44,444 [main:50] - replacing "\n" String
2021-03-11 23:59:44,444 [main:54] - Getting value of type String
2021-03-11 23:59:44,575 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:44,577 [main:58] - GENERATED VALUE OF TYPE String = "ytyed"
2021-03-11 23:59:44,577 [main:61] - GENERATED IS CALL =false
2021-03-11 23:59:44,868 [main:67] - randomType = Short?
2021-03-11 23:59:44,995 [main:302] - generating value of type = Short true depth = 0
2021-03-11 23:59:45,029 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5027e367]
2021-03-11 23:59:45,029 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-11 23:59:45,150 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:59:45,153 [main:78] - Generated call from random type = (3994)?.toInt().toString(572027253)
2021-03-11 23:59:45,154 [main:106] - GETTING String from KClass<out Any>
2021-03-11 23:59:45,161 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@25c78878], public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6519cd8a]]
2021-03-11 23:59:45,161 [main:149] - GENERATING call of type public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6519cd8a]
2021-03-11 23:59:45,284 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:45,284 [main:117] - GENERATED CALL = (local()::class).qualifiedName?.plus("abern")
2021-03-11 23:59:45,284 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@25c78878]]
2021-03-11 23:59:45,284 [main:117] - GENERATED CALL = (local()::class).qualifiedName
2021-03-11 23:59:45,284 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@25c78878], @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c057cac]]
2021-03-11 23:59:45,284 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c057cac]
2021-03-11 23:59:45,284 [main:117] - GENERATED CALL = (local()::class).qualifiedName?.orEmpty()
2021-03-11 23:59:45,285 [main:113] - Case = [public abstract val simpleName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@3d0734a6]]
2021-03-11 23:59:45,285 [main:117] - GENERATED CALL = (local()::class).simpleName
2021-03-11 23:59:45,285 [main:114] - replacement of "\n" of type String is (local()::class).qualifiedName
2021-03-11 23:59:45,408 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:59:45,409 [main:66] - Compilation checking started
2021-03-11 23:59:45,806 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("fkrie") + fu0("qohqp")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = (local()::class).qualifiedName))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:45,808 [main:107] - replacing (prope2, Result<Any?>)
2021-03-11 23:59:45,808 [main:50] - replacing prope2 Result<Any?>
2021-03-11 23:59:45,808 [main:54] - Getting value of type Result<Any?>
2021-03-11 23:59:45,927 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 23:59:46,069 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 23:59:46,073 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 23:59:46,345 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 23:59:46,348 [main:302] - generating value of type = Any false depth = 4
2021-03-11 23:59:46,348 [main:95] - GENERATED = runCatching<Any?>({ "vabdx"})
2021-03-11 23:59:46,348 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "vabdx"})
2021-03-11 23:59:46,348 [main:61] - GENERATED IS CALL =true
2021-03-11 23:59:46,495 [main:67] - randomType = Simple?
2021-03-11 23:59:46,615 [main:302] - generating value of type = Simple false depth = 0
2021-03-11 23:59:46,618 [main:112] - generating klass Simple text = @Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)
2021-03-11 23:59:46,631 [main:106] - GETTING Result<Any?> from Any
2021-03-11 23:59:46,636 [main:106] - GETTING Result<Any?> from Any
2021-03-11 23:59:46,638 [main:106] - GETTING Result<Any?> from Simple
2021-03-11 23:59:46,647 [main:106] - GETTING Result<Any?> from KClass<out Any>
2021-03-11 23:59:46,657 [main:106] - GETTING Result<Any?> from Any
2021-03-11 23:59:46,659 [main:106] - GETTING Result<Any?> from Simple
2021-03-11 23:59:46,659 [main:114] - replacement of prope2 of type Result<Any?> is runCatching<Any?>({ "vabdx"})
2021-03-11 23:59:46,777 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:59:46,778 [main:66] - Compilation checking started
2021-03-11 23:59:47,395 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return fu0("fkrie") + fu0("qohqp")
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:47,398 [main:107] - replacing (fu0("fkrie") + fu0("qohqp"), String)
2021-03-11 23:59:47,398 [main:50] - replacing fu0("fkrie") + fu0("qohqp") String
2021-03-11 23:59:47,398 [main:54] - Getting value of type String
2021-03-11 23:59:47,546 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:47,548 [main:58] - GENERATED VALUE OF TYPE String = "yadth"
2021-03-11 23:59:47,548 [main:61] - GENERATED IS CALL =false
2021-03-11 23:59:47,554 [main:67] - randomType = Char
2021-03-11 23:59:47,674 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:59:47,694 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@586d577a]
2021-03-11 23:59:47,694 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6015949f]
2021-03-11 23:59:47,831 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:59:47,834 [main:78] - Generated call from random type = ('?').toShort().toString(1081896374)
2021-03-11 23:59:47,834 [main:114] - replacement of fu0("fkrie") + fu0("qohqp") of type String is ('?').toShort().toString(1081896374)
2021-03-11 23:59:47,954 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:59:47,955 [main:66] - Compilation checking started
2021-03-11 23:59:48,599 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:48,602 [main:107] - replacing ("tail-call optimization miss: method at " + it, String)
2021-03-11 23:59:48,603 [main:50] - replacing "tail-call optimization miss: method at " + it String
2021-03-11 23:59:48,603 [main:54] - Getting value of type String
2021-03-11 23:59:48,767 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:48,770 [main:58] - GENERATED VALUE OF TYPE String = "byxvi"
2021-03-11 23:59:48,770 [main:61] - GENERATED IS CALL =false
2021-03-11 23:59:49,819 [main:67] - randomType = Function2<Double, HashMap<Kla5, Kla3>, Collection<Collection<UShort>>>
2021-03-11 23:59:49,820 [main:106] - GETTING String from Any
2021-03-11 23:59:49,825 [main:106] - GETTING String from Simple
2021-03-11 23:59:49,835 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7941dfad]]
2021-03-11 23:59:49,835 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7941dfad]
2021-03-11 23:59:49,956 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:59:50,080 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:50,083 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.substringAfterLast('峠', "fyair")
2021-03-11 23:59:50,083 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b71787]]
2021-03-11 23:59:50,083 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b71787]
2021-03-11 23:59:50,207 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:59:50,340 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:50,464 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:50,467 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.replaceBeforeLast('ɪ', "lwydl", "txhjd")
2021-03-11 23:59:50,468 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726c729e]]
2021-03-11 23:59:50,468 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726c729e]
2021-03-11 23:59:50,588 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 23:59:50,717 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(element: Int): Iterable<Int> = TODO()
2021-03-11 23:59:50,721 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(element: Int): Iterable<Int> = TODO()
2021-03-11 23:59:50,849 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:59:50,852 [main:95] - GENERATED = listOfNotNull<Int>(-1985836361)
2021-03-11 23:59:50,853 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.slice(listOfNotNull<Int>(-1985836361))
2021-03-11 23:59:50,853 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@788dfd0b]]
2021-03-11 23:59:50,853 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@788dfd0b]
2021-03-11 23:59:50,976 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:59:51,102 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:51,105 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.substringBeforeLast('༉', "twbzb")
2021-03-11 23:59:51,105 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31e6d0e1]]
2021-03-11 23:59:51,105 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31e6d0e1]
2021-03-11 23:59:51,254 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:59:51,256 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:59:51,259 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.dropLastWhile({a: Char -> true})
2021-03-11 23:59:51,259 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a719753]]
2021-03-11 23:59:51,259 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a719753]
2021-03-11 23:59:51,379 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:59:51,386 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder())
2021-03-11 23:59:51,386 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30ecd0aa]]
2021-03-11 23:59:51,386 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30ecd0aa]
2021-03-11 23:59:51,386 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trim()
2021-03-11 23:59:51,386 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3da0c972]]
2021-03-11 23:59:51,386 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3da0c972]
2021-03-11 23:59:51,506 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:59:51,509 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.substring(32369834)
2021-03-11 23:59:51,509 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b875f45]]
2021-03-11 23:59:51,509 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b875f45]
2021-03-11 23:59:51,635 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:51,766 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:51,769 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.replaceIndentByMargin("ytjon", "fftas")
2021-03-11 23:59:51,769 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32fb11a4]]
2021-03-11 23:59:51,769 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32fb11a4]
2021-03-11 23:59:51,898 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:51,901 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.concat("iqjpu")
2021-03-11 23:59:51,901 [main:114] - replacement of "tail-call optimization miss: method at " + it of type String is (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder())
2021-03-11 23:59:52,023 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:59:52,023 [main:66] - Compilation checking started
2021-03-11 23:59:52,682 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:52,685 [main:107] - replacing (prope2, String)
2021-03-11 23:59:52,685 [main:50] - replacing prope2 String
2021-03-11 23:59:52,685 [main:54] - Getting value of type String
2021-03-11 23:59:52,830 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:52,833 [main:58] - GENERATED VALUE OF TYPE String = "xkkyt"
2021-03-11 23:59:52,833 [main:61] - GENERATED IS CALL =false
2021-03-11 23:59:53,767 [main:67] - randomType = LinkedHashMap<Kla2<UShort>, Array<UByte>>
2021-03-11 23:59:53,888 [main:302] - generating value of type = LinkedHashMap<Kla2<UShort>, Array<UByte>> false depth = 0
2021-03-11 23:59:54,020 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): LinkedHashMap<Kla2<UShort>, Array<UByte>> = TODO()
2021-03-11 23:59:54,024 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): LinkedHashMap<Kla2<UShort>, Array<UByte>> = TODO()
2021-03-11 23:59:54,294 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:59:54,297 [main:95] - GENERATED = LinkedHashMap<Kla2<UShort>, Array<UByte>>(-1819282422)
2021-03-11 23:59:54,453 [main:149] - GENERATING call of type public open fun get(key: Kla2<kotlin.UShort>): kotlin.Array<kotlin.UByte>? defined in kotlin.collections.LinkedHashMap[DeserializedSimpleFunctionDescriptor@623c10f9]
2021-03-11 23:59:54,574 [main:302] - generating value of type = Kla2<UShort> false depth = 0
2021-03-11 23:59:54,577 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 23:59:55,026 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-11 23:59:55,140 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 23:59:55,141 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@745a3724]
2021-03-11 23:59:55,262 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:59:55,392 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:59:55,519 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:59:55,646 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:59:55,768 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:59:55,895 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 23:59:55,898 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 23:59:56,167 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:59:56,170 [main:95] - GENERATED = StringBuilder(-1708057913)
2021-03-11 23:59:56,292 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 23:59:56,295 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 23:59:56,301 [main:78] - Generated call from random type = (LinkedHashMap<Kla2<UShort>, Array<UByte>>(-1819282422)).get(Kla5)?.joinToString("xwcab", "nwpbk", "eifje", -34746393, StringBuilder(-1708057913), {a: T -> "kello"})!!
2021-03-11 23:59:56,303 [main:106] - GETTING String from Any
2021-03-11 23:59:56,308 [main:106] - GETTING String from KClass<out Any>
2021-03-11 23:59:56,318 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@25c78878], public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6519cd8a]]
2021-03-11 23:59:56,318 [main:149] - GENERATING call of type public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6519cd8a]
2021-03-11 23:59:56,447 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:56,447 [main:117] - GENERATED CALL = (local()::class).qualifiedName?.plus("tebfl")
2021-03-11 23:59:56,448 [main:113] - Case = [public abstract val simpleName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@3d0734a6]]
2021-03-11 23:59:56,448 [main:117] - GENERATED CALL = (local()::class).simpleName
2021-03-11 23:59:56,448 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@25c78878]]
2021-03-11 23:59:56,448 [main:117] - GENERATED CALL = (local()::class).qualifiedName
2021-03-11 23:59:56,448 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@25c78878], @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c057cac]]
2021-03-11 23:59:56,448 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c057cac]
2021-03-11 23:59:56,448 [main:117] - GENERATED CALL = (local()::class).qualifiedName?.orEmpty()
2021-03-11 23:59:56,448 [main:114] - replacement of prope2 of type String is (LinkedHashMap<Kla2<UShort>, Array<UByte>>(-1819282422)).get(Kla5)?.joinToString("xwcab", "nwpbk", "eifje", -34746393, StringBuilder(-1708057913), {a: T -> "kello"})!!
2021-03-11 23:59:56,588 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-11 23:59:56,588 [main:66] - Compilation checking started
2021-03-11 23:59:57,146 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return (LinkedHashMap<Kla2<UShort>, Array<UByte>>(-1819282422)).get(Kla5)?.joinToString("xwcab", "nwpbk", "eifje", -34746393, StringBuilder(-1708057913), {a: T -> "kello"})!!
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:59:57,149 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-11 23:59:57,149 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-11 23:59:57,149 [main:54] - Getting value of type Boolean
2021-03-11 23:59:57,296 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:57,298 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 23:59:57,299 [main:61] - GENERATED IS CALL =false
2021-03-11 23:59:57,458 [main:67] - randomType = Kla5
2021-03-11 23:59:57,588 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 23:59:57,591 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 23:59:57,613 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla5[DeserializedSimpleFunctionDescriptor@485f2068]
2021-03-11 23:59:57,735 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:57,735 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]
2021-03-11 23:59:57,735 [main:78] - Generated call from random type = (Kla5).equals("vyanm").not()
2021-03-11 23:59:57,737 [main:106] - GETTING Boolean from KClass<out Any>
2021-03-11 23:59:57,747 [main:113] - Case = [public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@1403b7b4], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]]
2021-03-11 23:59:57,747 [main:149] - GENERATING call of type public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@1403b7b4]
2021-03-11 23:59:57,869 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:57,869 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]
2021-03-11 23:59:57,869 [main:117] - GENERATED CALL = (local()::class).equals("hqbye").not()
2021-03-11 23:59:57,869 [main:113] - Case = [public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@1403b7b4]]
2021-03-11 23:59:57,869 [main:149] - GENERATING call of type public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@1403b7b4]
2021-03-11 23:59:57,991 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:57,992 [main:117] - GENERATED CALL = (local()::class).equals("flisq")
2021-03-11 23:59:57,992 [main:113] - Case = [@kotlin.SinceKotlin public abstract fun isInstance(value: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@253fb0a4]]
2021-03-11 23:59:57,992 [main:149] - GENERATING call of type @kotlin.SinceKotlin public abstract fun isInstance(value: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@253fb0a4]
2021-03-11 23:59:58,116 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:58,116 [main:117] - GENERATED CALL = (local()::class).isInstance("gpngp")
2021-03-11 23:59:58,117 [main:113] - Case = [public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@1403b7b4], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]]
2021-03-11 23:59:58,117 [main:149] - GENERATING call of type public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@1403b7b4]
2021-03-11 23:59:58,240 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:58,240 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:59:58,362 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:58,365 [main:117] - GENERATED CALL = (local()::class).equals("ggqzh").or(true)
2021-03-11 23:59:58,365 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@25c78878], @kotlin.SinceKotlin public fun kotlin.String?.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fd52205]]
2021-03-11 23:59:58,366 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String?.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fd52205]
2021-03-11 23:59:58,366 [main:117] - GENERATED CALL = (local()::class).qualifiedName?.toBoolean()
2021-03-11 23:59:58,366 [main:113] - Case = [public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@1403b7b4], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]]
2021-03-11 23:59:58,366 [main:149] - GENERATING call of type public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@1403b7b4]
2021-03-11 23:59:58,512 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:58,512 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]
2021-03-11 23:59:58,636 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:58,639 [main:117] - GENERATED CALL = (local()::class).equals("vuspc").and(true)
2021-03-11 23:59:58,639 [main:113] - Case = [public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@1403b7b4], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]]
2021-03-11 23:59:58,639 [main:149] - GENERATING call of type public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@1403b7b4]
2021-03-11 23:59:58,759 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:58,759 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-11 23:59:58,886 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:58,887 [main:117] - GENERATED CALL = (local()::class).equals("bfcao").equals("sygyd")
2021-03-11 23:59:58,887 [main:113] - Case = [public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@1403b7b4], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]]
2021-03-11 23:59:58,887 [main:149] - GENERATING call of type public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@1403b7b4]
2021-03-11 23:59:59,013 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:59:59,013 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]
2021-03-11 23:59:59,142 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:59,145 [main:117] - GENERATED CALL = (local()::class).equals("kxnga").xor(false)
2021-03-11 23:59:59,145 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@25c78878], public fun kotlin.String?.equals(other: kotlin.String?, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b659333]]
2021-03-11 23:59:59,145 [main:149] - GENERATING call of type public fun kotlin.String?.equals(other: kotlin.String?, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b659333]
2021-03-11 23:59:59,268 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:59:59,394 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:59:59,398 [main:117] - GENERATED CALL = (local()::class).qualifiedName?.equals("xaaxa", true)
2021-03-11 23:59:59,398 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (local()::class).equals("bfcao").equals("sygyd")
2021-03-11 23:59:59,519 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:59:59,519 [main:66] - Compilation checking started
2021-03-12 00:00:00,211 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:00:00,213 [main:107] - replacing (this, Kla1)
2021-03-12 00:00:00,213 [main:50] - replacing this Kla1
2021-03-12 00:00:00,213 [main:54] - Getting value of type Kla1
2021-03-12 00:00:00,342 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 00:00:00,345 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 00:00:00,345 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1()
2021-03-12 00:00:00,345 [main:61] - GENERATED IS CALL =true
2021-03-12 00:00:00,504 [main:67] - randomType = Long
2021-03-12 00:00:00,629 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:00:00,665 [main:106] - GETTING Kla1 from KClass<out Any>
2021-03-12 00:00:00,675 [main:106] - GETTING Kla1 from Any
2021-03-12 00:00:00,678 [main:106] - GETTING Kla1 from Any
2021-03-12 00:00:00,679 [main:106] - GETTING Kla1 from Simple
2021-03-12 00:00:00,686 [main:106] - GETTING Kla1 from Simple
2021-03-12 00:00:00,687 [main:106] - GETTING Kla1 from Any
2021-03-12 00:00:00,687 [main:114] - replacement of this of type Kla1 is Kla1()
2021-03-12 00:00:00,816 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:00:00,817 [main:66] - Compilation checking started
2021-03-12 00:00:01,450 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:00:01,452 [main:107] - replacing (prope5, Boolean)
2021-03-12 00:00:01,453 [main:50] - replacing prope5 Boolean
2021-03-12 00:00:01,453 [main:54] - Getting value of type Boolean
2021-03-12 00:00:01,577 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:01,580 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 00:00:01,580 [main:61] - GENERATED IS CALL =false
2021-03-12 00:00:01,859 [main:67] - randomType = ArrayList<UInt>
2021-03-12 00:00:01,980 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-12 00:00:02,109 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<UInt> = TODO()
2021-03-12 00:00:02,112 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<UInt> = TODO()
2021-03-12 00:00:02,251 [main:95] - GENERATED = arrayListOf<UInt>()
2021-03-12 00:00:02,408 [main:149] - GENERATING call of type public open fun clear(): kotlin.Unit defined in kotlin.collections.AbstractMutableCollection[DeserializedSimpleFunctionDescriptor@2350db75]
2021-03-12 00:00:02,409 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@e90eae6]
2021-03-12 00:00:02,548 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:02,549 [main:78] - Generated call from random type = (arrayListOf<UInt>()).clear().equals("mdmkx")
2021-03-12 00:00:02,550 [main:106] - GETTING Boolean from Any
2021-03-12 00:00:02,553 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]]
2021-03-12 00:00:02,553 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:00:02,675 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:02,675 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-12 00:00:02,797 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:02,797 [main:117] - GENERATED CALL = (local()).equals("cadng").equals("zjrum")
2021-03-12 00:00:02,797 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]]
2021-03-12 00:00:02,797 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:00:02,921 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:02,922 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]
2021-03-12 00:00:02,922 [main:117] - GENERATED CALL = (local()).equals("avhvl").not()
2021-03-12 00:00:02,922 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]]
2021-03-12 00:00:02,922 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:00:03,042 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:03,043 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]
2021-03-12 00:00:03,164 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:03,167 [main:117] - GENERATED CALL = (local()).equals("qmxro").and(false)
2021-03-12 00:00:03,167 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]]
2021-03-12 00:00:03,167 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:00:03,289 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:03,289 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]
2021-03-12 00:00:03,410 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:03,413 [main:117] - GENERATED CALL = (local()).equals("binat").xor(false)
2021-03-12 00:00:03,413 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]]
2021-03-12 00:00:03,413 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:00:03,533 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:03,533 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-12 00:00:03,654 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:03,657 [main:117] - GENERATED CALL = (local()).equals("qgjdf").or(false)
2021-03-12 00:00:03,657 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]]
2021-03-12 00:00:03,657 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:00:03,785 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:03,785 [main:117] - GENERATED CALL = (local()).equals("raiyw")
2021-03-12 00:00:03,785 [main:114] - replacement of prope5 of type Boolean is true
2021-03-12 00:00:03,908 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-12 00:00:03,908 [main:66] - Compilation checking started
2021-03-12 00:00:04,581 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:00:04,585 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 00:00:04,585 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 00:00:04,585 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 00:00:04,761 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 00:00:04,767 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 00:00:04,914 [main:67] - randomType = Long
2021-03-12 00:00:05,036 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:00:05,070 [main:106] - GETTING EmptyCoroutineContext from Any
2021-03-12 00:00:05,073 [main:106] - GETTING EmptyCoroutineContext from Any
2021-03-12 00:00:05,074 [main:106] - GETTING EmptyCoroutineContext from Simple
2021-03-12 00:00:05,081 [main:106] - GETTING EmptyCoroutineContext from Any
2021-03-12 00:00:05,082 [main:106] - GETTING EmptyCoroutineContext from Simple
2021-03-12 00:00:05,083 [main:106] - GETTING EmptyCoroutineContext from KClass<out Any>
2021-03-12 00:00:05,090 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 00:00:05,090 [main:107] - replacing (prope2, String)
2021-03-12 00:00:05,090 [main:50] - replacing prope2 String
2021-03-12 00:00:05,090 [main:54] - Getting value of type String
2021-03-12 00:00:05,211 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:00:05,214 [main:58] - GENERATED VALUE OF TYPE String = "tghzt"
2021-03-12 00:00:05,215 [main:61] - GENERATED IS CALL =false
2021-03-12 00:00:05,355 [main:67] - randomType = UShort
2021-03-12 00:00:05,479 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 00:00:05,510 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@6b715771]
2021-03-12 00:00:05,510 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12649ad8]
2021-03-12 00:00:05,632 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:00:05,635 [main:78] - Generated call from random type = (8899.toUShort()).toLong().toString(-1129836784)
2021-03-12 00:00:05,636 [main:106] - GETTING String from KClass<out Any>
2021-03-12 00:00:05,647 [main:113] - Case = [public abstract val simpleName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@3d0734a6]]
2021-03-12 00:00:05,647 [main:117] - GENERATED CALL = (local()::class).simpleName
2021-03-12 00:00:05,647 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@25c78878], public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6519cd8a]]
2021-03-12 00:00:05,647 [main:149] - GENERATING call of type public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6519cd8a]
2021-03-12 00:00:05,770 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:05,770 [main:117] - GENERATED CALL = (local()::class).qualifiedName?.plus("xgupc")
2021-03-12 00:00:05,770 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@25c78878], @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c057cac]]
2021-03-12 00:00:05,770 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c057cac]
2021-03-12 00:00:05,770 [main:117] - GENERATED CALL = (local()::class).qualifiedName?.orEmpty()
2021-03-12 00:00:05,771 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@25c78878]]
2021-03-12 00:00:05,771 [main:117] - GENERATED CALL = (local()::class).qualifiedName
2021-03-12 00:00:05,771 [main:114] - replacement of prope2 of type String is (local()::class).qualifiedName?.orEmpty()
2021-03-12 00:00:05,894 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 00:00:05,895 [main:66] - Compilation checking started
2021-03-12 00:00:06,297 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 {
        prope2 = fu1(false) + fu1(true)
    }

    return (local()::class).qualifiedName?.orEmpty()
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:00:06,300 [main:107] - replacing ({
        prope2 = fu1(false) + fu1(true)
    }, SuspendFunction0<Unit>)
2021-03-12 00:00:06,300 [main:50] - replacing {
        prope2 = fu1(false) + fu1(true)
    } SuspendFunction0<Unit>
2021-03-12 00:00:06,300 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 00:00:06,446 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 00:00:06,449 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:00:06,576 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:00:06,580 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:00:06,847 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:00:06,850 [main:95] - GENERATED = require(false)
2021-03-12 00:00:06,850 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { require(false)}
2021-03-12 00:00:06,850 [main:61] - GENERATED IS CALL =false
2021-03-12 00:00:07,145 [main:67] - randomType = Kla2<List<Int>>
2021-03-12 00:00:07,265 [main:302] - generating value of type = Kla2<List<Int>> false depth = 0
2021-03-12 00:00:07,268 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 00:00:07,818 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-12 00:00:07,821 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:00:07,837 [main:106] - GETTING SuspendFunction0<Unit> from Any
2021-03-12 00:00:07,841 [main:106] - GETTING SuspendFunction0<Unit> from Any
2021-03-12 00:00:07,842 [main:106] - GETTING SuspendFunction0<Unit> from Any
2021-03-12 00:00:07,843 [main:106] - GETTING SuspendFunction0<Unit> from KClass<out Any>
2021-03-12 00:00:07,852 [main:106] - GETTING SuspendFunction0<Unit> from Simple
2021-03-12 00:00:07,859 [main:106] - GETTING SuspendFunction0<Unit> from Simple
2021-03-12 00:00:07,859 [main:114] - replacement of {
        prope2 = fu1(false) + fu1(true)
    } of type SuspendFunction0<Unit> is { require(false)}
2021-03-12 00:00:07,982 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:00:07,982 [main:66] - Compilation checking started
2021-03-12 00:00:08,626 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:00:08,628 [main:107] - replacing (prope6, Function0<Unit>)
2021-03-12 00:00:08,628 [main:50] - replacing prope6 Function0<Unit>
2021-03-12 00:00:08,628 [main:54] - Getting value of type Function0<Unit>
2021-03-12 00:00:08,750 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 00:00:08,752 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:00:08,880 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:00:08,883 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:00:09,295 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:00:09,298 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:00:09,301 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:00:09,301 [main:95] - GENERATED = require(false, { "xuzlp"})
2021-03-12 00:00:09,301 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false, { "xuzlp"})}
2021-03-12 00:00:09,301 [main:61] - GENERATED IS CALL =false
2021-03-12 00:00:09,575 [main:67] - randomType = UInt?
2021-03-12 00:00:09,695 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 00:00:09,728 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:00:09,733 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:00:09,734 [main:106] - GETTING Function0<Unit> from Simple
2021-03-12 00:00:09,741 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:00:09,743 [main:106] - GETTING Function0<Unit> from Simple
2021-03-12 00:00:09,744 [main:106] - GETTING Function0<Unit> from KClass<out Any>
2021-03-12 00:00:09,751 [main:114] - replacement of prope6 of type Function0<Unit> is { require(false, { "xuzlp"})}
2021-03-12 00:00:09,870 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:00:09,871 [main:66] - Compilation checking started
2021-03-12 00:00:10,314 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        { require(false, { "xuzlp"})}()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:00:10,317 [main:107] - replacing (1, Int)
2021-03-12 00:00:10,317 [main:50] - replacing 1 Int
2021-03-12 00:00:10,317 [main:54] - Getting value of type Int
2021-03-12 00:00:10,438 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:00:10,441 [main:58] - GENERATED VALUE OF TYPE Int = 28729337
2021-03-12 00:00:10,441 [main:61] - GENERATED IS CALL =false
2021-03-12 00:00:10,589 [main:67] - randomType = Kla1?
2021-03-12 00:00:10,710 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 00:00:10,713 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 00:00:10,727 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Any?.hashCode(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3436da82]
2021-03-12 00:00:10,727 [main:78] - Generated call from random type = (Kla1())?.prope2?.hashCode()!!
2021-03-12 00:00:10,727 [main:114] - replacement of 1 of type Int is (Kla1())?.prope2?.hashCode()!!
2021-03-12 00:00:10,848 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(POSTFIX_EXPRESSION)
2021-03-12 00:00:10,848 [main:66] - Compilation checking started
2021-03-12 00:00:11,461 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Kla1())?.prope2?.hashCode()!!..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:00:11,463 [main:107] - replacing (prope1.prope6, Function0<Unit>)
2021-03-12 00:00:11,463 [main:50] - replacing prope1.prope6 Function0<Unit>
2021-03-12 00:00:11,463 [main:54] - Getting value of type Function0<Unit>
2021-03-12 00:00:11,586 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 00:00:11,589 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:00:11,717 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:00:11,721 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:00:11,997 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:00:12,000 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:00:12,135 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:00:12,139 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:00:12,576 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:00:12,579 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 00:00:12,581 [main:302] - generating value of type = Any false depth = 9
2021-03-12 00:00:12,581 [main:95] - GENERATED = check(false, { "tgrun"})
2021-03-12 00:00:12,582 [main:95] - GENERATED = contract({ check(false, { "tgrun"})})
2021-03-12 00:00:12,582 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ check(false, { "tgrun"})})}
2021-03-12 00:00:12,582 [main:61] - GENERATED IS CALL =false
2021-03-12 00:00:13,165 [main:67] - randomType = Kla2<Function1<HashSet<UShort>, String>>
2021-03-12 00:00:13,286 [main:302] - generating value of type = Kla2<Function1<HashSet<UShort>, String>> false depth = 0
2021-03-12 00:00:13,288 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 00:00:15,598 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-12 00:00:15,601 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:00:15,785 [main:106] - GETTING Function0<Unit> from Simple
2021-03-12 00:00:15,793 [main:106] - GETTING Function0<Unit> from Simple
2021-03-12 00:00:15,794 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:00:15,798 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:00:15,800 [main:106] - GETTING Function0<Unit> from KClass<out Any>
2021-03-12 00:00:15,808 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:00:15,808 [main:114] - replacement of prope1.prope6 of type Function0<Unit> is { contract({ check(false, { "tgrun"})})}
2021-03-12 00:00:15,932 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:00:15,932 [main:66] - Compilation checking started
2021-03-12 00:00:16,345 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Kla1())?.prope2?.hashCode()!!..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        { contract({ check(false, { "tgrun"})})} = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:00:16,347 [main:107] - replacing (true, Boolean)
2021-03-12 00:00:16,347 [main:50] - replacing true Boolean
2021-03-12 00:00:16,347 [main:54] - Getting value of type Boolean
2021-03-12 00:00:16,469 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:16,472 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:00:16,472 [main:61] - GENERATED IS CALL =false
2021-03-12 00:00:16,897 [main:67] - randomType = ArrayDeque<Kla2<Double>>
2021-03-12 00:00:17,019 [main:302] - generating value of type = ArrayDeque<Kla2<Double>> false depth = 0
2021-03-12 00:00:17,147 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Kla2<Double>> = TODO()
2021-03-12 00:00:17,151 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Kla2<Double>> = TODO()
2021-03-12 00:00:17,278 [main:95] - GENERATED = ArrayDeque<Kla2<Double>>()
2021-03-12 00:00:17,448 [main:149] - GENERATING call of type public open fun contains(element: Kla2<kotlin.Double>): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@1d1bc0c8]
2021-03-12 00:00:17,570 [main:302] - generating value of type = Kla2<Double> false depth = 0
2021-03-12 00:00:17,573 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 00:00:18,132 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-12 00:00:18,135 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:00:18,135 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]
2021-03-12 00:00:18,281 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:18,284 [main:78] - Generated call from random type = (ArrayDeque<Kla2<Double>>()).contains(Kla5).xor(false)
2021-03-12 00:00:18,285 [main:106] - GETTING Boolean from Simple
2021-03-12 00:00:18,292 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]]
2021-03-12 00:00:18,292 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-12 00:00:18,414 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:18,414 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-12 00:00:18,536 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:18,537 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals("jjcqq").equals("bcjia")
2021-03-12 00:00:18,537 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@510c7163]]
2021-03-12 00:00:18,537 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@510c7163]
2021-03-12 00:00:18,657 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:00:18,781 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:18,784 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.endsWith("xlijd", false)
2021-03-12 00:00:18,785 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]]
2021-03-12 00:00:18,785 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-12 00:00:18,905 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:18,905 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]
2021-03-12 00:00:19,026 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:19,029 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals("rbxtn").xor(true)
2021-03-12 00:00:19,029 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]]
2021-03-12 00:00:19,029 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-12 00:00:19,151 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:19,151 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]
2021-03-12 00:00:19,270 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:19,273 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals("msgac").and(true)
2021-03-12 00:00:19,273 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]]
2021-03-12 00:00:19,273 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-12 00:00:19,394 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:19,394 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals("rpcjy")
2021-03-12 00:00:19,394 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e68f004]]
2021-03-12 00:00:19,394 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e68f004]
2021-03-12 00:00:19,514 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:00:19,637 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:19,640 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.startsWith("tllqd", false)
2021-03-12 00:00:19,640 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]]
2021-03-12 00:00:19,640 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-12 00:00:19,761 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:19,762 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]
2021-03-12 00:00:19,762 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals("iwgxs").not()
2021-03-12 00:00:19,762 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@267127f2]]
2021-03-12 00:00:19,762 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@267127f2]
2021-03-12 00:00:19,762 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.toBoolean()
2021-03-12 00:00:19,762 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1914b520]]
2021-03-12 00:00:19,762 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1914b520]
2021-03-12 00:00:19,882 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:00:19,885 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.matches("bwkbq")
2021-03-12 00:00:19,886 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3d965cb4]]
2021-03-12 00:00:19,886 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3d965cb4]
2021-03-12 00:00:20,005 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:20,006 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.equals("jjwmy")
2021-03-12 00:00:20,006 [main:114] - replacement of true of type Boolean is false
2021-03-12 00:00:20,150 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 00:00:20,150 [main:66] - Compilation checking started
2021-03-12 00:00:20,744 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (Kla1())?.prope2?.hashCode()!!..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:00:20,748 [main:107] - replacing (true, Boolean)
2021-03-12 00:00:20,748 [main:50] - replacing true Boolean
2021-03-12 00:00:20,748 [main:54] - Getting value of type Boolean
2021-03-12 00:00:20,896 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:20,899 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:00:20,899 [main:61] - GENERATED IS CALL =false
2021-03-12 00:00:21,343 [main:67] - randomType = LinkedHashMap<Char, Float>
2021-03-12 00:00:21,463 [main:302] - generating value of type = LinkedHashMap<Char, Float> false depth = 0
2021-03-12 00:00:21,590 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Char, Float> = TODO()
2021-03-12 00:00:21,594 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Char, Float> = TODO()
2021-03-12 00:00:21,729 [main:95] - GENERATED = linkedMapOf<Char, Float>()
2021-03-12 00:00:21,850 [main:149] - GENERATING call of type public abstract fun contains(element: kotlin.collections.MutableMap.MutableEntry<kotlin.Char, kotlin.Float>): kotlin.Boolean defined in kotlin.collections.MutableSet[DeserializedSimpleFunctionDescriptor@7f9a9dc2]
2021-03-12 00:00:21,971 [main:302] - generating value of type = MutableEntry<Char, Float> false depth = 0
2021-03-12 00:00:21,978 [main:158] - CANT GENERATE PARAMS FOR public abstract fun contains(element: kotlin.collections.MutableMap.MutableEntry<kotlin.Char, kotlin.Float>): kotlin.Boolean defined in kotlin.collections.MutableSet[DeserializedSimpleFunctionDescriptor@7f9a9dc2]
2021-03-12 00:00:21,978 [main:78] - Generated call from random type = (linkedMapOf<Char, Float>()).null
2021-03-12 00:00:21,979 [main:106] - GETTING Boolean from Simple
2021-03-12 00:00:21,988 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]]
2021-03-12 00:00:21,988 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-12 00:00:22,114 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:22,115 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-12 00:00:22,236 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:22,240 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).equals("bwdgq").or(true)
2021-03-12 00:00:22,240 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1914b520]]
2021-03-12 00:00:22,240 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1914b520]
2021-03-12 00:00:22,385 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:00:22,388 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.matches("yuvko")
2021-03-12 00:00:22,388 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]]
2021-03-12 00:00:22,388 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-12 00:00:22,508 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:22,508 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]
2021-03-12 00:00:22,629 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:22,632 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).equals("lijty").and(true)
2021-03-12 00:00:22,633 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]]
2021-03-12 00:00:22,633 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-12 00:00:22,756 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:22,756 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-12 00:00:22,878 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:22,878 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).equals("lmsrs").equals("qwnhx")
2021-03-12 00:00:22,878 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@510c7163]]
2021-03-12 00:00:22,878 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@510c7163]
2021-03-12 00:00:22,999 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:00:23,122 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:23,125 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
2021-03-12 00:00:23,125 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e68f004]]
2021-03-12 00:00:23,125 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e68f004]
2021-03-12 00:00:23,245 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:00:23,368 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:23,371 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.startsWith("uscjt", false)
2021-03-12 00:00:23,371 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]]
2021-03-12 00:00:23,371 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-12 00:00:23,494 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:23,494 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]
2021-03-12 00:00:23,494 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).equals("ozxhd").not()
2021-03-12 00:00:23,495 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@267127f2]]
2021-03-12 00:00:23,495 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@267127f2]
2021-03-12 00:00:23,495 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()
2021-03-12 00:00:23,495 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]]
2021-03-12 00:00:23,495 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-12 00:00:23,615 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:23,615 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]
2021-03-12 00:00:23,735 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:23,738 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).equals("rshdf").xor(false)
2021-03-12 00:00:23,738 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3d965cb4]]
2021-03-12 00:00:23,738 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3d965cb4]
2021-03-12 00:00:23,857 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:23,857 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.equals("vxvbc")
2021-03-12 00:00:23,857 [main:114] - replacement of true of type Boolean is (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
2021-03-12 00:00:23,976 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:00:23,977 [main:66] - Compilation checking started
2021-03-12 00:00:24,588 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return prope2
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (Kla1())?.prope2?.hashCode()!!..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:00:24,590 [main:107] - replacing (prope2, String)
2021-03-12 00:00:24,591 [main:50] - replacing prope2 String
2021-03-12 00:00:24,591 [main:54] - Getting value of type String
2021-03-12 00:00:24,735 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:00:24,739 [main:58] - GENERATED VALUE OF TYPE String = "syadw"
2021-03-12 00:00:24,740 [main:61] - GENERATED IS CALL =false
2021-03-12 00:00:25,617 [main:67] - randomType = Function2<Double, Sequence<HashSet<Char>>, Kla5?>
2021-03-12 00:00:25,618 [main:106] - GETTING String from Any
2021-03-12 00:00:25,623 [main:106] - GETTING String from Any
2021-03-12 00:00:25,625 [main:106] - GETTING String from Simple
2021-03-12 00:00:25,635 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e73de07]]
2021-03-12 00:00:25,635 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e73de07]
2021-03-12 00:00:25,764 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:00:25,888 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:00:25,891 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.padEnd(-1720220013, '에')
2021-03-12 00:00:25,891 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b1b626e]]
2021-03-12 00:00:25,891 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b1b626e]
2021-03-12 00:00:26,011 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:00:26,136 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:00:26,260 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:00:26,263 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.replaceAfterLast('쑲', "ncagg", "wyerh")
2021-03-12 00:00:26,263 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb7f30e]]
2021-03-12 00:00:26,263 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb7f30e]
2021-03-12 00:00:26,385 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:00:26,509 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:00:26,665 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:00:26,668 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.replaceAfter('캘', "yvmfz", "vnhgd")
2021-03-12 00:00:26,668 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]]
2021-03-12 00:00:26,668 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]
2021-03-12 00:00:26,668 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.uppercase()
2021-03-12 00:00:26,669 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726c729e]]
2021-03-12 00:00:26,669 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726c729e]
2021-03-12 00:00:26,789 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 00:00:26,916 [main:43] - GENERATING CALL OF fun <T> setOf(): Iterable<Int> = TODO()
2021-03-12 00:00:26,920 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(): Iterable<Int> = TODO()
2021-03-12 00:00:27,051 [main:95] - GENERATED = setOf<Int>()
2021-03-12 00:00:27,051 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.slice(setOf<Int>())
2021-03-12 00:00:27,051 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3f6d2d]]
2021-03-12 00:00:27,051 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3f6d2d]
2021-03-12 00:00:27,173 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:00:27,301 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:00:27,432 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:00:27,558 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:00:27,562 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:00:27,828 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:00:27,956 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:00:27,960 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:00:28,258 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-12 00:00:28,385 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:00:28,389 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:00:28,657 [main:302] - generating value of type = CharSequence false depth = 9
2021-03-12 00:00:28,664 [main:95] - GENERATED = StringBuilder("uaagt")
2021-03-12 00:00:28,664 [main:95] - GENERATED = StringBuilder(StringBuilder("uaagt"))
2021-03-12 00:00:28,664 [main:95] - GENERATED = StringBuilder(StringBuilder(StringBuilder("uaagt")))
2021-03-12 00:00:28,665 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.replaceRange(1745037765, -1811032964, StringBuilder(StringBuilder(StringBuilder("uaagt"))))
2021-03-12 00:00:28,665 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@270e28fd]]
2021-03-12 00:00:28,665 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@270e28fd]
2021-03-12 00:00:28,665 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.lowercase()
2021-03-12 00:00:28,665 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b106cd8]]
2021-03-12 00:00:28,665 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b106cd8]
2021-03-12 00:00:28,665 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimEnd()
2021-03-12 00:00:28,666 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d]]
2021-03-12 00:00:28,666 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
2021-03-12 00:00:28,666 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2748ca6f]]
2021-03-12 00:00:28,666 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2748ca6f]
2021-03-12 00:00:28,814 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:00:28,940 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:00:28,943 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.substringBefore('⭋', "wqwfd")
2021-03-12 00:00:28,943 [main:114] - replacement of prope2 of type String is (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
2021-03-12 00:00:29,065 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:00:29,066 [main:66] - Compilation checking started
2021-03-12 00:00:29,705 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (Kla1())?.prope2?.hashCode()!!..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:00:29,708 [main:107] - replacing (prope1.prope5, Boolean)
2021-03-12 00:00:29,708 [main:50] - replacing prope1.prope5 Boolean
2021-03-12 00:00:29,708 [main:54] - Getting value of type Boolean
2021-03-12 00:00:29,843 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:29,846 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:00:29,846 [main:61] - GENERATED IS CALL =false
2021-03-12 00:00:31,040 [main:67] - randomType = Triple<UInt, Boolean, LinkedHashMap<Kla2<Short>, Map<Byte, ULong>>>
2021-03-12 00:00:31,190 [main:302] - generating value of type = Triple<UInt, Boolean, LinkedHashMap<Kla2<Short>, Map<Byte, ULong>>> false depth = 0
2021-03-12 00:00:31,324 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: UInt, second: Boolean, third: LinkedHashMap<Kla2<Short>, Map<Byte, ULong>>): Triple<UInt, Boolean, LinkedHashMap<Kla2<Short>, Map<Byte, ULong>>> = TODO()
2021-03-12 00:00:31,328 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: UInt, second: Boolean, third: LinkedHashMap<Kla2<Short>, Map<Byte, ULong>>): Triple<UInt, Boolean, LinkedHashMap<Kla2<Short>, Map<Byte, ULong>>> = TODO()
2021-03-12 00:00:31,456 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 00:00:31,459 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 00:00:31,462 [main:302] - generating value of type = LinkedHashMap<Kla2<Short>, Map<Byte, ULong>> false depth = 3
2021-03-12 00:00:31,590 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Kla2<Short>, Map<Byte, ULong>>): LkedHashMap<Kla2<Short>, Map<Byte, ULong>> = TODO()
2021-03-12 00:00:31,594 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Kla2<Short>, Map<Byte, ULong>>): LkedHashMap<Kla2<Short>, Map<Byte, ULong>> = TODO()
2021-03-12 00:00:31,723 [main:302] - generating value of type = Pair<Kla2<Short>, Map<Byte, ULong>> false depth = 6
2021-03-12 00:00:31,852 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla2<Short>, second: Map<Byte, ULong>): Pair<Kla2<Short>, Map<Byte, ULong>> = TODO()
2021-03-12 00:00:31,856 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla2<Short>, second: Map<Byte, ULong>): Pair<Kla2<Short>, Map<Byte, ULong>> = TODO()
2021-03-12 00:00:31,984 [main:302] - generating value of type = Kla2<Short> false depth = 9
2021-03-12 00:00:31,987 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 00:00:32,975 [main:302] - generating value of type = Kla5 false depth = 11
2021-03-12 00:00:32,978 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:00:32,978 [main:302] - generating value of type = Map<Byte, ULong> false depth = 9
2021-03-12 00:00:33,107 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): Map<Byte, ULong> = TODO()
2021-03-12 00:00:33,111 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): Map<Byte, ULong> = TODO()
2021-03-12 00:00:33,240 [main:95] - GENERATED = hashMapOf<Byte, ULong>()
2021-03-12 00:00:33,240 [main:95] - GENERATED = Pair<Kla2<Short>, Map<Byte, ULong>>(Kla5, hashMapOf<Byte, ULong>())
2021-03-12 00:00:33,240 [main:95] - GENERATED = linkedMapOf<Kla2<Short>, Map<Byte, ULong>>(Pair<Kla2<Short>, Map<Byte, ULong>>(Kla5, hashMapOf<Byte, ULong>()))
2021-03-12 00:00:33,241 [main:95] - GENERATED = Triple<UInt, Boolean, LinkedHashMap<Kla2<Short>, Map<Byte, ULong>>>(2038053438.toUInt(), true, linkedMapOf<Kla2<Short>, Map<Byte, ULong>>(Pair<Kla2<Short>, Map<Byte, ULong>>(Kla5, hashMapOf<Byte, ULong>())))
2021-03-12 00:00:33,266 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.io.Serializable[DeserializedSimpleFunctionDescriptor@31bfca2e]
2021-03-12 00:00:33,414 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:33,414 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]
2021-03-12 00:00:33,537 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:33,540 [main:78] - Generated call from random type = (Triple<UInt, Boolean, LinkedHashMap<Kla2<Short>, Map<Byte, ULong>>>(2038053438.toUInt(), true, linkedMapOf<Kla2<Short>, Map<Byte, ULong>>(Pair<Kla2<Short>, Map<Byte, ULong>>(Kla5, hashMapOf<Byte, ULong>())))).equals("hmrji").and(false)
2021-03-12 00:00:33,541 [main:106] - GETTING Boolean from Simple
2021-03-12 00:00:33,550 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@267127f2]]
2021-03-12 00:00:33,550 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@267127f2]
2021-03-12 00:00:33,550 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()
2021-03-12 00:00:33,550 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3d965cb4]]
2021-03-12 00:00:33,550 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3d965cb4]
2021-03-12 00:00:33,675 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:33,675 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.equals("qcdnn")
2021-03-12 00:00:33,676 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]]
2021-03-12 00:00:33,676 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-12 00:00:33,797 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:33,797 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]
2021-03-12 00:00:33,919 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:33,922 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).equals("kpvyu").and(true)
2021-03-12 00:00:33,922 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@510c7163]]
2021-03-12 00:00:33,922 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@510c7163]
2021-03-12 00:00:34,044 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:00:34,168 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:34,171 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("idddy", false)
2021-03-12 00:00:34,171 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e68f004]]
2021-03-12 00:00:34,171 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e68f004]
2021-03-12 00:00:34,294 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:00:34,424 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:34,427 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.startsWith("hwtyv", false)
2021-03-12 00:00:34,427 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]]
2021-03-12 00:00:34,427 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-12 00:00:34,549 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:34,550 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]
2021-03-12 00:00:34,675 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:34,678 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).equals("tsadt").xor(true)
2021-03-12 00:00:34,678 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1914b520]]
2021-03-12 00:00:34,678 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1914b520]
2021-03-12 00:00:34,806 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:00:34,809 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.matches("frrlg")
2021-03-12 00:00:34,809 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]]
2021-03-12 00:00:34,809 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-12 00:00:34,931 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:34,931 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-12 00:00:35,052 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:35,055 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).equals("cdksr").or(true)
2021-03-12 00:00:35,055 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]]
2021-03-12 00:00:35,055 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-12 00:00:35,176 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:35,176 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-12 00:00:35,297 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:35,297 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).equals("nqbew").equals("wnvmg")
2021-03-12 00:00:35,298 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]]
2021-03-12 00:00:35,298 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-12 00:00:35,421 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:35,421 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).equals("qlpbs")
2021-03-12 00:00:35,422 [main:114] - replacement of prope1.prope5 of type Boolean is (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).equals("cdksr").or(true)
2021-03-12 00:00:35,542 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:00:35,543 [main:66] - Compilation checking started
2021-03-12 00:00:35,995 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (Kla1())?.prope2?.hashCode()!!..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).equals("cdksr").or(true) = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:00:35,998 [main:107] - replacing (prope2, Result<Ty0>)
2021-03-12 00:00:35,998 [main:50] - replacing prope2 Result<Ty0>
2021-03-12 00:00:35,998 [main:54] - Getting value of type Result<Ty0>
2021-03-12 00:00:36,128 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 00:00:36,255 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:00:36,259 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:00:36,530 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:00:36,530 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 00:00:36,670 [main:67] - randomType = UInt
2021-03-12 00:00:36,790 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 00:00:36,820 [main:106] - GETTING Result<Ty0> from Simple
2021-03-12 00:00:36,827 [main:106] - GETTING Result<Ty0> from Simple
2021-03-12 00:00:36,829 [main:106] - GETTING Result<Ty0> from Any
2021-03-12 00:00:36,833 [main:106] - GETTING Result<Ty0> from Any
2021-03-12 00:00:36,834 [main:106] - GETTING Result<Ty0> from Any
2021-03-12 00:00:36,836 [main:106] - GETTING Result<Ty0> from KClass<out Any>
2021-03-12 00:00:36,844 [main:111] - Cant find and generate replacement for prope2 type Result<Ty0>
2021-03-12 00:00:36,844 [main:107] - replacing (prope6, Function0<Unit>)
2021-03-12 00:00:36,845 [main:50] - replacing prope6 Function0<Unit>
2021-03-12 00:00:36,845 [main:54] - Getting value of type Function0<Unit>
2021-03-12 00:00:36,969 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 00:00:36,972 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:00:37,099 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:00:37,103 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:00:37,372 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:00:37,372 [main:95] - GENERATED = println("pylrw")
2021-03-12 00:00:37,372 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("pylrw")}
2021-03-12 00:00:37,372 [main:61] - GENERATED IS CALL =false
2021-03-12 00:00:37,384 [main:67] - randomType = Simple
2021-03-12 00:00:37,505 [main:302] - generating value of type = Simple false depth = 0
2021-03-12 00:00:37,508 [main:112] - generating klass Simple text = @Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)
2021-03-12 00:00:37,516 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:00:37,520 [main:106] - GETTING Function0<Unit> from KClass<out Any>
2021-03-12 00:00:37,528 [main:106] - GETTING Function0<Unit> from Simple
2021-03-12 00:00:37,535 [main:106] - GETTING Function0<Unit> from Simple
2021-03-12 00:00:37,536 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:00:37,537 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:00:37,538 [main:114] - replacement of prope6 of type Function0<Unit> is { println("pylrw")}
2021-03-12 00:00:37,659 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:00:37,660 [main:66] - Compilation checking started
2021-03-12 00:00:38,101 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (Kla1())?.prope2?.hashCode()!!..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            { println("pylrw")}()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:00:38,103 [main:107] - replacing ("\n", String)
2021-03-12 00:00:38,103 [main:50] - replacing "\n" String
2021-03-12 00:00:38,103 [main:54] - Getting value of type String
2021-03-12 00:00:38,226 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:00:38,229 [main:58] - GENERATED VALUE OF TYPE String = "wcvfw"
2021-03-12 00:00:38,229 [main:61] - GENERATED IS CALL =false
2021-03-12 00:00:38,369 [main:67] - randomType = Float
2021-03-12 00:00:38,490 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:00:38,520 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@62cfcf31]
2021-03-12 00:00:38,520 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12649ad8]
2021-03-12 00:00:38,642 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:00:38,645 [main:78] - Generated call from random type = (0.39724392f).toLong().toString(-894123635)
2021-03-12 00:00:38,646 [main:106] - GETTING String from Any
2021-03-12 00:00:38,650 [main:106] - GETTING String from Any
2021-03-12 00:00:38,651 [main:106] - GETTING String from Simple
2021-03-12 00:00:38,657 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55fca0d2]]
2021-03-12 00:00:38,657 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55fca0d2]
2021-03-12 00:00:38,657 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart()
2021-03-12 00:00:38,658 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726c729e]]
2021-03-12 00:00:38,658 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726c729e]
2021-03-12 00:00:38,779 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 00:00:38,907 [main:43] - GENERATING CALL OF fun UIntRange(start: kotlin.UInt, endInclusive: kotlin.UInt): Iterable<Int> = TODO()
2021-03-12 00:00:38,911 [main:61] - WITHOUT TYPE PARAMS = fun UIntRange(start: kotlin.UInt, endInclusive: kotlin.UInt): Iterable<Int> = TODO()
2021-03-12 00:00:39,324 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 00:00:39,327 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 00:00:39,330 [main:95] - GENERATED = UIntRange(1371915883.toUInt(), 728231667.toUInt())
2021-03-12 00:00:39,330 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.slice(UIntRange(1371915883.toUInt(), 728231667.toUInt()))
2021-03-12 00:00:39,331 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]]
2021-03-12 00:00:39,331 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]
2021-03-12 00:00:39,331 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.uppercase()
2021-03-12 00:00:39,331 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25ea4871]]
2021-03-12 00:00:39,331 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25ea4871]
2021-03-12 00:00:39,453 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:00:39,581 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:00:39,585 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:00:39,854 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:00:39,857 [main:95] - GENERATED = StringBuilder(-2095752584)
2021-03-12 00:00:39,857 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removeSurrounding(StringBuilder(-2095752584))
2021-03-12 00:00:39,857 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a719753]]
2021-03-12 00:00:39,857 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a719753]
2021-03-12 00:00:39,980 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:00:39,987 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix("vbiha")
2021-03-12 00:00:39,987 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34b77bd5]]
2021-03-12 00:00:39,987 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34b77bd5]
2021-03-12 00:00:40,109 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:00:40,112 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.drop(-1613143870)
2021-03-12 00:00:40,112 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9d455b0]]
2021-03-12 00:00:40,112 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9d455b0]
2021-03-12 00:00:40,235 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:00:40,238 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.take(1706288813)
2021-03-12 00:00:40,238 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bdf8378]]
2021-03-12 00:00:40,238 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bdf8378]
2021-03-12 00:00:40,360 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:00:40,363 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:00:40,366 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.filter({a: Char -> true})
2021-03-12 00:00:40,366 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40de1f8a]]
2021-03-12 00:00:40,366 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40de1f8a]
2021-03-12 00:00:40,366 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.capitalize()
2021-03-12 00:00:40,366 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bd56c93]]
2021-03-12 00:00:40,367 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bd56c93]
2021-03-12 00:00:40,514 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 00:00:40,517 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:00:40,520 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.filterIndexed({a: Int, b: Char -> false})
2021-03-12 00:00:40,520 [main:114] - replacement of "\n" of type String is (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart()
2021-03-12 00:00:40,643 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:00:40,644 [main:66] - Compilation checking started
2021-03-12 00:00:41,269 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (Kla1())?.prope2?.hashCode()!!..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:00:41,272 [main:107] - replacing (prope2, Result<Ty0>)
2021-03-12 00:00:41,272 [main:50] - replacing prope2 Result<Ty0>
2021-03-12 00:00:41,272 [main:54] - Getting value of type Result<Ty0>
2021-03-12 00:00:41,403 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 00:00:41,533 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:00:41,537 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:00:41,813 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:00:41,813 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 00:00:41,826 [main:67] - randomType = Kla1
2021-03-12 00:00:41,948 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 00:00:41,952 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 00:00:41,969 [main:106] - GETTING Result<Ty0> from Simple
2021-03-12 00:00:41,976 [main:106] - GETTING Result<Ty0> from Any
2021-03-12 00:00:41,980 [main:106] - GETTING Result<Ty0> from Any
2021-03-12 00:00:41,982 [main:106] - GETTING Result<Ty0> from KClass<out Any>
2021-03-12 00:00:41,990 [main:106] - GETTING Result<Ty0> from Simple
2021-03-12 00:00:41,992 [main:106] - GETTING Result<Ty0> from Any
2021-03-12 00:00:41,992 [main:111] - Cant find and generate replacement for prope2 type Result<Ty0>
2021-03-12 00:00:41,992 [main:107] - replacing (x, Function1<Throwable, Unit>)
2021-03-12 00:00:41,992 [main:50] - replacing x Function1<Throwable, Unit>
2021-03-12 00:00:41,992 [main:54] - Getting value of type Function1<Throwable, Unit>
2021-03-12 00:00:42,125 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 0
2021-03-12 00:00:42,128 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:00:42,258 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:00:42,263 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:00:42,536 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:00:42,536 [main:95] - GENERATED = print("stscd")
2021-03-12 00:00:42,536 [main:58] - GENERATED VALUE OF TYPE Function1<Throwable, Unit> = {a: Throwable -> print("stscd")}
2021-03-12 00:00:42,537 [main:61] - GENERATED IS CALL =false
2021-03-12 00:00:42,680 [main:67] - randomType = Long
2021-03-12 00:00:42,804 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:00:42,837 [main:106] - GETTING Function1<Throwable, Unit> from KClass<out Any>
2021-03-12 00:00:42,846 [main:106] - GETTING Function1<Throwable, Unit> from Any
2021-03-12 00:00:42,850 [main:106] - GETTING Function1<Throwable, Unit> from Any
2021-03-12 00:00:42,851 [main:106] - GETTING Function1<Throwable, Unit> from Any
2021-03-12 00:00:42,853 [main:106] - GETTING Function1<Throwable, Unit> from Simple
2021-03-12 00:00:42,860 [main:106] - GETTING Function1<Throwable, Unit> from Simple
2021-03-12 00:00:42,860 [main:114] - replacement of x of type Function1<Throwable, Unit> is {a: Throwable -> print("stscd")}
2021-03-12 00:00:42,982 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:00:42,983 [main:66] - Compilation checking started
2021-03-12 00:00:43,625 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (Kla1())?.prope2?.hashCode()!!..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:00:43,627 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 00:00:43,628 [main:50] - replacing getOrThrow() Any?
2021-03-12 00:00:43,628 [main:54] - Getting value of type Any?
2021-03-12 00:00:43,762 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:43,763 [main:58] - GENERATED VALUE OF TYPE Any? = "xdsin"
2021-03-12 00:00:43,763 [main:61] - GENERATED IS CALL =false
2021-03-12 00:00:44,065 [main:67] - randomType = HashSet<UShort>
2021-03-12 00:00:44,186 [main:302] - generating value of type = HashSet<UShort> false depth = 0
2021-03-12 00:00:44,314 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<UShort> = TODO()
2021-03-12 00:00:44,318 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<UShort> = TODO()
2021-03-12 00:00:44,448 [main:95] - GENERATED = hashSetOf<UShort>()
2021-03-12 00:00:44,544 [main:149] - GENERATING call of type @kotlin.js.JsName public open fun toJSON(): kotlin.Any defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@24f28e00]
2021-03-12 00:00:44,544 [main:78] - Generated call from random type = (hashSetOf<UShort>()).toJSON()
2021-03-12 00:00:44,546 [main:106] - GETTING Any? from Simple
2021-03-12 00:00:44,553 [main:106] - GETTING Any? from Simple
2021-03-12 00:00:44,555 [main:106] - GETTING Any? from KClass<out Any>
2021-03-12 00:00:44,562 [main:106] - GETTING Any? from Any
2021-03-12 00:00:44,564 [main:114] - replacement of getOrThrow() of type Any? is (hashSetOf<UShort>()).toJSON()
2021-03-12 00:00:44,686 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:00:44,687 [main:66] - Compilation checking started
2021-03-12 00:00:45,097 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if (!suspend) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.(hashSetOf<UShort>()).toJSON()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (Kla1())?.prope2?.hashCode()!!..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:00:45,099 [main:107] - replacing (!suspend, Boolean)
2021-03-12 00:00:45,100 [main:50] - replacing !suspend Boolean
2021-03-12 00:00:45,100 [main:54] - Getting value of type Boolean
2021-03-12 00:00:45,221 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:45,225 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:00:45,225 [main:61] - GENERATED IS CALL =false
2021-03-12 00:00:45,238 [main:67] - randomType = Int?
2021-03-12 00:00:45,360 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:00:45,394 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62c5255b]
2021-03-12 00:00:45,518 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:00:45,522 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2bb4b203]
2021-03-12 00:00:45,522 [main:78] - Generated call from random type = (394979539)?.div(0.2309832731354714).isNaN()
2021-03-12 00:00:45,522 [main:114] - replacement of !suspend of type Boolean is (394979539)?.div(0.2309832731354714).isNaN()
2021-03-12 00:00:45,670 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:00:45,671 [main:66] - Compilation checking started
2021-03-12 00:00:46,303 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (Kla1())?.prope2?.hashCode()!!..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:00:46,305 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-12 00:00:46,306 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-12 00:00:46,306 [main:54] - Getting value of type Throwable?
2021-03-12 00:00:46,439 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 00:00:46,577 [main:43] - GENERATING CALL OF fun ArithmeticException(message: kotlin.String?): Throwable = TODO()
2021-03-12 00:00:46,581 [main:61] - WITHOUT TYPE PARAMS = fun ArithmeticException(message: kotlin.String?): Throwable = TODO()
2021-03-12 00:00:46,857 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:00:46,860 [main:95] - GENERATED = ArithmeticException("pphhw")
2021-03-12 00:00:46,860 [main:58] - GENERATED VALUE OF TYPE Throwable? = ArithmeticException("pphhw")
2021-03-12 00:00:46,860 [main:61] - GENERATED IS CALL =true
2021-03-12 00:00:46,873 [main:67] - randomType = Kla0
2021-03-12 00:00:46,997 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 00:00:47,000 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-12 00:00:47,125 [main:194] - Type params = []
2021-03-12 00:00:47,251 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 00:00:47,381 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:00:47,385 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:00:47,668 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 00:00:47,802 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:00:47,806 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:00:48,243 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-12 00:00:48,420 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 00:00:48,425 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 00:00:48,857 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 00:00:48,857 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:00:48,857 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:00:48,870 [main:106] - GETTING Throwable? from Simple
2021-03-12 00:00:48,877 [main:106] - GETTING Throwable? from Any
2021-03-12 00:00:48,880 [main:106] - GETTING Throwable? from Any
2021-03-12 00:00:48,881 [main:106] - GETTING Throwable? from Any
2021-03-12 00:00:48,882 [main:106] - GETTING Throwable? from Simple
2021-03-12 00:00:48,883 [main:106] - GETTING Throwable? from KClass<out Any>
2021-03-12 00:00:48,890 [main:114] - replacement of exceptionOrNull() of type Throwable? is ArithmeticException("pphhw")
2021-03-12 00:00:49,012 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:00:49,015 [main:107] - replacing (prope4, Int)
2021-03-12 00:00:49,015 [main:50] - replacing prope4 Int
2021-03-12 00:00:49,015 [main:54] - Getting value of type Int
2021-03-12 00:00:49,138 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:00:49,141 [main:58] - GENERATED VALUE OF TYPE Int = -552417767
2021-03-12 00:00:49,142 [main:61] - GENERATED IS CALL =false
2021-03-12 00:00:49,148 [main:67] - randomType = Int
2021-03-12 00:00:49,271 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:00:49,304 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67d8431d]
2021-03-12 00:00:49,426 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:49,427 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:00:49,550 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:49,553 [main:78] - Generated call from random type = (-1195638629).equals("tnaff").compareTo(true)
2021-03-12 00:00:49,554 [main:106] - GETTING Int from Any
2021-03-12 00:00:49,557 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]]
2021-03-12 00:00:49,558 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:00:49,683 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:49,683 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:00:49,807 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:49,811 [main:117] - GENERATED CALL = (localCaptured()).equals("ykhig").compareTo(false)
2021-03-12 00:00:49,811 [main:114] - replacement of prope4 of type Int is (-1195638629).equals("tnaff").compareTo(true)
2021-03-12 00:00:49,940 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:00:49,940 [main:66] - Compilation checking started
2021-03-12 00:00:50,533 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (Kla1())?.prope2?.hashCode()!!..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((-1195638629).equals("tnaff").compareTo(true) != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:00:50,535 [main:107] - replacing (c, Continuation<Unit>)
2021-03-12 00:00:50,535 [main:50] - replacing c Continuation<Unit>
2021-03-12 00:00:50,535 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 00:00:50,659 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 00:00:50,813 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 00:00:50,818 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 00:00:51,250 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 00:00:51,379 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:00:51,384 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:00:51,667 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 00:00:51,804 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:00:51,808 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:00:52,250 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:00:52,251 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:00:52,251 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 00:00:52,251 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 00:00:54,513 [main:67] - randomType = LinkedHashMap<UShort, Function2<LinkedHashMap<Kla5, Kla2<Long>>, MutableMap<Kla4, Long?>, LinkedHashSet<Boolean>>>?
2021-03-12 00:00:54,646 [main:302] - generating value of type = LinkedHashMap<UShort, Function2<LinkedHashMap<Kla5, Kla2<Long>>, MutableMap<Kla4, Long?>, LinkedHashSet<Boolean>>> false depth = 0
2021-03-12 00:00:54,789 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<UShort, Function2<LinkedHashMap<Kla5, Kla2<Long>>, MutableMap<Kla4, Long?>, LinkedHashSet<Boolean>>>): LkedHashMap<UShort, Function2<LkedHashMap<Kla5, Kla2<Long>>, MutableMap<Kla4, Long?>, LkedHashSet<Boolean>>> = TODO()
2021-03-12 00:00:54,794 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<UShort, Function2<LinkedHashMap<Kla5, Kla2<Long>>, MutableMap<Kla4, Long?>, LinkedHashSet<Boolean>>>): LkedHashMap<UShort, Function2<LkedHashMap<Kla5, Kla2<Long>>, MutableMap<Kla4, Long?>, LkedHashSet<Boolean>>> = TODO()
2021-03-12 00:00:54,933 [main:302] - generating value of type = Pair<UShort, Function2<LinkedHashMap<Kla5, Kla2<Long>>, MutableMap<Kla4, Long?>, LinkedHashSet<Boolean>>> false depth = 3
2021-03-12 00:00:55,078 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UShort, second: Function2<LinkedHashMap<Kla5, Kla2<Long>>, MutableMap<Kla4, Long?>, LinkedHashSet<Boolean>>): Pair<UShort, Function2<LinkedHashMap<Kla5, Kla2<Long>>, MutableMap<Kla4, Long?>, LinkedHashSet<Boolean>>> = TODO()
2021-03-12 00:00:55,082 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UShort, second: Function2<LinkedHashMap<Kla5, Kla2<Long>>, MutableMap<Kla4, Long?>, LinkedHashSet<Boolean>>): Pair<UShort, Function2<LinkedHashMap<Kla5, Kla2<Long>>, MutableMap<Kla4, Long?>, LinkedHashSet<Boolean>>> = TODO()
2021-03-12 00:00:55,224 [main:302] - generating value of type = UShort true depth = 6
2021-03-12 00:00:55,228 [main:302] - generating value of type = Function2<LinkedHashMap<Kla5, Kla2<Long>>, MutableMap<Kla4, Long?>, LinkedHashSet<Boolean>> false depth = 6
2021-03-12 00:00:55,231 [main:302] - generating value of type = LinkedHashSet<Boolean> false depth = 7
2021-03-12 00:00:55,370 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Boolean> = TODO()
2021-03-12 00:00:55,375 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Boolean> = TODO()
2021-03-12 00:00:55,519 [main:95] - GENERATED = linkedSetOf<Boolean>()
2021-03-12 00:00:55,520 [main:95] - GENERATED = Pair<UShort, Function2<LinkedHashMap<Kla5, Kla2<Long>>, MutableMap<Kla4, Long?>, LinkedHashSet<Boolean>>>(2853.toUShort(), {a: LinkedHashMap<Kla5, Kla2<Long>>, b: MutableMap<Kla4, Long?> -> linkedSetOf<Boolean>()})
2021-03-12 00:00:55,520 [main:95] - GENERATED = linkedMapOf<UShort, Function2<LinkedHashMap<Kla5, Kla2<Long>>, MutableMap<Kla4, Long?>, LinkedHashSet<Boolean>>>(Pair<UShort, Function2<LinkedHashMap<Kla5, Kla2<Long>>, MutableMap<Kla4, Long?>, LinkedHashSet<Boolean>>>(2853.toUShort(), {a: LinkedHashMap<Kla5, Kla2<Long>>, b: MutableMap<Kla4, Long?> -> linkedSetOf<Boolean>()}))
2021-03-12 00:00:55,875 [main:106] - GETTING Continuation<Unit> from Any
2021-03-12 00:00:55,881 [main:106] - GETTING Continuation<Unit> from Any
2021-03-12 00:00:55,883 [main:106] - GETTING Continuation<Unit> from Simple
2021-03-12 00:00:55,895 [main:106] - GETTING Continuation<Unit> from Simple
2021-03-12 00:00:55,897 [main:106] - GETTING Continuation<Unit> from Any
2021-03-12 00:00:55,898 [main:106] - GETTING Continuation<Unit> from KClass<out Any>
2021-03-12 00:00:55,910 [main:111] - Cant find and generate replacement for c type Continuation<Unit>
2021-03-12 00:00:55,910 [main:107] - replacing ({
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }, Unit?)
2021-03-12 00:00:55,910 [main:50] - replacing {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    } Unit?
2021-03-12 00:00:55,911 [main:54] - Getting value of type Unit?
2021-03-12 00:00:56,046 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 00:00:56,191 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:00:56,196 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:00:56,496 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 3
2021-03-12 00:00:56,500 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 00:00:56,640 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:00:56,644 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:00:56,943 [main:302] - generating value of type = Boolean true depth = 7
2021-03-12 00:00:56,946 [main:95] - GENERATED = require(true)
2021-03-12 00:00:56,947 [main:95] - GENERATED = contract({ require(true)})
2021-03-12 00:00:56,947 [main:58] - GENERATED VALUE OF TYPE Unit? = contract({ require(true)})
2021-03-12 00:00:56,947 [main:61] - GENERATED IS CALL =true
2021-03-12 00:00:56,964 [main:67] - randomType = Kla1
2021-03-12 00:00:57,101 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 00:00:57,104 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 00:00:57,124 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resume(value: T): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@2c6f2f88]
2021-03-12 00:00:57,257 [main:302] - generating value of type = T false depth = 0
2021-03-12 00:00:57,557 [main:43] - GENERATING CALL OF fun <T> maxOf(a: ULong, b: ULong, c: ULong, comparator: kotlin.Comparator<ULong>): T = TODO()
2021-03-12 00:00:57,561 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: ULong, b: ULong, c: ULong, comparator: kotlin.Comparator<ULong>): T = TODO()
2021-03-12 00:00:57,868 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 00:00:57,872 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 00:00:57,875 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 00:00:57,879 [main:302] - generating value of type = Comparator<ULong> false depth = 3
2021-03-12 00:00:58,022 [main:43] - GENERATING CALL OF fun <T> compareByDescending(selector: (ULong)->kotlin.Comparable<*>?): Comparator<ULong> = TODO()
2021-03-12 00:00:58,027 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareByDescending(selector: (ULong)->kotlin.Comparable<*>?): Comparator<ULong> = TODO()
2021-03-12 00:00:58,335 [main:302] - generating value of type = Function1<ULong, Comparable<*>?> false depth = 6
2021-03-12 00:00:58,338 [main:302] - generating value of type = Comparable<*> false depth = 7
2021-03-12 00:00:58,347 [main:95] - GENERATED = compareByDescending<ULong>({a: ULong -> '櫀'})
2021-03-12 00:00:58,347 [main:95] - GENERATED = maxOf<ULong>(5600931242228366347.toULong(), 7888517475809769413.toULong(), 4781057679037345940.toULong(), compareByDescending<ULong>({a: ULong -> '櫀'}))
2021-03-12 00:00:58,347 [main:78] - Generated call from random type = (Kla1()).resume(maxOf<ULong>(5600931242228366347.toULong(), 7888517475809769413.toULong(), 4781057679037345940.toULong(), compareByDescending<ULong>({a: ULong -> '櫀'})))
2021-03-12 00:00:58,349 [main:106] - GETTING Unit? from Simple
2021-03-12 00:00:58,362 [main:106] - GETTING Unit? from KClass<out Any>
2021-03-12 00:00:58,376 [main:106] - GETTING Unit? from Simple
2021-03-12 00:00:58,378 [main:106] - GETTING Unit? from Any
2021-03-12 00:00:58,384 [main:106] - GETTING Unit? from Any
2021-03-12 00:00:58,385 [main:106] - GETTING Unit? from Any
2021-03-12 00:00:58,385 [main:114] - replacement of {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    } of type Unit? is contract({ require(true)})
2021-03-12 00:00:58,532 [main:33] - Trying to replace BLOCK on Element(CALL_EXPRESSION)
2021-03-12 00:00:58,532 [main:66] - Compilation checking started
2021-03-12 00:00:58,539 [main:71] - Wrong syntax or breaks conditions
2021-03-12 00:00:58,539 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) contract({ require(true)})
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (Kla1())?.prope2?.hashCode()!!..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((-1195638629).equals("tnaff").compareTo(true) != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("vqhiu").and(false) && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:00:58,541 [main:107] - replacing ((local()).equals("vqhiu").and(false) && !prope5, Boolean)
2021-03-12 00:00:58,542 [main:50] - replacing (local()).equals("vqhiu").and(false) && !prope5 Boolean
2021-03-12 00:00:58,542 [main:54] - Getting value of type Boolean
2021-03-12 00:00:58,723 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:58,726 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 00:00:58,727 [main:61] - GENERATED IS CALL =false
2021-03-12 00:00:58,886 [main:67] - randomType = Double?
2021-03-12 00:00:59,020 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:00:59,077 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@214a254]
2021-03-12 00:00:59,208 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:00:59,212 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67d8431d]
2021-03-12 00:00:59,347 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:59,347 [main:78] - Generated call from random type = (0.2746150401542311)?.compareTo(42).equals("onfuh")
2021-03-12 00:00:59,349 [main:106] - GETTING Boolean from Any
2021-03-12 00:00:59,355 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]]
2021-03-12 00:00:59,355 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:00:59,488 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:59,489 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]
2021-03-12 00:00:59,622 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:59,626 [main:117] - GENERATED CALL = (local()).equals("tmgqt").xor(true)
2021-03-12 00:00:59,626 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]]
2021-03-12 00:00:59,626 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:00:59,760 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:00:59,760 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]
2021-03-12 00:00:59,895 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:00:59,898 [main:117] - GENERATED CALL = (local()).equals("khsxd").and(false)
2021-03-12 00:00:59,899 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]]
2021-03-12 00:00:59,899 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:01:00,038 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:01:00,038 [main:117] - GENERATED CALL = (local()).equals("ydmdp")
2021-03-12 00:01:00,038 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]]
2021-03-12 00:01:00,038 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:01:00,178 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:01:00,178 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-12 00:01:00,315 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:01:00,321 [main:117] - GENERATED CALL = (local()).equals("hiwwp").or(false)
2021-03-12 00:01:00,321 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]]
2021-03-12 00:01:00,321 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:01:00,463 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:01:00,463 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-12 00:01:00,604 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:01:00,604 [main:117] - GENERATED CALL = (local()).equals("mqerx").equals("jvwxj")
2021-03-12 00:01:00,604 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]]
2021-03-12 00:01:00,604 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:01:00,737 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:01:00,737 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]
2021-03-12 00:01:00,737 [main:117] - GENERATED CALL = (local()).equals("yywts").not()
2021-03-12 00:01:00,737 [main:114] - replacement of (local()).equals("vqhiu").and(false) && !prope5 of type Boolean is (local()).equals("ydmdp")
2021-03-12 00:01:00,870 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:01:00,870 [main:66] - Compilation checking started
2021-03-12 00:01:01,515 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (Kla1())?.prope2?.hashCode()!!..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((-1195638629).equals("tnaff").compareTo(true) != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:01,517 [main:107] - replacing ({
        prope2.getOrThrow()
    }, Any?)
2021-03-12 00:01:01,517 [main:50] - replacing {
        prope2.getOrThrow()
    } Any?
2021-03-12 00:01:01,517 [main:54] - Getting value of type Any?
2021-03-12 00:01:01,686 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:01:01,687 [main:58] - GENERATED VALUE OF TYPE Any? = "qsxeo"
2021-03-12 00:01:01,687 [main:61] - GENERATED IS CALL =false
2021-03-12 00:01:01,701 [main:67] - randomType = Simple
2021-03-12 00:01:01,840 [main:302] - generating value of type = Simple false depth = 0
2021-03-12 00:01:01,844 [main:112] - generating klass Simple text = @Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)
2021-03-12 00:01:01,857 [main:106] - GETTING Any? from Simple
2021-03-12 00:01:01,869 [main:106] - GETTING Any? from Simple
2021-03-12 00:01:01,869 [main:106] - GETTING Any? from Any
2021-03-12 00:01:01,874 [main:114] - replacement of {
        prope2.getOrThrow()
    } of type Any? is "qsxeo"
2021-03-12 00:01:02,011 [main:33] - Trying to replace BLOCK on Element(STRING_TEMPLATE)
2021-03-12 00:01:02,012 [main:66] - Compilation checking started
2021-03-12 00:01:02,018 [main:71] - Wrong syntax or breaks conditions
2021-03-12 00:01:02,018 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) "qsxeo"
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (Kla1())?.prope2?.hashCode()!!..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((-1195638629).equals("tnaff").compareTo(true) != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:02,021 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 00:01:02,021 [main:50] - replacing {} Function0<Unit>
2021-03-12 00:01:02,021 [main:54] - Getting value of type Function0<Unit>
2021-03-12 00:01:02,156 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 00:01:02,159 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:01:02,167 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-12 00:01:02,167 [main:61] - GENERATED IS CALL =false
2021-03-12 00:01:02,997 [main:67] - randomType = ArrayDeque<HashMap<Map<Kla0, ULong>, UShort>>
2021-03-12 00:01:03,139 [main:302] - generating value of type = ArrayDeque<HashMap<Map<Kla0, ULong>, UShort>> false depth = 0
2021-03-12 00:01:03,287 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<HashMap<Map<Kla0, ULong>, UShort>> = TODO()
2021-03-12 00:01:03,291 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<HashMap<Map<Kla0, ULong>, UShort>> = TODO()
2021-03-12 00:01:03,587 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:01:03,590 [main:95] - GENERATED = ArrayDeque<HashMap<Map<Kla0, ULong>, UShort>>(713696280)
2021-03-12 00:01:03,852 [main:106] - GETTING Function0<Unit> from KClass<out Any>
2021-03-12 00:01:03,866 [main:106] - GETTING Function0<Unit> from Simple
2021-03-12 00:01:03,879 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:01:03,885 [main:106] - GETTING Function0<Unit> from Simple
2021-03-12 00:01:03,887 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:01:03,888 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:01:03,888 [main:114] - replacement of {} of type Function0<Unit> is { println()}
2021-03-12 00:01:04,023 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:01:04,023 [main:66] - Compilation checking started
2021-03-12 00:01:04,756 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (Kla1())?.prope2?.hashCode()!!..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((-1195638629).equals("tnaff").compareTo(true) != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:04,760 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 00:01:04,760 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 00:01:04,760 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 00:01:04,924 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 00:01:04,931 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 00:01:05,117 [main:67] - randomType = Pair<Kla3, Char>
2021-03-12 00:01:05,249 [main:302] - generating value of type = Pair<Kla3, Char> false depth = 0
2021-03-12 00:01:05,389 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla3, second: Char): Pair<Kla3, Char> = TODO()
2021-03-12 00:01:05,394 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla3, second: Char): Pair<Kla3, Char> = TODO()
2021-03-12 00:01:05,532 [main:302] - generating value of type = Kla3 false depth = 3
2021-03-12 00:01:05,536 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 00:01:05,536 [main:302] - generating value of type = Char true depth = 3
2021-03-12 00:01:05,539 [main:95] - GENERATED = Pair<Kla3, Char>(Kla3(), '牮')
2021-03-12 00:01:05,554 [main:106] - GETTING EmptyCoroutineContext from Any
2021-03-12 00:01:05,559 [main:106] - GETTING EmptyCoroutineContext from Any
2021-03-12 00:01:05,560 [main:106] - GETTING EmptyCoroutineContext from Simple
2021-03-12 00:01:05,573 [main:106] - GETTING EmptyCoroutineContext from KClass<out Any>
2021-03-12 00:01:05,585 [main:106] - GETTING EmptyCoroutineContext from Any
2021-03-12 00:01:05,587 [main:106] - GETTING EmptyCoroutineContext from Simple
2021-03-12 00:01:05,587 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 00:01:05,587 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-12 00:01:05,587 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-12 00:01:05,587 [main:54] - Getting value of type String
2021-03-12 00:01:05,731 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:01:05,734 [main:58] - GENERATED VALUE OF TYPE String = "qsbcz"
2021-03-12 00:01:05,735 [main:61] - GENERATED IS CALL =false
2021-03-12 00:01:06,049 [main:67] - randomType = Long?
2021-03-12 00:01:06,181 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:01:06,240 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5027e367]
2021-03-12 00:01:06,240 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-12 00:01:06,374 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:01:06,378 [main:78] - Generated call from random type = (-6065192995240616950)?.toInt().toString(906464833)
2021-03-12 00:01:06,379 [main:106] - GETTING String from Any
2021-03-12 00:01:06,383 [main:106] - GETTING String from Simple
2021-03-12 00:01:06,393 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b71787]]
2021-03-12 00:01:06,393 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b71787]
2021-03-12 00:01:06,527 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:01:06,666 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:01:06,805 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:01:06,809 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.replaceBeforeLast('烺', "wcnys", "jgyxm")
2021-03-12 00:01:06,809 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]]
2021-03-12 00:01:06,809 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]
2021-03-12 00:01:06,809 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.uppercase()
2021-03-12 00:01:06,809 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f51d7e]]
2021-03-12 00:01:06,809 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f51d7e]
2021-03-12 00:01:06,809 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toLowerCase()
2021-03-12 00:01:06,809 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@467f48e7]]
2021-03-12 00:01:06,809 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@467f48e7]
2021-03-12 00:01:06,945 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:01:07,085 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:01:07,089 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.padStart(254475050, '')
2021-03-12 00:01:07,089 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2748ca6f]]
2021-03-12 00:01:07,089 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2748ca6f]
2021-03-12 00:01:07,225 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:01:07,369 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:01:07,373 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.substringBefore('Ἔ', "vcebm")
2021-03-12 00:01:07,373 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@270e28fd]]
2021-03-12 00:01:07,373 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@270e28fd]
2021-03-12 00:01:07,373 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.lowercase()
2021-03-12 00:01:07,373 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4632cdd]]
2021-03-12 00:01:07,374 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4632cdd]
2021-03-12 00:01:07,509 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:01:07,686 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:01:07,823 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:01:07,827 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.replace('', '﷐', true)
2021-03-12 00:01:07,827 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ddbe32e]]
2021-03-12 00:01:07,827 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ddbe32e]
2021-03-12 00:01:07,827 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.decapitalize()
2021-03-12 00:01:07,827 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7941dfad]]
2021-03-12 00:01:07,828 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7941dfad]
2021-03-12 00:01:07,960 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:01:08,102 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:01:08,106 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.substringAfterLast('戤', "almvn")
2021-03-12 00:01:08,106 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32fb11a4]]
2021-03-12 00:01:08,106 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32fb11a4]
2021-03-12 00:01:08,240 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:01:08,244 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.concat("yiwep")
2021-03-12 00:01:08,244 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.concat("yiwep")
2021-03-12 00:01:08,377 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:01:08,377 [main:66] - Compilation checking started
2021-03-12 00:01:08,830 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (Kla1())?.prope2?.hashCode()!!..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((-1195638629).equals("tnaff").compareTo(true) != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.concat("yiwep"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:08,833 [main:107] - replacing ((-1195638629).equals("tnaff").compareTo(true) != numberOfSuspensions, Boolean)
2021-03-12 00:01:08,833 [main:50] - replacing (-1195638629).equals("tnaff").compareTo(true) != numberOfSuspensions Boolean
2021-03-12 00:01:08,833 [main:54] - Getting value of type Boolean
2021-03-12 00:01:08,968 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:01:08,971 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:01:08,971 [main:61] - GENERATED IS CALL =false
2021-03-12 00:01:08,985 [main:67] - randomType = Kla0
2021-03-12 00:01:09,121 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 00:01:09,124 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-12 00:01:09,256 [main:194] - Type params = []
2021-03-12 00:01:09,391 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 00:01:09,529 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:01:09,534 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:01:09,843 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 00:01:09,992 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:01:09,997 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:01:10,461 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:01:10,461 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:01:10,476 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@59bfe29a]
2021-03-12 00:01:10,649 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:01:10,650 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-12 00:01:10,781 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:01:10,785 [main:78] - Generated call from random type = (Kla0()).equals("vueyt").or(true)
2021-03-12 00:01:10,786 [main:106] - GETTING Boolean from Any
2021-03-12 00:01:10,790 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]]
2021-03-12 00:01:10,791 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:01:10,922 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:01:10,922 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]
2021-03-12 00:01:10,922 [main:117] - GENERATED CALL = (local()).equals("xmuoq").not()
2021-03-12 00:01:10,922 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]]
2021-03-12 00:01:10,922 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:01:11,054 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:01:11,054 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]
2021-03-12 00:01:11,189 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:01:11,193 [main:117] - GENERATED CALL = (local()).equals("vymad").and(false)
2021-03-12 00:01:11,193 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]]
2021-03-12 00:01:11,193 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:01:11,329 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:01:11,329 [main:117] - GENERATED CALL = (local()).equals("hlvae")
2021-03-12 00:01:11,329 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]]
2021-03-12 00:01:11,329 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:01:11,463 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:01:11,464 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-12 00:01:11,601 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:01:11,605 [main:117] - GENERATED CALL = (local()).equals("qmrli").or(true)
2021-03-12 00:01:11,605 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]]
2021-03-12 00:01:11,605 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:01:11,739 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:01:11,739 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]
2021-03-12 00:01:11,876 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:01:11,879 [main:117] - GENERATED CALL = (local()).equals("thkct").xor(true)
2021-03-12 00:01:11,880 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]]
2021-03-12 00:01:11,880 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:01:12,012 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:01:12,013 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-12 00:01:12,144 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:01:12,144 [main:117] - GENERATED CALL = (local()).equals("vwxqk").equals("kfkam")
2021-03-12 00:01:12,144 [main:114] - replacement of (-1195638629).equals("tnaff").compareTo(true) != numberOfSuspensions of type Boolean is (local()).equals("xmuoq").not()
2021-03-12 00:01:12,274 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:01:12,275 [main:66] - Compilation checking started
2021-03-12 00:01:12,939 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + " has state-machine " +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (Kla1())?.prope2?.hashCode()!!..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:12,941 [main:107] - replacing (" has state-machine ", String)
2021-03-12 00:01:12,942 [main:50] - replacing " has state-machine " String
2021-03-12 00:01:12,942 [main:54] - Getting value of type String
2021-03-12 00:01:13,074 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:01:13,077 [main:58] - GENERATED VALUE OF TYPE String = "iflxu"
2021-03-12 00:01:13,078 [main:61] - GENERATED IS CALL =false
2021-03-12 00:01:13,232 [main:67] - randomType = UByte
2021-03-12 00:01:13,367 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 00:01:13,410 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@774cc687]
2021-03-12 00:01:13,544 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 00:01:13,547 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-12 00:01:13,715 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:01:13,718 [main:78] - Generated call from random type = (32.toUByte()).compareTo(90.toUByte()).toString(34090955)
2021-03-12 00:01:13,720 [main:106] - GETTING String from Simple
2021-03-12 00:01:13,730 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71bb39bb]]
2021-03-12 00:01:13,730 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71bb39bb]
2021-03-12 00:01:13,864 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:01:14,006 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:01:14,011 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:01:14,311 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:01:14,314 [main:95] - GENERATED = StringBuilder(-56537765)
2021-03-12 00:01:14,315 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.removeSuffix(StringBuilder(-56537765))
2021-03-12 00:01:14,315 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4632cdd]]
2021-03-12 00:01:14,315 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4632cdd]
2021-03-12 00:01:14,448 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:01:14,587 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:01:14,724 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:01:14,727 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replace('渚', '奬', true)
2021-03-12 00:01:14,727 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3f6d2d]]
2021-03-12 00:01:14,728 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3f6d2d]
2021-03-12 00:01:14,864 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:01:14,999 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:01:15,134 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:01:15,141 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn")
2021-03-12 00:01:15,141 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]]
2021-03-12 00:01:15,141 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]
2021-03-12 00:01:15,141 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.uppercase()
2021-03-12 00:01:15,141 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cd32eb5]]
2021-03-12 00:01:15,141 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cd32eb5]
2021-03-12 00:01:15,275 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:01:15,279 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceIndent("lpwff")
2021-03-12 00:01:15,279 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30ecd0aa]]
2021-03-12 00:01:15,279 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30ecd0aa]
2021-03-12 00:01:15,279 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trim()
2021-03-12 00:01:15,279 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e95deba]]
2021-03-12 00:01:15,279 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e95deba]
2021-03-12 00:01:15,415 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:01:15,418 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:01:15,422 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterNot({a: Char -> true})
2021-03-12 00:01:15,422 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ddbe32e]]
2021-03-12 00:01:15,422 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ddbe32e]
2021-03-12 00:01:15,423 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.decapitalize()
2021-03-12 00:01:15,423 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a719753]]
2021-03-12 00:01:15,423 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a719753]
2021-03-12 00:01:15,559 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:01:15,701 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:01:15,705 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:01:16,008 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:01:16,011 [main:95] - GENERATED = StringBuilder(-1125812242)
2021-03-12 00:01:16,012 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.removePrefix(StringBuilder(-1125812242))
2021-03-12 00:01:16,012 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d703db2]]
2021-03-12 00:01:16,012 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d703db2]
2021-03-12 00:01:16,141 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:01:16,145 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.takeLast(-1771079412)
2021-03-12 00:01:16,145 [main:114] - replacement of " has state-machine " of type String is ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn")
2021-03-12 00:01:16,267 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:01:16,267 [main:66] - Compilation checking started
2021-03-12 00:01:16,876 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (Kla1())?.prope2?.hashCode()!!..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:16,879 [main:107] - replacing (c, Continuation<*>)
2021-03-12 00:01:16,879 [main:50] - replacing c Continuation<*>
2021-03-12 00:01:16,879 [main:54] - Getting value of type Continuation<*>
2021-03-12 00:01:17,009 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 00:01:17,144 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 00:01:17,148 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 00:01:17,593 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 00:01:17,723 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:01:17,728 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:01:18,014 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 00:01:18,150 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:01:18,154 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:01:18,591 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:01:18,591 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:01:18,591 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 00:01:18,591 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 00:01:18,742 [main:67] - randomType = Kla5
2021-03-12 00:01:18,875 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 00:01:18,878 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:01:18,896 [main:106] - GETTING Continuation<*> from Any
2021-03-12 00:01:18,900 [main:106] - GETTING Continuation<*> from Simple
2021-03-12 00:01:18,908 [main:106] - GETTING Continuation<*> from Any
2021-03-12 00:01:18,909 [main:106] - GETTING Continuation<*> from KClass<out Any>
2021-03-12 00:01:18,918 [main:106] - GETTING Continuation<*> from Any
2021-03-12 00:01:18,919 [main:106] - GETTING Continuation<*> from Simple
2021-03-12 00:01:18,919 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 00:01:18,919 [main:107] - replacing (prope1.prope6, Function0<Unit>)
2021-03-12 00:01:18,919 [main:50] - replacing prope1.prope6 Function0<Unit>
2021-03-12 00:01:18,919 [main:54] - Getting value of type Function0<Unit>
2021-03-12 00:01:19,042 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 00:01:19,045 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:01:19,175 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:01:19,179 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:01:19,638 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:01:19,641 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:01:19,644 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:01:19,777 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:01:19,781 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:01:20,055 [main:302] - generating value of type = Any false depth = 8
2021-03-12 00:01:20,055 [main:95] - GENERATED = println("wgpyx")
2021-03-12 00:01:20,055 [main:95] - GENERATED = repeat(-763754608, {a: Int -> println("wgpyx")})
2021-03-12 00:01:20,055 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-763754608, {a: Int -> println("wgpyx")})}
2021-03-12 00:01:20,056 [main:61] - GENERATED IS CALL =false
2021-03-12 00:01:20,063 [main:67] - randomType = Int
2021-03-12 00:01:20,186 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:01:20,222 [main:106] - GETTING Function0<Unit> from Simple
2021-03-12 00:01:20,229 [main:106] - GETTING Function0<Unit> from KClass<out Any>
2021-03-12 00:01:20,237 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:01:20,241 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:01:20,242 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:01:20,243 [main:106] - GETTING Function0<Unit> from Simple
2021-03-12 00:01:20,243 [main:114] - replacement of prope1.prope6 of type Function0<Unit> is { repeat(-763754608, {a: Int -> println("wgpyx")})}
2021-03-12 00:01:20,375 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:01:20,376 [main:66] - Compilation checking started
2021-03-12 00:01:20,784 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (Kla1())?.prope2?.hashCode()!!..numberOfSuspensions) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        { repeat(-763754608, {a: Int -> println("wgpyx")})} = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:20,787 [main:107] - replacing ((Kla1())?.prope2?.hashCode()!!..numberOfSuspensions, IntRange)
2021-03-12 00:01:20,787 [main:50] - replacing (Kla1())?.prope2?.hashCode()!!..numberOfSuspensions IntRange
2021-03-12 00:01:20,787 [main:54] - Getting value of type IntRange
2021-03-12 00:01:20,912 [main:302] - generating value of type = IntRange false depth = 0
2021-03-12 00:01:21,042 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 00:01:21,046 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 00:01:21,467 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:01:21,470 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:01:21,473 [main:95] - GENERATED = IntRange(-105199641, 1572150821)
2021-03-12 00:01:21,473 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(-105199641, 1572150821)
2021-03-12 00:01:21,473 [main:61] - GENERATED IS CALL =true
2021-03-12 00:01:21,629 [main:67] - randomType = Sequence<Int>
2021-03-12 00:01:21,630 [main:106] - GETTING IntRange from Any
2021-03-12 00:01:21,634 [main:106] - GETTING IntRange from KClass<out Any>
2021-03-12 00:01:21,642 [main:106] - GETTING IntRange from Simple
2021-03-12 00:01:21,649 [main:106] - GETTING IntRange from Any
2021-03-12 00:01:21,650 [main:106] - GETTING IntRange from Simple
2021-03-12 00:01:21,650 [main:106] - GETTING IntRange from Any
2021-03-12 00:01:21,650 [main:114] - replacement of (Kla1())?.prope2?.hashCode()!!..numberOfSuspensions of type IntRange is IntRange(-105199641, 1572150821)
2021-03-12 00:01:21,774 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:01:21,775 [main:66] - Compilation checking started
2021-03-12 00:01:22,386 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1572150821)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:22,388 [main:107] - replacing (prope6, Function0<Unit>)
2021-03-12 00:01:22,389 [main:50] - replacing prope6 Function0<Unit>
2021-03-12 00:01:22,389 [main:54] - Getting value of type Function0<Unit>
2021-03-12 00:01:22,521 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 00:01:22,525 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:01:22,690 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:01:22,694 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:01:23,126 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:01:23,130 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:01:23,133 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:01:23,275 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:01:23,280 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:01:23,560 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:01:23,563 [main:95] - GENERATED = check(false)
2021-03-12 00:01:23,563 [main:95] - GENERATED = repeat(348700875, {a: Int -> check(false)})
2021-03-12 00:01:23,563 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(348700875, {a: Int -> check(false)})}
2021-03-12 00:01:23,563 [main:61] - GENERATED IS CALL =false
2021-03-12 00:01:23,707 [main:67] - randomType = Byte
2021-03-12 00:01:23,833 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:01:23,867 [main:106] - GETTING Function0<Unit> from KClass<out Any>
2021-03-12 00:01:23,876 [main:106] - GETTING Function0<Unit> from Simple
2021-03-12 00:01:23,883 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:01:23,886 [main:106] - GETTING Function0<Unit> from Simple
2021-03-12 00:01:23,888 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:01:23,889 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:01:23,889 [main:114] - replacement of prope6 of type Function0<Unit> is { repeat(348700875, {a: Int -> check(false)})}
2021-03-12 00:01:24,012 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:01:24,012 [main:66] - Compilation checking started
2021-03-12 00:01:24,440 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        { repeat(348700875, {a: Int -> check(false)})} = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1572150821)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:24,442 [main:107] - replacing (prope2.getOrThrow(), Any?)
2021-03-12 00:01:24,442 [main:50] - replacing prope2.getOrThrow() Any?
2021-03-12 00:01:24,442 [main:54] - Getting value of type Any?
2021-03-12 00:01:24,566 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:01:24,567 [main:58] - GENERATED VALUE OF TYPE Any? = "fvnrl"
2021-03-12 00:01:24,567 [main:61] - GENERATED IS CALL =false
2021-03-12 00:01:25,195 [main:67] - randomType = Triple<Kla4, Array<String>, LinkedHashSet<Byte>>
2021-03-12 00:01:25,319 [main:302] - generating value of type = Triple<Kla4, Array<String>, LinkedHashSet<Byte>> false depth = 0
2021-03-12 00:01:25,451 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla4, second: Array<String>, third: LinkedHashSet<Byte>): Triple<Kla4, Array<String>, LinkedHashSet<Byte>> = TODO()
2021-03-12 00:01:25,456 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla4, second: Array<String>, third: LinkedHashSet<Byte>): Triple<Kla4, Array<String>, LinkedHashSet<Byte>> = TODO()
2021-03-12 00:01:25,619 [main:302] - generating value of type = Kla4 false depth = 3
2021-03-12 00:01:25,623 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1572150821)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 00:01:25,623 [main:302] - generating value of type = Array<String> false depth = 3
2021-03-12 00:01:25,752 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Strg> = TODO()
2021-03-12 00:01:25,757 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Strg> = TODO()
2021-03-12 00:01:25,887 [main:95] - GENERATED = emptyArray<String>()
2021-03-12 00:01:25,887 [main:302] - generating value of type = LinkedHashSet<Byte> false depth = 3
2021-03-12 00:01:26,017 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Byte> = TODO()
2021-03-12 00:01:26,021 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Byte> = TODO()
2021-03-12 00:01:26,153 [main:95] - GENERATED = linkedSetOf<Byte>()
2021-03-12 00:01:26,153 [main:95] - GENERATED = Triple<Kla4, Array<String>, LinkedHashSet<Byte>>(Kla4(), emptyArray<String>(), linkedSetOf<Byte>())
2021-03-12 00:01:26,174 [main:149] - GENERATING call of type @kotlin.js.JsName public open fun toJSON(): kotlin.Any defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@2b246e81]
2021-03-12 00:01:26,174 [main:78] - Generated call from random type = (Triple<Kla4, Array<String>, LinkedHashSet<Byte>>(Kla4(), emptyArray<String>(), linkedSetOf<Byte>())).third.toJSON()
2021-03-12 00:01:26,176 [main:106] - GETTING Any? from Simple
2021-03-12 00:01:26,182 [main:106] - GETTING Any? from Any
2021-03-12 00:01:26,184 [main:114] - replacement of prope2.getOrThrow() of type Any? is (Triple<Kla4, Array<String>, LinkedHashSet<Byte>>(Kla4(), emptyArray<String>(), linkedSetOf<Byte>())).third.toJSON()
2021-03-12 00:01:26,306 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:01:26,307 [main:66] - Compilation checking started
2021-03-12 00:01:26,765 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = (Triple<Kla4, Array<String>, LinkedHashSet<Byte>>(Kla4(), emptyArray<String>(), linkedSetOf<Byte>())).third.toJSON()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1572150821)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:26,767 [main:107] - replacing (prope4, Int)
2021-03-12 00:01:26,768 [main:50] - replacing prope4 Int
2021-03-12 00:01:26,768 [main:54] - Getting value of type Int
2021-03-12 00:01:26,901 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:01:26,905 [main:58] - GENERATED VALUE OF TYPE Int = 66623382
2021-03-12 00:01:26,905 [main:61] - GENERATED IS CALL =false
2021-03-12 00:01:27,212 [main:67] - randomType = ArrayDeque<Simple?>
2021-03-12 00:01:27,337 [main:302] - generating value of type = ArrayDeque<Simple?> false depth = 0
2021-03-12 00:01:27,469 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Simple?> = TODO()
2021-03-12 00:01:27,473 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Simple?> = TODO()
2021-03-12 00:01:27,749 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:01:27,753 [main:95] - GENERATED = ArrayDeque<Simple?>(918011210)
2021-03-12 00:01:27,869 [main:78] - Generated call from random type = (ArrayDeque<Simple?>(918011210)).size
2021-03-12 00:01:27,870 [main:106] - GETTING Int from Any
2021-03-12 00:01:27,872 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]]
2021-03-12 00:01:27,873 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:01:28,004 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:01:28,005 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:01:28,130 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:01:28,134 [main:117] - GENERATED CALL = (localCaptured()).equals("ehqek").compareTo(false)
2021-03-12 00:01:28,135 [main:114] - replacement of prope4 of type Int is (localCaptured()).equals("ehqek").compareTo(false)
2021-03-12 00:01:28,260 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:01:28,261 [main:66] - Compilation checking started
2021-03-12 00:01:28,702 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ""

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        (localCaptured()).equals("ehqek").compareTo(false) = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1572150821)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:28,705 [main:107] - replacing ("", String)
2021-03-12 00:01:28,705 [main:50] - replacing "" String
2021-03-12 00:01:28,705 [main:54] - Getting value of type String
2021-03-12 00:01:28,829 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:01:28,833 [main:58] - GENERATED VALUE OF TYPE String = "nmlia"
2021-03-12 00:01:28,833 [main:61] - GENERATED IS CALL =false
2021-03-12 00:01:28,846 [main:67] - randomType = Kla1
2021-03-12 00:01:28,970 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 00:01:28,973 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 00:01:28,987 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@51623da1]
2021-03-12 00:01:28,987 [main:78] - Generated call from random type = (Kla1()).prope2?.toString()!!
2021-03-12 00:01:28,988 [main:106] - GETTING String from Simple
2021-03-12 00:01:28,994 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@419cb17]]
2021-03-12 00:01:28,994 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@419cb17]
2021-03-12 00:01:29,119 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:01:29,247 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:01:29,380 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:01:29,383 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('檤', '翡', true)
2021-03-12 00:01:29,383 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@788dfd0b]]
2021-03-12 00:01:29,383 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@788dfd0b]
2021-03-12 00:01:29,517 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:01:29,644 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:01:29,647 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.substringBeforeLast('㒠', "ffbfy")
2021-03-12 00:01:29,647 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dc46393]]
2021-03-12 00:01:29,647 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dc46393]
2021-03-12 00:01:29,772 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:01:29,776 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.prependIndent("pvjzv")
2021-03-12 00:01:29,776 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@742bca8e]]
2021-03-12 00:01:29,776 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@742bca8e]
2021-03-12 00:01:29,776 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.toUpperCase()
2021-03-12 00:01:29,776 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ddbe32e]]
2021-03-12 00:01:29,776 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ddbe32e]
2021-03-12 00:01:29,776 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.decapitalize()
2021-03-12 00:01:29,776 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@78fb2a59]]
2021-03-12 00:01:29,776 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@78fb2a59]
2021-03-12 00:01:29,901 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:01:29,902 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.plus("zrrvw")
2021-03-12 00:01:29,902 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f2eeae5]]
2021-03-12 00:01:29,902 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f2eeae5]
2021-03-12 00:01:30,025 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:01:30,154 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:01:30,157 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.removeRange(-1525030938, -260391098)
2021-03-12 00:01:30,157 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e73de07]]
2021-03-12 00:01:30,157 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e73de07]
2021-03-12 00:01:30,283 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:01:30,410 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:01:30,413 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padEnd(-1195732203, '')
2021-03-12 00:01:30,413 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d]]
2021-03-12 00:01:30,413 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
2021-03-12 00:01:30,413 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30ecd0aa]]
2021-03-12 00:01:30,414 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30ecd0aa]
2021-03-12 00:01:30,414 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trim()
2021-03-12 00:01:30,414 [main:114] - replacement of "" of type String is ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
2021-03-12 00:01:30,536 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:01:30,536 [main:66] - Compilation checking started
2021-03-12 00:01:31,156 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1572150821)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:31,159 [main:107] - replacing (prope2, Result<Ty0>)
2021-03-12 00:01:31,159 [main:50] - replacing prope2 Result<Ty0>
2021-03-12 00:01:31,159 [main:54] - Getting value of type Result<Ty0>
2021-03-12 00:01:31,284 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 00:01:31,416 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:01:31,421 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:01:31,733 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:01:31,733 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 00:01:31,747 [main:67] - randomType = Kla1
2021-03-12 00:01:31,872 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 00:01:31,875 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 00:01:31,890 [main:106] - GETTING Result<Ty0> from Simple
2021-03-12 00:01:31,898 [main:106] - GETTING Result<Ty0> from Any
2021-03-12 00:01:31,902 [main:106] - GETTING Result<Ty0> from Simple
2021-03-12 00:01:31,903 [main:106] - GETTING Result<Ty0> from Any
2021-03-12 00:01:31,905 [main:106] - GETTING Result<Ty0> from Any
2021-03-12 00:01:31,907 [main:106] - GETTING Result<Ty0> from KClass<out Any>
2021-03-12 00:01:31,914 [main:111] - Cant find and generate replacement for prope2 type Result<Ty0>
2021-03-12 00:01:31,914 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 00:01:31,914 [main:50] - replacing getOrThrow() Any?
2021-03-12 00:01:31,914 [main:54] - Getting value of type Any?
2021-03-12 00:01:32,039 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:01:32,039 [main:58] - GENERATED VALUE OF TYPE Any? = "yjika"
2021-03-12 00:01:32,039 [main:61] - GENERATED IS CALL =false
2021-03-12 00:01:32,185 [main:67] - randomType = UShort
2021-03-12 00:01:32,312 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 00:01:32,343 [main:106] - GETTING Any? from Simple
2021-03-12 00:01:32,349 [main:106] - GETTING Any? from Any
2021-03-12 00:01:32,351 [main:114] - replacement of getOrThrow() of type Any? is local()
2021-03-12 00:01:32,476 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:01:32,476 [main:66] - Compilation checking started
2021-03-12 00:01:32,921 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.local()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1572150821)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:32,923 [main:107] - replacing (0, Int)
2021-03-12 00:01:32,923 [main:50] - replacing 0 Int
2021-03-12 00:01:32,923 [main:54] - Getting value of type Int
2021-03-12 00:01:33,048 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:01:33,051 [main:58] - GENERATED VALUE OF TYPE Int = 334160728
2021-03-12 00:01:33,051 [main:61] - GENERATED IS CALL =false
2021-03-12 00:01:33,204 [main:67] - randomType = Double?
2021-03-12 00:01:33,330 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:01:33,365 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5027e367]
2021-03-12 00:01:33,365 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5c15e5f7]
2021-03-12 00:01:33,490 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:01:33,494 [main:78] - Generated call from random type = (0.30047387029705996)?.toInt().and(1171700059)
2021-03-12 00:01:33,495 [main:106] - GETTING Int from Simple
2021-03-12 00:01:33,501 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4583dd64]]
2021-03-12 00:01:33,502 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4583dd64]
2021-03-12 00:01:33,627 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:01:33,755 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:01:33,758 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("mgtud", false)
2021-03-12 00:01:33,758 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9e6aba]]
2021-03-12 00:01:33,758 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9e6aba]
2021-03-12 00:01:33,759 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.toInt()
2021-03-12 00:01:33,759 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@59239f3d], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4e18e7b3]]
2021-03-12 00:01:33,759 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.length
2021-03-12 00:01:33,759 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]]
2021-03-12 00:01:33,759 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@42904c]
2021-03-12 00:01:33,885 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:01:33,885 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:01:34,011 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:01:34,014 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals("srwgv").compareTo(false)
2021-03-12 00:01:34,014 [main:114] - replacement of 0 of type Int is 334160728
2021-03-12 00:01:34,139 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 00:01:34,139 [main:66] - Compilation checking started
2021-03-12 00:01:34,758 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1572150821)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:34,761 [main:107] - replacing (prope2.getOrThrow(), Any?)
2021-03-12 00:01:34,761 [main:50] - replacing prope2.getOrThrow() Any?
2021-03-12 00:01:34,761 [main:54] - Getting value of type Any?
2021-03-12 00:01:34,896 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:01:34,896 [main:58] - GENERATED VALUE OF TYPE Any? = "bgxrn"
2021-03-12 00:01:34,896 [main:61] - GENERATED IS CALL =false
2021-03-12 00:01:35,194 [main:67] - randomType = Kla5?
2021-03-12 00:01:35,318 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 00:01:35,322 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:01:35,339 [main:106] - GETTING Any? from Any
2021-03-12 00:01:35,341 [main:114] - replacement of prope2.getOrThrow() of type Any? is "bgxrn"
2021-03-12 00:01:35,466 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 00:01:35,466 [main:66] - Compilation checking started
2021-03-12 00:01:36,070 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { false} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1572150821)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:36,203 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 00:01:36,327 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:01:36,327 [main:66] - Compilation checking started
2021-03-12 00:01:36,911 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1572150821)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:36,912 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 00:01:37,039 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 00:01:37,039 [main:66] - Compilation checking started
2021-03-12 00:01:37,455 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> prope5}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1572150821)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:37,456 [main:141] - TRYING TO REPLACE CONSTANT '괟'
2021-03-12 00:01:37,581 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-12 00:01:37,581 [main:66] - Compilation checking started
2021-03-12 00:01:38,199 [main:141] - TRYING TO REPLACE CONSTANT 'ੱ'
2021-03-12 00:01:38,325 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-12 00:01:38,326 [main:66] - Compilation checking started
2021-03-12 00:01:38,920 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 00:01:39,051 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(IS_EXPRESSION)
2021-03-12 00:01:39,052 [main:66] - Compilation checking started
2021-03-12 00:01:39,471 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1572150821)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(336904189) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', c !is CoroutineStackFrame) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:39,471 [main:141] - TRYING TO REPLACE CONSTANT 336904189
2021-03-12 00:01:39,596 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 00:01:39,596 [main:66] - Compilation checking started
2021-03-12 00:01:40,190 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1572150821)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:40,190 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 00:01:40,316 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 00:01:40,317 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 00:01:40,441 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(IS_EXPRESSION)
2021-03-12 00:01:40,442 [main:66] - Compilation checking started
2021-03-12 00:01:40,871 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(c !is CoroutineStackFrame)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1572150821)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:40,871 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 00:01:41,021 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 00:01:41,022 [main:66] - Compilation checking started
2021-03-12 00:01:41,447 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('?').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(isNaN())

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1572150821)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:41,447 [main:141] - TRYING TO REPLACE CONSTANT null
2021-03-12 00:01:41,573 [main:33] - Trying to replace Element(NULL) on Element(NULL)
2021-03-12 00:01:41,573 [main:66] - Compilation checking started
2021-03-12 00:01:42,171 [main:141] - TRYING TO REPLACE CONSTANT '?'
2021-03-12 00:01:42,296 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-12 00:01:42,297 [main:66] - Compilation checking started
2021-03-12 00:01:42,871 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(1081896374)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1572150821)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:42,871 [main:141] - TRYING TO REPLACE CONSTANT 1081896374
2021-03-12 00:01:43,007 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:01:43,007 [main:66] - Compilation checking started
2021-03-12 00:01:43,595 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require(false)}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1572150821)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:43,595 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 00:01:43,720 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:01:43,720 [main:66] - Compilation checking started
2021-03-12 00:01:44,366 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1572150821)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:44,367 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 00:01:44,492 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 00:01:44,493 [main:66] - Compilation checking started
2021-03-12 00:01:44,918 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1572150821)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", xor(false))
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:44,918 [main:141] - TRYING TO REPLACE CONSTANT 394979539
2021-03-12 00:01:45,047 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 00:01:45,048 [main:66] - Compilation checking started
2021-03-12 00:01:45,461 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((prope4)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1572150821)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:45,462 [main:141] - TRYING TO REPLACE CONSTANT 0.2309832731354714
2021-03-12 00:01:45,588 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 00:01:45,589 [main:66] - Compilation checking started
2021-03-12 00:01:46,014 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(div(0.2309832731354714)).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, 1523211322, "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1572150821)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:46,015 [main:141] - TRYING TO REPLACE CONSTANT 1523211322
2021-03-12 00:01:46,142 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:01:46,143 [main:66] - Compilation checking started
2021-03-12 00:01:46,754 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1572150821)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:46,755 [main:141] - TRYING TO REPLACE CONSTANT 669730402
2021-03-12 00:01:46,893 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 00:01:46,893 [main:66] - Compilation checking started
2021-03-12 00:01:47,331 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(prope4, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1572150821)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:47,332 [main:141] - TRYING TO REPLACE CONSTANT 1572150821
2021-03-12 00:01:47,482 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 00:01:47,483 [main:66] - Compilation checking started
2021-03-12 00:01:48,087 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-105199641, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:48,087 [main:141] - TRYING TO REPLACE CONSTANT 105199641
2021-03-12 00:01:48,220 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 00:01:48,220 [main:66] - Compilation checking started
2021-03-12 00:01:48,815 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:48,815 [main:41] - AFTER TRY 1 res = import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:01:49,074 [main:112] - generating klass Simple text = @Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)
2021-03-12 00:01:49,074 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}
2021-03-12 00:01:49,202 [main:194] - Type params = []
2021-03-12 00:01:49,330 [main:302] - generating value of type = CoroutineContext false depth = 1
2021-03-12 00:01:49,463 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:01:49,468 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:01:49,770 [main:302] - generating value of type = Key<*> false depth = 4
2021-03-12 00:01:49,912 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:01:49,917 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:01:50,370 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:01:50,370 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:01:50,371 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 00:01:50,371 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 00:01:51,143 [main:302] - generating value of type = Kla5 false depth = 1
2021-03-12 00:01:51,147 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:01:51,147 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 00:01:51,148 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 00:01:51,148 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:01:51,148 [main:112] - generating klass A text = class A(@Simple("OK") val z: String)
2021-03-12 00:01:51,148 [main:112] - generating klass A text = class A(@Simple("K") val z: String) {
        val x = z
    }
2021-03-12 00:01:51,148 [main:112] - generating klass null text = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}
2021-03-12 00:01:51,148 [main:112] - generating klass null text = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}
2021-03-12 00:01:51,148 [main:112] - generating klass Kla6 text = companion object Kla6 : Kla0()
2021-03-12 00:01:51,433 [main:43] - GENERATING CALL OF suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}
2021-03-12 00:01:51,436 [main:61] - WITHOUT TYPE PARAMS = suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}
2021-03-12 00:01:51,584 [main:302] - generating value of type = String true depth = 1
2021-03-12 00:01:51,589 [main:95] - GENERATED = fu0("wfstp")
2021-03-12 00:01:51,730 [main:43] - GENERATING CALL OF suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}
2021-03-12 00:01:51,734 [main:61] - WITHOUT TYPE PARAMS = suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}
2021-03-12 00:01:51,872 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:01:51,876 [main:95] - GENERATED = fu1(false)
2021-03-12 00:01:52,004 [main:43] - GENERATING CALL OF fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}
2021-03-12 00:01:52,008 [main:61] - WITHOUT TYPE PARAMS = fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}
2021-03-12 00:01:52,303 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 1
2021-03-12 00:01:52,306 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 00:01:52,441 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:01:52,446 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:01:52,889 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 00:01:52,893 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-12 00:01:52,896 [main:302] - generating value of type = Any false depth = 6
2021-03-12 00:01:52,897 [main:95] - GENERATED = require(true, { "alujs"})
2021-03-12 00:01:52,897 [main:95] - GENERATED = fu2({ require(true, { "alujs"})})
2021-03-12 00:01:53,023 [main:43] - GENERATING CALL OF fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}
2021-03-12 00:01:53,043 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu3(x: (Simple) -> Unit): Continuation<Simple> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}
2021-03-12 00:01:53,333 [main:302] - generating value of type = Function1<Simple, Unit> false depth = 1
2021-03-12 00:01:53,337 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 00:01:53,514 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:01:53,519 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:01:53,822 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:01:53,822 [main:95] - GENERATED = print("jkaqk")
2021-03-12 00:01:53,824 [main:95] - GENERATED = fu3<Simple>({a: Simple -> print("jkaqk")})
2021-03-12 00:01:53,952 [main:43] - GENERATING CALL OF fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}
2021-03-12 00:01:53,956 [main:61] - WITHOUT TYPE PARAMS = fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}
2021-03-12 00:01:54,248 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 1
2021-03-12 00:01:54,252 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 00:01:54,385 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:01:54,390 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:01:54,832 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 00:01:54,836 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-12 00:01:54,840 [main:302] - generating value of type = Any false depth = 6
2021-03-12 00:01:54,840 [main:95] - GENERATED = check(true, { "mjsep"})
2021-03-12 00:01:54,840 [main:95] - GENERATED = fu4({a: Throwable -> check(true, { "mjsep"})})
2021-03-12 00:01:54,994 [main:43] - Try №1
2021-03-12 00:02:01,430 [main:48] - Already checked
2021-03-12 00:02:03,788 [main:69] - Trying to insert fun fu21(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
2021-03-12 00:02:03,879 [main:66] - Compilation checking started
2021-03-12 00:02:05,146 [main:103] - Trying to change 184 nodes
2021-03-12 00:02:05,146 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 00:02:05,147 [main:50] - replacing getOrThrow() Any?
2021-03-12 00:02:05,147 [main:54] - Getting value of type Any?
2021-03-12 00:02:05,331 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:02:05,331 [main:58] - GENERATED VALUE OF TYPE Any? = "opfji"
2021-03-12 00:02:05,331 [main:61] - GENERATED IS CALL =false
2021-03-12 00:02:05,344 [main:67] - randomType = Boolean
2021-03-12 00:02:05,518 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:02:05,537 [main:106] - GETTING Any? from Simple
2021-03-12 00:02:05,544 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 00:02:05,560 [main:106] - GETTING Any? from Boolean
2021-03-12 00:02:05,568 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 00:02:05,578 [main:106] - GETTING Any? from String
2021-03-12 00:02:05,595 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 00:02:05,601 [main:106] - GETTING Any? from Any
2021-03-12 00:02:05,603 [main:114] - replacement of getOrThrow() of type Any? is local()
2021-03-12 00:02:05,775 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:02:05,775 [main:66] - Compilation checking started
2021-03-12 00:02:06,347 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 0
    suspend fun fu16(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if (prope12 != "-24") return "fail 1: $prope12"
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.exceptionOrNull()?.let(x)
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.local()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu22() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope17 = {
            prope9.prope16 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:02:06,349 [main:107] - replacing ("fail 1: $prope12", String)
2021-03-12 00:02:06,351 [main:50] - replacing "fail 1: $prope12" String
2021-03-12 00:02:06,351 [main:54] - Getting value of type String
2021-03-12 00:02:06,526 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:02:06,532 [main:58] - GENERATED VALUE OF TYPE String = "qutqf"
2021-03-12 00:02:06,532 [main:61] - GENERATED IS CALL =false
2021-03-12 00:02:07,475 [main:67] - randomType = Array<Function1<Int?, Char>>?
2021-03-12 00:02:07,651 [main:302] - generating value of type = Array<Function1<Int?, Char>> false depth = 0
2021-03-12 00:02:07,839 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Function1<Int?, Char>> = TODO()
2021-03-12 00:02:07,847 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Function1<Int?, Char>> = TODO()
2021-03-12 00:02:08,035 [main:95] - GENERATED = emptyArray<Function1<Int?, Char>>()
2021-03-12 00:02:08,055 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@48d7aa61]
2021-03-12 00:02:08,056 [main:78] - Generated call from random type = (emptyArray<Function1<Int?, Char>>())?.contentToString()
2021-03-12 00:02:08,056 [main:114] - replacement of "fail 1: $prope12" of type String is (emptyArray<Function1<Int?, Char>>())?.contentToString()
2021-03-12 00:02:08,231 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 00:02:08,231 [main:66] - Compilation checking started
2021-03-12 00:02:09,091 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 0
    suspend fun fu16(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if (prope12 != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.exceptionOrNull()?.let(x)
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu22() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope17 = {
            prope9.prope16 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:02:09,093 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15, String)
2021-03-12 00:02:09,094 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15 String
2021-03-12 00:02:09,094 [main:54] - Getting value of type String
2021-03-12 00:02:09,275 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:02:09,281 [main:58] - GENERATED VALUE OF TYPE String = "tzevx"
2021-03-12 00:02:09,282 [main:61] - GENERATED IS CALL =false
2021-03-12 00:02:09,505 [main:67] - randomType = Byte
2021-03-12 00:02:09,683 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:02:09,720 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f929571]
2021-03-12 00:02:09,905 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:02:09,912 [main:78] - Generated call from random type = (-85).toString(-692622053)
2021-03-12 00:02:09,913 [main:106] - GETTING String from Continuation<Any?>
2021-03-12 00:02:09,923 [main:106] - GETTING String from Boolean
2021-03-12 00:02:09,933 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]]
2021-03-12 00:02:09,933 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:02:10,111 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:02:10,118 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-12 00:02:10,296 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:02:10,303 [main:117] - GENERATED CALL = (Kla4().prope5).compareTo(true).toString(-1097021658)
2021-03-12 00:02:10,303 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15 of type String is (-85).toString(-692622053)
2021-03-12 00:02:10,482 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:02:10,482 [main:66] - Compilation checking started
2021-03-12 00:02:11,386 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 0
    suspend fun fu16(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if (prope12 != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.exceptionOrNull()?.let(x)
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu22() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope17 = {
            prope9.prope16 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:02:11,388 [main:107] - replacing (prope12, String)
2021-03-12 00:02:11,389 [main:50] - replacing prope12 String
2021-03-12 00:02:11,389 [main:54] - Getting value of type String
2021-03-12 00:02:11,578 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:02:11,585 [main:58] - GENERATED VALUE OF TYPE String = "ooawc"
2021-03-12 00:02:11,585 [main:61] - GENERATED IS CALL =false
2021-03-12 00:02:12,953 [main:67] - randomType = ArrayList<LinkedHashMap<Kla5?, Float>>?
2021-03-12 00:02:13,129 [main:302] - generating value of type = ArrayList<LinkedHashMap<Kla5?, Float>> false depth = 0
2021-03-12 00:02:13,317 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<LkedHashMap<Kla5?, Float>> = TODO()
2021-03-12 00:02:13,326 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<LkedHashMap<Kla5?, Float>> = TODO()
2021-03-12 00:02:13,534 [main:95] - GENERATED = arrayListOf<LinkedHashMap<Kla5?, Float>>()
2021-03-12 00:02:13,716 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@658be57]
2021-03-12 00:02:13,716 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@48d7aa61]
2021-03-12 00:02:13,717 [main:78] - Generated call from random type = (arrayListOf<LinkedHashMap<Kla5?, Float>>())?.toArray().contentToString()
2021-03-12 00:02:13,718 [main:106] - GETTING String from Simple
2021-03-12 00:02:13,724 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]]
2021-03-12 00:02:13,724 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]
2021-03-12 00:02:13,724 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.uppercase()
2021-03-12 00:02:13,724 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@406dcd44]]
2021-03-12 00:02:13,725 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@406dcd44]
2021-03-12 00:02:13,913 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:02:14,104 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:02:14,111 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.replaceBefore('궺', fu0("wfstp"), "gtuzh")
2021-03-12 00:02:14,111 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@160250e6]]
2021-03-12 00:02:14,111 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@160250e6]
2021-03-12 00:02:14,290 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:02:14,297 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.dropLast(-1063088595)
2021-03-12 00:02:14,297 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b71787]]
2021-03-12 00:02:14,298 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b71787]
2021-03-12 00:02:14,477 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:02:14,484 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.replaceBeforeLast('蝌', fu0("wfstp"), var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
2021-03-12 00:02:14,484 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e95deba]]
2021-03-12 00:02:14,484 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e95deba]
2021-03-12 00:02:14,699 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:02:14,706 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:02:14,713 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> false})
2021-03-12 00:02:14,713 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25ea4871]]
2021-03-12 00:02:14,713 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25ea4871]
2021-03-12 00:02:14,892 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:02:14,903 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb")
2021-03-12 00:02:14,903 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f51d7e]]
2021-03-12 00:02:14,903 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f51d7e]
2021-03-12 00:02:14,903 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.toLowerCase()
2021-03-12 00:02:14,903 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c69b29d]]
2021-03-12 00:02:14,903 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c69b29d]
2021-03-12 00:02:15,087 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:02:15,094 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:02:15,101 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.dropWhile({a: Char -> false})
2021-03-12 00:02:15,101 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@419cb17]]
2021-03-12 00:02:15,101 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@419cb17]
2021-03-12 00:02:15,280 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:02:15,473 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:02:15,480 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.replaceFirst('', 'ꂿ', Kla4().prope5)
2021-03-12 00:02:15,480 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55fca0d2]]
2021-03-12 00:02:15,480 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55fca0d2]
2021-03-12 00:02:15,480 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.trimStart()
2021-03-12 00:02:15,480 [main:114] - replacement of prope12 of type String is (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb")
2021-03-12 00:02:15,660 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:02:15,661 [main:66] - Compilation checking started
2021-03-12 00:02:16,510 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 0
    suspend fun fu16(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.exceptionOrNull()?.let(x)
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu22() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope17 = {
            prope9.prope16 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:02:16,513 [main:107] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-12 00:02:16,515 [main:50] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-12 00:02:16,515 [main:54] - Getting value of type Function0<Boolean>
2021-03-12 00:02:16,725 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-12 00:02:16,732 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:02:16,739 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-12 00:02:16,739 [main:61] - GENERATED IS CALL =false
2021-03-12 00:02:16,767 [main:67] - randomType = Kla1
2021-03-12 00:02:16,945 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 00:02:16,952 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 00:02:16,967 [main:106] - GETTING Function0<Boolean> from Any
2021-03-12 00:02:16,971 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 00:02:16,988 [main:106] - GETTING Function0<Boolean> from EmptyCoroutineContext
2021-03-12 00:02:17,002 [main:106] - GETTING Function0<Boolean> from Any
2021-03-12 00:02:17,003 [main:106] - GETTING Function0<Boolean> from CoroutineContext
2021-03-12 00:02:17,010 [main:106] - GETTING Function0<Boolean> from Continuation<Simple>
2021-03-12 00:02:17,017 [main:106] - GETTING Function0<Boolean> from Any?
2021-03-12 00:02:17,020 [main:106] - GETTING Function0<Boolean> from KClass<out Any>
2021-03-12 00:02:17,029 [main:106] - GETTING Function0<Boolean> from Any
2021-03-12 00:02:17,031 [main:106] - GETTING Function0<Boolean> from Boolean
2021-03-12 00:02:17,040 [main:106] - GETTING Function0<Boolean> from Simple
2021-03-12 00:02:17,047 [main:106] - GETTING Function0<Boolean> from CoroutineContext
2021-03-12 00:02:17,048 [main:106] - GETTING Function0<Boolean> from CoroutineContext
2021-03-12 00:02:17,050 [main:106] - GETTING Function0<Boolean> from KClass<out Any>
2021-03-12 00:02:17,051 [main:106] - GETTING Function0<Boolean> from Simple
2021-03-12 00:02:17,052 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 00:02:17,053 [main:106] - GETTING Function0<Boolean> from Simple
2021-03-12 00:02:17,055 [main:106] - GETTING Function0<Boolean> from Continuation<Any?>
2021-03-12 00:02:17,064 [main:106] - GETTING Function0<Boolean> from Function0<Unit>
2021-03-12 00:02:17,072 [main:114] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { true}
2021-03-12 00:02:17,251 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:02:17,252 [main:66] - Compilation checking started
2021-03-12 00:02:18,128 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 0
    suspend fun fu16(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.exceptionOrNull()?.let(x)
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu22() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope17 = {
            prope9.prope16 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:02:18,130 [main:107] - replacing (exception, Throwable)
2021-03-12 00:02:18,131 [main:50] - replacing exception Throwable
2021-03-12 00:02:18,132 [main:54] - Getting value of type Throwable
2021-03-12 00:02:18,315 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 00:02:18,540 [main:43] - GENERATING CALL OF fun NotImplementedError(message: kotlin.String): Throwable = TODO()
2021-03-12 00:02:18,549 [main:61] - WITHOUT TYPE PARAMS = fun NotImplementedError(message: kotlin.String): Throwable = TODO()
2021-03-12 00:02:18,991 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:02:18,999 [main:95] - GENERATED = NotImplementedError("lcxqh")
2021-03-12 00:02:18,999 [main:58] - GENERATED VALUE OF TYPE Throwable = NotImplementedError("lcxqh")
2021-03-12 00:02:18,999 [main:61] - GENERATED IS CALL =true
2021-03-12 00:02:19,026 [main:67] - randomType = Kla3
2021-03-12 00:02:19,208 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 00:02:19,216 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 00:02:19,224 [main:106] - GETTING Throwable from Function0<Unit>
2021-03-12 00:02:19,237 [main:106] - GETTING Throwable from Simple
2021-03-12 00:02:19,249 [main:106] - GETTING Throwable from Continuation<Any?>
2021-03-12 00:02:19,260 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 00:02:19,268 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 00:02:19,269 [main:106] - GETTING Throwable from KClass<out Any>
2021-03-12 00:02:19,282 [main:106] - GETTING Throwable from String
2021-03-12 00:02:19,311 [main:106] - GETTING Throwable from EmptyCoroutineContext
2021-03-12 00:02:19,332 [main:106] - GETTING Throwable from String
2021-03-12 00:02:19,333 [main:106] - GETTING Throwable from Any
2021-03-12 00:02:19,337 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 00:02:19,338 [main:106] - GETTING Throwable from Simple
2021-03-12 00:02:19,339 [main:106] - GETTING Throwable from Continuation<Simple>
2021-03-12 00:02:19,349 [main:106] - GETTING Throwable from Simple
2021-03-12 00:02:19,350 [main:106] - GETTING Throwable from KClass<out Any>
2021-03-12 00:02:19,351 [main:106] - GETTING Throwable from Boolean
2021-03-12 00:02:19,362 [main:106] - GETTING Throwable from Any
2021-03-12 00:02:19,363 [main:106] - GETTING Throwable from Any
2021-03-12 00:02:19,363 [main:106] - GETTING Throwable from Any?
2021-03-12 00:02:19,367 [main:114] - replacement of exception of type Throwable is NotImplementedError("lcxqh")
2021-03-12 00:02:19,545 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:02:19,545 [main:66] - Compilation checking started
2021-03-12 00:02:20,411 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 0
    suspend fun fu16(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.exceptionOrNull()?.let(x)
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu22() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope17 = {
            prope9.prope16 = true
        }
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:02:20,413 [main:107] - replacing (prope12, Result<Ty1>)
2021-03-12 00:02:20,414 [main:50] - replacing prope12 Result<Ty1>
2021-03-12 00:02:20,414 [main:54] - Getting value of type Result<Ty1>
2021-03-12 00:02:20,605 [main:302] - generating value of type = Result<Ty1> false depth = 0
2021-03-12 00:02:20,798 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 00:02:20,807 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 00:02:21,245 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 00:02:21,245 [main:58] - GENERATED VALUE OF TYPE Result<Ty1> = 
2021-03-12 00:02:21,259 [main:67] - randomType = Boolean
2021-03-12 00:02:21,447 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:02:21,468 [main:106] - GETTING Result<Ty1> from String
2021-03-12 00:02:21,486 [main:106] - GETTING Result<Ty1> from EmptyCoroutineContext
2021-03-12 00:02:21,500 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 00:02:21,506 [main:106] - GETTING Result<Ty1> from Simple
2021-03-12 00:02:21,514 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 00:02:21,515 [main:106] - GETTING Result<Ty1> from String
2021-03-12 00:02:21,517 [main:106] - GETTING Result<Ty1> from KClass<out Any>
2021-03-12 00:02:21,525 [main:106] - GETTING Result<Ty1> from Function0<Unit>
2021-03-12 00:02:21,535 [main:106] - GETTING Result<Ty1> from Simple
2021-03-12 00:02:21,536 [main:106] - GETTING Result<Ty1> from Simple
2021-03-12 00:02:21,538 [main:106] - GETTING Result<Ty1> from Any?
2021-03-12 00:02:21,543 [main:106] - GETTING Result<Ty1> from KClass<out Any>
2021-03-12 00:02:21,544 [main:106] - GETTING Result<Ty1> from Any
2021-03-12 00:02:21,550 [main:106] - GETTING Result<Ty1> from Continuation<Simple>
2021-03-12 00:02:21,559 [main:106] - GETTING Result<Ty1> from Boolean
2021-03-12 00:02:21,571 [main:106] - GETTING Result<Ty1> from Any
2021-03-12 00:02:21,573 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 00:02:21,574 [main:106] - GETTING Result<Ty1> from Any
2021-03-12 00:02:21,575 [main:106] - GETTING Result<Ty1> from Continuation<Any?>
2021-03-12 00:02:21,585 [main:111] - Cant find and generate replacement for prope12 type Result<Ty1>
2021-03-12 00:02:21,585 [main:107] - replacing (prope12.exceptionOrNull()?.let(x), Unit?)
2021-03-12 00:02:21,586 [main:50] - replacing prope12.exceptionOrNull()?.let(x) Unit?
2021-03-12 00:02:21,586 [main:54] - Getting value of type Unit?
2021-03-12 00:02:21,769 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 00:02:21,965 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:02:21,974 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:02:22,434 [main:302] - generating value of type = Any false depth = 3
2021-03-12 00:02:22,435 [main:95] - GENERATED = print("cumew")
2021-03-12 00:02:22,435 [main:58] - GENERATED VALUE OF TYPE Unit? = print("cumew")
2021-03-12 00:02:22,435 [main:61] - GENERATED IS CALL =true
2021-03-12 00:02:22,450 [main:67] - randomType = Short
2021-03-12 00:02:22,633 [main:302] - generating value of type = Short true depth = 0
2021-03-12 00:02:22,671 [main:106] - GETTING Unit? from Simple
2021-03-12 00:02:22,678 [main:106] - GETTING Unit? from Simple
2021-03-12 00:02:22,679 [main:106] - GETTING Unit? from Any?
2021-03-12 00:02:22,683 [main:106] - GETTING Unit? from Any
2021-03-12 00:02:22,686 [main:106] - GETTING Unit? from Any
2021-03-12 00:02:22,688 [main:106] - GETTING Unit? from EmptyCoroutineContext
2021-03-12 00:02:22,701 [main:106] - GETTING Unit? from Continuation<Any?>
2021-03-12 00:02:22,707 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resume(value: T): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@2c6f2f88]]
2021-03-12 00:02:22,707 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resume(value: T): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@2c6f2f88]
2021-03-12 00:02:22,890 [main:302] - generating value of type = T false depth = 0
2021-03-12 00:02:23,540 [main:43] - GENERATING CALL OF fun <T> checkNotNull(value: ArrayDeque<Byte>): T = TODO()
2021-03-12 00:02:23,548 [main:61] - WITHOUT TYPE PARAMS = fun <T> checkNotNull(value: ArrayDeque<Byte>): T = TODO()
2021-03-12 00:02:23,745 [main:302] - generating value of type = ArrayDeque<Byte> false depth = 3
2021-03-12 00:02:23,936 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Byte>): ArrayDeque<Byte> = TODO()
2021-03-12 00:02:23,945 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Byte>): ArrayDeque<Byte> = TODO()
2021-03-12 00:02:24,389 [main:302] - generating value of type = Collection<Byte> false depth = 6
2021-03-12 00:02:24,582 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): Collection<Byte> = TODO()
2021-03-12 00:02:24,590 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): Collection<Byte> = TODO()
2021-03-12 00:02:24,794 [main:95] - GENERATED = arrayListOf<Byte>()
2021-03-12 00:02:24,794 [main:95] - GENERATED = ArrayDeque<Byte>(arrayListOf<Byte>())
2021-03-12 00:02:24,794 [main:95] - GENERATED = checkNotNull<ArrayDeque<Byte>>(ArrayDeque<Byte>(arrayListOf<Byte>()))
2021-03-12 00:02:24,795 [main:117] - GENERATED CALL = (fu4({a: Throwable -> check(true, { "mjsep"})}))?.resume(checkNotNull<ArrayDeque<Byte>>(ArrayDeque<Byte>(arrayListOf<Byte>())))
2021-03-12 00:02:24,795 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resumeWithException(exception: kotlin.Throwable): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@24a54d49]]
2021-03-12 00:02:24,795 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resumeWithException(exception: kotlin.Throwable): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@24a54d49]
2021-03-12 00:02:24,978 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 00:02:25,174 [main:43] - GENERATING CALL OF fun Throwable(message: kotlin.String?): Throwable = TODO()
2021-03-12 00:02:25,182 [main:61] - WITHOUT TYPE PARAMS = fun Throwable(message: kotlin.String?): Throwable = TODO()
2021-03-12 00:02:25,604 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:02:25,611 [main:95] - GENERATED = Throwable("sjutq")
2021-03-12 00:02:25,612 [main:117] - GENERATED CALL = (fu4({a: Throwable -> check(true, { "mjsep"})}))?.resumeWithException(Throwable("sjutq"))
2021-03-12 00:02:25,612 [main:113] - Case = [public abstract fun resumeWith(result: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3daa1d2c]]
2021-03-12 00:02:25,612 [main:149] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3daa1d2c]
2021-03-12 00:02:25,822 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 00:02:26,019 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 00:02:26,028 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 00:02:26,463 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 00:02:26,470 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:02:26,471 [main:95] - GENERATED = runCatching<Any?>({ "whkwh"})
2021-03-12 00:02:26,471 [main:117] - GENERATED CALL = (fu4({a: Throwable -> check(true, { "mjsep"})}))?.resumeWith(runCatching<Any?>({ "whkwh"}))
2021-03-12 00:02:26,471 [main:114] - replacement of prope12.exceptionOrNull()?.let(x) of type Unit? is print("cumew")
2021-03-12 00:02:26,665 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:02:26,665 [main:66] - Compilation checking started
2021-03-12 00:02:27,522 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 0
    suspend fun fu16(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu22() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope17 = {
            prope9.prope16 = true
        }
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:02:27,524 [main:107] - replacing ("tail-call optimization miss: method at ", String)
2021-03-12 00:02:27,524 [main:50] - replacing "tail-call optimization miss: method at " String
2021-03-12 00:02:27,524 [main:54] - Getting value of type String
2021-03-12 00:02:27,719 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:02:27,726 [main:58] - GENERATED VALUE OF TYPE String = "lucrp"
2021-03-12 00:02:27,726 [main:61] - GENERATED IS CALL =false
2021-03-12 00:02:27,963 [main:67] - randomType = Char?
2021-03-12 00:02:28,155 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:02:28,183 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@dffbf7a]
2021-03-12 00:02:28,183 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f929571]
2021-03-12 00:02:28,365 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:02:28,373 [main:78] - Generated call from random type = ('')?.toByte().toString(1549255080)
2021-03-12 00:02:28,373 [main:114] - replacement of "tail-call optimization miss: method at " of type String is ('')?.toByte().toString(1549255080)
2021-03-12 00:02:28,555 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:02:28,556 [main:66] - Compilation checking started
2021-03-12 00:02:29,467 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 0
    suspend fun fu16(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu22() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope17 = {
            prope9.prope16 = true
        }
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:02:29,469 [main:107] - replacing (prope12.getOrThrow(), Ty1)
2021-03-12 00:02:29,469 [main:50] - replacing prope12.getOrThrow() Ty1
2021-03-12 00:02:29,469 [main:54] - Getting value of type Ty1
2021-03-12 00:02:29,739 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 00:02:29,749 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 00:02:29,976 [main:67] - randomType = UByte
2021-03-12 00:02:30,162 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 00:02:30,200 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 00:02:30,206 [main:106] - GETTING Ty1 from Any
2021-03-12 00:02:30,209 [main:106] - GETTING Ty1 from String
2021-03-12 00:02:30,225 [main:106] - GETTING Ty1 from Any
2021-03-12 00:02:30,226 [main:106] - GETTING Ty1 from KClass<out Any>
2021-03-12 00:02:30,234 [main:106] - GETTING Ty1 from Simple
2021-03-12 00:02:30,240 [main:106] - GETTING Ty1 from Simple
2021-03-12 00:02:30,241 [main:106] - GETTING Ty1 from Any?
2021-03-12 00:02:30,245 [main:106] - GETTING Ty1 from Continuation<Simple>
2021-03-12 00:02:30,252 [main:106] - GETTING Ty1 from String
2021-03-12 00:02:30,252 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 00:02:30,261 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 00:02:30,262 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 00:02:30,263 [main:106] - GETTING Ty1 from KClass<out Any>
2021-03-12 00:02:30,264 [main:106] - GETTING Ty1 from Any
2021-03-12 00:02:30,264 [main:106] - GETTING Ty1 from Boolean
2021-03-12 00:02:30,273 [main:106] - GETTING Ty1 from Simple
2021-03-12 00:02:30,274 [main:106] - GETTING Ty1 from EmptyCoroutineContext
2021-03-12 00:02:30,287 [main:106] - GETTING Ty1 from Continuation<Any?>
2021-03-12 00:02:30,293 [main:111] - Cant find and generate replacement for prope12.getOrThrow() type Ty1
2021-03-12 00:02:30,293 [main:107] - replacing (" has state-machine ", String)
2021-03-12 00:02:30,293 [main:50] - replacing " has state-machine " String
2021-03-12 00:02:30,293 [main:54] - Getting value of type String
2021-03-12 00:02:30,477 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:02:30,484 [main:58] - GENERATED VALUE OF TYPE String = "fqwlw"
2021-03-12 00:02:30,484 [main:61] - GENERATED IS CALL =false
2021-03-12 00:02:30,725 [main:67] - randomType = Kla13
2021-03-12 00:02:30,909 [main:302] - generating value of type = Kla13 false depth = 0
2021-03-12 00:02:30,916 [main:112] - generating klass Kla13 text = object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope17 = {
            prope9.prope16 = true
        }
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}
2021-03-12 00:02:30,938 [main:106] - GETTING String from KClass<out Any>
2021-03-12 00:02:30,945 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@5dea99b]]
2021-03-12 00:02:30,945 [main:117] - GENERATED CALL = ((local()::class)).qualifiedName
2021-03-12 00:02:30,945 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@5dea99b], @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c057cac]]
2021-03-12 00:02:30,945 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c057cac]
2021-03-12 00:02:30,945 [main:117] - GENERATED CALL = ((local()::class)).qualifiedName?.orEmpty()
2021-03-12 00:02:30,946 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@5dea99b], public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6519cd8a]]
2021-03-12 00:02:30,946 [main:149] - GENERATING call of type public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6519cd8a]
2021-03-12 00:02:30,946 [main:117] - GENERATED CALL = ((local()::class)).qualifiedName?.plus(Kla1().prope2)
2021-03-12 00:02:30,946 [main:113] - Case = [public abstract val simpleName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@37d9c70b]]
2021-03-12 00:02:30,946 [main:117] - GENERATED CALL = ((local()::class)).simpleName
2021-03-12 00:02:30,946 [main:114] - replacement of " has state-machine " of type String is ((local()::class)).qualifiedName
2021-03-12 00:02:31,129 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:02:31,130 [main:66] - Compilation checking started
2021-03-12 00:02:32,014 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 0
    suspend fun fu16(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu22() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope17 = {
            prope9.prope16 = true
        }
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:02:32,017 [main:107] - replacing (0, Int)
2021-03-12 00:02:32,017 [main:50] - replacing 0 Int
2021-03-12 00:02:32,017 [main:54] - Getting value of type Int
2021-03-12 00:02:32,204 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:02:32,211 [main:58] - GENERATED VALUE OF TYPE Int = -376947362
2021-03-12 00:02:32,211 [main:61] - GENERATED IS CALL =false
2021-03-12 00:02:32,439 [main:67] - randomType = UByte
2021-03-12 00:02:32,626 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 00:02:32,669 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@68c8a77b]
2021-03-12 00:02:32,865 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 00:02:32,873 [main:78] - Generated call from random type = (89.toUByte()).compareTo(27.toUByte()).absoluteValue
2021-03-12 00:02:32,874 [main:106] - GETTING Int from Continuation<Simple>
2021-03-12 00:02:32,883 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]]
2021-03-12 00:02:32,883 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4]
2021-03-12 00:02:32,883 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:02:32,884 [main:117] - GENERATED CALL = (fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).compareTo(Kla4().prope5)
2021-03-12 00:02:32,884 [main:114] - replacement of 0 of type Int is -376947362
2021-03-12 00:02:33,065 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-12 00:02:33,065 [main:66] - Compilation checking started
2021-03-12 00:02:33,997 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu22() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope17 = {
            prope9.prope16 = true
        }
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:02:34,000 [main:107] - replacing ({
            prope9.prope16 = true
        }, Function0<Unit>)
2021-03-12 00:02:34,001 [main:50] - replacing {
            prope9.prope16 = true
        } Function0<Unit>
2021-03-12 00:02:34,001 [main:54] - Getting value of type Function0<Unit>
2021-03-12 00:02:34,188 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 00:02:34,196 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:02:34,403 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:02:34,412 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:02:34,846 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:02:34,846 [main:95] - GENERATED = print("dydzs")
2021-03-12 00:02:34,846 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("dydzs")}
2021-03-12 00:02:34,846 [main:61] - GENERATED IS CALL =false
2021-03-12 00:02:35,338 [main:67] - randomType = LinkedHashSet<Kla11?>
2021-03-12 00:02:35,521 [main:302] - generating value of type = LinkedHashSet<Kla11?> false depth = 0
2021-03-12 00:02:35,715 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Kla11?> = TODO()
2021-03-12 00:02:35,724 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Kla11?> = TODO()
2021-03-12 00:02:35,919 [main:95] - GENERATED = linkedSetOf<Kla11?>()
2021-03-12 00:02:36,032 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 00:02:36,039 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:02:36,042 [main:106] - GETTING Function0<Unit> from String
2021-03-12 00:02:36,059 [main:106] - GETTING Function0<Unit> from KClass<out Any>
2021-03-12 00:02:36,067 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 00:02:36,074 [main:114] - replacement of {
            prope9.prope16 = true
        } of type Function0<Unit> is { print("dydzs")}
2021-03-12 00:02:36,258 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:02:36,258 [main:66] - Compilation checking started
2021-03-12 00:02:37,180 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu22() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:02:37,183 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-12 00:02:37,184 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-12 00:02:37,184 [main:54] - Getting value of type Throwable?
2021-03-12 00:02:37,371 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 00:02:37,572 [main:43] - GENERATING CALL OF fun UninitializedPropertyAccessException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 00:02:37,581 [main:61] - WITHOUT TYPE PARAMS = fun UninitializedPropertyAccessException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 00:02:38,017 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 00:02:38,027 [main:95] - GENERATED = UninitializedPropertyAccessException(IllegalArgumentException())
2021-03-12 00:02:38,028 [main:58] - GENERATED VALUE OF TYPE Throwable? = UninitializedPropertyAccessException(IllegalArgumentException())
2021-03-12 00:02:38,028 [main:61] - GENERATED IS CALL =true
2021-03-12 00:02:38,043 [main:67] - randomType = Short
2021-03-12 00:02:38,229 [main:302] - generating value of type = Short true depth = 0
2021-03-12 00:02:38,272 [main:106] - GETTING Throwable? from String
2021-03-12 00:02:38,288 [main:106] - GETTING Throwable? from KClass<out Any>
2021-03-12 00:02:38,296 [main:106] - GETTING Throwable? from Any
2021-03-12 00:02:38,299 [main:106] - GETTING Throwable? from Function0<Unit>
2021-03-12 00:02:38,307 [main:106] - GETTING Throwable? from Continuation<Simple>
2021-03-12 00:02:38,314 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 00:02:38,320 [main:106] - GETTING Throwable? from Boolean
2021-03-12 00:02:38,328 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 00:02:38,329 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 00:02:38,329 [main:106] - GETTING Throwable? from String
2021-03-12 00:02:38,330 [main:106] - GETTING Throwable? from Simple
2021-03-12 00:02:38,337 [main:106] - GETTING Throwable? from KClass<out Any>
2021-03-12 00:02:38,338 [main:106] - GETTING Throwable? from Simple
2021-03-12 00:02:38,339 [main:106] - GETTING Throwable? from Simple
2021-03-12 00:02:38,340 [main:106] - GETTING Throwable? from Continuation<Any?>
2021-03-12 00:02:38,347 [main:106] - GETTING Throwable? from Any
2021-03-12 00:02:38,348 [main:106] - GETTING Throwable? from Any?
2021-03-12 00:02:38,352 [main:106] - GETTING Throwable? from Any
2021-03-12 00:02:38,353 [main:106] - GETTING Throwable? from EmptyCoroutineContext
2021-03-12 00:02:38,365 [main:114] - replacement of exceptionOrNull() of type Throwable? is UninitializedPropertyAccessException(IllegalArgumentException())
2021-03-12 00:02:38,548 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:02:38,549 [main:66] - Compilation checking started
2021-03-12 00:02:39,181 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.UninitializedPropertyAccessException(IllegalArgumentException())!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu22() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:02:39,183 [main:107] - replacing ("tail-call optimization hit: method ", String)
2021-03-12 00:02:39,184 [main:50] - replacing "tail-call optimization hit: method " String
2021-03-12 00:02:39,184 [main:54] - Getting value of type String
2021-03-12 00:02:39,369 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:02:39,377 [main:58] - GENERATED VALUE OF TYPE String = "vnlkb"
2021-03-12 00:02:39,377 [main:61] - GENERATED IS CALL =false
2021-03-12 00:02:39,623 [main:67] - randomType = Kla5
2021-03-12 00:02:39,809 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 00:02:39,816 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:02:39,834 [main:106] - GETTING String from Continuation<Any?>
2021-03-12 00:02:39,841 [main:106] - GETTING String from Boolean
2021-03-12 00:02:39,848 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]]
2021-03-12 00:02:39,848 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:02:39,848 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-12 00:02:40,034 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:02:40,041 [main:117] - GENERATED CALL = (Kla4().prope5).compareTo(Kla4().prope5).toString(698403402)
2021-03-12 00:02:40,041 [main:114] - replacement of "tail-call optimization hit: method " of type String is (Kla4().prope5).compareTo(Kla4().prope5).toString(698403402)
2021-03-12 00:02:40,227 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:02:40,228 [main:66] - Compilation checking started
2021-03-12 00:02:41,170 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((Kla4().prope5).compareTo(Kla4().prope5).toString(698403402) + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu22() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:02:41,173 [main:107] - replacing (checkFinished, Boolean)
2021-03-12 00:02:41,173 [main:50] - replacing checkFinished Boolean
2021-03-12 00:02:41,173 [main:54] - Getting value of type Boolean
2021-03-12 00:02:41,360 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:02:41,367 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:02:41,368 [main:61] - GENERATED IS CALL =false
2021-03-12 00:02:41,383 [main:67] - randomType = Int
2021-03-12 00:02:41,570 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:02:41,611 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a3ca0b4]
2021-03-12 00:02:41,612 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@34453f9d]
2021-03-12 00:02:41,612 [main:78] - Generated call from random type = (-1631918856).toFloat().isInfinite()
2021-03-12 00:02:41,613 [main:106] - GETTING Boolean from Continuation<Simple>
2021-03-12 00:02:41,619 [main:113] - Case = [public abstract fun resumeWith(result: kotlin.Result<Simple>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@15367d64], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@6b6563c4]]
2021-03-12 00:02:41,619 [main:149] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<Simple>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@15367d64]
2021-03-12 00:02:41,805 [main:302] - generating value of type = Result<Simple> false depth = 0
2021-03-12 00:02:42,005 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Simple): Result<Simple> = TODO()
2021-03-12 00:02:42,014 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Simple): Result<Simple> = TODO()
2021-03-12 00:02:42,451 [main:302] - generating value of type = Function0<Simple> false depth = 3
2021-03-12 00:02:42,459 [main:302] - generating value of type = Simple false depth = 4
2021-03-12 00:02:42,466 [main:112] - generating klass Simple text = @Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)
2021-03-12 00:02:42,466 [main:95] - GENERATED = runCatching<Simple>({ })
2021-03-12 00:02:42,467 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@6b6563c4]
2021-03-12 00:02:42,653 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:02:42,653 [main:117] - GENERATED CALL = (fu3<Simple>({a: Simple -> print("jkaqk")})).resumeWith(runCatching<Simple>({ })).equals("naesp")
2021-03-12 00:02:42,653 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]]
2021-03-12 00:02:42,653 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4]
2021-03-12 00:02:42,653 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]
2021-03-12 00:02:42,654 [main:117] - GENERATED CALL = (fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).xor(Kla4().prope5)
2021-03-12 00:02:42,654 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]]
2021-03-12 00:02:42,654 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4]
2021-03-12 00:02:42,654 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]
2021-03-12 00:02:42,654 [main:117] - GENERATED CALL = (fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5)
2021-03-12 00:02:42,654 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4]]
2021-03-12 00:02:42,654 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4]
2021-03-12 00:02:42,654 [main:117] - GENERATED CALL = (fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2)
2021-03-12 00:02:42,654 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]]
2021-03-12 00:02:42,654 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4]
2021-03-12 00:02:42,654 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-12 00:02:42,841 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:02:42,849 [main:117] - GENERATED CALL = (fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).or(false)
2021-03-12 00:02:42,849 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]]
2021-03-12 00:02:42,849 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4]
2021-03-12 00:02:42,849 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]
2021-03-12 00:02:42,849 [main:117] - GENERATED CALL = (fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).not()
2021-03-12 00:02:42,849 [main:113] - Case = [public abstract val context: kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.Continuation[DeserializedPropertyDescriptor@62581383], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5cab20d1]]
2021-03-12 00:02:42,849 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5cab20d1]
2021-03-12 00:02:42,850 [main:117] - GENERATED CALL = (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals(Kla1().prope2)
2021-03-12 00:02:42,850 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]]
2021-03-12 00:02:42,850 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4]
2021-03-12 00:02:42,850 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-12 00:02:42,850 [main:117] - GENERATED CALL = (fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).equals(Kla1().prope2)
2021-03-12 00:02:42,850 [main:114] - replacement of checkFinished of type Boolean is (fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5)
2021-03-12 00:02:43,036 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:02:43,037 [main:66] - Compilation checking started
2021-03-12 00:02:43,940 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((Kla4().prope5).compareTo(Kla4().prope5).toString(698403402) + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu22() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:02:43,942 [main:107] - replacing (prope16, Boolean)
2021-03-12 00:02:43,943 [main:50] - replacing prope16 Boolean
2021-03-12 00:02:43,943 [main:54] - Getting value of type Boolean
2021-03-12 00:02:44,137 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:02:44,144 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 00:02:44,144 [main:61] - GENERATED IS CALL =false
2021-03-12 00:02:44,675 [main:67] - randomType = Kla10<UByte>
2021-03-12 00:02:44,865 [main:302] - generating value of type = Kla10<UByte> false depth = 0
2021-03-12 00:02:44,873 [main:112] - generating klass Kla10 text = abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-12 00:02:45,819 [main:302] - generating value of type = Kla13 false depth = 2
2021-03-12 00:02:45,827 [main:112] - generating klass Kla13 text = object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}
2021-03-12 00:02:45,840 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla10[DeserializedSimpleFunctionDescriptor@208a40d2]
2021-03-12 00:02:45,840 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-12 00:02:46,030 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:02:46,031 [main:78] - Generated call from random type = (Kla13).equals(Kla1().prope2).equals("kmgrx")
2021-03-12 00:02:46,032 [main:106] - GETTING Boolean from Any?
2021-03-12 00:02:46,035 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]]
2021-03-12 00:02:46,035 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:02:46,036 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-12 00:02:46,036 [main:117] - GENERATED CALL = (Kla1().prope2).equals(Kla1().prope2).or(Kla4().prope5)
2021-03-12 00:02:46,036 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]]
2021-03-12 00:02:46,036 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:02:46,227 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:02:46,227 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]
2021-03-12 00:02:46,227 [main:117] - GENERATED CALL = (Kla1().prope2).equals("gcujf").xor(Kla4().prope5)
2021-03-12 00:02:46,227 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]]
2021-03-12 00:02:46,227 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:02:46,228 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]
2021-03-12 00:02:46,228 [main:117] - GENERATED CALL = (Kla1().prope2).equals(Kla1().prope2).and(Kla4().prope5)
2021-03-12 00:02:46,228 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]]
2021-03-12 00:02:46,228 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:02:46,418 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:02:46,419 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-12 00:02:46,610 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:02:46,610 [main:117] - GENERATED CALL = (Kla1().prope2).equals("febcz").equals("ptcml")
2021-03-12 00:02:46,610 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]]
2021-03-12 00:02:46,611 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:02:46,800 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:02:46,801 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]
2021-03-12 00:02:46,801 [main:117] - GENERATED CALL = (Kla1().prope2).equals("xclqu").not()
2021-03-12 00:02:46,801 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]]
2021-03-12 00:02:46,801 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:02:46,801 [main:117] - GENERATED CALL = (Kla1().prope2).equals(Kla1().prope2)
2021-03-12 00:02:46,801 [main:114] - replacement of prope16 of type Boolean is (Kla1().prope2).equals(Kla1().prope2).or(Kla4().prope5)
2021-03-12 00:02:46,991 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:02:46,992 [main:66] - Compilation checking started
2021-03-12 00:02:47,667 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((Kla4().prope5).compareTo(Kla4().prope5).toString(698403402) + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        (Kla1().prope2).equals(Kla1().prope2).or(Kla4().prope5) = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:02:47,670 [main:107] - replacing (c, Continuation<*>)
2021-03-12 00:02:47,671 [main:50] - replacing c Continuation<*>
2021-03-12 00:02:47,671 [main:54] - Getting value of type Continuation<*>
2021-03-12 00:02:47,871 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 00:02:48,105 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 00:02:48,115 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 00:02:48,834 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 00:02:49,041 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:02:49,051 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:02:49,522 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 00:02:49,735 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:02:49,744 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:02:50,477 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:02:50,477 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:02:50,477 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 00:02:50,478 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 00:02:50,493 [main:67] - randomType = Boolean
2021-03-12 00:02:50,685 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:02:50,703 [main:106] - GETTING Continuation<*> from KClass<out Any>
2021-03-12 00:02:50,711 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 00:02:50,717 [main:106] - GETTING Continuation<*> from Boolean
2021-03-12 00:02:50,725 [main:106] - GETTING Continuation<*> from Any?
2021-03-12 00:02:50,729 [main:106] - GETTING Continuation<*> from Simple
2021-03-12 00:02:50,736 [main:106] - GETTING Continuation<*> from KClass<out Any>
2021-03-12 00:02:50,737 [main:106] - GETTING Continuation<*> from Simple
2021-03-12 00:02:50,738 [main:106] - GETTING Continuation<*> from String
2021-03-12 00:02:50,755 [main:106] - GETTING Continuation<*> from String
2021-03-12 00:02:50,756 [main:106] - GETTING Continuation<*> from Continuation<Any?>
2021-03-12 00:02:50,763 [main:106] - GETTING Continuation<*> from Any
2021-03-12 00:02:50,767 [main:106] - GETTING Continuation<*> from EmptyCoroutineContext
2021-03-12 00:02:50,781 [main:106] - GETTING Continuation<*> from Function0<Unit>
2021-03-12 00:02:50,790 [main:106] - GETTING Continuation<*> from Simple
2021-03-12 00:02:50,791 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 00:02:50,792 [main:106] - GETTING Continuation<*> from Continuation<Simple>
2021-03-12 00:02:50,800 [main:106] - GETTING Continuation<*> from Any
2021-03-12 00:02:50,801 [main:106] - GETTING Continuation<*> from Any
2021-03-12 00:02:50,802 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 00:02:50,802 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 00:02:50,802 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 00:02:50,802 [main:50] - replacing {} Function0<Unit>
2021-03-12 00:02:50,802 [main:54] - Getting value of type Function0<Unit>
2021-03-12 00:02:50,993 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 00:02:51,000 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:02:51,203 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:02:51,213 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:02:51,698 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:02:51,706 [main:95] - GENERATED = require(false)
2021-03-12 00:02:51,706 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-12 00:02:51,706 [main:61] - GENERATED IS CALL =false
2021-03-12 00:02:52,307 [main:67] - randomType = Triple<Double, Simple, Char>
2021-03-12 00:02:52,500 [main:302] - generating value of type = Triple<Double, Simple, Char> false depth = 0
2021-03-12 00:02:52,706 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Double, second: Simple, third: Char): Triple<Double, Simple, Char> = TODO()
2021-03-12 00:02:52,715 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Double, second: Simple, third: Char): Triple<Double, Simple, Char> = TODO()
2021-03-12 00:02:52,920 [main:302] - generating value of type = Double true depth = 3
2021-03-12 00:02:52,928 [main:302] - generating value of type = Simple false depth = 3
2021-03-12 00:02:52,936 [main:112] - generating klass Simple text = @Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)
2021-03-12 00:02:52,936 [main:385] - Cant generate call of fun <A, B, C> Triple(first: Double, second: Simple, third: Char): Triple<Double, Simple, Char> = TODO()
2021-03-12 00:02:52,949 [main:106] - GETTING Function0<Unit> from String
2021-03-12 00:02:52,966 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 00:02:52,972 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:02:52,976 [main:106] - GETTING Function0<Unit> from String
2021-03-12 00:02:52,977 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:02:52,978 [main:106] - GETTING Function0<Unit> from Continuation<Any?>
2021-03-12 00:02:52,986 [main:106] - GETTING Function0<Unit> from Any?
2021-03-12 00:02:52,990 [main:106] - GETTING Function0<Unit> from Simple
2021-03-12 00:02:52,996 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 00:02:53,003 [main:114] - replacement of {} of type Function0<Unit> is Kla4().prope6
2021-03-12 00:02:53,193 [main:33] - Trying to replace LAMBDA_EXPRESSION on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:02:53,193 [main:66] - Compilation checking started
2021-03-12 00:02:54,123 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((Kla4().prope5).compareTo(Kla4().prope5).toString(698403402) + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:02:54,125 [main:107] - replacing (prope12, String)
2021-03-12 00:02:54,126 [main:50] - replacing prope12 String
2021-03-12 00:02:54,126 [main:54] - Getting value of type String
2021-03-12 00:02:54,317 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:02:54,324 [main:58] - GENERATED VALUE OF TYPE String = "ampzy"
2021-03-12 00:02:54,325 [main:61] - GENERATED IS CALL =false
2021-03-12 00:02:55,947 [main:67] - randomType = Function2<LinkedHashSet<Map<Short, Int>>?, UInt, Short>
2021-03-12 00:02:55,948 [main:106] - GETTING String from Boolean
2021-03-12 00:02:55,957 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]]
2021-03-12 00:02:55,957 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:02:55,957 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-12 00:02:56,149 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:02:56,156 [main:117] - GENERATED CALL = (Kla4().prope5).compareTo(Kla4().prope5).toString(-552630488)
2021-03-12 00:02:56,157 [main:114] - replacement of prope12 of type String is (Kla4().prope5).compareTo(Kla4().prope5).toString(-552630488)
2021-03-12 00:02:56,350 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:02:56,351 [main:66] - Compilation checking started
2021-03-12 00:02:57,014 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        (Kla4().prope5).compareTo(Kla4().prope5).toString(-552630488) += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((Kla4().prope5).compareTo(Kla4().prope5).toString(698403402) + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:02:57,017 [main:107] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-12 00:02:57,017 [main:50] - replacing c !is CoroutineStackFrame Boolean
2021-03-12 00:02:57,017 [main:54] - Getting value of type Boolean
2021-03-12 00:02:57,212 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:02:57,219 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:02:57,220 [main:61] - GENERATED IS CALL =false
2021-03-12 00:02:57,235 [main:67] - randomType = Double
2021-03-12 00:02:57,433 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:02:57,481 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@470216ec]
2021-03-12 00:02:57,481 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-12 00:02:57,681 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:02:57,690 [main:78] - Generated call from random type = (0.3930133871761494).equals(Kla1().prope2).or(true)
2021-03-12 00:02:57,691 [main:106] - GETTING Boolean from KClass<out Any>
2021-03-12 00:02:57,703 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@5dea99b], @kotlin.SinceKotlin public fun kotlin.String?.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fd52205]]
2021-03-12 00:02:57,703 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String?.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fd52205]
2021-03-12 00:02:57,703 [main:117] - GENERATED CALL = ((local()::class)).qualifiedName?.toBoolean()
2021-03-12 00:02:57,703 [main:113] - Case = [public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@2be33ae4], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]]
2021-03-12 00:02:57,703 [main:149] - GENERATING call of type public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@2be33ae4]
2021-03-12 00:02:57,703 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-12 00:02:57,902 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:02:57,902 [main:117] - GENERATED CALL = ((local()::class)).equals(Kla1().prope2).equals("nhnbw")
2021-03-12 00:02:57,902 [main:113] - Case = [public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@2be33ae4], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]]
2021-03-12 00:02:57,902 [main:149] - GENERATING call of type public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@2be33ae4]
2021-03-12 00:02:58,096 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]
2021-03-12 00:02:58,097 [main:117] - GENERATED CALL = ((local()::class)).equals(null).not()
2021-03-12 00:02:58,097 [main:113] - Case = [public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@2be33ae4], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]]
2021-03-12 00:02:58,097 [main:149] - GENERATING call of type public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@2be33ae4]
2021-03-12 00:02:58,097 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]
2021-03-12 00:02:58,097 [main:117] - GENERATED CALL = ((local()::class)).equals(Kla1().prope2).xor(Kla4().prope5)
2021-03-12 00:02:58,097 [main:113] - Case = [@kotlin.SinceKotlin public abstract fun isInstance(value: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@20c1a25]]
2021-03-12 00:02:58,097 [main:149] - GENERATING call of type @kotlin.SinceKotlin public abstract fun isInstance(value: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@20c1a25]
2021-03-12 00:02:58,097 [main:117] - GENERATED CALL = ((local()::class)).isInstance(Kla1().prope2)
2021-03-12 00:02:58,097 [main:113] - Case = [public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@2be33ae4], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]]
2021-03-12 00:02:58,097 [main:149] - GENERATING call of type public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@2be33ae4]
2021-03-12 00:02:58,098 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]
2021-03-12 00:02:58,098 [main:117] - GENERATED CALL = ((local()::class)).equals(Kla1().prope2).and(Kla4().prope5)
2021-03-12 00:02:58,098 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@5dea99b], public fun kotlin.String?.equals(other: kotlin.String?, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b659333]]
2021-03-12 00:02:58,098 [main:149] - GENERATING call of type public fun kotlin.String?.equals(other: kotlin.String?, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b659333]
2021-03-12 00:02:58,289 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:02:58,297 [main:117] - GENERATED CALL = ((local()::class)).qualifiedName?.equals("ddcli", Kla4().prope5)
2021-03-12 00:02:58,297 [main:113] - Case = [public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@2be33ae4]]
2021-03-12 00:02:58,297 [main:149] - GENERATING call of type public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@2be33ae4]
2021-03-12 00:02:58,489 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:02:58,490 [main:117] - GENERATED CALL = ((local()::class)).equals("xpcnl")
2021-03-12 00:02:58,490 [main:113] - Case = [public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@2be33ae4], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]]
2021-03-12 00:02:58,490 [main:149] - GENERATING call of type public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@2be33ae4]
2021-03-12 00:02:58,682 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:02:58,682 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-12 00:02:58,682 [main:117] - GENERATED CALL = ((local()::class)).equals("gegyg").or(Kla4().prope5)
2021-03-12 00:02:58,682 [main:114] - replacement of c !is CoroutineStackFrame of type Boolean is ((local()::class)).equals("gegyg").or(Kla4().prope5)
2021-03-12 00:02:58,873 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:02:58,873 [main:66] - Compilation checking started
2021-03-12 00:02:59,559 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (((local()::class)).equals("gegyg").or(Kla4().prope5)) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((Kla4().prope5).compareTo(Kla4().prope5).toString(698403402) + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:02:59,562 [main:107] - replacing (suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    }, Int)
2021-03-12 00:02:59,562 [main:50] - replacing suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    } Int
2021-03-12 00:02:59,562 [main:54] - Getting value of type Int
2021-03-12 00:02:59,755 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:02:59,762 [main:58] - GENERATED VALUE OF TYPE Int = 1436704449
2021-03-12 00:02:59,763 [main:61] - GENERATED IS CALL =false
2021-03-12 00:03:00,018 [main:67] - randomType = Kla5
2021-03-12 00:03:00,209 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 00:03:00,217 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:03:00,234 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla5[DeserializedSimpleFunctionDescriptor@98f648c]
2021-03-12 00:03:00,424 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:03:00,425 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:03:00,425 [main:78] - Generated call from random type = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
2021-03-12 00:03:00,426 [main:106] - GETTING Int from KClass<out Any>
2021-03-12 00:03:00,433 [main:113] - Case = [public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@448f07af], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]]
2021-03-12 00:03:00,433 [main:149] - GENERATING call of type public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@448f07af]
2021-03-12 00:03:00,628 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:03:00,629 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:03:00,629 [main:117] - GENERATED CALL = (local()::class).equals("fjlym").compareTo(Kla4().prope5)
2021-03-12 00:03:00,629 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@105c84bd], public open fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1114bfcd]]
2021-03-12 00:03:00,629 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1114bfcd]
2021-03-12 00:03:00,821 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:03:00,829 [main:117] - GENERATED CALL = (local()::class).qualifiedName?.compareTo("rgkvo")
2021-03-12 00:03:00,829 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@105c84bd], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4e18e7b3]]
2021-03-12 00:03:00,829 [main:117] - GENERATED CALL = (local()::class).qualifiedName?.length
2021-03-12 00:03:00,829 [main:114] - replacement of suspendCoroutineUninterceptedOrReturn { x ->
        x.resume(v * 2)
        COROUTINE_SUSPENDED
    } of type Int is (Kla5).equals("ubcow").compareTo(Kla4().prope5)
2021-03-12 00:03:01,021 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:03:01,021 [main:66] - Compilation checking started
2021-03-12 00:03:01,928 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((Kla4().prope5).compareTo(Kla4().prope5).toString(698403402) + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:03:01,931 [main:107] - replacing (1..numberOfSuspensions, IntRange)
2021-03-12 00:03:01,931 [main:50] - replacing 1..numberOfSuspensions IntRange
2021-03-12 00:03:01,931 [main:54] - Getting value of type IntRange
2021-03-12 00:03:02,122 [main:302] - generating value of type = IntRange false depth = 0
2021-03-12 00:03:02,324 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 00:03:02,333 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 00:03:03,053 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:03:03,062 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:03:03,069 [main:95] - GENERATED = IntRange(665913025, 1342360521)
2021-03-12 00:03:03,070 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(665913025, 1342360521)
2021-03-12 00:03:03,070 [main:61] - GENERATED IS CALL =true
2021-03-12 00:03:03,890 [main:67] - randomType = LinkedHashMap<ArrayList<Int?>?, Kla1>
2021-03-12 00:03:04,083 [main:302] - generating value of type = LinkedHashMap<ArrayList<Int?>?, Kla1> false depth = 0
2021-03-12 00:03:04,286 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<ArrayList<Int?>?, Kla1> = TODO()
2021-03-12 00:03:04,295 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<ArrayList<Int?>?, Kla1> = TODO()
2021-03-12 00:03:04,509 [main:95] - GENERATED = linkedMapOf<ArrayList<Int?>?, Kla1>()
2021-03-12 00:03:04,649 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e923046]
2021-03-12 00:03:04,839 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:03:04,847 [main:78] - Generated call from random type = (linkedMapOf<ArrayList<Int?>?, Kla1>()).size.rangeTo(112)
2021-03-12 00:03:04,848 [main:106] - GETTING IntRange from Continuation<Any?>
2021-03-12 00:03:04,856 [main:106] - GETTING IntRange from CoroutineContext
2021-03-12 00:03:04,862 [main:106] - GETTING IntRange from Continuation<Simple>
2021-03-12 00:03:04,868 [main:106] - GETTING IntRange from Boolean
2021-03-12 00:03:04,875 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@20c09582]]
2021-03-12 00:03:04,875 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:03:04,876 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@20c09582]
2021-03-12 00:03:05,069 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:03:05,077 [main:117] - GENERATED CALL = (Kla4().prope5).compareTo(Kla4().prope5).until(-13)
2021-03-12 00:03:05,077 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e923046]]
2021-03-12 00:03:05,077 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:03:05,267 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:03:05,275 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e923046]
2021-03-12 00:03:05,467 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:03:05,475 [main:117] - GENERATED CALL = (Kla4().prope5).compareTo(false).rangeTo(101)
2021-03-12 00:03:05,475 [main:114] - replacement of 1..numberOfSuspensions of type IntRange is IntRange(665913025, 1342360521)
2021-03-12 00:03:05,665 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:03:05,665 [main:66] - Compilation checking started
2021-03-12 00:03:06,603 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {
        prope11.prope10 = it
    })

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((Kla4().prope5).compareTo(Kla4().prope5).toString(698403402) + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (prope15 != i) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:03:06,606 [main:107] - replacing ({
        prope11.prope10 = it
    }, Function1<Int, Unit>)
2021-03-12 00:03:06,607 [main:50] - replacing {
        prope11.prope10 = it
    } Function1<Int, Unit>
2021-03-12 00:03:06,607 [main:54] - Getting value of type Function1<Int, Unit>
2021-03-12 00:03:06,802 [main:302] - generating value of type = Function1<Int, Unit> false depth = 0
2021-03-12 00:03:06,810 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:03:07,014 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:03:07,024 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:03:07,473 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:03:07,474 [main:95] - GENERATED = println("hahzb")
2021-03-12 00:03:07,474 [main:58] - GENERATED VALUE OF TYPE Function1<Int, Unit> = {a: Int -> println("hahzb")}
2021-03-12 00:03:07,474 [main:61] - GENERATED IS CALL =false
2021-03-12 00:03:08,813 [main:67] - randomType = LinkedHashMap<Kla0?, LinkedHashSet<Function1<Simple?, Kla12>>>
2021-03-12 00:03:09,008 [main:302] - generating value of type = LinkedHashMap<Kla0?, LinkedHashSet<Function1<Simple?, Kla12>>> false depth = 0
2021-03-12 00:03:09,213 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(original: kotlin.collections.Map<Kla0?, LinkedHashSet<Function1<Simple?, Kla12>>>): LinkedHashMap<Kla0?, LinkedHashSet<Function1<Simple?, Kla12>>> = TODO()
2021-03-12 00:03:09,223 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(original: kotlin.collections.Map<Kla0?, LinkedHashSet<Function1<Simple?, Kla12>>>): LinkedHashMap<Kla0?, LinkedHashSet<Function1<Simple?, Kla12>>> = TODO()
2021-03-12 00:03:09,720 [main:302] - generating value of type = Map<Kla0?, LinkedHashSet<Function1<Simple?, Kla12>>> false depth = 3
2021-03-12 00:03:09,925 [main:43] - GENERATING CALL OF fun <K, V> mutableMapOf(pairs: Pair<Kla0?, LinkedHashSet<Function1<Simple?, Kla12>>>): Map<Kla0?, LkedHashSet<Function1<Simple?, Kla12>>> = TODO()
2021-03-12 00:03:09,935 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mutableMapOf(pairs: Pair<Kla0?, LinkedHashSet<Function1<Simple?, Kla12>>>): Map<Kla0?, LkedHashSet<Function1<Simple?, Kla12>>> = TODO()
2021-03-12 00:03:10,142 [main:302] - generating value of type = Pair<Kla0?, LinkedHashSet<Function1<Simple?, Kla12>>> false depth = 6
2021-03-12 00:03:10,383 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla0?, second: LinkedHashSet<Function1<Simple?, Kla12>>): Pair<Kla0?, LinkedHashSet<Function1<Simple?, Kla12>>> = TODO()
2021-03-12 00:03:10,393 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla0?, second: LinkedHashSet<Function1<Simple?, Kla12>>): Pair<Kla0?, LinkedHashSet<Function1<Simple?, Kla12>>> = TODO()
2021-03-12 00:03:10,599 [main:302] - generating value of type = Kla0 false depth = 9
2021-03-12 00:03:10,607 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}
2021-03-12 00:03:10,801 [main:194] - Type params = []
2021-03-12 00:03:10,992 [main:302] - generating value of type = CoroutineContext false depth = 11
2021-03-12 00:03:11,197 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:03:11,207 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:03:11,677 [main:302] - generating value of type = Key<*> false depth = 14
2021-03-12 00:03:11,897 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:03:11,906 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:03:12,627 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:03:12,627 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:03:12,627 [main:302] - generating value of type = LinkedHashSet<Function1<Simple?, Kla12>> false depth = 9
2021-03-12 00:03:12,830 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Function1<Simple?, Kla12>> = TODO()
2021-03-12 00:03:12,839 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Function1<Simple?, Kla12>> = TODO()
2021-03-12 00:03:13,043 [main:95] - GENERATED = linkedSetOf<Function1<Simple?, Kla12>>()
2021-03-12 00:03:13,044 [main:95] - GENERATED = Pair<Kla0?, LinkedHashSet<Function1<Simple?, Kla12>>>(Kla0(), linkedSetOf<Function1<Simple?, Kla12>>())
2021-03-12 00:03:13,044 [main:95] - GENERATED = mutableMapOf<Kla0?, LinkedHashSet<Function1<Simple?, Kla12>>>(Pair<Kla0?, LinkedHashSet<Function1<Simple?, Kla12>>>(Kla0(), linkedSetOf<Function1<Simple?, Kla12>>()))
2021-03-12 00:03:13,044 [main:95] - GENERATED = LinkedHashMap<Kla0?, LinkedHashSet<Function1<Simple?, Kla12>>>(mutableMapOf<Kla0?, LinkedHashSet<Function1<Simple?, Kla12>>>(Pair<Kla0?, LinkedHashSet<Function1<Simple?, Kla12>>>(Kla0(), linkedSetOf<Function1<Simple?, Kla12>>())))
2021-03-12 00:03:13,236 [main:106] - GETTING Function1<Int, Unit> from Function0<Unit>
2021-03-12 00:03:13,246 [main:106] - GETTING Function1<Int, Unit> from Boolean
2021-03-12 00:03:13,255 [main:106] - GETTING Function1<Int, Unit> from KClass<out Any>
2021-03-12 00:03:13,263 [main:106] - GETTING Function1<Int, Unit> from Simple
2021-03-12 00:03:13,270 [main:106] - GETTING Function1<Int, Unit> from CoroutineContext
2021-03-12 00:03:13,276 [main:106] - GETTING Function1<Int, Unit> from Any
2021-03-12 00:03:13,280 [main:106] - GETTING Function1<Int, Unit> from Any
2021-03-12 00:03:13,281 [main:106] - GETTING Function1<Int, Unit> from Continuation<Any?>
2021-03-12 00:03:13,289 [main:106] - GETTING Function1<Int, Unit> from Any?
2021-03-12 00:03:13,293 [main:106] - GETTING Function1<Int, Unit> from Simple
2021-03-12 00:03:13,294 [main:106] - GETTING Function1<Int, Unit> from EmptyCoroutineContext
2021-03-12 00:03:13,308 [main:106] - GETTING Function1<Int, Unit> from String
2021-03-12 00:03:13,325 [main:106] - GETTING Function1<Int, Unit> from Simple
2021-03-12 00:03:13,327 [main:106] - GETTING Function1<Int, Unit> from String
2021-03-12 00:03:13,328 [main:106] - GETTING Function1<Int, Unit> from Continuation<Simple>
2021-03-12 00:03:13,336 [main:106] - GETTING Function1<Int, Unit> from CoroutineContext
2021-03-12 00:03:13,337 [main:106] - GETTING Function1<Int, Unit> from CoroutineContext
2021-03-12 00:03:13,339 [main:106] - GETTING Function1<Int, Unit> from KClass<out Any>
2021-03-12 00:03:13,340 [main:106] - GETTING Function1<Int, Unit> from Any
2021-03-12 00:03:13,340 [main:114] - replacement of {
        prope11.prope10 = it
    } of type Function1<Int, Unit> is {a: Int -> println("hahzb")}
2021-03-12 00:03:13,530 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:03:13,530 [main:66] - Compilation checking started
2021-03-12 00:03:14,466 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {a: Int -> println("hahzb")})

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((Kla4().prope5).compareTo(Kla4().prope5).toString(698403402) + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (prope15 != i) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:03:14,468 [main:107] - replacing (i, Int)
2021-03-12 00:03:14,469 [main:50] - replacing i Int
2021-03-12 00:03:14,469 [main:54] - Getting value of type Int
2021-03-12 00:03:14,660 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:03:14,668 [main:58] - GENERATED VALUE OF TYPE Int = -203586812
2021-03-12 00:03:14,668 [main:61] - GENERATED IS CALL =false
2021-03-12 00:03:14,927 [main:67] - randomType = Boolean?
2021-03-12 00:03:15,118 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:03:15,136 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:03:15,136 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@635b5740]
2021-03-12 00:03:15,136 [main:78] - Generated call from random type = (true)?.compareTo(Kla4().prope5).takeHighestOneBit()
2021-03-12 00:03:15,137 [main:106] - GETTING Int from KClass<out Any>
2021-03-12 00:03:15,144 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@105c84bd], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4e18e7b3]]
2021-03-12 00:03:15,144 [main:117] - GENERATED CALL = (local()::class).qualifiedName?.length
2021-03-12 00:03:15,144 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@105c84bd], public open fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1114bfcd]]
2021-03-12 00:03:15,145 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1114bfcd]
2021-03-12 00:03:15,336 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:03:15,343 [main:117] - GENERATED CALL = (local()::class).qualifiedName?.compareTo("enasm")
2021-03-12 00:03:15,344 [main:113] - Case = [public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@448f07af], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]]
2021-03-12 00:03:15,344 [main:149] - GENERATING call of type public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@448f07af]
2021-03-12 00:03:15,344 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:03:15,344 [main:117] - GENERATED CALL = (local()::class).equals(Kla1().prope2).compareTo(Kla4().prope5)
2021-03-12 00:03:15,344 [main:114] - replacement of i of type Int is (local()::class).equals(Kla1().prope2).compareTo(Kla4().prope5)
2021-03-12 00:03:15,534 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:03:15,534 [main:66] - Compilation checking started
2021-03-12 00:03:16,475 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {a: Int -> println("hahzb")})

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((Kla4().prope5).compareTo(Kla4().prope5).toString(698403402) + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (prope15 != (local()::class).equals(Kla1().prope2).compareTo(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:03:16,477 [main:107] - replacing (" has no state-machine ", String)
2021-03-12 00:03:16,477 [main:50] - replacing " has no state-machine " String
2021-03-12 00:03:16,478 [main:54] - Getting value of type String
2021-03-12 00:03:16,670 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:03:16,678 [main:58] - GENERATED VALUE OF TYPE String = "wdefn"
2021-03-12 00:03:16,678 [main:61] - GENERATED IS CALL =false
2021-03-12 00:03:16,949 [main:67] - randomType = Kla5?
2021-03-12 00:03:17,142 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 00:03:17,150 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:03:17,168 [main:106] - GETTING String from Simple
2021-03-12 00:03:17,174 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bdf8378]]
2021-03-12 00:03:17,174 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bdf8378]
2021-03-12 00:03:17,369 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:03:17,377 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:03:17,385 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filter({a: Char -> true})
2021-03-12 00:03:17,385 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9d455b0]]
2021-03-12 00:03:17,385 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9d455b0]
2021-03-12 00:03:17,606 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:03:17,614 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.take(926964896)
2021-03-12 00:03:17,614 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70796165]]
2021-03-12 00:03:17,614 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70796165]
2021-03-12 00:03:17,816 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 00:03:17,824 [main:302] - generating value of type = Char true depth = 1
2021-03-12 00:03:17,832 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.replaceFirstChar({a: Char -> '≺'})
2021-03-12 00:03:17,832 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e95deba]]
2021-03-12 00:03:17,832 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e95deba]
2021-03-12 00:03:18,023 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:03:18,030 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:03:18,038 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true})
2021-03-12 00:03:18,039 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b106cd8]]
2021-03-12 00:03:18,039 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b106cd8]
2021-03-12 00:03:18,039 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.trimEnd()
2021-03-12 00:03:18,039 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c69b29d]]
2021-03-12 00:03:18,039 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c69b29d]
2021-03-12 00:03:18,232 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:03:18,240 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:03:18,248 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.dropWhile({a: Char -> true})
2021-03-12 00:03:18,248 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6920716c]]
2021-03-12 00:03:18,248 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6920716c]
2021-03-12 00:03:18,439 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:03:18,447 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.trimMargin("ukoxs")
2021-03-12 00:03:18,448 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b875f45]]
2021-03-12 00:03:18,448 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b875f45]
2021-03-12 00:03:18,448 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.replaceIndentByMargin(var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
2021-03-12 00:03:18,448 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25ea4871]]
2021-03-12 00:03:18,448 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25ea4871]
2021-03-12 00:03:18,640 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:03:18,651 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("qfdrp")
2021-03-12 00:03:18,651 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7941dfad]]
2021-03-12 00:03:18,651 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7941dfad]
2021-03-12 00:03:18,841 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:03:18,850 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.substringAfterLast('꓿', fu1(false))
2021-03-12 00:03:18,850 [main:114] - replacement of " has no state-machine " of type String is (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true})
2021-03-12 00:03:19,043 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:03:19,043 [main:66] - Compilation checking started
2021-03-12 00:03:19,975 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {a: Int -> println("hahzb")})

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((Kla4().prope5).compareTo(Kla4().prope5).toString(698403402) + method + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (prope15 != (local()::class).equals(Kla1().prope2).compareTo(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:03:19,978 [main:107] - replacing ((Kla4().prope5).compareTo(Kla4().prope5).toString(698403402) + method, String)
2021-03-12 00:03:19,978 [main:50] - replacing (Kla4().prope5).compareTo(Kla4().prope5).toString(698403402) + method String
2021-03-12 00:03:19,979 [main:54] - Getting value of type String
2021-03-12 00:03:20,178 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:03:20,186 [main:58] - GENERATED VALUE OF TYPE String = "gnacg"
2021-03-12 00:03:20,186 [main:61] - GENERATED IS CALL =false
2021-03-12 00:03:20,202 [main:67] - randomType = Boolean
2021-03-12 00:03:20,396 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:03:20,415 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:03:20,415 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-12 00:03:20,609 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:03:20,618 [main:78] - Generated call from random type = (true).compareTo(Kla4().prope5).toString(1542479543)
2021-03-12 00:03:20,619 [main:106] - GETTING String from Simple
2021-03-12 00:03:20,626 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bdf8378]]
2021-03-12 00:03:20,626 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bdf8378]
2021-03-12 00:03:20,819 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:03:20,827 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:03:20,835 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filter({a: Char -> false})
2021-03-12 00:03:20,835 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb7f30e]]
2021-03-12 00:03:20,835 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb7f30e]
2021-03-12 00:03:21,029 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:03:21,232 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:03:21,240 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceAfter('嗰', fu0("wfstp"), "xugkr")
2021-03-12 00:03:21,240 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@78fb2a59]]
2021-03-12 00:03:21,240 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@78fb2a59]
2021-03-12 00:03:21,240 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.plus(Kla1().prope2)
2021-03-12 00:03:21,240 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dc46393]]
2021-03-12 00:03:21,240 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dc46393]
2021-03-12 00:03:21,241 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.prependIndent(fu0("wfstp"))
2021-03-12 00:03:21,241 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3da0c972]]
2021-03-12 00:03:21,241 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3da0c972]
2021-03-12 00:03:21,457 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:03:21,465 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.substring(863928804)
2021-03-12 00:03:21,465 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@406dcd44]]
2021-03-12 00:03:21,465 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@406dcd44]
2021-03-12 00:03:21,659 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:03:21,860 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:03:22,061 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:03:22,069 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceBefore('𥉉', "ghvsh", "zdvjt")
2021-03-12 00:03:22,069 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f51d7e]]
2021-03-12 00:03:22,069 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f51d7e]
2021-03-12 00:03:22,070 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.toLowerCase()
2021-03-12 00:03:22,070 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3067e7b5]]
2021-03-12 00:03:22,070 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3067e7b5]
2021-03-12 00:03:22,263 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:03:22,271 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:03:22,279 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.takeWhile({a: Char -> true})
2021-03-12 00:03:22,279 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e95deba]]
2021-03-12 00:03:22,279 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e95deba]
2021-03-12 00:03:22,471 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:03:22,479 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:03:22,487 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterNot({a: Char -> true})
2021-03-12 00:03:22,488 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@467f48e7]]
2021-03-12 00:03:22,488 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@467f48e7]
2021-03-12 00:03:22,680 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:03:22,882 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:03:22,890 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?')
2021-03-12 00:03:22,890 [main:114] - replacement of (Kla4().prope5).compareTo(Kla4().prope5).toString(698403402) + method of type String is ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?')
2021-03-12 00:03:23,083 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:03:23,084 [main:66] - Compilation checking started
2021-03-12 00:03:24,013 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {a: Int -> println("hahzb")})

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (prope15 != (local()::class).equals(Kla1().prope2).compareTo(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:03:24,017 [main:107] - replacing (prope17, Function0<Unit>)
2021-03-12 00:03:24,017 [main:50] - replacing prope17 Function0<Unit>
2021-03-12 00:03:24,017 [main:54] - Getting value of type Function0<Unit>
2021-03-12 00:03:24,211 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 00:03:24,219 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:03:24,421 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:03:24,431 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:03:24,880 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:03:24,888 [main:95] - GENERATED = check(true)
2021-03-12 00:03:24,888 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-12 00:03:24,888 [main:61] - GENERATED IS CALL =false
2021-03-12 00:03:24,905 [main:67] - randomType = Byte
2021-03-12 00:03:25,098 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:03:25,137 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 00:03:25,142 [main:106] - GETTING Function0<Unit> from KClass<out Any>
2021-03-12 00:03:25,150 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:03:25,154 [main:106] - GETTING Function0<Unit> from Simple
2021-03-12 00:03:25,161 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:03:25,163 [main:106] - GETTING Function0<Unit> from Continuation<Any?>
2021-03-12 00:03:25,169 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 00:03:25,176 [main:114] - replacement of prope17 of type Function0<Unit> is { check(true)}
2021-03-12 00:03:25,389 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:03:25,389 [main:66] - Compilation checking started
2021-03-12 00:03:26,075 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {a: Int -> println("hahzb")})

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (prope15 != (local()::class).equals(Kla1().prope2).compareTo(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        { check(true)}()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:03:26,078 [main:107] - replacing (" is not subtype of CoroutineStackFrame", String)
2021-03-12 00:03:26,078 [main:50] - replacing " is not subtype of CoroutineStackFrame" String
2021-03-12 00:03:26,078 [main:54] - Getting value of type String
2021-03-12 00:03:26,271 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:03:26,279 [main:58] - GENERATED VALUE OF TYPE String = "vsica"
2021-03-12 00:03:26,279 [main:61] - GENERATED IS CALL =false
2021-03-12 00:03:26,522 [main:67] - randomType = ULong
2021-03-12 00:03:26,717 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 00:03:26,750 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1057ae90]
2021-03-12 00:03:26,944 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:03:26,952 [main:78] - Generated call from random type = (7592609419978208002.toULong()).toString(-1518141142)
2021-03-12 00:03:26,953 [main:106] - GETTING String from Continuation<Any?>
2021-03-12 00:03:26,961 [main:106] - GETTING String from Boolean
2021-03-12 00:03:26,968 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]]
2021-03-12 00:03:26,968 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:03:26,969 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-12 00:03:27,162 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:03:27,170 [main:117] - GENERATED CALL = (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101)
2021-03-12 00:03:27,170 [main:114] - replacement of " is not subtype of CoroutineStackFrame" of type String is (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101)
2021-03-12 00:03:27,362 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:03:27,363 [main:66] - Compilation checking started
2021-03-12 00:03:28,297 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {a: Int -> println("hahzb")})

    return prope11
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (prope15 != (local()::class).equals(Kla1().prope2).compareTo(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:03:28,300 [main:107] - replacing (c, Continuation<*>)
2021-03-12 00:03:28,300 [main:50] - replacing c Continuation<*>
2021-03-12 00:03:28,300 [main:54] - Getting value of type Continuation<*>
2021-03-12 00:03:28,504 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 00:03:28,709 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 00:03:28,719 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 00:03:29,478 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 00:03:29,685 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:03:29,695 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:03:30,173 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 00:03:30,390 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:03:30,400 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:03:31,137 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:03:31,137 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:03:31,137 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 00:03:31,137 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 00:03:31,396 [main:67] - randomType = Boolean?
2021-03-12 00:03:31,592 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:03:31,610 [main:106] - GETTING Continuation<*> from Function0<Unit>
2021-03-12 00:03:31,619 [main:106] - GETTING Continuation<*> from KClass<out Any>
2021-03-12 00:03:31,627 [main:106] - GETTING Continuation<*> from EmptyCoroutineContext
2021-03-12 00:03:31,641 [main:106] - GETTING Continuation<*> from Any
2021-03-12 00:03:31,644 [main:106] - GETTING Continuation<*> from Simple
2021-03-12 00:03:31,651 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 00:03:31,657 [main:106] - GETTING Continuation<*> from String
2021-03-12 00:03:31,673 [main:106] - GETTING Continuation<*> from Continuation<Simple>
2021-03-12 00:03:31,680 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 00:03:31,681 [main:106] - GETTING Continuation<*> from Continuation<Any?>
2021-03-12 00:03:31,688 [main:106] - GETTING Continuation<*> from Simple
2021-03-12 00:03:31,689 [main:106] - GETTING Continuation<*> from Boolean
2021-03-12 00:03:31,698 [main:106] - GETTING Continuation<*> from String
2021-03-12 00:03:31,699 [main:106] - GETTING Continuation<*> from Any
2021-03-12 00:03:31,700 [main:106] - GETTING Continuation<*> from KClass<out Any>
2021-03-12 00:03:31,701 [main:106] - GETTING Continuation<*> from Simple
2021-03-12 00:03:31,702 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 00:03:31,703 [main:106] - GETTING Continuation<*> from Any?
2021-03-12 00:03:31,708 [main:106] - GETTING Continuation<*> from Any
2021-03-12 00:03:31,708 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 00:03:31,708 [main:107] - replacing (prope11, Kla7)
2021-03-12 00:03:31,708 [main:50] - replacing prope11 Kla7
2021-03-12 00:03:31,708 [main:54] - Getting value of type Kla7
2021-03-12 00:03:31,904 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 00:03:31,912 [main:112] - generating klass Kla7 text = class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}
2021-03-12 00:03:31,912 [main:58] - GENERATED VALUE OF TYPE Kla7 = Kla7()
2021-03-12 00:03:31,912 [main:61] - GENERATED IS CALL =true
2021-03-12 00:03:32,156 [main:67] - randomType = Long
2021-03-12 00:03:32,355 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:03:32,393 [main:106] - GETTING Kla7 from Simple
2021-03-12 00:03:32,399 [main:106] - GETTING Kla7 from Any?
2021-03-12 00:03:32,402 [main:106] - GETTING Kla7 from Boolean
2021-03-12 00:03:32,410 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 00:03:32,416 [main:106] - GETTING Kla7 from Simple
2021-03-12 00:03:32,417 [main:106] - GETTING Kla7 from String
2021-03-12 00:03:32,433 [main:106] - GETTING Kla7 from Continuation<Any?>
2021-03-12 00:03:32,440 [main:106] - GETTING Kla7 from Continuation<Simple>
2021-03-12 00:03:32,447 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 00:03:32,447 [main:106] - GETTING Kla7 from Function0<Unit>
2021-03-12 00:03:32,456 [main:106] - GETTING Kla7 from EmptyCoroutineContext
2021-03-12 00:03:32,469 [main:106] - GETTING Kla7 from Any
2021-03-12 00:03:32,473 [main:106] - GETTING Kla7 from String
2021-03-12 00:03:32,474 [main:106] - GETTING Kla7 from KClass<out Any>
2021-03-12 00:03:32,482 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 00:03:32,483 [main:106] - GETTING Kla7 from Any
2021-03-12 00:03:32,484 [main:106] - GETTING Kla7 from Simple
2021-03-12 00:03:32,485 [main:106] - GETTING Kla7 from KClass<out Any>
2021-03-12 00:03:32,486 [main:106] - GETTING Kla7 from Any
2021-03-12 00:03:32,486 [main:114] - replacement of prope11 of type Kla7 is Kla7()
2021-03-12 00:03:32,703 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:03:32,703 [main:66] - Compilation checking started
2021-03-12 00:03:33,660 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (prope15 != (local()::class).equals(Kla1().prope2).compareTo(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:03:33,663 [main:107] - replacing (fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10, Int)
2021-03-12 00:03:33,664 [main:50] - replacing fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10 Int
2021-03-12 00:03:33,664 [main:54] - Getting value of type Int
2021-03-12 00:03:33,858 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:03:33,865 [main:58] - GENERATED VALUE OF TYPE Int = 1079603748
2021-03-12 00:03:33,866 [main:61] - GENERATED IS CALL =false
2021-03-12 00:03:33,882 [main:67] - randomType = Char
2021-03-12 00:03:34,077 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:03:34,102 [main:149] - GENERATING call of type public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@af2d433]
2021-03-12 00:03:34,102 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@214a254]
2021-03-12 00:03:34,296 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:03:34,304 [main:78] - Generated call from random type = ('㴥').toDouble().compareTo(27)
2021-03-12 00:03:34,306 [main:106] - GETTING Int from CoroutineContext
2021-03-12 00:03:34,311 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5cab20d1], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]]
2021-03-12 00:03:34,311 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5cab20d1]
2021-03-12 00:03:34,311 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:03:34,506 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:03:34,514 [main:117] - GENERATED CALL = (Kla5.context).equals(Kla1().prope2).compareTo(true)
2021-03-12 00:03:34,514 [main:114] - replacement of fu12 {
        prope12 += "-"
        fu13 {
            prope12 += fu16(it).toString()
            if (it == 2) return@fu12 56
        }
        // Should be unreachable
        prope12 += "+"
        1
    }.prope10 of type Int is (Kla5.context).equals(Kla1().prope2).compareTo(true)
2021-03-12 00:03:34,708 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:03:34,708 [main:66] - Compilation checking started
2021-03-12 00:03:35,630 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (prope15 != (local()::class).equals(Kla1().prope2).compareTo(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:03:35,632 [main:107] - replacing (getOrThrow(), Ty1)
2021-03-12 00:03:35,633 [main:50] - replacing getOrThrow() Ty1
2021-03-12 00:03:35,633 [main:54] - Getting value of type Ty1
2021-03-12 00:03:35,822 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 00:03:35,833 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 00:03:35,849 [main:67] - randomType = Short
2021-03-12 00:03:36,038 [main:302] - generating value of type = Short true depth = 0
2021-03-12 00:03:36,078 [main:106] - GETTING Ty1 from Continuation<Simple>
2021-03-12 00:03:36,084 [main:106] - GETTING Ty1 from Continuation<Any?>
2021-03-12 00:03:36,091 [main:106] - GETTING Ty1 from Any
2021-03-12 00:03:36,094 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 00:03:36,100 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 00:03:36,101 [main:106] - GETTING Ty1 from Simple
2021-03-12 00:03:36,108 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 00:03:36,109 [main:106] - GETTING Ty1 from KClass<out Any>
2021-03-12 00:03:36,116 [main:106] - GETTING Ty1 from String
2021-03-12 00:03:36,132 [main:106] - GETTING Ty1 from Simple
2021-03-12 00:03:36,133 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 00:03:36,142 [main:106] - GETTING Ty1 from Any
2021-03-12 00:03:36,143 [main:106] - GETTING Ty1 from KClass<out Any>
2021-03-12 00:03:36,143 [main:106] - GETTING Ty1 from EmptyCoroutineContext
2021-03-12 00:03:36,157 [main:106] - GETTING Ty1 from Any
2021-03-12 00:03:36,158 [main:106] - GETTING Ty1 from Simple
2021-03-12 00:03:36,159 [main:106] - GETTING Ty1 from String
2021-03-12 00:03:36,159 [main:106] - GETTING Ty1 from Boolean
2021-03-12 00:03:36,168 [main:106] - GETTING Ty1 from Any?
2021-03-12 00:03:36,170 [main:111] - Cant find and generate replacement for getOrThrow() type Ty1
2021-03-12 00:03:36,170 [main:107] - replacing (prope15 != (local()::class).equals(Kla1().prope2).compareTo(Kla4().prope5), Boolean)
2021-03-12 00:03:36,170 [main:50] - replacing prope15 != (local()::class).equals(Kla1().prope2).compareTo(Kla4().prope5) Boolean
2021-03-12 00:03:36,171 [main:54] - Getting value of type Boolean
2021-03-12 00:03:36,360 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:03:36,368 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 00:03:36,368 [main:61] - GENERATED IS CALL =false
2021-03-12 00:03:37,358 [main:67] - randomType = ArrayDeque<Sequence<UByte>>?
2021-03-12 00:03:37,546 [main:302] - generating value of type = ArrayDeque<Sequence<UByte>> false depth = 0
2021-03-12 00:03:37,745 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Sequence<UByte>> = TODO()
2021-03-12 00:03:37,755 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Sequence<UByte>> = TODO()
2021-03-12 00:03:38,194 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:03:38,202 [main:95] - GENERATED = ArrayDeque<Sequence<UByte>>(116982117)
2021-03-12 00:03:38,347 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@70f04941]
2021-03-12 00:03:38,535 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 00:03:38,543 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:03:38,551 [main:78] - Generated call from random type = (ArrayDeque<Sequence<UByte>>(116982117))?.all({a: T -> true})
2021-03-12 00:03:38,552 [main:106] - GETTING Boolean from Simple
2021-03-12 00:03:38,559 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3d965cb4]]
2021-03-12 00:03:38,559 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3d965cb4]
2021-03-12 00:03:38,559 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.equals(Kla1().prope2)
2021-03-12 00:03:38,560 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e68f004]]
2021-03-12 00:03:38,560 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e68f004]
2021-03-12 00:03:38,560 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.startsWith(fu1(false), Kla4().prope5)
2021-03-12 00:03:38,560 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@267127f2]]
2021-03-12 00:03:38,560 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@267127f2]
2021-03-12 00:03:38,560 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.toBoolean()
2021-03-12 00:03:38,560 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@43c506ef], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]]
2021-03-12 00:03:38,560 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@43c506ef]
2021-03-12 00:03:38,747 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:03:38,748 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-12 00:03:38,748 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals("iargm").equals(Kla1().prope2)
2021-03-12 00:03:38,748 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@43c506ef], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]]
2021-03-12 00:03:38,748 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@43c506ef]
2021-03-12 00:03:38,935 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:03:38,935 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]
2021-03-12 00:03:39,128 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:03:39,136 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals("nskpw").and(false)
2021-03-12 00:03:39,136 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@510c7163]]
2021-03-12 00:03:39,136 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@510c7163]
2021-03-12 00:03:39,136 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.endsWith(var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
2021-03-12 00:03:39,137 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@43c506ef], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]]
2021-03-12 00:03:39,137 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@43c506ef]
2021-03-12 00:03:39,137 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]
2021-03-12 00:03:39,137 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).not()
2021-03-12 00:03:39,137 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1914b520]]
2021-03-12 00:03:39,137 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1914b520]
2021-03-12 00:03:39,137 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.matches(var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
2021-03-12 00:03:39,137 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@43c506ef], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]]
2021-03-12 00:03:39,137 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@43c506ef]
2021-03-12 00:03:39,137 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-12 00:03:39,138 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)
2021-03-12 00:03:39,138 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@43c506ef], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]]
2021-03-12 00:03:39,138 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Simple[DeserializedSimpleFunctionDescriptor@43c506ef]
2021-03-12 00:03:39,138 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]
2021-03-12 00:03:39,138 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).xor(Kla4().prope5)
2021-03-12 00:03:39,138 [main:114] - replacement of prope15 != (local()::class).equals(Kla1().prope2).compareTo(Kla4().prope5) of type Boolean is ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)
2021-03-12 00:03:39,327 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:03:39,328 [main:66] - Compilation checking started
2021-03-12 00:03:40,288 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(prope11, fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:03:40,291 [main:107] - replacing (prope11, Kla7)
2021-03-12 00:03:40,291 [main:50] - replacing prope11 Kla7
2021-03-12 00:03:40,291 [main:54] - Getting value of type Kla7
2021-03-12 00:03:40,479 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 00:03:40,487 [main:112] - generating klass Kla7 text = class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}
2021-03-12 00:03:40,487 [main:58] - GENERATED VALUE OF TYPE Kla7 = Kla7()
2021-03-12 00:03:40,487 [main:61] - GENERATED IS CALL =true
2021-03-12 00:03:40,969 [main:67] - randomType = Array<ULong>
2021-03-12 00:03:41,158 [main:302] - generating value of type = Array<ULong> false depth = 0
2021-03-12 00:03:41,356 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<ULong> = TODO()
2021-03-12 00:03:41,366 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<ULong> = TODO()
2021-03-12 00:03:41,568 [main:95] - GENERATED = emptyArray<ULong>()
2021-03-12 00:03:41,583 [main:106] - GETTING Kla7 from Simple
2021-03-12 00:03:41,590 [main:106] - GETTING Kla7 from Continuation<Simple>
2021-03-12 00:03:41,597 [main:106] - GETTING Kla7 from Simple
2021-03-12 00:03:41,598 [main:106] - GETTING Kla7 from String
2021-03-12 00:03:41,614 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 00:03:41,620 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 00:03:41,620 [main:106] - GETTING Kla7 from KClass<out Any>
2021-03-12 00:03:41,628 [main:106] - GETTING Kla7 from Continuation<Any?>
2021-03-12 00:03:41,635 [main:106] - GETTING Kla7 from Boolean
2021-03-12 00:03:41,643 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 00:03:41,644 [main:106] - GETTING Kla7 from Simple
2021-03-12 00:03:41,645 [main:106] - GETTING Kla7 from String
2021-03-12 00:03:41,646 [main:106] - GETTING Kla7 from KClass<out Any>
2021-03-12 00:03:41,647 [main:106] - GETTING Kla7 from Any?
2021-03-12 00:03:41,651 [main:106] - GETTING Kla7 from Any
2021-03-12 00:03:41,654 [main:106] - GETTING Kla7 from EmptyCoroutineContext
2021-03-12 00:03:41,667 [main:106] - GETTING Kla7 from Any
2021-03-12 00:03:41,668 [main:106] - GETTING Kla7 from Function0<Unit>
2021-03-12 00:03:41,676 [main:106] - GETTING Kla7 from Any
2021-03-12 00:03:41,676 [main:114] - replacement of prope11 of type Kla7 is Kla7()
2021-03-12 00:03:41,863 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:03:41,864 [main:66] - Compilation checking started
2021-03-12 00:03:42,778 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:03:42,781 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 00:03:42,781 [main:50] - replacing {} Function0<Unit>
2021-03-12 00:03:42,781 [main:54] - Getting value of type Function0<Unit>
2021-03-12 00:03:42,969 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 00:03:42,977 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:03:43,177 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:03:43,186 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:03:43,868 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:03:43,876 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:03:43,884 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:03:43,884 [main:95] - GENERATED = require(true, { "wwdhm"})
2021-03-12 00:03:43,884 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true, { "wwdhm"})}
2021-03-12 00:03:43,884 [main:61] - GENERATED IS CALL =false
2021-03-12 00:03:45,493 [main:67] - randomType = Function2<MutableMap<Byte, Set<Float>>?, Short, Kla5>
2021-03-12 00:03:45,494 [main:106] - GETTING Function0<Unit> from Simple
2021-03-12 00:03:45,501 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 00:03:45,508 [main:114] - replacement of {} of type Function0<Unit> is Kla4().prope6
2021-03-12 00:03:45,697 [main:33] - Trying to replace LAMBDA_EXPRESSION on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:03:45,697 [main:66] - Compilation checking started
2021-03-12 00:03:46,615 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:03:46,619 [main:107] - replacing (this.prope12, Any?)
2021-03-12 00:03:46,620 [main:50] - replacing this.prope12 Any?
2021-03-12 00:03:46,620 [main:54] - Getting value of type Any?
2021-03-12 00:03:46,812 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:03:46,813 [main:58] - GENERATED VALUE OF TYPE Any? = "viopj"
2021-03-12 00:03:46,813 [main:61] - GENERATED IS CALL =false
2021-03-12 00:03:47,078 [main:67] - randomType = LinkedHashSet<Byte>
2021-03-12 00:03:47,270 [main:302] - generating value of type = LinkedHashSet<Byte> false depth = 0
2021-03-12 00:03:47,472 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Byte> = TODO()
2021-03-12 00:03:47,482 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Byte> = TODO()
2021-03-12 00:03:47,690 [main:95] - GENERATED = linkedSetOf<Byte>()
2021-03-12 00:03:47,821 [main:149] - GENERATING call of type @kotlin.js.JsName public open fun toJSON(): kotlin.Any defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@131c2b23]
2021-03-12 00:03:47,822 [main:78] - Generated call from random type = (linkedSetOf<Byte>()).toJSON()
2021-03-12 00:03:47,823 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 00:03:47,830 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 00:03:47,838 [main:106] - GETTING Any? from Boolean
2021-03-12 00:03:47,847 [main:106] - GETTING Any? from Simple
2021-03-12 00:03:47,852 [main:106] - GETTING Any? from Any
2021-03-12 00:03:47,855 [main:114] - replacement of this.prope12 of type Any? is (linkedSetOf<Byte>()).toJSON()
2021-03-12 00:03:48,044 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:03:48,045 [main:66] - Compilation checking started
2021-03-12 00:03:48,724 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
(linkedSetOf<Byte>()).toJSON() = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:03:48,727 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 00:03:48,727 [main:50] - replacing getOrThrow() Any?
2021-03-12 00:03:48,727 [main:54] - Getting value of type Any?
2021-03-12 00:03:48,923 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:03:48,923 [main:58] - GENERATED VALUE OF TYPE Any? = "gvvfl"
2021-03-12 00:03:48,923 [main:61] - GENERATED IS CALL =false
2021-03-12 00:03:50,951 [main:67] - randomType = Function2<Pair<ULong, UShort>, UShort, List<Kla2<Double?>>>
2021-03-12 00:03:50,953 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 00:03:50,963 [main:106] - GETTING Any? from Simple
2021-03-12 00:03:50,969 [main:106] - GETTING Any? from Any
2021-03-12 00:03:50,971 [main:114] - replacement of getOrThrow() of type Any? is "gvvfl"
2021-03-12 00:03:51,161 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 00:03:51,161 [main:66] - Compilation checking started
2021-03-12 00:03:51,852 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12."gvvfl"
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:03:51,856 [main:107] - replacing (", got ", String)
2021-03-12 00:03:51,857 [main:50] - replacing ", got " String
2021-03-12 00:03:51,857 [main:54] - Getting value of type String
2021-03-12 00:03:52,063 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:03:52,072 [main:58] - GENERATED VALUE OF TYPE String = "kdwyw"
2021-03-12 00:03:52,072 [main:61] - GENERATED IS CALL =false
2021-03-12 00:03:53,430 [main:67] - randomType = Triple<Long, Triple<Int, LinkedHashSet<Char>, UShort>, Int>
2021-03-12 00:03:53,621 [main:302] - generating value of type = Triple<Long, Triple<Int, LinkedHashSet<Char>, UShort>, Int> false depth = 0
2021-03-12 00:03:53,825 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Long, second: Triple<Int, LinkedHashSet<Char>, UShort>, third: Int): Triple<Long, Triple<Int, LinkedHashSet<Char>, UShort>, Int> = TODO()
2021-03-12 00:03:53,835 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Long, second: Triple<Int, LinkedHashSet<Char>, UShort>, third: Int): Triple<Long, Triple<Int, LinkedHashSet<Char>, UShort>, Int> = TODO()
2021-03-12 00:03:54,040 [main:302] - generating value of type = Long true depth = 3
2021-03-12 00:03:54,049 [main:302] - generating value of type = Triple<Int, LinkedHashSet<Char>, UShort> false depth = 3
2021-03-12 00:03:54,252 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Int, second: LinkedHashSet<Char>, third: UShort): Triple<Int, LinkedHashSet<Char>, UShort> = TODO()
2021-03-12 00:03:54,262 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Int, second: LinkedHashSet<Char>, third: UShort): Triple<Int, LinkedHashSet<Char>, UShort> = TODO()
2021-03-12 00:03:54,468 [main:302] - generating value of type = Int true depth = 6
2021-03-12 00:03:54,476 [main:302] - generating value of type = LinkedHashSet<Char> false depth = 6
2021-03-12 00:03:54,678 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): LinkedHashSet<Char> = TODO()
2021-03-12 00:03:54,688 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): LinkedHashSet<Char> = TODO()
2021-03-12 00:03:54,895 [main:95] - GENERATED = LinkedHashSet<Char>()
2021-03-12 00:03:54,895 [main:302] - generating value of type = UShort true depth = 6
2021-03-12 00:03:54,903 [main:95] - GENERATED = Triple<Int, LinkedHashSet<Char>, UShort>(-174821415, LinkedHashSet<Char>(), 2895.toUShort())
2021-03-12 00:03:54,903 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:03:54,911 [main:95] - GENERATED = Triple<Long, Triple<Int, LinkedHashSet<Char>, UShort>, Int>(3265199817583759862, Triple<Int, LinkedHashSet<Char>, UShort>(-174821415, LinkedHashSet<Char>(), 2895.toUShort()), 1732052363)
2021-03-12 00:03:54,930 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12649ad8]
2021-03-12 00:03:55,122 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:03:55,159 [main:78] - Generated call from random type = (Triple<Long, Triple<Int, LinkedHashSet<Char>, UShort>, Int>(3265199817583759862, Triple<Int, LinkedHashSet<Char>, UShort>(-174821415, LinkedHashSet<Char>(), 2895.toUShort()), 1732052363)).first.toString(-676223329)
2021-03-12 00:03:55,160 [main:106] - GETTING String from Simple
2021-03-12 00:03:55,167 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71bb39bb]]
2021-03-12 00:03:55,167 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71bb39bb]
2021-03-12 00:03:55,360 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:03:55,371 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.removeSuffix("zbudg")
2021-03-12 00:03:55,372 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e95deba]]
2021-03-12 00:03:55,372 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e95deba]
2021-03-12 00:03:55,563 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:03:55,572 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:03:55,580 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterNot({a: Char -> true})
2021-03-12 00:03:55,580 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b106cd8]]
2021-03-12 00:03:55,580 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b106cd8]
2021-03-12 00:03:55,581 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimEnd()
2021-03-12 00:03:55,581 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70796165]]
2021-03-12 00:03:55,581 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70796165]
2021-03-12 00:03:55,772 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 00:03:55,781 [main:302] - generating value of type = Char true depth = 1
2021-03-12 00:03:55,789 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirstChar({a: Char -> 'ⅹ'})
2021-03-12 00:03:55,789 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40de1f8a]]
2021-03-12 00:03:55,789 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40de1f8a]
2021-03-12 00:03:55,789 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.capitalize()
2021-03-12 00:03:55,789 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f51d7e]]
2021-03-12 00:03:55,789 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f51d7e]
2021-03-12 00:03:55,790 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.toLowerCase()
2021-03-12 00:03:55,790 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@467f48e7]]
2021-03-12 00:03:55,790 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@467f48e7]
2021-03-12 00:03:55,979 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:03:56,181 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:03:56,189 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(984716094, '⻧')
2021-03-12 00:03:56,189 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4632cdd]]
2021-03-12 00:03:56,189 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4632cdd]
2021-03-12 00:03:56,381 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:03:56,580 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:03:56,780 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:03:56,788 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replace('ᶨ', '轞', false)
2021-03-12 00:03:56,789 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65c791d4]]
2021-03-12 00:03:56,789 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65c791d4]
2021-03-12 00:03:56,789 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimIndent()
2021-03-12 00:03:56,789 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b1b626e]]
2021-03-12 00:03:56,789 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b1b626e]
2021-03-12 00:03:56,980 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:03:57,181 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:03:57,189 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceAfterLast('', "juwuk", fu1(false))
2021-03-12 00:03:57,189 [main:114] - replacement of ", got " of type String is "kdwyw"
2021-03-12 00:03:57,378 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 00:03:57,379 [main:66] - Compilation checking started
2021-03-12 00:03:58,287 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:03:58,291 [main:107] - replacing (('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n"), String)
2021-03-12 00:03:58,291 [main:50] - replacing ('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n") String
2021-03-12 00:03:58,291 [main:54] - Getting value of type String
2021-03-12 00:03:58,483 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:03:58,491 [main:58] - GENERATED VALUE OF TYPE String = "cabjr"
2021-03-12 00:03:58,491 [main:61] - GENERATED IS CALL =false
2021-03-12 00:03:58,524 [main:67] - randomType = Kla1
2021-03-12 00:03:58,714 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 00:03:58,722 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 00:03:58,735 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@51623da1]
2021-03-12 00:03:58,735 [main:78] - Generated call from random type = (Kla1()).prope2?.toString()!!
2021-03-12 00:03:58,736 [main:106] - GETTING String from CoroutineContext
2021-03-12 00:03:58,742 [main:106] - GETTING String from CoroutineContext
2021-03-12 00:03:58,743 [main:106] - GETTING String from Continuation<Simple>
2021-03-12 00:03:58,750 [main:106] - GETTING String from Simple
2021-03-12 00:03:58,756 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d703db2]]
2021-03-12 00:03:58,756 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d703db2]
2021-03-12 00:03:58,945 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:03:58,953 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.takeLast(-450514706)
2021-03-12 00:03:58,954 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e95deba]]
2021-03-12 00:03:58,954 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e95deba]
2021-03-12 00:03:59,166 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:03:59,174 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:03:59,182 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.filterNot({a: Char -> false})
2021-03-12 00:03:59,183 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb7f30e]]
2021-03-12 00:03:59,183 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb7f30e]
2021-03-12 00:03:59,375 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:03:59,574 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:03:59,772 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:03:59,780 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.replaceAfter('㓩', "nkzvd", "ybexa")
2021-03-12 00:03:59,781 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b71787]]
2021-03-12 00:03:59,781 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b71787]
2021-03-12 00:03:59,970 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:04:00,170 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:04:00,178 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.replaceBeforeLast('', fu1(false), "ncptd")
2021-03-12 00:04:00,178 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ddbe32e]]
2021-03-12 00:04:00,178 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ddbe32e]
2021-03-12 00:04:00,179 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.decapitalize()
2021-03-12 00:04:00,179 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@742bca8e]]
2021-03-12 00:04:00,179 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@742bca8e]
2021-03-12 00:04:00,179 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toUpperCase()
2021-03-12 00:04:00,179 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@788dfd0b]]
2021-03-12 00:04:00,179 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@788dfd0b]
2021-03-12 00:04:00,369 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:04:00,569 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:04:00,577 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.substringBeforeLast('适', "wywcq")
2021-03-12 00:04:00,577 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4632cdd]]
2021-03-12 00:04:00,577 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4632cdd]
2021-03-12 00:04:00,769 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:04:00,968 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:04:00,977 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.replace('', '෫', Kla4().prope5)
2021-03-12 00:04:00,977 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4635417e]]
2021-03-12 00:04:00,977 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4635417e]
2021-03-12 00:04:00,977 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.reversed()
2021-03-12 00:04:00,977 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2748ca6f]]
2021-03-12 00:04:00,977 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2748ca6f]
2021-03-12 00:04:01,177 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:04:01,185 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.substringBefore('ꢽ', fu0("wfstp"))
2021-03-12 00:04:01,185 [main:114] - replacement of ('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n") of type String is (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.substringBefore('ꢽ', fu0("wfstp"))
2021-03-12 00:04:01,375 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:04:01,375 [main:66] - Compilation checking started
2021-03-12 00:04:02,039 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.substringBefore('ꢽ', fu0("wfstp"))) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:04:02,043 [main:107] - replacing (('')?.toByte().toString(1549255080) + it, String)
2021-03-12 00:04:02,043 [main:50] - replacing ('')?.toByte().toString(1549255080) + it String
2021-03-12 00:04:02,043 [main:54] - Getting value of type String
2021-03-12 00:04:02,236 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:04:02,244 [main:58] - GENERATED VALUE OF TYPE String = "kmcat"
2021-03-12 00:04:02,244 [main:61] - GENERATED IS CALL =false
2021-03-12 00:04:02,484 [main:67] - randomType = UShort
2021-03-12 00:04:02,674 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 00:04:02,708 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@3731b3a5]
2021-03-12 00:04:02,708 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12649ad8]
2021-03-12 00:04:02,923 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:04:02,931 [main:78] - Generated call from random type = (12615.toUShort()).toLong().toString(-1503808877)
2021-03-12 00:04:02,931 [main:106] - GETTING String from String
2021-03-12 00:04:02,947 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3da0c972]]
2021-03-12 00:04:02,948 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3da0c972]
2021-03-12 00:04:03,140 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:04:03,148 [main:117] - GENERATED CALL = (fu1(false)).substring(-1744405777)
2021-03-12 00:04:03,148 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45094caa], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@594b2e66]]
2021-03-12 00:04:03,149 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45094caa]
2021-03-12 00:04:03,341 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:04:03,349 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@594b2e66]
2021-03-12 00:04:03,349 [main:117] - GENERATED CALL = (fu1(false)).get(1028594918).lowercase()
2021-03-12 00:04:03,349 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f51d7e]]
2021-03-12 00:04:03,349 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f51d7e]
2021-03-12 00:04:03,349 [main:117] - GENERATED CALL = (fu1(false)).toLowerCase()
2021-03-12 00:04:03,349 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d703db2]]
2021-03-12 00:04:03,349 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d703db2]
2021-03-12 00:04:03,539 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:04:03,548 [main:117] - GENERATED CALL = (fu1(false)).takeLast(183436903)
2021-03-12 00:04:03,548 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a719753]]
2021-03-12 00:04:03,548 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a719753]
2021-03-12 00:04:03,740 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:04:03,752 [main:117] - GENERATED CALL = (fu1(false)).removePrefix("kvrrc")
2021-03-12 00:04:03,752 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45094caa], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@517b5e0]]
2021-03-12 00:04:03,752 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45094caa]
2021-03-12 00:04:03,942 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:04:03,950 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@517b5e0]
2021-03-12 00:04:03,951 [main:117] - GENERATED CALL = (fu1(false)).get(-165900440).plus(var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
2021-03-12 00:04:03,951 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]]
2021-03-12 00:04:03,951 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]
2021-03-12 00:04:03,951 [main:117] - GENERATED CALL = (fu1(false)).uppercase()
2021-03-12 00:04:03,951 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70796165]]
2021-03-12 00:04:03,951 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70796165]
2021-03-12 00:04:04,142 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 00:04:04,150 [main:302] - generating value of type = Char true depth = 1
2021-03-12 00:04:04,158 [main:117] - GENERATED CALL = (fu1(false)).replaceFirstChar({a: Char -> 'ཀ'})
2021-03-12 00:04:04,159 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34b77bd5]]
2021-03-12 00:04:04,159 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34b77bd5]
2021-03-12 00:04:04,351 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:04:04,359 [main:117] - GENERATED CALL = (fu1(false)).drop(1438890929)
2021-03-12 00:04:04,359 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4632cdd]]
2021-03-12 00:04:04,360 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4632cdd]
2021-03-12 00:04:04,550 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:04:04,755 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:04:04,764 [main:117] - GENERATED CALL = (fu1(false)).replace('', '놭', Kla4().prope5)
2021-03-12 00:04:04,764 [main:114] - replacement of ('')?.toByte().toString(1549255080) + it of type String is (fu1(false)).uppercase()
2021-03-12 00:04:04,958 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:04:04,958 [main:66] - Compilation checking started
2021-03-12 00:04:05,653 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error((fu1(false)).uppercase() + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:04:05,657 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 00:04:05,657 [main:50] - replacing getOrThrow() Any?
2021-03-12 00:04:05,657 [main:54] - Getting value of type Any?
2021-03-12 00:04:05,849 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:04:05,849 [main:58] - GENERATED VALUE OF TYPE Any? = "hvcha"
2021-03-12 00:04:05,849 [main:61] - GENERATED IS CALL =false
2021-03-12 00:04:06,346 [main:67] - randomType = Sequence<UInt>
2021-03-12 00:04:06,347 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 00:04:06,355 [main:106] - GETTING Any? from Simple
2021-03-12 00:04:06,362 [main:106] - GETTING Any? from Boolean
2021-03-12 00:04:06,371 [main:106] - GETTING Any? from Any?
2021-03-12 00:04:06,375 [main:106] - GETTING Any? from KClass<out Any>
2021-03-12 00:04:06,382 [main:106] - GETTING Any? from Any
2021-03-12 00:04:06,384 [main:114] - replacement of getOrThrow() of type Any? is local()
2021-03-12 00:04:06,572 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:04:06,573 [main:66] - Compilation checking started
2021-03-12 00:04:07,279 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = prope12.local()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:04:07,283 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 00:04:07,283 [main:50] - replacing getOrThrow() Any?
2021-03-12 00:04:07,283 [main:54] - Getting value of type Any?
2021-03-12 00:04:07,474 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:04:07,474 [main:58] - GENERATED VALUE OF TYPE Any? = "qjmhy"
2021-03-12 00:04:07,474 [main:61] - GENERATED IS CALL =false
2021-03-12 00:04:08,244 [main:67] - randomType = MutableMap<HashSet<UShort>, Short>
2021-03-12 00:04:08,245 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 00:04:08,264 [main:106] - GETTING Any? from Any
2021-03-12 00:04:08,267 [main:114] - replacement of getOrThrow() of type Any? is localCaptured()
2021-03-12 00:04:08,455 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:04:08,456 [main:66] - Compilation checking started
2021-03-12 00:04:09,129 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = prope12.localCaptured()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:04:09,132 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-12 00:04:09,132 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-12 00:04:09,132 [main:54] - Getting value of type String
2021-03-12 00:04:09,323 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:04:09,331 [main:58] - GENERATED VALUE OF TYPE String = "urdtf"
2021-03-12 00:04:09,331 [main:61] - GENERATED IS CALL =false
2021-03-12 00:04:09,573 [main:67] - randomType = Float
2021-03-12 00:04:09,764 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:04:09,799 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@4de3e8b1]
2021-03-12 00:04:09,990 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:04:09,998 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-12 00:04:10,194 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:04:10,202 [main:78] - Generated call from random type = (0.7442545f).compareTo(125).toString(-1783731646)
2021-03-12 00:04:10,202 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is (0.7442545f).compareTo(125).toString(-1783731646)
2021-03-12 00:04:10,392 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:04:10,393 [main:66] - Compilation checking started
2021-03-12 00:04:11,341 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:04:11,345 [main:107] - replacing (prope12.isSuccess, Boolean)
2021-03-12 00:04:11,345 [main:50] - replacing prope12.isSuccess Boolean
2021-03-12 00:04:11,345 [main:54] - Getting value of type Boolean
2021-03-12 00:04:11,537 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:04:11,545 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:04:11,545 [main:61] - GENERATED IS CALL =false
2021-03-12 00:04:11,820 [main:67] - randomType = Kla1?
2021-03-12 00:04:12,015 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 00:04:12,024 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 00:04:12,038 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@5fc018ee]
2021-03-12 00:04:12,232 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:04:12,232 [main:78] - Generated call from random type = (Kla1())?.context.equals("hxusr")
2021-03-12 00:04:12,233 [main:106] - GETTING Boolean from Continuation<Any?>
2021-03-12 00:04:12,243 [main:113] - Case = [public abstract fun resumeWith(result: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3daa1d2c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@6b6563c4]]
2021-03-12 00:04:12,243 [main:149] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3daa1d2c]
2021-03-12 00:04:12,434 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 00:04:12,637 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 00:04:12,647 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 00:04:13,105 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 00:04:13,113 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:04:13,113 [main:95] - GENERATED = runCatching<Any?>({ "sbaww"})
2021-03-12 00:04:13,114 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@6b6563c4]
2021-03-12 00:04:13,114 [main:117] - GENERATED CALL = (fu4({a: Throwable -> check(true, { "mjsep"})})).resumeWith(runCatching<Any?>({ "sbaww"})).equals(Kla1().prope2)
2021-03-12 00:04:13,114 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4]]
2021-03-12 00:04:13,114 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4]
2021-03-12 00:04:13,114 [main:117] - GENERATED CALL = (fu4({a: Throwable -> check(true, { "mjsep"})})).equals(Kla1().prope2)
2021-03-12 00:04:13,114 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]]
2021-03-12 00:04:13,114 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4]
2021-03-12 00:04:13,115 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]
2021-03-12 00:04:13,115 [main:117] - GENERATED CALL = (fu4({a: Throwable -> check(true, { "mjsep"})})).equals(Kla1().prope2).not()
2021-03-12 00:04:13,115 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]]
2021-03-12 00:04:13,115 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4]
2021-03-12 00:04:13,115 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-12 00:04:13,310 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:04:13,311 [main:117] - GENERATED CALL = (fu4({a: Throwable -> check(true, { "mjsep"})})).equals(Kla1().prope2).equals("eilje")
2021-03-12 00:04:13,311 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]]
2021-03-12 00:04:13,311 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4]
2021-03-12 00:04:13,505 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:04:13,505 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]
2021-03-12 00:04:13,696 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:04:13,704 [main:117] - GENERATED CALL = (fu4({a: Throwable -> check(true, { "mjsep"})})).equals("ezpdo").and(true)
2021-03-12 00:04:13,704 [main:113] - Case = [public abstract val context: kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.Continuation[DeserializedPropertyDescriptor@7d113a09], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5cab20d1]]
2021-03-12 00:04:13,704 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5cab20d1]
2021-03-12 00:04:13,705 [main:117] - GENERATED CALL = (fu4({a: Throwable -> check(true, { "mjsep"})})).context.equals(Kla1().prope2)
2021-03-12 00:04:13,705 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]]
2021-03-12 00:04:13,705 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4]
2021-03-12 00:04:13,705 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]
2021-03-12 00:04:13,901 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:04:13,910 [main:117] - GENERATED CALL = (fu4({a: Throwable -> check(true, { "mjsep"})})).equals(Kla1().prope2).xor(false)
2021-03-12 00:04:13,910 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]]
2021-03-12 00:04:13,910 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4]
2021-03-12 00:04:13,910 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-12 00:04:13,910 [main:117] - GENERATED CALL = (fu4({a: Throwable -> check(true, { "mjsep"})})).equals(Kla1().prope2).or(Kla4().prope5)
2021-03-12 00:04:13,910 [main:114] - replacement of prope12.isSuccess of type Boolean is (fu4({a: Throwable -> check(true, { "mjsep"})})).equals(Kla1().prope2).xor(false)
2021-03-12 00:04:14,103 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:04:14,107 [main:107] - replacing (prope15, Int)
2021-03-12 00:04:14,107 [main:50] - replacing prope15 Int
2021-03-12 00:04:14,107 [main:54] - Getting value of type Int
2021-03-12 00:04:14,298 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:04:14,306 [main:58] - GENERATED VALUE OF TYPE Int = 1303572250
2021-03-12 00:04:14,306 [main:61] - GENERATED IS CALL =false
2021-03-12 00:04:14,323 [main:67] - randomType = Byte
2021-03-12 00:04:14,537 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:04:14,575 [main:149] - GENERATING call of type public abstract fun toByte(): kotlin.Byte defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@379dbb97]
2021-03-12 00:04:14,575 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5d1ab984]
2021-03-12 00:04:14,767 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:04:14,775 [main:78] - Generated call from random type = (-48).toByte().plus(113)
2021-03-12 00:04:14,775 [main:114] - replacement of prope15 of type Int is (-48).toByte().plus(113)
2021-03-12 00:04:14,965 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:04:14,965 [main:66] - Compilation checking started
2021-03-12 00:04:15,648 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        (-48).toByte().plus(113)++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:04:15,651 [main:107] - replacing ("Continuation ", String)
2021-03-12 00:04:15,651 [main:50] - replacing "Continuation " String
2021-03-12 00:04:15,651 [main:54] - Getting value of type String
2021-03-12 00:04:15,843 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:04:15,851 [main:58] - GENERATED VALUE OF TYPE String = "xyvja"
2021-03-12 00:04:15,851 [main:61] - GENERATED IS CALL =false
2021-03-12 00:04:16,093 [main:67] - randomType = UShort
2021-03-12 00:04:16,284 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 00:04:16,318 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@68916bb2]
2021-03-12 00:04:16,318 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6015949f]
2021-03-12 00:04:16,510 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:04:16,518 [main:78] - Generated call from random type = (26661.toUShort()).toShort().toString(-586087061)
2021-03-12 00:04:16,518 [main:114] - replacement of "Continuation " of type String is (26661.toUShort()).toShort().toString(-586087061)
2021-03-12 00:04:16,708 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:04:16,709 [main:66] - Compilation checking started
2021-03-12 00:04:17,666 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:04:17,670 [main:107] - replacing (fu14 {a: Int -> println("hahzb")}, Continuation<Int>)
2021-03-12 00:04:17,670 [main:50] - replacing fu14 {a: Int -> println("hahzb")} Continuation<Int>
2021-03-12 00:04:17,670 [main:54] - Getting value of type Continuation<Int>
2021-03-12 00:04:17,871 [main:302] - generating value of type = Continuation<Int> false depth = 0
2021-03-12 00:04:18,085 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Int>)->kotlin.Unit): Contuation<Int> = TODO()
2021-03-12 00:04:18,096 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Int>)->kotlin.Unit): Contuation<Int> = TODO()
2021-03-12 00:04:18,860 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 00:04:19,070 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:04:19,080 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:04:19,557 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 00:04:19,772 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:04:19,782 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:04:20,517 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 00:04:20,730 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 00:04:20,740 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 00:04:21,474 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 00:04:21,475 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:04:21,475 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:04:21,475 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Int>)->kotlin.Unit): Contuation<Int> = TODO()
2021-03-12 00:04:21,475 [main:58] - GENERATED VALUE OF TYPE Continuation<Int> = 
2021-03-12 00:04:21,507 [main:67] - randomType = Kla4
2021-03-12 00:04:21,708 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 00:04:21,716 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 00:04:21,727 [main:106] - GETTING Continuation<Int> from Continuation<Any?>
2021-03-12 00:04:21,737 [main:106] - GETTING Continuation<Int> from Any
2021-03-12 00:04:21,741 [main:106] - GETTING Continuation<Int> from Boolean
2021-03-12 00:04:21,749 [main:106] - GETTING Continuation<Int> from Simple
2021-03-12 00:04:21,756 [main:106] - GETTING Continuation<Int> from CoroutineContext
2021-03-12 00:04:21,762 [main:106] - GETTING Continuation<Int> from String
2021-03-12 00:04:21,779 [main:106] - GETTING Continuation<Int> from CoroutineContext
2021-03-12 00:04:21,780 [main:106] - GETTING Continuation<Int> from Continuation<Simple>
2021-03-12 00:04:21,787 [main:106] - GETTING Continuation<Int> from Simple
2021-03-12 00:04:21,788 [main:106] - GETTING Continuation<Int> from KClass<out Any>
2021-03-12 00:04:21,796 [main:106] - GETTING Continuation<Int> from Any
2021-03-12 00:04:21,798 [main:106] - GETTING Continuation<Int> from Any?
2021-03-12 00:04:21,801 [main:106] - GETTING Continuation<Int> from Any
2021-03-12 00:04:21,803 [main:106] - GETTING Continuation<Int> from String
2021-03-12 00:04:21,804 [main:106] - GETTING Continuation<Int> from EmptyCoroutineContext
2021-03-12 00:04:21,818 [main:106] - GETTING Continuation<Int> from CoroutineContext
2021-03-12 00:04:21,819 [main:106] - GETTING Continuation<Int> from Function0<Unit>
2021-03-12 00:04:21,828 [main:106] - GETTING Continuation<Int> from Simple
2021-03-12 00:04:21,829 [main:106] - GETTING Continuation<Int> from KClass<out Any>
2021-03-12 00:04:21,829 [main:111] - Cant find and generate replacement for fu14 {a: Int -> println("hahzb")} type Continuation<Int>
2021-03-12 00:04:21,829 [main:107] - replacing (method, String)
2021-03-12 00:04:21,830 [main:50] - replacing method String
2021-03-12 00:04:21,830 [main:54] - Getting value of type String
2021-03-12 00:04:22,023 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:04:22,031 [main:58] - GENERATED VALUE OF TYPE String = "gyjrc"
2021-03-12 00:04:22,031 [main:61] - GENERATED IS CALL =false
2021-03-12 00:04:22,315 [main:67] - randomType = Boolean?
2021-03-12 00:04:22,510 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:04:22,528 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:04:22,719 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:04:22,728 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-12 00:04:22,919 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:04:22,927 [main:78] - Generated call from random type = (true)?.compareTo(false).toString(275238464)
2021-03-12 00:04:22,928 [main:106] - GETTING String from Simple
2021-03-12 00:04:22,935 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dc46393]]
2021-03-12 00:04:22,935 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dc46393]
2021-03-12 00:04:23,128 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:04:23,137 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.prependIndent("tbcbl")
2021-03-12 00:04:23,137 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7941dfad]]
2021-03-12 00:04:23,137 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7941dfad]
2021-03-12 00:04:23,327 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:04:23,336 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.substringAfterLast('?', var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
2021-03-12 00:04:23,336 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55fca0d2]]
2021-03-12 00:04:23,336 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55fca0d2]
2021-03-12 00:04:23,336 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart()
2021-03-12 00:04:23,336 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25ea4871]]
2021-03-12 00:04:23,336 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25ea4871]
2021-03-12 00:04:23,527 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:04:23,728 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:04:23,738 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:04:24,186 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:04:24,194 [main:95] - GENERATED = StringBuilder("ggfuj")
2021-03-12 00:04:24,194 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.removeSurrounding(StringBuilder("ggfuj"))
2021-03-12 00:04:24,194 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b710b79]]
2021-03-12 00:04:24,194 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b710b79]
2021-03-12 00:04:24,386 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:04:24,394 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.substringAfter('ꢲ', var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
2021-03-12 00:04:24,394 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34b77bd5]]
2021-03-12 00:04:24,394 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34b77bd5]
2021-03-12 00:04:24,585 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:04:24,594 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.drop(1841313448)
2021-03-12 00:04:24,594 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6920716c]]
2021-03-12 00:04:24,594 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6920716c]
2021-03-12 00:04:24,784 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:04:24,792 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimMargin("benda")
2021-03-12 00:04:24,793 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2]]
2021-03-12 00:04:24,793 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
2021-03-12 00:04:24,793 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32fb11a4]]
2021-03-12 00:04:24,793 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32fb11a4]
2021-03-12 00:04:24,793 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.concat(fu1(false))
2021-03-12 00:04:24,793 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70796165]]
2021-03-12 00:04:24,793 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70796165]
2021-03-12 00:04:24,986 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 00:04:24,994 [main:302] - generating value of type = Char true depth = 1
2021-03-12 00:04:25,002 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirstChar({a: Char -> 'ॗ'})
2021-03-12 00:04:25,002 [main:114] - replacement of method of type String is ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
2021-03-12 00:04:25,198 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:04:25,198 [main:66] - Compilation checking started
2021-03-12 00:04:26,161 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:04:26,164 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions, String)
2021-03-12 00:04:26,165 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions String
2021-03-12 00:04:26,165 [main:54] - Getting value of type String
2021-03-12 00:04:26,357 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:04:26,365 [main:58] - GENERATED VALUE OF TYPE String = "zjfzt"
2021-03-12 00:04:26,366 [main:61] - GENERATED IS CALL =false
2021-03-12 00:04:27,414 [main:67] - randomType = ArrayList<Pair<Long, Byte>>
2021-03-12 00:04:27,607 [main:302] - generating value of type = ArrayList<Pair<Long, Byte>> false depth = 0
2021-03-12 00:04:27,811 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Pair<Long, Byte>): ArrayList<Pair<Long, Byte>> = TODO()
2021-03-12 00:04:27,821 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Pair<Long, Byte>): ArrayList<Pair<Long, Byte>> = TODO()
2021-03-12 00:04:28,028 [main:302] - generating value of type = Pair<Long, Byte> false depth = 3
2021-03-12 00:04:28,232 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Long, second: Byte): Pair<Long, Byte> = TODO()
2021-03-12 00:04:28,242 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Long, second: Byte): Pair<Long, Byte> = TODO()
2021-03-12 00:04:28,448 [main:302] - generating value of type = Long true depth = 6
2021-03-12 00:04:28,457 [main:302] - generating value of type = Byte true depth = 6
2021-03-12 00:04:28,465 [main:95] - GENERATED = Pair<Long, Byte>(5928739282435982880, 72)
2021-03-12 00:04:28,465 [main:95] - GENERATED = arrayListOf<Pair<Long, Byte>>(Pair<Long, Byte>(5928739282435982880, 72))
2021-03-12 00:04:28,622 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@2852afc8]
2021-03-12 00:04:28,623 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@48d7aa61]
2021-03-12 00:04:28,623 [main:78] - Generated call from random type = (arrayListOf<Pair<Long, Byte>>(Pair<Long, Byte>(5928739282435982880, 72))).toArray().contentToString()
2021-03-12 00:04:28,624 [main:106] - GETTING String from Continuation<Simple>
2021-03-12 00:04:28,631 [main:106] - GETTING String from CoroutineContext
2021-03-12 00:04:28,636 [main:106] - GETTING String from Simple
2021-03-12 00:04:28,642 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cd32eb5]]
2021-03-12 00:04:28,642 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cd32eb5]
2021-03-12 00:04:28,642 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceIndent(fu1(false))
2021-03-12 00:04:28,642 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3067e7b5]]
2021-03-12 00:04:28,642 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3067e7b5]
2021-03-12 00:04:28,834 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:04:28,842 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:04:28,851 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.takeWhile({a: Char -> false})
2021-03-12 00:04:28,851 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ddbe32e]]
2021-03-12 00:04:28,851 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ddbe32e]
2021-03-12 00:04:28,851 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.decapitalize()
2021-03-12 00:04:28,851 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4632cdd]]
2021-03-12 00:04:28,851 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4632cdd]
2021-03-12 00:04:29,044 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:04:29,245 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:04:29,445 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:04:29,454 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replace('Ɜ', '', false)
2021-03-12 00:04:29,454 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bd56c93]]
2021-03-12 00:04:29,454 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bd56c93]
2021-03-12 00:04:29,672 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 00:04:29,680 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:04:29,688 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false})
2021-03-12 00:04:29,688 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9d455b0]]
2021-03-12 00:04:29,688 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9d455b0]
2021-03-12 00:04:29,880 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:04:29,889 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.take(1776286704)
2021-03-12 00:04:29,889 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e73de07]]
2021-03-12 00:04:29,889 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e73de07]
2021-03-12 00:04:30,084 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:04:30,284 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:04:30,293 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padEnd(-703813485, '鱈')
2021-03-12 00:04:30,293 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fc35b5f]]
2021-03-12 00:04:30,293 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fc35b5f]
2021-03-12 00:04:30,488 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:04:30,496 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:04:30,504 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.takeLastWhile({a: Char -> false})
2021-03-12 00:04:30,505 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@788dfd0b]]
2021-03-12 00:04:30,505 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@788dfd0b]
2021-03-12 00:04:30,697 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:04:30,897 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:04:30,905 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.substringBeforeLast('Ⳝ', "xppds")
2021-03-12 00:04:30,905 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dc46393]]
2021-03-12 00:04:30,906 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dc46393]
2021-03-12 00:04:30,906 [main:117] - GENERATED CALL = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.prependIndent(fu1(false))
2021-03-12 00:04:30,906 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions of type String is ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false})
2021-03-12 00:04:31,100 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:04:31,100 [main:66] - Compilation checking started
2021-03-12 00:04:32,092 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:04:32,096 [main:107] - replacing (fu14 {a: Int -> println("hahzb")}, Continuation<Int>)
2021-03-12 00:04:32,096 [main:50] - replacing fu14 {a: Int -> println("hahzb")} Continuation<Int>
2021-03-12 00:04:32,096 [main:54] - Getting value of type Continuation<Int>
2021-03-12 00:04:32,292 [main:302] - generating value of type = Continuation<Int> false depth = 0
2021-03-12 00:04:32,499 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Int>)->kotlin.Unit): Contuation<Int> = TODO()
2021-03-12 00:04:32,509 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Int>)->kotlin.Unit): Contuation<Int> = TODO()
2021-03-12 00:04:33,247 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 00:04:33,454 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:04:33,464 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:04:33,986 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 00:04:34,208 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:04:34,218 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:04:34,959 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:04:34,960 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:04:34,960 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Int>)->kotlin.Unit): Contuation<Int> = TODO()
2021-03-12 00:04:34,960 [main:58] - GENERATED VALUE OF TYPE Continuation<Int> = 
2021-03-12 00:04:34,977 [main:67] - randomType = Double
2021-03-12 00:04:35,175 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:04:35,212 [main:106] - GETTING Continuation<Int> from Any
2021-03-12 00:04:35,215 [main:106] - GETTING Continuation<Int> from Boolean
2021-03-12 00:04:35,224 [main:106] - GETTING Continuation<Int> from CoroutineContext
2021-03-12 00:04:35,229 [main:106] - GETTING Continuation<Int> from Any
2021-03-12 00:04:35,231 [main:106] - GETTING Continuation<Int> from CoroutineContext
2021-03-12 00:04:35,232 [main:106] - GETTING Continuation<Int> from Any
2021-03-12 00:04:35,233 [main:106] - GETTING Continuation<Int> from Simple
2021-03-12 00:04:35,240 [main:106] - GETTING Continuation<Int> from Function0<Unit>
2021-03-12 00:04:35,249 [main:106] - GETTING Continuation<Int> from EmptyCoroutineContext
2021-03-12 00:04:35,263 [main:106] - GETTING Continuation<Int> from Continuation<Simple>
2021-03-12 00:04:35,269 [main:106] - GETTING Continuation<Int> from Simple
2021-03-12 00:04:35,271 [main:106] - GETTING Continuation<Int> from String
2021-03-12 00:04:35,288 [main:106] - GETTING Continuation<Int> from Any?
2021-03-12 00:04:35,292 [main:106] - GETTING Continuation<Int> from Continuation<Any?>
2021-03-12 00:04:35,299 [main:106] - GETTING Continuation<Int> from CoroutineContext
2021-03-12 00:04:35,300 [main:106] - GETTING Continuation<Int> from KClass<out Any>
2021-03-12 00:04:35,308 [main:106] - GETTING Continuation<Int> from Simple
2021-03-12 00:04:35,309 [main:106] - GETTING Continuation<Int> from KClass<out Any>
2021-03-12 00:04:35,310 [main:106] - GETTING Continuation<Int> from String
2021-03-12 00:04:35,310 [main:111] - Cant find and generate replacement for fu14 {a: Int -> println("hahzb")} type Continuation<Int>
2021-03-12 00:04:35,310 [main:107] - replacing (prope12, Any?)
2021-03-12 00:04:35,311 [main:50] - replacing prope12 Any?
2021-03-12 00:04:35,311 [main:54] - Getting value of type Any?
2021-03-12 00:04:35,504 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:04:35,505 [main:58] - GENERATED VALUE OF TYPE Any? = "xdsrk"
2021-03-12 00:04:35,505 [main:61] - GENERATED IS CALL =false
2021-03-12 00:04:35,537 [main:67] - randomType = Kla11
2021-03-12 00:04:35,735 [main:302] - generating value of type = Kla11 false depth = 0
2021-03-12 00:04:35,744 [main:112] - generating klass Kla11 text = class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}
2021-03-12 00:04:35,750 [main:106] - GETTING Any? from Any?
2021-03-12 00:04:35,753 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 00:04:35,759 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 00:04:35,772 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 00:04:35,779 [main:106] - GETTING Any? from Simple
2021-03-12 00:04:35,785 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 00:04:35,786 [main:106] - GETTING Any? from Boolean
2021-03-12 00:04:35,795 [main:106] - GETTING Any? from String
2021-03-12 00:04:35,811 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 00:04:35,818 [main:106] - GETTING Any? from Any
2021-03-12 00:04:35,820 [main:114] - replacement of prope12 of type Any? is "xdsrk"
2021-03-12 00:04:36,017 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 00:04:36,017 [main:66] - Compilation checking started
2021-03-12 00:04:36,741 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != "-24") return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this."xdsrk" = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:04:36,745 [main:107] - replacing ("-24", String)
2021-03-12 00:04:36,745 [main:50] - replacing "-24" String
2021-03-12 00:04:36,745 [main:54] - Getting value of type String
2021-03-12 00:04:36,942 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:04:36,950 [main:58] - GENERATED VALUE OF TYPE String = "vnyfg"
2021-03-12 00:04:36,950 [main:61] - GENERATED IS CALL =false
2021-03-12 00:04:36,983 [main:67] - randomType = Kla1
2021-03-12 00:04:37,183 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 00:04:37,191 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 00:04:37,227 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@51623da1]
2021-03-12 00:04:37,227 [main:78] - Generated call from random type = (Kla1()).prope2?.toString()!!
2021-03-12 00:04:37,227 [main:114] - replacement of "-24" of type String is (Kla1()).prope2?.toString()!!
2021-03-12 00:04:37,421 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(POSTFIX_EXPRESSION)
2021-03-12 00:04:37,422 [main:66] - Compilation checking started
2021-03-12 00:04:38,404 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope12.getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:04:38,408 [main:107] - replacing (prope12, Result<Any?>)
2021-03-12 00:04:38,409 [main:50] - replacing prope12 Result<Any?>
2021-03-12 00:04:38,409 [main:54] - Getting value of type Result<Any?>
2021-03-12 00:04:38,617 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 00:04:38,823 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 00:04:38,834 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 00:04:39,304 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 00:04:39,313 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:04:39,313 [main:95] - GENERATED = runCatching<Any?>({ "uqhky"})
2021-03-12 00:04:39,313 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "uqhky"})
2021-03-12 00:04:39,313 [main:61] - GENERATED IS CALL =true
2021-03-12 00:04:39,346 [main:67] - randomType = Kla3
2021-03-12 00:04:39,543 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 00:04:39,552 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 00:04:39,558 [main:106] - GETTING Result<Any?> from KClass<out Any>
2021-03-12 00:04:39,567 [main:106] - GETTING Result<Any?> from EmptyCoroutineContext
2021-03-12 00:04:39,581 [main:106] - GETTING Result<Any?> from String
2021-03-12 00:04:39,599 [main:106] - GETTING Result<Any?> from Continuation<Simple>
2021-03-12 00:04:39,607 [main:106] - GETTING Result<Any?> from Any
2021-03-12 00:04:39,611 [main:106] - GETTING Result<Any?> from Function0<Unit>
2021-03-12 00:04:39,620 [main:106] - GETTING Result<Any?> from Simple
2021-03-12 00:04:39,627 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 00:04:39,633 [main:106] - GETTING Result<Any?> from Simple
2021-03-12 00:04:39,635 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 00:04:39,636 [main:106] - GETTING Result<Any?> from Any
2021-03-12 00:04:39,638 [main:106] - GETTING Result<Any?> from Any?
2021-03-12 00:04:39,642 [main:106] - GETTING Result<Any?> from Continuation<Any?>
2021-03-12 00:04:39,650 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 00:04:39,651 [main:106] - GETTING Result<Any?> from Boolean
2021-03-12 00:04:39,660 [main:106] - GETTING Result<Any?> from KClass<out Any>
2021-03-12 00:04:39,662 [main:106] - GETTING Result<Any?> from Simple
2021-03-12 00:04:39,663 [main:106] - GETTING Result<Any?> from String
2021-03-12 00:04:39,665 [main:106] - GETTING Result<Any?> from Any
2021-03-12 00:04:39,665 [main:114] - replacement of prope12 of type Result<Any?> is runCatching<Any?>({ "uqhky"})
2021-03-12 00:04:39,861 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:04:39,862 [main:66] - Compilation checking started
2021-03-12 00:04:40,805 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != 56) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:04:40,809 [main:107] - replacing (56, Int)
2021-03-12 00:04:40,809 [main:50] - replacing 56 Int
2021-03-12 00:04:40,809 [main:54] - Getting value of type Int
2021-03-12 00:04:41,007 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:04:41,015 [main:58] - GENERATED VALUE OF TYPE Int = 1747513266
2021-03-12 00:04:41,015 [main:61] - GENERATED IS CALL =false
2021-03-12 00:04:41,304 [main:67] - randomType = Kla13
2021-03-12 00:04:41,502 [main:302] - generating value of type = Kla13 false depth = 0
2021-03-12 00:04:41,511 [main:112] - generating klass Kla13 text = object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}
2021-03-12 00:04:41,535 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla13[DeserializedSimpleFunctionDescriptor@58378c1e]
2021-03-12 00:04:41,737 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:04:41,738 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:04:41,738 [main:78] - Generated call from random type = (Kla13).equals("muubs").compareTo(Kla4().prope5)
2021-03-12 00:04:41,739 [main:106] - GETTING Int from KClass<out Any>
2021-03-12 00:04:41,750 [main:113] - Case = [public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@448f07af], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]]
2021-03-12 00:04:41,750 [main:149] - GENERATING call of type public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@448f07af]
2021-03-12 00:04:41,948 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:04:41,948 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:04:41,948 [main:117] - GENERATED CALL = (local()::class).equals("ajddb").compareTo(Kla4().prope5)
2021-03-12 00:04:41,948 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@105c84bd], public open fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1114bfcd]]
2021-03-12 00:04:41,948 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1114bfcd]
2021-03-12 00:04:41,948 [main:117] - GENERATED CALL = (local()::class).qualifiedName?.compareTo(fu0("wfstp"))
2021-03-12 00:04:41,948 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@105c84bd], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4e18e7b3]]
2021-03-12 00:04:41,949 [main:117] - GENERATED CALL = (local()::class).qualifiedName?.length
2021-03-12 00:04:41,949 [main:114] - replacement of 56 of type Int is (local()::class).qualifiedName?.length
2021-03-12 00:04:42,150 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 00:04:42,151 [main:66] - Compilation checking started
2021-03-12 00:04:43,166 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    for (i in 1..2) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:04:43,169 [main:107] - replacing (getOrThrow(), Ty1)
2021-03-12 00:04:43,170 [main:50] - replacing getOrThrow() Ty1
2021-03-12 00:04:43,170 [main:54] - Getting value of type Ty1
2021-03-12 00:04:43,371 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 00:04:43,383 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 00:04:43,633 [main:67] - randomType = ULong
2021-03-12 00:04:43,831 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 00:04:43,866 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 00:04:43,874 [main:106] - GETTING Ty1 from String
2021-03-12 00:04:43,891 [main:106] - GETTING Ty1 from Any
2021-03-12 00:04:43,894 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 00:04:43,899 [main:106] - GETTING Ty1 from Continuation<Simple>
2021-03-12 00:04:43,906 [main:106] - GETTING Ty1 from KClass<out Any>
2021-03-12 00:04:43,914 [main:106] - GETTING Ty1 from Continuation<Any?>
2021-03-12 00:04:43,920 [main:106] - GETTING Ty1 from Simple
2021-03-12 00:04:43,927 [main:106] - GETTING Ty1 from Any
2021-03-12 00:04:43,928 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 00:04:43,928 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 00:04:43,929 [main:106] - GETTING Ty1 from Boolean
2021-03-12 00:04:43,938 [main:106] - GETTING Ty1 from Simple
2021-03-12 00:04:43,938 [main:106] - GETTING Ty1 from Any?
2021-03-12 00:04:43,942 [main:106] - GETTING Ty1 from KClass<out Any>
2021-03-12 00:04:43,943 [main:106] - GETTING Ty1 from Any
2021-03-12 00:04:43,944 [main:106] - GETTING Ty1 from String
2021-03-12 00:04:43,945 [main:106] - GETTING Ty1 from EmptyCoroutineContext
2021-03-12 00:04:43,958 [main:106] - GETTING Ty1 from Simple
2021-03-12 00:04:43,958 [main:111] - Cant find and generate replacement for getOrThrow() type Ty1
2021-03-12 00:04:43,958 [main:107] - replacing (2, Int)
2021-03-12 00:04:43,959 [main:50] - replacing 2 Int
2021-03-12 00:04:43,959 [main:54] - Getting value of type Int
2021-03-12 00:04:44,162 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:04:44,170 [main:58] - GENERATED VALUE OF TYPE Int = -304946585
2021-03-12 00:04:44,170 [main:61] - GENERATED IS CALL =false
2021-03-12 00:04:44,436 [main:67] - randomType = Double?
2021-03-12 00:04:44,639 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:04:44,683 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@214a254]
2021-03-12 00:04:44,881 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:04:44,890 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fd7bf93]
2021-03-12 00:04:44,890 [main:78] - Generated call from random type = (0.859249731284033)?.compareTo(35).inv()
2021-03-12 00:04:44,891 [main:106] - GETTING Int from Any
2021-03-12 00:04:44,894 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]]
2021-03-12 00:04:44,894 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:04:44,895 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:04:45,096 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:04:45,105 [main:117] - GENERATED CALL = (localCaptured()).equals(Kla1().prope2).compareTo(true)
2021-03-12 00:04:45,105 [main:114] - replacement of 2 of type Int is (localCaptured()).equals(Kla1().prope2).compareTo(true)
2021-03-12 00:04:45,326 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:04:45,326 [main:66] - Compilation checking started
2021-03-12 00:04:46,279 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:04:46,283 [main:107] - replacing ({
        fu19(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 00:04:46,283 [main:50] - replacing {
        fu19(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-12 00:04:46,283 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 00:04:46,484 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 00:04:46,493 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:04:46,704 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:04:46,714 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:04:47,188 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:04:47,189 [main:95] - GENERATED = println("qorrr")
2021-03-12 00:04:47,189 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> println("qorrr")}
2021-03-12 00:04:47,189 [main:61] - GENERATED IS CALL =false
2021-03-12 00:04:47,226 [main:67] - randomType = Kla5
2021-03-12 00:04:47,424 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 00:04:47,433 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:04:47,452 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<Any?>
2021-03-12 00:04:47,459 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 00:04:47,477 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any
2021-03-12 00:04:47,481 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 00:04:47,487 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from EmptyCoroutineContext
2021-03-12 00:04:47,501 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Simple
2021-03-12 00:04:47,509 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Simple
2021-03-12 00:04:47,511 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 00:04:47,512 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<Simple>
2021-03-12 00:04:47,520 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any?
2021-03-12 00:04:47,525 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Simple
2021-03-12 00:04:47,526 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 00:04:47,528 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any
2021-03-12 00:04:47,530 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any
2021-03-12 00:04:47,531 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from KClass<out Any>
2021-03-12 00:04:47,541 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from KClass<out Any>
2021-03-12 00:04:47,543 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-12 00:04:47,552 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 00:04:47,554 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function0<Unit>
2021-03-12 00:04:47,562 [main:114] - replacement of {
        fu19(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> println("qorrr")}
2021-03-12 00:04:47,762 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:04:47,763 [main:66] - Compilation checking started
2021-03-12 00:04:48,757 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:04:48,761 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 00:04:48,761 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 00:04:48,761 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 00:04:48,980 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 00:04:48,992 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 00:04:49,272 [main:67] - randomType = UInt
2021-03-12 00:04:49,474 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 00:04:49,516 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 00:04:49,533 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-12 00:04:49,541 [main:106] - GETTING EmptyCoroutineContext from Simple
2021-03-12 00:04:49,548 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 00:04:49,549 [main:106] - GETTING EmptyCoroutineContext from Continuation<Simple>
2021-03-12 00:04:49,556 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 00:04:49,561 [main:106] - GETTING EmptyCoroutineContext from Simple
2021-03-12 00:04:49,562 [main:106] - GETTING EmptyCoroutineContext from KClass<out Any>
2021-03-12 00:04:49,570 [main:106] - GETTING EmptyCoroutineContext from Any
2021-03-12 00:04:49,573 [main:106] - GETTING EmptyCoroutineContext from KClass<out Any>
2021-03-12 00:04:49,574 [main:106] - GETTING EmptyCoroutineContext from Continuation<Any?>
2021-03-12 00:04:49,581 [main:106] - GETTING EmptyCoroutineContext from Function0<Unit>
2021-03-12 00:04:49,590 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 00:04:49,591 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 00:04:49,591 [main:106] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-12 00:04:49,604 [main:114] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla1().context
2021-03-12 00:04:49,804 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:04:49,805 [main:66] - Compilation checking started
2021-03-12 00:04:50,774 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:04:50,778 [main:107] - replacing (getOrThrow(), Ty1)
2021-03-12 00:04:50,778 [main:50] - replacing getOrThrow() Ty1
2021-03-12 00:04:50,778 [main:54] - Getting value of type Ty1
2021-03-12 00:04:50,980 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 00:04:50,991 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 00:04:51,245 [main:67] - randomType = Long
2021-03-12 00:04:51,446 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:04:51,484 [main:106] - GETTING Ty1 from String
2021-03-12 00:04:51,500 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 00:04:51,506 [main:106] - GETTING Ty1 from KClass<out Any>
2021-03-12 00:04:51,514 [main:106] - GETTING Ty1 from Any
2021-03-12 00:04:51,517 [main:106] - GETTING Ty1 from EmptyCoroutineContext
2021-03-12 00:04:51,530 [main:106] - GETTING Ty1 from Any
2021-03-12 00:04:51,531 [main:106] - GETTING Ty1 from String
2021-03-12 00:04:51,532 [main:106] - GETTING Ty1 from Simple
2021-03-12 00:04:51,539 [main:106] - GETTING Ty1 from Simple
2021-03-12 00:04:51,540 [main:106] - GETTING Ty1 from Any
2021-03-12 00:04:51,541 [main:106] - GETTING Ty1 from KClass<out Any>
2021-03-12 00:04:51,541 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 00:04:51,542 [main:106] - GETTING Ty1 from Continuation<Simple>
2021-03-12 00:04:51,549 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 00:04:51,558 [main:106] - GETTING Ty1 from Boolean
2021-03-12 00:04:51,566 [main:106] - GETTING Ty1 from Continuation<Any?>
2021-03-12 00:04:51,573 [main:106] - GETTING Ty1 from Any?
2021-03-12 00:04:51,576 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 00:04:51,577 [main:106] - GETTING Ty1 from Simple
2021-03-12 00:04:51,577 [main:111] - Cant find and generate replacement for getOrThrow() type Ty1
2021-03-12 00:04:51,577 [main:107] - replacing (prope17, Function0<Unit>)
2021-03-12 00:04:51,577 [main:50] - replacing prope17 Function0<Unit>
2021-03-12 00:04:51,577 [main:54] - Getting value of type Function0<Unit>
2021-03-12 00:04:51,777 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 00:04:51,785 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:04:51,995 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:04:52,006 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:04:52,479 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:04:52,488 [main:95] - GENERATED = check(false)
2021-03-12 00:04:52,488 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-12 00:04:52,488 [main:61] - GENERATED IS CALL =false
2021-03-12 00:04:52,506 [main:67] - randomType = Boolean
2021-03-12 00:04:52,708 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:04:52,726 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 00:04:52,732 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 00:04:52,733 [main:106] - GETTING Function0<Unit> from KClass<out Any>
2021-03-12 00:04:52,742 [main:106] - GETTING Function0<Unit> from Simple
2021-03-12 00:04:52,749 [main:106] - GETTING Function0<Unit> from String
2021-03-12 00:04:52,765 [main:106] - GETTING Function0<Unit> from EmptyCoroutineContext
2021-03-12 00:04:52,779 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 00:04:52,782 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 00:04:52,784 [main:106] - GETTING Function0<Unit> from Continuation<Simple>
2021-03-12 00:04:52,792 [main:106] - GETTING Function0<Unit> from Simple
2021-03-12 00:04:52,793 [main:106] - GETTING Function0<Unit> from Simple
2021-03-12 00:04:52,794 [main:106] - GETTING Function0<Unit> from String
2021-03-12 00:04:52,794 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 00:04:52,803 [main:114] - replacement of prope17 of type Function0<Unit> is { check(false)}
2021-03-12 00:04:53,022 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:04:53,022 [main:66] - Compilation checking started
2021-03-12 00:04:53,744 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            { check(false)}()
        }
        if (prope15 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:04:53,747 [main:107] - replacing (prope17, Function0<Unit>)
2021-03-12 00:04:53,747 [main:50] - replacing prope17 Function0<Unit>
2021-03-12 00:04:53,747 [main:54] - Getting value of type Function0<Unit>
2021-03-12 00:04:53,950 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 00:04:53,959 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:04:54,175 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:04:54,185 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:04:54,669 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:04:54,678 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:04:54,889 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:04:54,900 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:04:55,369 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:04:55,377 [main:95] - GENERATED = check(true)
2021-03-12 00:04:55,378 [main:95] - GENERATED = contract({ check(true)})
2021-03-12 00:04:55,378 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ check(true)})}
2021-03-12 00:04:55,378 [main:61] - GENERATED IS CALL =false
2021-03-12 00:04:55,662 [main:67] - randomType = Kla7?
2021-03-12 00:04:55,862 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 00:04:55,871 [main:112] - generating klass Kla7 text = class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}
2021-03-12 00:04:55,877 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-12 00:04:55,886 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 00:04:55,892 [main:106] - GETTING Function0<Unit> from Continuation<Any?>
2021-03-12 00:04:55,898 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 00:04:55,905 [main:114] - replacement of prope17 of type Function0<Unit> is { contract({ check(true)})}
2021-03-12 00:04:56,106 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:04:56,106 [main:66] - Compilation checking started
2021-03-12 00:04:56,814 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        { contract({ check(true)})} = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:04:56,818 [main:107] - replacing (fu14 {a: Int -> println("hahzb")}, Continuation<Int>)
2021-03-12 00:04:56,818 [main:50] - replacing fu14 {a: Int -> println("hahzb")} Continuation<Int>
2021-03-12 00:04:56,818 [main:54] - Getting value of type Continuation<Int>
2021-03-12 00:04:57,040 [main:302] - generating value of type = Continuation<Int> false depth = 0
2021-03-12 00:04:57,252 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Int>)->kotlin.Unit): Contuation<Int> = TODO()
2021-03-12 00:04:57,263 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Int>)->kotlin.Unit): Contuation<Int> = TODO()
2021-03-12 00:04:58,012 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 00:04:58,224 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:04:58,235 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:04:58,725 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 00:04:58,947 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:04:58,958 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:04:59,717 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 00:04:59,936 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 00:04:59,947 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 00:05:00,780 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 00:05:00,780 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:05:00,780 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:05:00,780 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Int>)->kotlin.Unit): Contuation<Int> = TODO()
2021-03-12 00:05:00,780 [main:58] - GENERATED VALUE OF TYPE Continuation<Int> = 
2021-03-12 00:05:00,798 [main:67] - randomType = Double
2021-03-12 00:05:00,999 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:05:01,043 [main:106] - GETTING Continuation<Int> from Simple
2021-03-12 00:05:01,050 [main:106] - GETTING Continuation<Int> from String
2021-03-12 00:05:01,071 [main:106] - GETTING Continuation<Int> from KClass<out Any>
2021-03-12 00:05:01,079 [main:106] - GETTING Continuation<Int> from CoroutineContext
2021-03-12 00:05:01,085 [main:106] - GETTING Continuation<Int> from Any
2021-03-12 00:05:01,089 [main:106] - GETTING Continuation<Int> from Function0<Unit>
2021-03-12 00:05:01,098 [main:106] - GETTING Continuation<Int> from String
2021-03-12 00:05:01,099 [main:106] - GETTING Continuation<Int> from Continuation<Any?>
2021-03-12 00:05:01,107 [main:106] - GETTING Continuation<Int> from EmptyCoroutineContext
2021-03-12 00:05:01,120 [main:106] - GETTING Continuation<Int> from Simple
2021-03-12 00:05:01,121 [main:106] - GETTING Continuation<Int> from Any
2021-03-12 00:05:01,123 [main:106] - GETTING Continuation<Int> from Any
2021-03-12 00:05:01,124 [main:106] - GETTING Continuation<Int> from Continuation<Simple>
2021-03-12 00:05:01,131 [main:106] - GETTING Continuation<Int> from KClass<out Any>
2021-03-12 00:05:01,133 [main:106] - GETTING Continuation<Int> from CoroutineContext
2021-03-12 00:05:01,134 [main:106] - GETTING Continuation<Int> from CoroutineContext
2021-03-12 00:05:01,135 [main:106] - GETTING Continuation<Int> from Simple
2021-03-12 00:05:01,136 [main:106] - GETTING Continuation<Int> from Boolean
2021-03-12 00:05:01,145 [main:106] - GETTING Continuation<Int> from Any?
2021-03-12 00:05:01,148 [main:111] - Cant find and generate replacement for fu14 {a: Int -> println("hahzb")} type Continuation<Int>
2021-03-12 00:05:01,148 [main:107] - replacing (prope12, Any?)
2021-03-12 00:05:01,148 [main:50] - replacing prope12 Any?
2021-03-12 00:05:01,148 [main:54] - Getting value of type Any?
2021-03-12 00:05:01,350 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:05:01,351 [main:58] - GENERATED VALUE OF TYPE Any? = "comns"
2021-03-12 00:05:01,351 [main:61] - GENERATED IS CALL =false
2021-03-12 00:05:01,635 [main:67] - randomType = ArrayDeque<Kla7>
2021-03-12 00:05:01,833 [main:302] - generating value of type = ArrayDeque<Kla7> false depth = 0
2021-03-12 00:05:02,043 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Kla7> = TODO()
2021-03-12 00:05:02,053 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Kla7> = TODO()
2021-03-12 00:05:02,517 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:05:02,526 [main:95] - GENERATED = ArrayDeque<Kla7>(403730680)
2021-03-12 00:05:02,638 [main:149] - GENERATING call of type @kotlin.js.JsName public open fun toJSON(): kotlin.Any defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@4928a406]
2021-03-12 00:05:02,638 [main:78] - Generated call from random type = (ArrayDeque<Kla7>(403730680)).toJSON()
2021-03-12 00:05:02,639 [main:106] - GETTING Any? from KClass<out Any>
2021-03-12 00:05:02,648 [main:106] - GETTING Any? from Boolean
2021-03-12 00:05:02,656 [main:106] - GETTING Any? from String
2021-03-12 00:05:02,672 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 00:05:02,678 [main:106] - GETTING Any? from Any
2021-03-12 00:05:02,680 [main:114] - replacement of prope12 of type Any? is "comns"
2021-03-12 00:05:02,878 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 00:05:02,878 [main:66] - Compilation checking started
2021-03-12 00:05:03,593 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return "fail 2: $prope13"

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this."comns" = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:05:03,597 [main:107] - replacing ("fail 2: $prope13", String)
2021-03-12 00:05:03,597 [main:50] - replacing "fail 2: $prope13" String
2021-03-12 00:05:03,597 [main:54] - Getting value of type String
2021-03-12 00:05:03,797 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:05:03,805 [main:58] - GENERATED VALUE OF TYPE String = "uzyar"
2021-03-12 00:05:03,805 [main:61] - GENERATED IS CALL =false
2021-03-12 00:05:04,080 [main:67] - randomType = ArrayList<Short>
2021-03-12 00:05:04,281 [main:302] - generating value of type = ArrayList<Short> false depth = 0
2021-03-12 00:05:04,522 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Short): ArrayList<Short> = TODO()
2021-03-12 00:05:04,532 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Short): ArrayList<Short> = TODO()
2021-03-12 00:05:04,751 [main:302] - generating value of type = Short true depth = 3
2021-03-12 00:05:04,761 [main:95] - GENERATED = arrayListOf<Short>(-27222)
2021-03-12 00:05:04,890 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4ad6eef5]
2021-03-12 00:05:04,890 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5e250a1a]
2021-03-12 00:05:04,890 [main:78] - Generated call from random type = (arrayListOf<Short>(-27222)).toArray().contentDeepToString()
2021-03-12 00:05:04,891 [main:106] - GETTING String from Simple
2021-03-12 00:05:04,898 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f2eeae5]]
2021-03-12 00:05:04,898 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f2eeae5]
2021-03-12 00:05:05,103 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:05:05,310 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:05:05,319 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeRange(-1221699966, 1828442175)
2021-03-12 00:05:05,319 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30ecd0aa]]
2021-03-12 00:05:05,319 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30ecd0aa]
2021-03-12 00:05:05,319 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.trim()
2021-03-12 00:05:05,319 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@406dcd44]]
2021-03-12 00:05:05,319 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@406dcd44]
2021-03-12 00:05:05,523 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:05:05,737 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:05:05,947 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:05:05,955 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.replaceBefore('礌', "ywuoy", "qfhwd")
2021-03-12 00:05:05,956 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71bb39bb]]
2021-03-12 00:05:05,956 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71bb39bb]
2021-03-12 00:05:06,160 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:05:06,371 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:05:06,381 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:05:06,847 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:05:06,856 [main:95] - GENERATED = StringBuilder("xvciw")
2021-03-12 00:05:06,856 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))
2021-03-12 00:05:06,856 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3f6d2d]]
2021-03-12 00:05:06,856 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3f6d2d]
2021-03-12 00:05:07,055 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:05:07,265 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:05:07,474 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:05:07,684 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:05:07,694 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:05:08,162 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:05:08,171 [main:95] - GENERATED = StringBuilder("prldn")
2021-03-12 00:05:08,172 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.replaceRange(-1974796741, 1572095832, StringBuilder("prldn"))
2021-03-12 00:05:08,172 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@160250e6]]
2021-03-12 00:05:08,172 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@160250e6]
2021-03-12 00:05:08,386 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:05:08,395 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.dropLast(295193431)
2021-03-12 00:05:08,395 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32fb11a4]]
2021-03-12 00:05:08,395 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32fb11a4]
2021-03-12 00:05:08,395 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.concat(fu1(false))
2021-03-12 00:05:08,395 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@788dfd0b]]
2021-03-12 00:05:08,395 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@788dfd0b]
2021-03-12 00:05:08,595 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:05:08,604 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.substringBeforeLast('〠', fu0("wfstp"))
2021-03-12 00:05:08,604 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3067e7b5]]
2021-03-12 00:05:08,604 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3067e7b5]
2021-03-12 00:05:08,806 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:05:08,814 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:05:08,823 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.takeWhile({a: Char -> false})
2021-03-12 00:05:08,823 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@38d647b2], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b106cd8]]
2021-03-12 00:05:08,823 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b106cd8]
2021-03-12 00:05:08,823 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.trimEnd()
2021-03-12 00:05:08,824 [main:114] - replacement of "fail 2: $prope13" of type String is (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))
2021-03-12 00:05:09,025 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:05:09,025 [main:66] - Compilation checking started
2021-03-12 00:05:10,042 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:05:10,045 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 00:05:10,046 [main:50] - replacing numberOfSuspensions Int
2021-03-12 00:05:10,046 [main:54] - Getting value of type Int
2021-03-12 00:05:10,251 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:05:10,260 [main:58] - GENERATED VALUE OF TYPE Int = -578299726
2021-03-12 00:05:10,260 [main:61] - GENERATED IS CALL =false
2021-03-12 00:05:10,537 [main:67] - randomType = ArrayDeque<UShort>
2021-03-12 00:05:10,738 [main:302] - generating value of type = ArrayDeque<UShort> false depth = 0
2021-03-12 00:05:10,951 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<UShort>): ArrayDeque<UShort> = TODO()
2021-03-12 00:05:10,961 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<UShort>): ArrayDeque<UShort> = TODO()
2021-03-12 00:05:11,457 [main:302] - generating value of type = Collection<UShort> false depth = 3
2021-03-12 00:05:11,670 [main:43] - GENERATING CALL OF fun <E> HashSet(): Collection<UShort> = TODO()
2021-03-12 00:05:11,680 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(): Collection<UShort> = TODO()
2021-03-12 00:05:11,897 [main:95] - GENERATED = HashSet<UShort>()
2021-03-12 00:05:11,897 [main:95] - GENERATED = ArrayDeque<UShort>(HashSet<UShort>())
2021-03-12 00:05:12,013 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@24112ec4]
2021-03-12 00:05:12,217 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:05:12,226 [main:78] - Generated call from random type = (ArrayDeque<UShort>(HashSet<UShort>())).size.coerceAtMost(-1933278734)
2021-03-12 00:05:12,227 [main:106] - GETTING Int from Any
2021-03-12 00:05:12,230 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]]
2021-03-12 00:05:12,230 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2fdf4d08]
2021-03-12 00:05:12,230 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:05:12,230 [main:117] - GENERATED CALL = (localCaptured()).equals(Kla1().prope2).compareTo(Kla4().prope5)
2021-03-12 00:05:12,230 [main:114] - replacement of numberOfSuspensions of type Int is -578299726
2021-03-12 00:05:12,448 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 00:05:12,448 [main:66] - Compilation checking started
2021-03-12 00:05:13,462 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:05:13,466 [main:107] - replacing ({ c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 00:05:13,466 [main:50] - replacing { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-12 00:05:13,466 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 00:05:13,667 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 00:05:13,676 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:05:13,889 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:05:13,900 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:05:14,640 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:05:14,649 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:05:14,658 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:05:14,658 [main:95] - GENERATED = check(true, { "qyskf"})
2021-03-12 00:05:14,658 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> check(true, { "qyskf"})}
2021-03-12 00:05:14,658 [main:61] - GENERATED IS CALL =false
2021-03-12 00:05:14,943 [main:67] - randomType = Simple?
2021-03-12 00:05:15,146 [main:302] - generating value of type = Simple false depth = 0
2021-03-12 00:05:15,155 [main:112] - generating klass Simple text = @Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)
2021-03-12 00:05:15,163 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 00:05:15,181 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<Simple>
2021-03-12 00:05:15,189 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Simple
2021-03-12 00:05:15,196 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any
2021-03-12 00:05:15,200 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from EmptyCoroutineContext
2021-03-12 00:05:15,215 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-12 00:05:15,224 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Simple
2021-03-12 00:05:15,226 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any
2021-03-12 00:05:15,227 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 00:05:15,229 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from KClass<out Any>
2021-03-12 00:05:15,238 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<Any?>
2021-03-12 00:05:15,246 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any?
2021-03-12 00:05:15,251 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 00:05:15,257 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 00:05:15,259 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any
2021-03-12 00:05:15,260 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Simple
2021-03-12 00:05:15,262 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 00:05:15,264 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from KClass<out Any>
2021-03-12 00:05:15,265 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function0<Unit>
2021-03-12 00:05:15,274 [main:114] - replacement of { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> check(true, { "qyskf"})}
2021-03-12 00:05:15,474 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:05:15,475 [main:66] - Compilation checking started
2021-03-12 00:05:16,463 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:05:16,467 [main:107] - replacing (prope12, Result<Any?>)
2021-03-12 00:05:16,467 [main:50] - replacing prope12 Result<Any?>
2021-03-12 00:05:16,467 [main:54] - Getting value of type Result<Any?>
2021-03-12 00:05:16,699 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 00:05:16,921 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 00:05:16,932 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 00:05:17,417 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 00:05:17,426 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:05:17,426 [main:95] - GENERATED = runCatching<Any?>({ "lcvpl"})
2021-03-12 00:05:17,426 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "lcvpl"})
2021-03-12 00:05:17,427 [main:61] - GENERATED IS CALL =true
2021-03-12 00:05:17,461 [main:67] - randomType = Kla12
2021-03-12 00:05:17,662 [main:302] - generating value of type = Kla12 false depth = 0
2021-03-12 00:05:17,671 [main:112] - generating klass Kla12 text = class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}
2021-03-12 00:05:17,679 [main:106] - GETTING Result<Any?> from Function0<Unit>
2021-03-12 00:05:17,688 [main:106] - GETTING Result<Any?> from EmptyCoroutineContext
2021-03-12 00:05:17,702 [main:106] - GETTING Result<Any?> from Boolean
2021-03-12 00:05:17,711 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 00:05:17,717 [main:106] - GETTING Result<Any?> from Continuation<Simple>
2021-03-12 00:05:17,724 [main:106] - GETTING Result<Any?> from Simple
2021-03-12 00:05:17,731 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 00:05:17,733 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 00:05:17,734 [main:106] - GETTING Result<Any?> from Simple
2021-03-12 00:05:17,736 [main:106] - GETTING Result<Any?> from String
2021-03-12 00:05:17,754 [main:106] - GETTING Result<Any?> from Any?
2021-03-12 00:05:17,758 [main:106] - GETTING Result<Any?> from Any
2021-03-12 00:05:17,761 [main:106] - GETTING Result<Any?> from Simple
2021-03-12 00:05:17,763 [main:106] - GETTING Result<Any?> from Any
2021-03-12 00:05:17,764 [main:106] - GETTING Result<Any?> from KClass<out Any>
2021-03-12 00:05:17,773 [main:106] - GETTING Result<Any?> from KClass<out Any>
2021-03-12 00:05:17,775 [main:106] - GETTING Result<Any?> from String
2021-03-12 00:05:17,776 [main:106] - GETTING Result<Any?> from Any
2021-03-12 00:05:17,778 [main:106] - GETTING Result<Any?> from Continuation<Any?>
2021-03-12 00:05:17,784 [main:114] - replacement of prope12 of type Result<Any?> is runCatching<Any?>({ "lcvpl"})
2021-03-12 00:05:17,984 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:05:17,985 [main:66] - Compilation checking started
2021-03-12 00:05:18,955 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:05:18,959 [main:107] - replacing (c, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int>)
2021-03-12 00:05:18,959 [main:50] - replacing c [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int>
2021-03-12 00:05:18,959 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int>
2021-03-12 00:05:19,162 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int> false depth = 0
2021-03-12 00:05:19,171 [main:302] - generating value of type = Int true depth = 1
2021-03-12 00:05:19,179 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int> = {a: Kla7 -> 198606105}
2021-03-12 00:05:19,180 [main:61] - GENERATED IS CALL =false
2021-03-12 00:05:19,197 [main:67] - randomType = Float
2021-03-12 00:05:19,398 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:05:19,438 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int> from Any?
2021-03-12 00:05:19,445 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int> from String
2021-03-12 00:05:19,466 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int> from CoroutineContext
2021-03-12 00:05:19,475 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int> from Continuation<Simple>
2021-03-12 00:05:19,486 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int> from Simple
2021-03-12 00:05:19,497 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int> from CoroutineContext
2021-03-12 00:05:19,501 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int> from String
2021-03-12 00:05:19,506 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int> from Simple
2021-03-12 00:05:19,510 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int> from Simple
2021-03-12 00:05:19,514 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int> from Any
2021-03-12 00:05:19,522 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int> from Any
2021-03-12 00:05:19,526 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int> from KClass<out Any>
2021-03-12 00:05:19,538 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int> from KClass<out Any>
2021-03-12 00:05:19,542 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int> from Continuation<Any?>
2021-03-12 00:05:19,553 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int> from Boolean
2021-03-12 00:05:19,565 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int> from EmptyCoroutineContext
2021-03-12 00:05:19,582 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int> from CoroutineContext
2021-03-12 00:05:19,587 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int> from Any
2021-03-12 00:05:19,591 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int> from Function0<Unit>
2021-03-12 00:05:19,599 [main:114] - replacement of c of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int> is {a: Kla7 -> 198606105}
2021-03-12 00:05:19,800 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:05:19,801 [main:66] - Compilation checking started
2021-03-12 00:05:20,545 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    {a: Kla7 -> 198606105}.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        x(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:05:20,549 [main:107] - replacing (x, Function1<Int, Unit>)
2021-03-12 00:05:20,549 [main:50] - replacing x Function1<Int, Unit>
2021-03-12 00:05:20,549 [main:54] - Getting value of type Function1<Int, Unit>
2021-03-12 00:05:20,769 [main:302] - generating value of type = Function1<Int, Unit> false depth = 0
2021-03-12 00:05:20,778 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:05:20,990 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:05:21,000 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:05:21,740 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:05:21,749 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:05:21,757 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:05:21,758 [main:95] - GENERATED = check(false, { "gfhru"})
2021-03-12 00:05:21,758 [main:58] - GENERATED VALUE OF TYPE Function1<Int, Unit> = {a: Int -> check(false, { "gfhru"})}
2021-03-12 00:05:21,758 [main:61] - GENERATED IS CALL =false
2021-03-12 00:05:22,572 [main:67] - randomType = Kla10<ArrayDeque<Boolean?>>
2021-03-12 00:05:22,773 [main:302] - generating value of type = Kla10<ArrayDeque<Boolean?>> false depth = 0
2021-03-12 00:05:22,781 [main:112] - generating klass Kla10 text = abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-12 00:05:24,076 [main:302] - generating value of type = Kla13 false depth = 2
2021-03-12 00:05:24,085 [main:112] - generating klass Kla13 text = object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}
2021-03-12 00:05:24,102 [main:106] - GETTING Function1<Int, Unit> from KClass<out Any>
2021-03-12 00:05:24,111 [main:106] - GETTING Function1<Int, Unit> from Any
2021-03-12 00:05:24,114 [main:106] - GETTING Function1<Int, Unit> from Simple
2021-03-12 00:05:24,122 [main:106] - GETTING Function1<Int, Unit> from Simple
2021-03-12 00:05:24,123 [main:106] - GETTING Function1<Int, Unit> from CoroutineContext
2021-03-12 00:05:24,130 [main:106] - GETTING Function1<Int, Unit> from String
2021-03-12 00:05:24,147 [main:106] - GETTING Function1<Int, Unit> from Simple
2021-03-12 00:05:24,148 [main:106] - GETTING Function1<Int, Unit> from Function0<Unit>
2021-03-12 00:05:24,158 [main:106] - GETTING Function1<Int, Unit> from KClass<out Any>
2021-03-12 00:05:24,159 [main:106] - GETTING Function1<Int, Unit> from String
2021-03-12 00:05:24,161 [main:106] - GETTING Function1<Int, Unit> from Any
2021-03-12 00:05:24,162 [main:106] - GETTING Function1<Int, Unit> from CoroutineContext
2021-03-12 00:05:24,163 [main:106] - GETTING Function1<Int, Unit> from CoroutineContext
2021-03-12 00:05:24,165 [main:106] - GETTING Function1<Int, Unit> from Continuation<Any?>
2021-03-12 00:05:24,173 [main:106] - GETTING Function1<Int, Unit> from Boolean
2021-03-12 00:05:24,182 [main:106] - GETTING Function1<Int, Unit> from EmptyCoroutineContext
2021-03-12 00:05:24,195 [main:106] - GETTING Function1<Int, Unit> from Continuation<Simple>
2021-03-12 00:05:24,203 [main:106] - GETTING Function1<Int, Unit> from Any?
2021-03-12 00:05:24,207 [main:106] - GETTING Function1<Int, Unit> from Any
2021-03-12 00:05:24,207 [main:114] - replacement of x of type Function1<Int, Unit> is {a: Int -> check(false, { "gfhru"})}
2021-03-12 00:05:24,405 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:05:24,406 [main:66] - Compilation checking started
2021-03-12 00:05:25,436 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:05:25,440 [main:107] - replacing (false, Boolean)
2021-03-12 00:05:25,440 [main:50] - replacing false Boolean
2021-03-12 00:05:25,440 [main:54] - Getting value of type Boolean
2021-03-12 00:05:25,660 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:05:25,669 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:05:25,669 [main:61] - GENERATED IS CALL =false
2021-03-12 00:05:25,705 [main:67] - randomType = Kla1
2021-03-12 00:05:25,908 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 00:05:25,917 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 00:05:25,932 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@27825f0]
2021-03-12 00:05:25,933 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-12 00:05:25,933 [main:78] - Generated call from random type = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)
2021-03-12 00:05:25,933 [main:114] - replacement of false of type Boolean is (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)
2021-03-12 00:05:26,139 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:05:26,140 [main:66] - Compilation checking started
2021-03-12 00:05:27,145 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:05:27,149 [main:107] - replacing (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"), String)
2021-03-12 00:05:27,149 [main:50] - replacing ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n") String
2021-03-12 00:05:27,149 [main:54] - Getting value of type String
2021-03-12 00:05:27,355 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:05:27,363 [main:58] - GENERATED VALUE OF TYPE String = "mdpzu"
2021-03-12 00:05:27,364 [main:61] - GENERATED IS CALL =false
2021-03-12 00:05:27,659 [main:67] - randomType = Sequence<Kla1>
2021-03-12 00:05:27,660 [main:106] - GETTING String from KClass<out Any>
2021-03-12 00:05:27,668 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@5dea99b], @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c057cac]]
2021-03-12 00:05:27,668 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c057cac]
2021-03-12 00:05:27,668 [main:117] - GENERATED CALL = ((local()::class)).qualifiedName?.orEmpty()
2021-03-12 00:05:27,668 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@5dea99b], public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6519cd8a]]
2021-03-12 00:05:27,668 [main:149] - GENERATING call of type public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6519cd8a]
2021-03-12 00:05:27,872 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:05:27,872 [main:117] - GENERATED CALL = ((local()::class)).qualifiedName?.plus("hvxou")
2021-03-12 00:05:27,872 [main:113] - Case = [public abstract val simpleName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@37d9c70b]]
2021-03-12 00:05:27,872 [main:117] - GENERATED CALL = ((local()::class)).simpleName
2021-03-12 00:05:27,872 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@5dea99b]]
2021-03-12 00:05:27,873 [main:117] - GENERATED CALL = ((local()::class)).qualifiedName
2021-03-12 00:05:27,873 [main:114] - replacement of ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n") of type String is ((local()::class)).qualifiedName?.plus("hvxou")
2021-03-12 00:05:28,080 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 00:05:28,081 [main:66] - Compilation checking started
2021-03-12 00:05:28,775 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true } ?: error(((local()::class)).qualifiedName?.plus("hvxou"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:05:28,779 [main:107] - replacing (prope12.exceptionOrNull()!!, Throwable)
2021-03-12 00:05:28,779 [main:50] - replacing prope12.exceptionOrNull()!! Throwable
2021-03-12 00:05:28,779 [main:54] - Getting value of type Throwable
2021-03-12 00:05:28,982 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 00:05:29,221 [main:43] - GENERATING CALL OF fun NumberFormatException(message: kotlin.String?): Throwable = TODO()
2021-03-12 00:05:29,232 [main:61] - WITHOUT TYPE PARAMS = fun NumberFormatException(message: kotlin.String?): Throwable = TODO()
2021-03-12 00:05:29,709 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:05:29,718 [main:95] - GENERATED = NumberFormatException("wtepn")
2021-03-12 00:05:29,718 [main:58] - GENERATED VALUE OF TYPE Throwable = NumberFormatException("wtepn")
2021-03-12 00:05:29,718 [main:61] - GENERATED IS CALL =true
2021-03-12 00:05:30,016 [main:67] - randomType = Kla2<Short>
2021-03-12 00:05:30,221 [main:302] - generating value of type = Kla2<Short> false depth = 0
2021-03-12 00:05:30,229 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 00:05:30,979 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-12 00:05:30,987 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:05:31,156 [main:106] - GETTING Throwable from Boolean
2021-03-12 00:05:31,165 [main:106] - GETTING Throwable from Continuation<Any?>
2021-03-12 00:05:31,172 [main:106] - GETTING Throwable from KClass<out Any>
2021-03-12 00:05:31,180 [main:106] - GETTING Throwable from Any
2021-03-12 00:05:31,184 [main:106] - GETTING Throwable from KClass<out Any>
2021-03-12 00:05:31,185 [main:106] - GETTING Throwable from Continuation<Simple>
2021-03-12 00:05:31,192 [main:106] - GETTING Throwable from EmptyCoroutineContext
2021-03-12 00:05:31,207 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 00:05:31,215 [main:106] - GETTING Throwable from Any
2021-03-12 00:05:31,216 [main:106] - GETTING Throwable from Any
2021-03-12 00:05:31,218 [main:106] - GETTING Throwable from Simple
2021-03-12 00:05:31,225 [main:106] - GETTING Throwable from String
2021-03-12 00:05:31,242 [main:106] - GETTING Throwable from Simple
2021-03-12 00:05:31,244 [main:106] - GETTING Throwable from String
2021-03-12 00:05:31,245 [main:106] - GETTING Throwable from Any?
2021-03-12 00:05:31,249 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 00:05:31,251 [main:106] - GETTING Throwable from Function0<Unit>
2021-03-12 00:05:31,260 [main:106] - GETTING Throwable from Simple
2021-03-12 00:05:31,261 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 00:05:31,261 [main:114] - replacement of prope12.exceptionOrNull()!! of type Throwable is NumberFormatException("wtepn")
2021-03-12 00:05:31,462 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:05:31,466 [main:107] - replacing (getOrThrow(), Ty1)
2021-03-12 00:05:31,466 [main:50] - replacing getOrThrow() Ty1
2021-03-12 00:05:31,466 [main:54] - Getting value of type Ty1
2021-03-12 00:05:31,669 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 00:05:31,681 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 00:05:31,937 [main:67] - randomType = UByte
2021-03-12 00:05:32,141 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 00:05:32,176 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 00:05:32,186 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 00:05:32,193 [main:106] - GETTING Ty1 from Any
2021-03-12 00:05:32,197 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 00:05:32,198 [main:106] - GETTING Ty1 from Continuation<Any?>
2021-03-12 00:05:32,207 [main:106] - GETTING Ty1 from Boolean
2021-03-12 00:05:32,217 [main:106] - GETTING Ty1 from String
2021-03-12 00:05:32,234 [main:106] - GETTING Ty1 from Simple
2021-03-12 00:05:32,240 [main:106] - GETTING Ty1 from KClass<out Any>
2021-03-12 00:05:32,249 [main:106] - GETTING Ty1 from Simple
2021-03-12 00:05:32,250 [main:106] - GETTING Ty1 from Simple
2021-03-12 00:05:32,250 [main:106] - GETTING Ty1 from String
2021-03-12 00:05:32,251 [main:106] - GETTING Ty1 from Any
2021-03-12 00:05:32,252 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 00:05:32,253 [main:106] - GETTING Ty1 from EmptyCoroutineContext
2021-03-12 00:05:32,267 [main:106] - GETTING Ty1 from Continuation<Simple>
2021-03-12 00:05:32,274 [main:106] - GETTING Ty1 from Any?
2021-03-12 00:05:32,277 [main:106] - GETTING Ty1 from KClass<out Any>
2021-03-12 00:05:32,278 [main:106] - GETTING Ty1 from Any
2021-03-12 00:05:32,278 [main:111] - Cant find and generate replacement for getOrThrow() type Ty1
2021-03-12 00:05:32,278 [main:107] - replacing (it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true, Boolean)
2021-03-12 00:05:32,279 [main:50] - replacing it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true Boolean
2021-03-12 00:05:32,279 [main:54] - Getting value of type Boolean
2021-03-12 00:05:32,482 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:05:32,491 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 00:05:32,491 [main:61] - GENERATED IS CALL =false
2021-03-12 00:05:34,282 [main:67] - randomType = LinkedHashSet<Triple<Kla2<Char>, Double, Sequence<Function2<UShort, Int, ULong>>>>
2021-03-12 00:05:34,483 [main:302] - generating value of type = LinkedHashSet<Triple<Kla2<Char>, Double, Sequence<Function2<UShort, Int, ULong>>>> false depth = 0
2021-03-12 00:05:34,700 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int): LinkedHashSet<Triple<Kla2<Char>, Double, Sequence<Function2<UShort, Int, ULong>>>> = TODO()
2021-03-12 00:05:34,710 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int): LinkedHashSet<Triple<Kla2<Char>, Double, Sequence<Function2<UShort, Int, ULong>>>> = TODO()
2021-03-12 00:05:35,182 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:05:35,191 [main:95] - GENERATED = LinkedHashSet<Triple<Kla2<Char>, Double, Sequence<Function2<UShort, Int, ULong>>>>(-789044974)
2021-03-12 00:05:35,438 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5f506203]
2021-03-12 00:05:35,439 [main:78] - Generated call from random type = (LinkedHashSet<Triple<Kla2<Char>, Double, Sequence<Function2<UShort, Int, ULong>>>>(-789044974)).none()
2021-03-12 00:05:35,440 [main:106] - GETTING Boolean from Continuation<Simple>
2021-03-12 00:05:35,446 [main:113] - Case = [public abstract val context: kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.Continuation[DeserializedPropertyDescriptor@62581383], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5cab20d1]]
2021-03-12 00:05:35,446 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5cab20d1]
2021-03-12 00:05:35,648 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:05:35,648 [main:117] - GENERATED CALL = (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv")
2021-03-12 00:05:35,648 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]]
2021-03-12 00:05:35,648 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4]
2021-03-12 00:05:35,648 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-12 00:05:35,648 [main:117] - GENERATED CALL = (fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).equals(Kla1().prope2)
2021-03-12 00:05:35,649 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]]
2021-03-12 00:05:35,649 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4]
2021-03-12 00:05:35,850 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:05:35,850 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]
2021-03-12 00:05:35,850 [main:117] - GENERATED CALL = (fu3<Simple>({a: Simple -> print("jkaqk")})).equals("oipeh").not()
2021-03-12 00:05:35,851 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4]]
2021-03-12 00:05:35,851 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4]
2021-03-12 00:05:35,851 [main:117] - GENERATED CALL = (fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2)
2021-03-12 00:05:35,851 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]]
2021-03-12 00:05:35,851 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4]
2021-03-12 00:05:36,052 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:05:36,053 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]
2021-03-12 00:05:36,053 [main:117] - GENERATED CALL = (fu3<Simple>({a: Simple -> print("jkaqk")})).equals("yuqhw").xor(Kla4().prope5)
2021-03-12 00:05:36,053 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]]
2021-03-12 00:05:36,053 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4]
2021-03-12 00:05:36,053 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]
2021-03-12 00:05:36,256 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:05:36,265 [main:117] - GENERATED CALL = (fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(false)
2021-03-12 00:05:36,265 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]]
2021-03-12 00:05:36,265 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6b9a45e4]
2021-03-12 00:05:36,265 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-12 00:05:36,266 [main:117] - GENERATED CALL = (fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).or(Kla4().prope5)
2021-03-12 00:05:36,266 [main:113] - Case = [public abstract fun resumeWith(result: kotlin.Result<Simple>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@15367d64], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@6b6563c4]]
2021-03-12 00:05:36,266 [main:149] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<Simple>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@15367d64]
2021-03-12 00:05:36,466 [main:302] - generating value of type = Result<Simple> false depth = 0
2021-03-12 00:05:36,704 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Simple): Result<Simple> = TODO()
2021-03-12 00:05:36,714 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Simple): Result<Simple> = TODO()
2021-03-12 00:05:37,199 [main:302] - generating value of type = Function0<Simple> false depth = 3
2021-03-12 00:05:37,208 [main:302] - generating value of type = Simple false depth = 4
2021-03-12 00:05:37,216 [main:112] - generating klass Simple text = @Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)
2021-03-12 00:05:37,217 [main:95] - GENERATED = runCatching<Simple>({ })
2021-03-12 00:05:37,217 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@6b6563c4]
2021-03-12 00:05:37,217 [main:117] - GENERATED CALL = (fu3<Simple>({a: Simple -> print("jkaqk")})).resumeWith(runCatching<Simple>({ })).equals(Kla1().prope2)
2021-03-12 00:05:37,217 [main:114] - replacement of it?.methodName?.startsWith(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value) == true of type Boolean is (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv")
2021-03-12 00:05:37,418 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:05:37,418 [main:66] - Compilation checking started
2021-03-12 00:05:38,453 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:05:38,457 [main:107] - replacing (getOrThrow(), Ty1)
2021-03-12 00:05:38,457 [main:50] - replacing getOrThrow() Ty1
2021-03-12 00:05:38,457 [main:54] - Getting value of type Ty1
2021-03-12 00:05:38,659 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 00:05:38,671 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 00:05:38,706 [main:67] - randomType = Kla3
2021-03-12 00:05:38,907 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 00:05:38,915 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 00:05:38,921 [main:106] - GETTING Ty1 from Any
2021-03-12 00:05:38,925 [main:106] - GETTING Ty1 from String
2021-03-12 00:05:38,941 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 00:05:38,947 [main:106] - GETTING Ty1 from Continuation<Simple>
2021-03-12 00:05:38,953 [main:106] - GETTING Ty1 from Boolean
2021-03-12 00:05:38,962 [main:106] - GETTING Ty1 from Any
2021-03-12 00:05:38,963 [main:106] - GETTING Ty1 from Simple
2021-03-12 00:05:38,969 [main:106] - GETTING Ty1 from String
2021-03-12 00:05:38,970 [main:106] - GETTING Ty1 from KClass<out Any>
2021-03-12 00:05:38,978 [main:106] - GETTING Ty1 from Simple
2021-03-12 00:05:38,979 [main:106] - GETTING Ty1 from Any
2021-03-12 00:05:38,980 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 00:05:38,988 [main:106] - GETTING Ty1 from Simple
2021-03-12 00:05:38,989 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 00:05:38,990 [main:106] - GETTING Ty1 from KClass<out Any>
2021-03-12 00:05:38,991 [main:106] - GETTING Ty1 from EmptyCoroutineContext
2021-03-12 00:05:39,005 [main:106] - GETTING Ty1 from Any?
2021-03-12 00:05:39,008 [main:106] - GETTING Ty1 from Continuation<Any?>
2021-03-12 00:05:39,015 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 00:05:39,015 [main:111] - Cant find and generate replacement for getOrThrow() type Ty1
2021-03-12 00:05:39,015 [main:107] - replacing (prope12, Any?)
2021-03-12 00:05:39,015 [main:50] - replacing prope12 Any?
2021-03-12 00:05:39,015 [main:54] - Getting value of type Any?
2021-03-12 00:05:39,220 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:05:39,221 [main:58] - GENERATED VALUE OF TYPE Any? = "jzyus"
2021-03-12 00:05:39,221 [main:61] - GENERATED IS CALL =false
2021-03-12 00:05:39,490 [main:67] - randomType = Byte?
2021-03-12 00:05:39,692 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:05:39,734 [main:106] - GETTING Any? from Boolean
2021-03-12 00:05:39,744 [main:106] - GETTING Any? from KClass<out Any>
2021-03-12 00:05:39,754 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 00:05:39,764 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 00:05:39,779 [main:106] - GETTING Any? from Simple
2021-03-12 00:05:39,786 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 00:05:39,794 [main:106] - GETTING Any? from Continuation<Simple>
2021-03-12 00:05:39,803 [main:106] - GETTING Any? from Any?
2021-03-12 00:05:39,808 [main:106] - GETTING Any? from String
2021-03-12 00:05:39,833 [main:106] - GETTING Any? from Simple
2021-03-12 00:05:39,833 [main:106] - GETTING Any? from Any
2021-03-12 00:05:39,838 [main:114] - replacement of prope12 of type Any? is local()
2021-03-12 00:05:40,041 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:05:40,042 [main:66] - Compilation checking started
2021-03-12 00:05:40,786 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.local() = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && !prope16) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:05:40,790 [main:107] - replacing (c, Continuation<*>)
2021-03-12 00:05:40,790 [main:50] - replacing c Continuation<*>
2021-03-12 00:05:40,790 [main:54] - Getting value of type Continuation<*>
2021-03-12 00:05:41,014 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 00:05:41,232 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 00:05:41,243 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 00:05:42,008 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 00:05:42,224 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:05:42,235 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:05:42,734 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 00:05:42,960 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:05:42,971 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:05:43,742 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 00:05:43,984 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 00:05:44,000 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 00:05:44,774 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 00:05:44,774 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:05:44,774 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:05:44,774 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 00:05:44,774 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 00:05:45,938 [main:67] - randomType = Array<Triple<Byte?, Long, Kla12>>
2021-03-12 00:05:46,141 [main:302] - generating value of type = Array<Triple<Byte?, Long, Kla12>> false depth = 0
2021-03-12 00:05:46,355 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<Triple<Byte?, Long, Kla12>> = TODO()
2021-03-12 00:05:46,365 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<Triple<Byte?, Long, Kla12>> = TODO()
2021-03-12 00:05:46,736 [main:95] - GENERATED = enumValues<Triple<Byte?, Long, Kla12>>()
2021-03-12 00:05:46,756 [main:106] - GETTING Continuation<*> from Continuation<Any?>
2021-03-12 00:05:46,764 [main:106] - GETTING Continuation<*> from Any
2021-03-12 00:05:46,768 [main:106] - GETTING Continuation<*> from Simple
2021-03-12 00:05:46,774 [main:106] - GETTING Continuation<*> from Boolean
2021-03-12 00:05:46,783 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 00:05:46,789 [main:106] - GETTING Continuation<*> from Simple
2021-03-12 00:05:46,790 [main:106] - GETTING Continuation<*> from EmptyCoroutineContext
2021-03-12 00:05:46,808 [main:106] - GETTING Continuation<*> from Simple
2021-03-12 00:05:46,809 [main:106] - GETTING Continuation<*> from Continuation<Simple>
2021-03-12 00:05:46,817 [main:106] - GETTING Continuation<*> from String
2021-03-12 00:05:46,836 [main:106] - GETTING Continuation<*> from KClass<out Any>
2021-03-12 00:05:46,845 [main:106] - GETTING Continuation<*> from Any
2021-03-12 00:05:46,846 [main:106] - GETTING Continuation<*> from Any?
2021-03-12 00:05:46,850 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 00:05:46,851 [main:106] - GETTING Continuation<*> from Any
2021-03-12 00:05:46,853 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 00:05:46,854 [main:106] - GETTING Continuation<*> from KClass<out Any>
2021-03-12 00:05:46,855 [main:106] - GETTING Continuation<*> from Function0<Unit>
2021-03-12 00:05:46,866 [main:106] - GETTING Continuation<*> from String
2021-03-12 00:05:46,866 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 00:05:46,866 [main:107] - replacing (!prope16, Boolean)
2021-03-12 00:05:46,867 [main:50] - replacing !prope16 Boolean
2021-03-12 00:05:46,867 [main:54] - Getting value of type Boolean
2021-03-12 00:05:47,070 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:05:47,079 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 00:05:47,079 [main:61] - GENERATED IS CALL =false
2021-03-12 00:05:47,097 [main:67] - randomType = UShort
2021-03-12 00:05:47,299 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 00:05:47,333 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@43c338e1]
2021-03-12 00:05:47,534 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 00:05:47,543 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@5ad353a6]
2021-03-12 00:05:47,543 [main:78] - Generated call from random type = (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)
2021-03-12 00:05:47,543 [main:114] - replacement of !prope16 of type Boolean is (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)
2021-03-12 00:05:47,743 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:05:47,743 [main:66] - Compilation checking started
2021-03-12 00:05:48,731 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:05:48,734 [main:107] - replacing (prope17, Function0<Unit>)
2021-03-12 00:05:48,735 [main:50] - replacing prope17 Function0<Unit>
2021-03-12 00:05:48,735 [main:54] - Getting value of type Function0<Unit>
2021-03-12 00:05:48,940 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 00:05:48,949 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:05:49,190 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:05:49,201 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:05:49,676 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:05:49,677 [main:95] - GENERATED = println("wocke")
2021-03-12 00:05:49,677 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("wocke")}
2021-03-12 00:05:49,677 [main:61] - GENERATED IS CALL =false
2021-03-12 00:05:49,969 [main:67] - randomType = Kla3?
2021-03-12 00:05:50,176 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 00:05:50,186 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 00:05:50,194 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 00:05:50,204 [main:106] - GETTING Function0<Unit> from Any?
2021-03-12 00:05:50,210 [main:106] - GETTING Function0<Unit> from String
2021-03-12 00:05:50,237 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 00:05:50,250 [main:114] - replacement of prope17 of type Function0<Unit> is Kla4().prope6
2021-03-12 00:05:50,455 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:05:50,455 [main:66] - Compilation checking started
2021-03-12 00:05:51,180 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.Kla4().prope6 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:05:51,184 [main:107] - replacing ("\n", String)
2021-03-12 00:05:51,184 [main:50] - replacing "\n" String
2021-03-12 00:05:51,184 [main:54] - Getting value of type String
2021-03-12 00:05:51,392 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:05:51,401 [main:58] - GENERATED VALUE OF TYPE String = "hpozu"
2021-03-12 00:05:51,401 [main:61] - GENERATED IS CALL =false
2021-03-12 00:05:51,690 [main:67] - randomType = Simple?
2021-03-12 00:05:51,893 [main:302] - generating value of type = Simple false depth = 0
2021-03-12 00:05:51,901 [main:112] - generating klass Simple text = @Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)
2021-03-12 00:05:51,908 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b106cd8]
2021-03-12 00:05:51,909 [main:78] - Generated call from random type = ()?.value.trimEnd()
2021-03-12 00:05:51,909 [main:114] - replacement of "\n" of type String is ()?.value.trimEnd()
2021-03-12 00:05:52,116 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:05:52,117 [main:66] - Compilation checking started
2021-03-12 00:05:52,131 [main:71] - Wrong syntax or breaks conditions
2021-03-12 00:05:52,132 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = ()?.value.trimEnd())) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:05:52,135 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 00:05:52,135 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 00:05:52,135 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 00:05:52,342 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 00:05:52,354 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 00:05:52,389 [main:67] - randomType = Kla4
2021-03-12 00:05:52,593 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 00:05:52,602 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 00:05:52,610 [main:106] - GETTING EmptyCoroutineContext from Simple
2021-03-12 00:05:52,616 [main:106] - GETTING EmptyCoroutineContext from Function0<Unit>
2021-03-12 00:05:52,625 [main:106] - GETTING EmptyCoroutineContext from Any
2021-03-12 00:05:52,628 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 00:05:52,644 [main:106] - GETTING EmptyCoroutineContext from Any
2021-03-12 00:05:52,645 [main:106] - GETTING EmptyCoroutineContext from KClass<out Any>
2021-03-12 00:05:52,653 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 00:05:52,659 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 00:05:52,660 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 00:05:52,660 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-12 00:05:52,669 [main:106] - GETTING EmptyCoroutineContext from Continuation<Any?>
2021-03-12 00:05:52,676 [main:106] - GETTING EmptyCoroutineContext from KClass<out Any>
2021-03-12 00:05:52,677 [main:106] - GETTING EmptyCoroutineContext from Continuation<Simple>
2021-03-12 00:05:52,683 [main:106] - GETTING EmptyCoroutineContext from Simple
2021-03-12 00:05:52,684 [main:106] - GETTING EmptyCoroutineContext from Any
2021-03-12 00:05:52,684 [main:106] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-12 00:05:52,697 [main:114] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla1().context
2021-03-12 00:05:52,904 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:05:52,904 [main:66] - Compilation checking started
2021-03-12 00:05:53,941 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:05:53,945 [main:107] - replacing ("\n", String)
2021-03-12 00:05:53,946 [main:50] - replacing "\n" String
2021-03-12 00:05:53,946 [main:54] - Getting value of type String
2021-03-12 00:05:54,155 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:05:54,164 [main:58] - GENERATED VALUE OF TYPE String = "dzjzf"
2021-03-12 00:05:54,164 [main:61] - GENERATED IS CALL =false
2021-03-12 00:05:54,182 [main:67] - randomType = Boolean
2021-03-12 00:05:54,388 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:05:54,408 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:05:54,611 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:05:54,620 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-12 00:05:54,825 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:05:54,834 [main:78] - Generated call from random type = (false).compareTo(false).toString(-1364868516)
2021-03-12 00:05:54,835 [main:106] - GETTING String from KClass<out Any>
2021-03-12 00:05:54,844 [main:113] - Case = [public abstract val simpleName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@37d9c70b]]
2021-03-12 00:05:54,844 [main:117] - GENERATED CALL = ((local()::class)).simpleName
2021-03-12 00:05:54,844 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@5dea99b], @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c057cac]]
2021-03-12 00:05:54,844 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c057cac]
2021-03-12 00:05:54,844 [main:117] - GENERATED CALL = ((local()::class)).qualifiedName?.orEmpty()
2021-03-12 00:05:54,844 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@5dea99b]]
2021-03-12 00:05:54,844 [main:117] - GENERATED CALL = ((local()::class)).qualifiedName
2021-03-12 00:05:54,844 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@5dea99b], public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6519cd8a]]
2021-03-12 00:05:54,844 [main:149] - GENERATING call of type public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6519cd8a]
2021-03-12 00:05:55,050 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:05:55,050 [main:117] - GENERATED CALL = ((local()::class)).qualifiedName?.plus("mejjs")
2021-03-12 00:05:55,050 [main:114] - replacement of "\n" of type String is ((local()::class)).qualifiedName?.plus("mejjs")
2021-03-12 00:05:55,256 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 00:05:55,257 [main:66] - Compilation checking started
2021-03-12 00:05:55,975 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = ((local()::class)).qualifiedName?.plus("mejjs"))) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:05:55,979 [main:107] - replacing (prope12, Any?)
2021-03-12 00:05:55,979 [main:50] - replacing prope12 Any?
2021-03-12 00:05:55,979 [main:54] - Getting value of type Any?
2021-03-12 00:05:56,193 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:05:56,193 [main:58] - GENERATED VALUE OF TYPE Any? = "acijj"
2021-03-12 00:05:56,193 [main:61] - GENERATED IS CALL =false
2021-03-12 00:05:56,229 [main:67] - randomType = Kla11
2021-03-12 00:05:56,450 [main:302] - generating value of type = Kla11 false depth = 0
2021-03-12 00:05:56,459 [main:112] - generating klass Kla11 text = class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}
2021-03-12 00:05:56,467 [main:106] - GETTING Any? from Continuation<Simple>
2021-03-12 00:05:56,477 [main:106] - GETTING Any? from Simple
2021-03-12 00:05:56,485 [main:106] - GETTING Any? from Any
2021-03-12 00:05:56,487 [main:114] - replacement of prope12 of type Any? is local()
2021-03-12 00:05:56,691 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:05:56,692 [main:66] - Compilation checking started
2021-03-12 00:05:57,418 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.local() = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        prope17 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:05:57,422 [main:107] - replacing (prope17, Function0<Unit>)
2021-03-12 00:05:57,422 [main:50] - replacing prope17 Function0<Unit>
2021-03-12 00:05:57,422 [main:54] - Getting value of type Function0<Unit>
2021-03-12 00:05:57,649 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 00:05:57,658 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:05:57,872 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:05:57,883 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:05:58,631 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:05:58,639 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:05:58,648 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:05:58,648 [main:95] - GENERATED = check(false, { "fhubk"})
2021-03-12 00:05:58,648 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "fhubk"})}
2021-03-12 00:05:58,648 [main:61] - GENERATED IS CALL =false
2021-03-12 00:05:58,667 [main:67] - randomType = UShort
2021-03-12 00:05:58,871 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 00:05:58,911 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 00:05:58,919 [main:114] - replacement of prope17 of type Function0<Unit> is Kla4().prope6
2021-03-12 00:05:59,126 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:05:59,126 [main:66] - Compilation checking started
2021-03-12 00:06:00,122 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if (prope13 != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:00,126 [main:107] - replacing (prope13, Int)
2021-03-12 00:06:00,126 [main:50] - replacing prope13 Int
2021-03-12 00:06:00,126 [main:54] - Getting value of type Int
2021-03-12 00:06:00,332 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:06:00,341 [main:58] - GENERATED VALUE OF TYPE Int = -1416866931
2021-03-12 00:06:00,341 [main:61] - GENERATED IS CALL =false
2021-03-12 00:06:00,359 [main:67] - randomType = String
2021-03-12 00:06:00,573 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:06:00,604 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5c15e5f7]
2021-03-12 00:06:00,807 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:06:00,816 [main:78] - Generated call from random type = ("xxcgt").length.and(661658033)
2021-03-12 00:06:00,817 [main:106] - GETTING Int from Boolean
2021-03-12 00:06:00,825 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5c15e5f7]]
2021-03-12 00:06:00,826 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:06:00,826 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5c15e5f7]
2021-03-12 00:06:01,029 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:06:01,038 [main:117] - GENERATED CALL = (Kla4().prope5).compareTo(Kla4().prope5).and(927675532)
2021-03-12 00:06:01,038 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1ec22335]]
2021-03-12 00:06:01,038 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:06:01,038 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1ec22335]
2021-03-12 00:06:01,243 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:06:01,252 [main:117] - GENERATED CALL = (Kla4().prope5).compareTo(Kla4().prope5).ushr(-1395953315)
2021-03-12 00:06:01,252 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4277c363]]
2021-03-12 00:06:01,252 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:06:01,252 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4277c363]
2021-03-12 00:06:01,252 [main:117] - GENERATED CALL = (Kla4().prope5).compareTo(Kla4().prope5).countTrailingZeroBits()
2021-03-12 00:06:01,252 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@30dad9b9], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]]
2021-03-12 00:06:01,252 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@30dad9b9]
2021-03-12 00:06:01,252 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:06:01,253 [main:117] - GENERATED CALL = (Kla4().prope5).equals(Kla1().prope2).compareTo(Kla4().prope5)
2021-03-12 00:06:01,253 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cc909f5]]
2021-03-12 00:06:01,253 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:06:01,253 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cc909f5]
2021-03-12 00:06:01,456 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:06:01,464 [main:117] - GENERATED CALL = (Kla4().prope5).compareTo(Kla4().prope5).div(58)
2021-03-12 00:06:01,465 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]]
2021-03-12 00:06:01,465 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:06:01,465 [main:117] - GENERATED CALL = (Kla4().prope5).compareTo(Kla4().prope5)
2021-03-12 00:06:01,465 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@21735533]]
2021-03-12 00:06:01,465 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:06:01,668 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:06:01,677 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@21735533]
2021-03-12 00:06:01,677 [main:117] - GENERATED CALL = (Kla4().prope5).compareTo(false).dec()
2021-03-12 00:06:01,677 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@503f9a4c]]
2021-03-12 00:06:01,677 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:06:01,678 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@503f9a4c]
2021-03-12 00:06:01,678 [main:117] - GENERATED CALL = (Kla4().prope5).compareTo(Kla4().prope5).toInt()
2021-03-12 00:06:01,678 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@635b5740]]
2021-03-12 00:06:01,678 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:06:01,901 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:06:01,910 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@635b5740]
2021-03-12 00:06:01,910 [main:117] - GENERATED CALL = (Kla4().prope5).compareTo(false).takeHighestOneBit()
2021-03-12 00:06:01,910 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73da1f76]]
2021-03-12 00:06:01,910 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:06:02,115 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:06:02,124 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73da1f76]
2021-03-12 00:06:02,326 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:06:02,335 [main:117] - GENERATED CALL = (Kla4().prope5).compareTo(false).plus(-120)
2021-03-12 00:06:02,335 [main:114] - replacement of prope13 of type Int is (Kla4().prope5).compareTo(Kla4().prope5).div(58)
2021-03-12 00:06:02,537 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:06:02,537 [main:66] - Compilation checking started
2021-03-12 00:06:03,528 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:03,532 [main:107] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-12 00:06:03,532 [main:50] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-12 00:06:03,532 [main:54] - Getting value of type String
2021-03-12 00:06:03,737 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:06:03,745 [main:58] - GENERATED VALUE OF TYPE String = "wtary"
2021-03-12 00:06:03,746 [main:61] - GENERATED IS CALL =false
2021-03-12 00:06:03,764 [main:67] - randomType = Double
2021-03-12 00:06:03,966 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:06:04,002 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5ab35ddf]
2021-03-12 00:06:04,002 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6015949f]
2021-03-12 00:06:04,210 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:06:04,219 [main:78] - Generated call from random type = (0.8250154860545721).toShort().toString(1283565890)
2021-03-12 00:06:04,219 [main:114] - replacement of "Wrong state-machine generated: it is finished early" of type String is (0.8250154860545721).toShort().toString(1283565890)
2021-03-12 00:06:04,421 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:06:04,421 [main:66] - Compilation checking started
2021-03-12 00:06:05,401 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((-85).toString(-692622053))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:05,621 [main:141] - TRYING TO REPLACE CONSTANT 85
2021-03-12 00:06:05,824 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 00:06:05,824 [main:66] - Compilation checking started
2021-03-12 00:06:06,835 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(-692622053))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:06,836 [main:141] - TRYING TO REPLACE CONSTANT 692622053
2021-03-12 00:06:07,039 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 00:06:07,039 [main:66] - Compilation checking started
2021-03-12 00:06:08,028 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:08,029 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 00:06:08,240 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 00:06:08,240 [main:66] - Compilation checking started
2021-03-12 00:06:08,965 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { isNaN()}?.let { error(('')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:08,966 [main:141] - TRYING TO REPLACE CONSTANT ''
2021-03-12 00:06:09,175 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-12 00:06:09,176 [main:66] - Compilation checking started
2021-03-12 00:06:10,154 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:10,155 [main:141] - TRYING TO REPLACE CONSTANT 1549255080
2021-03-12 00:06:10,361 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 00:06:10,362 [main:66] - Compilation checking started
2021-03-12 00:06:11,118 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = -376947362
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(compareTo(true)) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:11,119 [main:141] - TRYING TO REPLACE CONSTANT 376947362
2021-03-12 00:06:11,325 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 00:06:11,326 [main:66] - Compilation checking started
2021-03-12 00:06:12,313 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(665913025, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:12,313 [main:141] - TRYING TO REPLACE CONSTANT 665913025
2021-03-12 00:06:12,527 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 00:06:12,527 [main:66] - Compilation checking started
2021-03-12 00:06:13,515 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, 1342360521)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:13,516 [main:141] - TRYING TO REPLACE CONSTANT 1342360521
2021-03-12 00:06:13,721 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-12 00:06:13,721 [main:66] - Compilation checking started
2021-03-12 00:06:14,695 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> true}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:14,696 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 00:06:14,908 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:06:14,909 [main:66] - Compilation checking started
2021-03-12 00:06:15,927 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, '?') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:15,927 [main:141] - TRYING TO REPLACE CONSTANT '?'
2021-03-12 00:06:16,141 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-12 00:06:16,142 [main:66] - Compilation checking started
2021-03-12 00:06:17,130 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(-268045831, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:17,131 [main:141] - TRYING TO REPLACE CONSTANT 268045831
2021-03-12 00:06:17,338 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 00:06:17,338 [main:66] - Compilation checking started
2021-03-12 00:06:18,320 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(-1343018101))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:18,321 [main:141] - TRYING TO REPLACE CONSTANT 1343018101
2021-03-12 00:06:18,529 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 00:06:18,529 [main:66] - Compilation checking started
2021-03-12 00:06:19,514 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:19,515 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 00:06:19,764 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 00:06:19,765 [main:66] - Compilation checking started
2021-03-12 00:06:20,491 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(or(true))

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error((0.7442545f).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:20,492 [main:141] - TRYING TO REPLACE CONSTANT 0.7442545f
2021-03-12 00:06:20,699 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 00:06:20,700 [main:66] - Compilation checking started
2021-03-12 00:06:21,681 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:21,681 [main:141] - TRYING TO REPLACE CONSTANT 125
2021-03-12 00:06:21,888 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 00:06:21,888 [main:66] - Compilation checking started
2021-03-12 00:06:22,622 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(i).toString(-1783731646))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:22,623 [main:141] - TRYING TO REPLACE CONSTANT 1783731646
2021-03-12 00:06:22,827 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 00:06:22,828 [main:66] - Compilation checking started
2021-03-12 00:06:23,809 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((26661.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:23,810 [main:141] - TRYING TO REPLACE CONSTANT 26661
2021-03-12 00:06:24,020 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 00:06:24,021 [main:66] - Compilation checking started
2021-03-12 00:06:25,021 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-586087061) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:25,022 [main:141] - TRYING TO REPLACE CONSTANT 586087061
2021-03-12 00:06:25,233 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 00:06:25,234 [main:66] - Compilation checking started
2021-03-12 00:06:26,235 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:26,236 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 00:06:26,448 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 00:06:26,449 [main:66] - Compilation checking started
2021-03-12 00:06:27,176 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> prope5}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:27,177 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 00:06:27,379 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 00:06:27,380 [main:66] - Compilation checking started
2021-03-12 00:06:28,100 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(prope5)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -578299726)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:28,101 [main:141] - TRYING TO REPLACE CONSTANT 578299726
2021-03-12 00:06:28,304 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 00:06:28,305 [main:66] - Compilation checking started
2021-03-12 00:06:29,312 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:29,312 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 00:06:29,515 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:06:29,516 [main:66] - Compilation checking started
2021-03-12 00:06:30,506 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:30,507 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 00:06:30,715 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 00:06:30,716 [main:66] - Compilation checking started
2021-03-12 00:06:31,470 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(or(true), { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:31,471 [main:141] - TRYING TO REPLACE CONSTANT 30123
2021-03-12 00:06:31,679 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 00:06:31,680 [main:66] - Compilation checking started
2021-03-12 00:06:32,412 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (compareTo(Kla4().prope5).toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:32,413 [main:141] - TRYING TO REPLACE CONSTANT 25950
2021-03-12 00:06:32,618 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 00:06:32,618 [main:66] - Compilation checking started
2021-03-12 00:06:33,378 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div(58) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(i.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:33,379 [main:141] - TRYING TO REPLACE CONSTANT 58
2021-03-12 00:06:33,583 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:06:33,584 [main:66] - Compilation checking started
2021-03-12 00:06:34,592 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:34,593 [main:141] - TRYING TO REPLACE CONSTANT 0.8250154860545721
2021-03-12 00:06:34,811 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 00:06:34,811 [main:66] - Compilation checking started
2021-03-12 00:06:35,555 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((div(0.2309832731354714)).toShort().toString(1283565890))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:35,556 [main:141] - TRYING TO REPLACE CONSTANT 1283565890
2021-03-12 00:06:35,762 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:06:35,763 [main:66] - Compilation checking started
2021-03-12 00:06:36,738 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString((Kla5.context).equals(Kla1().prope2).compareTo(true)))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:36,738 [main:41] - AFTER TRY 2 res = import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString((Kla5.context).equals(Kla1().prope2).compareTo(true)))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}


2021-03-12 00:06:37,164 [main:112] - generating klass Simple text = @Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)
2021-03-12 00:06:37,164 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}
2021-03-12 00:06:37,369 [main:194] - Type params = []
2021-03-12 00:06:37,575 [main:302] - generating value of type = CoroutineContext false depth = 1
2021-03-12 00:06:37,813 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:06:37,824 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:06:38,336 [main:302] - generating value of type = Key<*> false depth = 4
2021-03-12 00:06:38,566 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:06:38,577 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:06:39,368 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:06:39,368 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:06:39,368 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 00:06:39,368 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 00:06:40,513 [main:302] - generating value of type = Kla5 false depth = 1
2021-03-12 00:06:40,522 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:06:40,522 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 00:06:40,523 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 00:06:40,523 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:06:40,523 [main:112] - generating klass Kla7 text = class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}
2021-03-12 00:06:40,523 [main:112] - generating klass Kla8 text = open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}
2021-03-12 00:06:40,730 [main:194] - Type params = []
2021-03-12 00:06:40,936 [main:302] - generating value of type = CoroutineContext false depth = 1
2021-03-12 00:06:41,155 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:06:41,166 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:06:41,677 [main:302] - generating value of type = Key<*> false depth = 4
2021-03-12 00:06:41,936 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:06:41,947 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:06:42,745 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:06:42,745 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:06:42,750 [main:112] - generating klass Kla9 text = class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}
2021-03-12 00:06:42,750 [main:112] - generating klass Kla10 text = abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-12 00:06:43,787 [main:302] - generating value of type = Kla13 false depth = 1
2021-03-12 00:06:43,796 [main:112] - generating klass Kla13 text = object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}
2021-03-12 00:06:43,797 [main:112] - generating klass Kla11 text = class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}
2021-03-12 00:06:43,797 [main:112] - generating klass Kla12 text = class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString((Kla5.context).equals(Kla1().prope2).compareTo(true)))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}
2021-03-12 00:06:43,797 [main:112] - generating klass Kla13 text = object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}
2021-03-12 00:06:43,797 [main:112] - generating klass A text = class A(@Simple("OK") val z: String)
2021-03-12 00:06:43,797 [main:112] - generating klass A text = class A(@Simple("K") val z: String) {
        val x = z
    }
2021-03-12 00:06:43,797 [main:112] - generating klass null text = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}
2021-03-12 00:06:43,798 [main:112] - generating klass null text = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}
2021-03-12 00:06:43,798 [main:112] - generating klass Kla6 text = companion object Kla6 : Kla0()
2021-03-12 00:06:43,798 [main:112] - generating klass null text = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}
2021-03-12 00:06:43,798 [main:112] - generating klass null text = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}
2021-03-12 00:06:43,798 [main:112] - generating klass Kla14 text = companion object Kla14 : Kla8()
2021-03-12 00:06:44,245 [main:43] - GENERATING CALL OF suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}
2021-03-12 00:06:44,254 [main:61] - WITHOUT TYPE PARAMS = suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}
2021-03-12 00:06:44,474 [main:302] - generating value of type = String true depth = 1
2021-03-12 00:06:44,483 [main:95] - GENERATED = fu0("rammy")
2021-03-12 00:06:44,688 [main:43] - GENERATING CALL OF suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}
2021-03-12 00:06:44,696 [main:61] - WITHOUT TYPE PARAMS = suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}
2021-03-12 00:06:44,917 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:06:44,926 [main:95] - GENERATED = fu1(true)
2021-03-12 00:06:45,136 [main:43] - GENERATING CALL OF fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}
2021-03-12 00:06:45,144 [main:61] - WITHOUT TYPE PARAMS = fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}
2021-03-12 00:06:45,634 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 1
2021-03-12 00:06:45,643 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 00:06:45,895 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:06:45,906 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:06:46,390 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 00:06:46,400 [main:95] - GENERATED = require(true)
2021-03-12 00:06:46,400 [main:95] - GENERATED = fu2({ require(true)})
2021-03-12 00:06:46,605 [main:43] - GENERATING CALL OF fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}
2021-03-12 00:06:47,226 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu3(x: (Function2<Char, Double, ArrayDeque<Char>>) -> Unit): Continuation<Function2<Char, Double, ArrayDeque<Char>>> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}
2021-03-12 00:06:47,762 [main:302] - generating value of type = Function1<Function2<Char, Double, ArrayDeque<Char>>, Unit> false depth = 1
2021-03-12 00:06:47,773 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 00:06:47,993 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:06:48,004 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:06:48,492 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:06:48,492 [main:95] - GENERATED = println("hupmt")
2021-03-12 00:06:48,492 [main:95] - GENERATED = fu3<Function2<Char, Double, ArrayDeque<Char>>>({a: Function2<Char, Double, ArrayDeque<Char>> -> println("hupmt")})
2021-03-12 00:06:48,696 [main:43] - GENERATING CALL OF fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}
2021-03-12 00:06:48,705 [main:61] - WITHOUT TYPE PARAMS = fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}
2021-03-12 00:06:49,201 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 1
2021-03-12 00:06:49,210 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 00:06:49,429 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:06:49,440 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:06:49,965 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 00:06:49,974 [main:95] - GENERATED = check(true)
2021-03-12 00:06:49,974 [main:95] - GENERATED = fu4({a: Throwable -> check(true)})
2021-03-12 00:06:50,188 [main:43] - GENERATING CALL OF fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}
2021-03-12 00:06:50,196 [main:61] - WITHOUT TYPE PARAMS = fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}
2021-03-12 00:06:50,691 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Int> false depth = 1
2021-03-12 00:06:50,700 [main:302] - generating value of type = Int true depth = 2
2021-03-12 00:06:50,709 [main:95] - GENERATED = fu12({a: Kla7 -> 1505253550})
2021-03-12 00:06:50,916 [main:43] - GENERATING CALL OF inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}
2021-03-12 00:06:50,925 [main:61] - WITHOUT TYPE PARAMS = inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}
2021-03-12 00:06:51,419 [main:302] - generating value of type = Function1<Int, Unit> false depth = 1
2021-03-12 00:06:51,428 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 00:06:51,645 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:06:51,657 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:06:52,143 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:06:52,143 [main:95] - GENERATED = print("aaduf")
2021-03-12 00:06:52,143 [main:95] - GENERATED = fu13({a: Int -> print("aaduf")})
2021-03-12 00:06:52,347 [main:43] - GENERATING CALL OF fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}
2021-03-12 00:06:52,644 [main:61] - WITHOUT TYPE PARAMS = fun <Ty1> fu14(x: (ArrayDeque<Double>) -> Unit): Continuation<ArrayDeque<Double>> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}
2021-03-12 00:06:53,153 [main:302] - generating value of type = Function1<ArrayDeque<Double>, Unit> false depth = 1
2021-03-12 00:06:53,162 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 00:06:53,380 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:06:53,390 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:06:53,881 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 5
2021-03-12 00:06:53,890 [main:302] - generating value of type = Unit false depth = 6
2021-03-12 00:06:54,112 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:06:54,124 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:06:54,673 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 9
2021-03-12 00:06:54,682 [main:302] - generating value of type = Unit false depth = 10
2021-03-12 00:06:54,902 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:06:54,913 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:06:55,669 [main:302] - generating value of type = Boolean true depth = 13
2021-03-12 00:06:55,679 [main:302] - generating value of type = Function0<Any> false depth = 13
2021-03-12 00:06:55,687 [main:302] - generating value of type = Any false depth = 14
2021-03-12 00:06:55,688 [main:95] - GENERATED = check(true, { "hvdum"})
2021-03-12 00:06:55,688 [main:95] - GENERATED = contract({ check(true, { "hvdum"})})
2021-03-12 00:06:55,688 [main:95] - GENERATED = contract({ contract({ check(true, { "hvdum"})})})
2021-03-12 00:06:55,688 [main:95] - GENERATED = fu14<ArrayDeque<Double>>({a: ArrayDeque<Double> -> contract({ contract({ check(true, { "hvdum"})})})})
2021-03-12 00:06:55,892 [main:43] - GENERATING CALL OF fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}
2021-03-12 00:06:55,901 [main:61] - WITHOUT TYPE PARAMS = fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}
2021-03-12 00:06:56,394 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 1
2021-03-12 00:06:56,403 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 00:06:56,416 [main:95] - GENERATED = fu15({a: Throwable -> println()})
2021-03-12 00:06:56,681 [main:43] - Try №2
2021-03-12 00:06:58,214 [main:69] - Trying to insert fun <Ty2> fu25(a: Kla15): Ty2 = fu28(a) {
    it.fu29()
}
2021-03-12 00:06:58,433 [main:66] - Compilation checking started
2021-03-12 00:07:00,112 [main:103] - Trying to change 79 nodes
2021-03-12 00:07:00,113 [main:107] - replacing (a, Kla15)
2021-03-12 00:07:00,113 [main:50] - replacing a Kla15
2021-03-12 00:07:00,113 [main:54] - Getting value of type Kla15
2021-03-12 00:07:00,345 [main:302] - generating value of type = Kla15 false depth = 0
2021-03-12 00:07:00,354 [main:112] - generating klass Kla15 text = inline class Kla15(val value: String) {
    fun <Ty2> fu31(): Ty2 = value as Ty2
}
2021-03-12 00:07:00,581 [main:194] - Type params = []
2021-03-12 00:07:00,807 [main:302] - generating value of type = String true depth = 2
2021-03-12 00:07:00,817 [main:58] - GENERATED VALUE OF TYPE Kla15 = Kla15("fppeq")
2021-03-12 00:07:00,817 [main:61] - GENERATED IS CALL =true
2021-03-12 00:07:01,451 [main:67] - randomType = Function1<Kla4, Kla0?>
2021-03-12 00:07:01,452 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 00:07:01,459 [main:106] - GETTING Kla15 from Int
2021-03-12 00:07:01,489 [main:106] - GETTING Kla15 from Array<Function1<Int?, Char>>
2021-03-12 00:07:01,505 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 00:07:01,505 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 00:07:01,506 [main:106] - GETTING Kla15 from KClass<out Any>
2021-03-12 00:07:01,515 [main:106] - GETTING Kla15 from Continuation<Function2<Char, Double, ArrayDeque<Char>>>
2021-03-12 00:07:01,525 [main:106] - GETTING Kla15 from EmptyCoroutineContext
2021-03-12 00:07:01,539 [main:106] - GETTING Kla15 from Any
2021-03-12 00:07:01,542 [main:106] - GETTING Kla15 from Simple
2021-03-12 00:07:01,549 [main:106] - GETTING Kla15 from Continuation<ArrayDeque<Double>>
2021-03-12 00:07:01,557 [main:106] - GETTING Kla15 from Any
2021-03-12 00:07:01,557 [main:106] - GETTING Kla15 from Any
2021-03-12 00:07:01,558 [main:106] - GETTING Kla15 from KClass<out Any>
2021-03-12 00:07:01,559 [main:106] - GETTING Kla15 from Kla5
2021-03-12 00:07:01,576 [main:106] - GETTING Kla15 from Any?
2021-03-12 00:07:01,579 [main:106] - GETTING Kla15 from Boolean
2021-03-12 00:07:01,587 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 00:07:01,588 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 00:07:01,589 [main:106] - GETTING Kla15 from Any?
2021-03-12 00:07:01,590 [main:106] - GETTING Kla15 from Boolean
2021-03-12 00:07:01,591 [main:106] - GETTING Kla15 from Int
2021-03-12 00:07:01,592 [main:106] - GETTING Kla15 from String
2021-03-12 00:07:01,610 [main:106] - GETTING Kla15 from Simple
2021-03-12 00:07:01,611 [main:106] - GETTING Kla15 from Array<Function1<Int?, Char>>
2021-03-12 00:07:01,611 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 00:07:01,612 [main:106] - GETTING Kla15 from Simple
2021-03-12 00:07:01,613 [main:106] - GETTING Kla15 from Any
2021-03-12 00:07:01,614 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 00:07:01,615 [main:106] - GETTING Kla15 from Any?
2021-03-12 00:07:01,616 [main:106] - GETTING Kla15 from String
2021-03-12 00:07:01,617 [main:106] - GETTING Kla15 from Boolean
2021-03-12 00:07:01,618 [main:106] - GETTING Kla15 from Kla7
2021-03-12 00:07:01,623 [main:106] - GETTING Kla15 from Kla1
2021-03-12 00:07:01,636 [main:106] - GETTING Kla15 from EmptyCoroutineContext
2021-03-12 00:07:01,637 [main:106] - GETTING Kla15 from Continuation<Any?>
2021-03-12 00:07:01,644 [main:106] - GETTING Kla15 from Continuation<Any?>
2021-03-12 00:07:01,645 [main:106] - GETTING Kla15 from Function0<Unit>
2021-03-12 00:07:01,654 [main:106] - GETTING Kla15 from Any
2021-03-12 00:07:01,655 [main:106] - GETTING Kla15 from Simple
2021-03-12 00:07:01,656 [main:106] - GETTING Kla15 from String
2021-03-12 00:07:01,657 [main:106] - GETTING Kla15 from String
2021-03-12 00:07:01,657 [main:106] - GETTING Kla15 from String?
2021-03-12 00:07:01,677 [main:106] - GETTING Kla15 from Function0<Unit>
2021-03-12 00:07:01,678 [main:106] - GETTING Kla15 from Kla1
2021-03-12 00:07:01,678 [main:106] - GETTING Kla15 from String?
2021-03-12 00:07:01,679 [main:106] - GETTING Kla15 from Boolean
2021-03-12 00:07:01,680 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 00:07:01,681 [main:106] - GETTING Kla15 from Boolean
2021-03-12 00:07:01,682 [main:106] - GETTING Kla15 from Int
2021-03-12 00:07:01,683 [main:106] - GETTING Kla15 from Int
2021-03-12 00:07:01,683 [main:114] - replacement of a of type Kla15 is Kla15("fppeq")
2021-03-12 00:07:01,907 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:07:01,907 [main:66] - Compilation checking started
2021-03-12 00:07:03,013 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString((Kla5.context).equals(Kla1().prope2).compareTo(true)))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}

fun <Ty2> fu24(a: Kla15): Ty2 = fu28(a) {
    it.value as Ty2
}

fun <Ty2> fu25(a: Kla15): Ty2 = fu28(Kla15("fppeq")) {
    it.fu29()
}

fun <Ty2> fu26(a: Kla15): Ty2 = fu28(a) {
    it.fu31()
}

fun <Ty2> fu27(a: Kla15): Ty2 = fu28(a) {
    fu30(it)
}

fun <Ty2, Ty3> fu28(value: Ty2, f: (Ty2) -> Ty3): Ty3 {
    return f(value)
}

fun <Ty2> Kla15.fu29(): Ty2 = value as Ty2

fun <Ty2> fu30(ic: Kla15): Ty2 = ic.value as Ty2

inline class Kla15(val value: String) {
    fun <Ty2> fu31(): Ty2 = value as Ty2
}

fun box105(): String {
    var prope19 = fu24<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 1: $prope19"

    prope19 = fu25<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 2: $prope19"

    prope19 = fu26<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 3: $prope19"

    prope19 = fu27<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 3: $prope19"

    return "OK"
}


2021-03-12 00:07:03,014 [main:107] - replacing (prope19, String)
2021-03-12 00:07:03,016 [main:50] - replacing prope19 String
2021-03-12 00:07:03,017 [main:54] - Getting value of type String
2021-03-12 00:07:03,248 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:07:03,258 [main:58] - GENERATED VALUE OF TYPE String = "joziw"
2021-03-12 00:07:03,258 [main:61] - GENERATED IS CALL =false
2021-03-12 00:07:03,279 [main:67] - randomType = Byte
2021-03-12 00:07:03,499 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:07:03,538 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5027e367]
2021-03-12 00:07:03,539 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-12 00:07:03,539 [main:78] - Generated call from random type = (86).toInt().toString((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)))
2021-03-12 00:07:03,540 [main:106] - GETTING String from Boolean
2021-03-12 00:07:03,547 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]]
2021-03-12 00:07:03,547 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:07:03,548 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-12 00:07:03,548 [main:117] - GENERATED CALL = ((localCaptured()).equals(Kla1().prope2)).compareTo((localCaptured()).equals(Kla1().prope2)).toString((Kla4().prope5).compareTo(Kla4().prope5))
2021-03-12 00:07:03,548 [main:114] - replacement of prope19 of type String is "joziw"
2021-03-12 00:07:03,773 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 00:07:03,773 [main:66] - Compilation checking started
2021-03-12 00:07:04,550 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString((Kla5.context).equals(Kla1().prope2).compareTo(true)))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}

fun <Ty2> fu24(a: Kla15): Ty2 = fu28(a) {
    it.value as Ty2
}

fun <Ty2> fu25(a: Kla15): Ty2 = fu28(Kla15("fppeq")) {
    it.fu29()
}

fun <Ty2> fu26(a: Kla15): Ty2 = fu28(a) {
    it.fu31()
}

fun <Ty2> fu27(a: Kla15): Ty2 = fu28(a) {
    fu30(it)
}

fun <Ty2, Ty3> fu28(value: Ty2, f: (Ty2) -> Ty3): Ty3 {
    return f(value)
}

fun <Ty2> Kla15.fu29(): Ty2 = value as Ty2

fun <Ty2> fu30(ic: Kla15): Ty2 = ic.value as Ty2

inline class Kla15(val value: String) {
    fun <Ty2> fu31(): Ty2 = value as Ty2
}

fun box105(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
var prope19 = fu24<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 1: $"joziw""

    prope19 = fu25<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 2: $prope19"

    prope19 = fu26<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 3: $prope19"

    prope19 = fu27<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 3: $prope19"

    return "OK"
}


2021-03-12 00:07:04,550 [main:107] - replacing (value, String)
2021-03-12 00:07:04,550 [main:50] - replacing value String
2021-03-12 00:07:04,550 [main:54] - Getting value of type String
2021-03-12 00:07:04,771 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:07:04,781 [main:58] - GENERATED VALUE OF TYPE String = "ynyqp"
2021-03-12 00:07:04,781 [main:61] - GENERATED IS CALL =false
2021-03-12 00:07:05,114 [main:67] - randomType = Kla10<UShort>
2021-03-12 00:07:05,333 [main:302] - generating value of type = Kla10<UShort> false depth = 0
2021-03-12 00:07:05,343 [main:112] - generating klass Kla10 text = abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-12 00:07:06,170 [main:302] - generating value of type = Kla13 false depth = 2
2021-03-12 00:07:06,181 [main:112] - generating klass Kla13 text = object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}
2021-03-12 00:07:06,197 [main:106] - GETTING String from String
2021-03-12 00:07:06,212 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c69b29d]]
2021-03-12 00:07:06,212 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c69b29d]
2021-03-12 00:07:06,436 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:07:06,446 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:07:06,456 [main:117] - GENERATED CALL = (fu0("rammy")).dropWhile({a: Char -> false})
2021-03-12 00:07:06,456 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7707aa0e], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70929d54]]
2021-03-12 00:07:06,456 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7707aa0e]
2021-03-12 00:07:06,457 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70929d54]
2021-03-12 00:07:06,676 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 00:07:06,906 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 00:07:06,919 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 00:07:07,752 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:07:07,762 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 00:07:07,774 [main:95] - GENERATED = Regex("pyyvs", kotlin.text.RegexOption.MULTILINE)
2021-03-12 00:07:07,992 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 00:07:08,002 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 00:07:08,236 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:07:08,248 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:07:08,764 [main:302] - generating value of type = String true depth = 4
2021-03-12 00:07:08,774 [main:95] - GENERATED = StringBuilder("ncdor")
2021-03-12 00:07:08,774 [main:117] - GENERATED CALL = (fu0("rammy")).subSequence(val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true).replace(Regex("pyyvs", kotlin.text.RegexOption.MULTILINE), {a: MatchResult -> StringBuilder("ncdor")})
2021-03-12 00:07:08,775 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fc35b5f]]
2021-03-12 00:07:08,775 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fc35b5f]
2021-03-12 00:07:08,992 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:07:09,002 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:07:09,013 [main:117] - GENERATED CALL = (fu0("rammy")).takeLastWhile({a: Char -> true})
2021-03-12 00:07:09,013 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ddbe32e]]
2021-03-12 00:07:09,013 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ddbe32e]
2021-03-12 00:07:09,013 [main:117] - GENERATED CALL = (fu0("rammy")).decapitalize()
2021-03-12 00:07:09,013 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32fb11a4]]
2021-03-12 00:07:09,013 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32fb11a4]
2021-03-12 00:07:09,013 [main:117] - GENERATED CALL = (fu0("rammy")).concat(var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
2021-03-12 00:07:09,013 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f51d7e]]
2021-03-12 00:07:09,013 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f51d7e]
2021-03-12 00:07:09,014 [main:117] - GENERATED CALL = (fu0("rammy")).toLowerCase()
2021-03-12 00:07:09,014 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3067e7b5]]
2021-03-12 00:07:09,014 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3067e7b5]
2021-03-12 00:07:09,236 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:07:09,246 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:07:09,256 [main:117] - GENERATED CALL = (fu0("rammy")).takeWhile({a: Char -> true})
2021-03-12 00:07:09,256 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55fca0d2]]
2021-03-12 00:07:09,256 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55fca0d2]
2021-03-12 00:07:09,256 [main:117] - GENERATED CALL = (fu0("rammy")).trimStart()
2021-03-12 00:07:09,256 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@788dfd0b]]
2021-03-12 00:07:09,256 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@788dfd0b]
2021-03-12 00:07:09,474 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:07:09,485 [main:117] - GENERATED CALL = (fu0("rammy")).substringBeforeLast('䃎', fu0("rammy"))
2021-03-12 00:07:09,485 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45094caa], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ed8dcd9]]
2021-03-12 00:07:09,485 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45094caa]
2021-03-12 00:07:09,703 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:07:09,713 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ed8dcd9]
2021-03-12 00:07:09,713 [main:117] - GENERATED CALL = (fu0("rammy")).get(584561373).uppercase()
2021-03-12 00:07:09,713 [main:114] - replacement of value of type String is (fu0("rammy")).decapitalize()
2021-03-12 00:07:09,930 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:07:09,931 [main:66] - Compilation checking started
2021-03-12 00:07:10,695 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString((Kla5.context).equals(Kla1().prope2).compareTo(true)))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}

fun <Ty2> fu24(a: Kla15): Ty2 = fu28(a) {
    it.value as Ty2
}

fun <Ty2> fu25(a: Kla15): Ty2 = fu28(Kla15("fppeq")) {
    it.fu29()
}

fun <Ty2> fu26(a: Kla15): Ty2 = fu28(a) {
    it.fu31()
}

fun <Ty2> fu27(a: Kla15): Ty2 = fu28(a) {
    fu30(it)
}

fun <Ty2, Ty3> fu28(value: Ty2, f: (Ty2) -> Ty3): Ty3 {
    return f(value)
}

fun <Ty2> Kla15.fu29(): Ty2 = value as Ty2

fun <Ty2> fu30(ic: Kla15): Ty2 = ic.value as Ty2

inline class Kla15(val value: String) {
    fun <Ty2> fu31(): Ty2 = (fu0("rammy")).decapitalize() as Ty2
}

fun box105(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
var prope19 = fu24<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 1: $prope19"

    prope19 = fu25<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 2: $prope19"

    prope19 = fu26<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 3: $prope19"

    prope19 = fu27<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 3: $prope19"

    return "OK"
}


2021-03-12 00:07:10,696 [main:107] - replacing (fu24<String>(Kla15("O")), String)
2021-03-12 00:07:10,697 [main:50] - replacing fu24<String>(Kla15("O")) String
2021-03-12 00:07:10,697 [main:54] - Getting value of type String
2021-03-12 00:07:10,918 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:07:10,928 [main:58] - GENERATED VALUE OF TYPE String = "ytcda"
2021-03-12 00:07:10,928 [main:61] - GENERATED IS CALL =false
2021-03-12 00:07:10,969 [main:67] - randomType = Kla0
2021-03-12 00:07:11,190 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 00:07:11,200 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}
2021-03-12 00:07:11,417 [main:194] - Type params = []
2021-03-12 00:07:11,674 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 00:07:11,904 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:07:11,917 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:07:12,463 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 00:07:12,708 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:07:12,720 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:07:13,566 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-12 00:07:13,821 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 00:07:13,833 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 00:07:14,691 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-12 00:07:14,934 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 00:07:14,946 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 00:07:15,798 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 14
2021-03-12 00:07:16,044 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 00:07:16,141 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 00:07:16,988 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 00:07:16,988 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 00:07:16,988 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 00:07:16,988 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:07:16,988 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:07:17,001 [main:106] - GETTING String from Any?
2021-03-12 00:07:17,004 [main:113] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@51623da1]]
2021-03-12 00:07:17,004 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@51623da1]
2021-03-12 00:07:17,004 [main:117] - GENERATED CALL = (Kla1().prope2).toString()
2021-03-12 00:07:17,004 [main:114] - replacement of fu24<String>(Kla15("O")) of type String is (Kla1().prope2).toString()
2021-03-12 00:07:17,227 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:07:17,227 [main:66] - Compilation checking started
2021-03-12 00:07:18,306 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString((Kla5.context).equals(Kla1().prope2).compareTo(true)))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}

fun <Ty2> fu24(a: Kla15): Ty2 = fu28(a) {
    it.value as Ty2
}

fun <Ty2> fu25(a: Kla15): Ty2 = fu28(Kla15("fppeq")) {
    it.fu29()
}

fun <Ty2> fu26(a: Kla15): Ty2 = fu28(a) {
    it.fu31()
}

fun <Ty2> fu27(a: Kla15): Ty2 = fu28(a) {
    fu30(it)
}

fun <Ty2, Ty3> fu28(value: Ty2, f: (Ty2) -> Ty3): Ty3 {
    return f(value)
}

fun <Ty2> Kla15.fu29(): Ty2 = value as Ty2

fun <Ty2> fu30(ic: Kla15): Ty2 = ic.value as Ty2

inline class Kla15(val value: String) {
    fun <Ty2> fu31(): Ty2 = value as Ty2
}

fun box105(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
var prope19 = (Kla1().prope2).toString() + "K"
    if (prope19 != "OK") return "FAIL 1: $prope19"

    prope19 = fu25<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 2: $prope19"

    prope19 = fu26<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 3: $prope19"

    prope19 = fu27<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 3: $prope19"

    return "OK"
}


2021-03-12 00:07:18,307 [main:107] - replacing (f(value), Ty3)
2021-03-12 00:07:18,309 [main:50] - replacing f(value) Ty3
2021-03-12 00:07:18,309 [main:54] - Getting value of type Ty3
2021-03-12 00:07:18,531 [main:302] - generating value of type = Ty3 false depth = 0
2021-03-12 00:07:18,545 [main:58] - GENERATED VALUE OF TYPE Ty3 = 
2021-03-12 00:07:18,586 [main:67] - randomType = Kla15
2021-03-12 00:07:18,807 [main:302] - generating value of type = Kla15 false depth = 0
2021-03-12 00:07:18,817 [main:112] - generating klass Kla15 text = inline class Kla15(val value: String) {
    fun <Ty2> fu31(): Ty2 = value as Ty2
}
2021-03-12 00:07:19,039 [main:194] - Type params = []
2021-03-12 00:07:19,261 [main:302] - generating value of type = String true depth = 2
2021-03-12 00:07:19,279 [main:106] - GETTING Ty3 from String?
2021-03-12 00:07:19,298 [main:106] - GETTING Ty3 from Continuation<ArrayDeque<Double>>
2021-03-12 00:07:19,305 [main:106] - GETTING Ty3 from Any
2021-03-12 00:07:19,308 [main:106] - GETTING Ty3 from EmptyCoroutineContext
2021-03-12 00:07:19,322 [main:106] - GETTING Ty3 from Any?
2021-03-12 00:07:19,325 [main:106] - GETTING Ty3 from Boolean
2021-03-12 00:07:19,333 [main:106] - GETTING Ty3 from Any?
2021-03-12 00:07:19,334 [main:106] - GETTING Ty3 from Kla5
2021-03-12 00:07:19,351 [main:106] - GETTING Ty3 from CoroutineContext
2021-03-12 00:07:19,356 [main:106] - GETTING Ty3 from Kla7
2021-03-12 00:07:19,361 [main:106] - GETTING Ty3 from Boolean
2021-03-12 00:07:19,362 [main:106] - GETTING Ty3 from KClass<out Any>
2021-03-12 00:07:19,370 [main:106] - GETTING Ty3 from CoroutineContext
2021-03-12 00:07:19,371 [main:106] - GETTING Ty3 from Any
2021-03-12 00:07:19,372 [main:106] - GETTING Ty3 from Int
2021-03-12 00:07:19,402 [main:106] - GETTING Ty3 from Kla1
2021-03-12 00:07:19,414 [main:106] - GETTING Ty3 from String
2021-03-12 00:07:19,430 [main:106] - GETTING Ty3 from String
2021-03-12 00:07:19,431 [main:106] - GETTING Ty3 from Kla1
2021-03-12 00:07:19,432 [main:106] - GETTING Ty3 from Simple
2021-03-12 00:07:19,439 [main:106] - GETTING Ty3 from Simple
2021-03-12 00:07:19,440 [main:106] - GETTING Ty3 from Array<Function1<Int?, Char>>
2021-03-12 00:07:19,455 [main:106] - GETTING Ty3 from Continuation<Any?>
2021-03-12 00:07:19,462 [main:106] - GETTING Ty3 from CoroutineContext
2021-03-12 00:07:19,463 [main:106] - GETTING Ty3 from Array<Function1<Int?, Char>>
2021-03-12 00:07:19,464 [main:106] - GETTING Ty3 from Int
2021-03-12 00:07:19,465 [main:106] - GETTING Ty3 from String
2021-03-12 00:07:19,466 [main:106] - GETTING Ty3 from Int
2021-03-12 00:07:19,467 [main:106] - GETTING Ty3 from Boolean
2021-03-12 00:07:19,467 [main:106] - GETTING Ty3 from Any
2021-03-12 00:07:19,468 [main:106] - GETTING Ty3 from KClass<out Any>
2021-03-12 00:07:19,469 [main:106] - GETTING Ty3 from Boolean
2021-03-12 00:07:19,470 [main:106] - GETTING Ty3 from CoroutineContext
2021-03-12 00:07:19,471 [main:106] - GETTING Ty3 from Int
2021-03-12 00:07:19,472 [main:106] - GETTING Ty3 from Continuation<Any?>
2021-03-12 00:07:19,473 [main:106] - GETTING Ty3 from CoroutineContext
2021-03-12 00:07:19,473 [main:106] - GETTING Ty3 from Function0<Unit>
2021-03-12 00:07:19,485 [main:106] - GETTING Ty3 from Function0<Unit>
2021-03-12 00:07:19,486 [main:106] - GETTING Ty3 from Simple
2021-03-12 00:07:19,487 [main:106] - GETTING Ty3 from EmptyCoroutineContext
2021-03-12 00:07:19,487 [main:106] - GETTING Ty3 from Boolean
2021-03-12 00:07:19,488 [main:106] - GETTING Ty3 from Continuation<Function2<Char, Double, ArrayDeque<Char>>>
2021-03-12 00:07:19,500 [main:106] - GETTING Ty3 from Any?
2021-03-12 00:07:19,501 [main:106] - GETTING Ty3 from String
2021-03-12 00:07:19,502 [main:106] - GETTING Ty3 from CoroutineContext
2021-03-12 00:07:19,503 [main:106] - GETTING Ty3 from Any
2021-03-12 00:07:19,504 [main:106] - GETTING Ty3 from CoroutineContext
2021-03-12 00:07:19,505 [main:106] - GETTING Ty3 from CoroutineContext
2021-03-12 00:07:19,506 [main:106] - GETTING Ty3 from String?
2021-03-12 00:07:19,507 [main:106] - GETTING Ty3 from Simple
2021-03-12 00:07:19,508 [main:106] - GETTING Ty3 from Any
2021-03-12 00:07:19,508 [main:111] - Cant find and generate replacement for f(value) type Ty3
2021-03-12 00:07:19,508 [main:107] - replacing ("FAIL 3: $prope19", String)
2021-03-12 00:07:19,508 [main:50] - replacing "FAIL 3: $prope19" String
2021-03-12 00:07:19,508 [main:54] - Getting value of type String
2021-03-12 00:07:19,729 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:07:19,740 [main:58] - GENERATED VALUE OF TYPE String = "ynwvn"
2021-03-12 00:07:19,740 [main:61] - GENERATED IS CALL =false
2021-03-12 00:07:20,025 [main:67] - randomType = UInt
2021-03-12 00:07:20,248 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 00:07:20,284 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@7c83ad66]
2021-03-12 00:07:20,284 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12649ad8]
2021-03-12 00:07:20,284 [main:78] - Generated call from random type = (1877985161.toUInt()).toLong().toString(Kla7().fu16())
2021-03-12 00:07:20,285 [main:106] - GETTING String from Boolean
2021-03-12 00:07:20,293 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]]
2021-03-12 00:07:20,293 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:07:20,293 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-12 00:07:20,552 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:07:20,563 [main:117] - GENERATED CALL = ((Kla5.context).equals(Kla1().prope2)).compareTo((Kla5.context).equals(Kla1().prope2)).toString(663275691)
2021-03-12 00:07:20,563 [main:114] - replacement of "FAIL 3: $prope19" of type String is "ynwvn"
2021-03-12 00:07:20,783 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 00:07:20,784 [main:66] - Compilation checking started
2021-03-12 00:07:21,843 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString((Kla5.context).equals(Kla1().prope2).compareTo(true)))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}

fun <Ty2> fu24(a: Kla15): Ty2 = fu28(a) {
    it.value as Ty2
}

fun <Ty2> fu25(a: Kla15): Ty2 = fu28(Kla15("fppeq")) {
    it.fu29()
}

fun <Ty2> fu26(a: Kla15): Ty2 = fu28(a) {
    it.fu31()
}

fun <Ty2> fu27(a: Kla15): Ty2 = fu28(a) {
    fu30(it)
}

fun <Ty2, Ty3> fu28(value: Ty2, f: (Ty2) -> Ty3): Ty3 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
return f(value)
}

fun <Ty2> Kla15.fu29(): Ty2 = value as Ty2

fun <Ty2> fu30(ic: Kla15): Ty2 = ic.value as Ty2

inline class Kla15(val value: String) {
    fun <Ty2> fu31(): Ty2 = value as Ty2
}

fun box105(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
var prope19 = (Kla1().prope2).toString() + "K"
    if (prope19 != "OK") return "FAIL 1: $prope19"

    prope19 = fu25<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 2: $prope19"

    prope19 = fu26<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "ynwvn"

    prope19 = fu27<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 3: $prope19"

    return "OK"
}


2021-03-12 00:07:21,844 [main:107] - replacing (value, Ty2)
2021-03-12 00:07:21,844 [main:50] - replacing value Ty2
2021-03-12 00:07:21,844 [main:54] - Getting value of type Ty2
2021-03-12 00:07:22,081 [main:302] - generating value of type = Ty2 false depth = 0
2021-03-12 00:07:22,095 [main:58] - GENERATED VALUE OF TYPE Ty2 = 
2021-03-12 00:07:22,116 [main:67] - randomType = Int
2021-03-12 00:07:22,337 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:07:22,378 [main:106] - GETTING Ty2 from Int
2021-03-12 00:07:22,408 [main:106] - GETTING Ty2 from Boolean
2021-03-12 00:07:22,416 [main:106] - GETTING Ty2 from String?
2021-03-12 00:07:22,435 [main:106] - GETTING Ty2 from Any
2021-03-12 00:07:22,438 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-12 00:07:22,444 [main:106] - GETTING Ty2 from EmptyCoroutineContext
2021-03-12 00:07:22,457 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-12 00:07:22,458 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-12 00:07:22,459 [main:106] - GETTING Ty2 from Array<Function1<Int?, Char>>
2021-03-12 00:07:22,474 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-12 00:07:22,475 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-12 00:07:22,476 [main:106] - GETTING Ty2 from Continuation<ArrayDeque<Double>>
2021-03-12 00:07:22,484 [main:106] - GETTING Ty2 from Any?
2021-03-12 00:07:22,488 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-12 00:07:22,488 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-12 00:07:22,489 [main:106] - GETTING Ty2 from Any
2021-03-12 00:07:22,490 [main:106] - GETTING Ty2 from Int
2021-03-12 00:07:22,491 [main:106] - GETTING Ty2 from Continuation<Function2<Char, Double, ArrayDeque<Char>>>
2021-03-12 00:07:22,501 [main:106] - GETTING Ty2 from Kla7
2021-03-12 00:07:22,506 [main:106] - GETTING Ty2 from Int
2021-03-12 00:07:22,507 [main:106] - GETTING Ty2 from Any
2021-03-12 00:07:22,508 [main:106] - GETTING Ty2 from Boolean
2021-03-12 00:07:22,509 [main:106] - GETTING Ty2 from String?
2021-03-12 00:07:22,510 [main:106] - GETTING Ty2 from String
2021-03-12 00:07:22,527 [main:106] - GETTING Ty2 from Function0<Unit>
2021-03-12 00:07:22,535 [main:106] - GETTING Ty2 from Any?
2021-03-12 00:07:22,536 [main:106] - GETTING Ty2 from Simple
2021-03-12 00:07:22,543 [main:106] - GETTING Ty2 from Continuation<Any?>
2021-03-12 00:07:22,549 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-12 00:07:22,550 [main:106] - GETTING Ty2 from Int
2021-03-12 00:07:22,551 [main:106] - GETTING Ty2 from Function0<Unit>
2021-03-12 00:07:22,552 [main:106] - GETTING Ty2 from String
2021-03-12 00:07:22,553 [main:106] - GETTING Ty2 from Any
2021-03-12 00:07:22,554 [main:106] - GETTING Ty2 from Simple
2021-03-12 00:07:22,555 [main:106] - GETTING Ty2 from Continuation<Any?>
2021-03-12 00:07:22,555 [main:106] - GETTING Ty2 from Kla1
2021-03-12 00:07:22,568 [main:106] - GETTING Ty2 from Kla5
2021-03-12 00:07:22,585 [main:106] - GETTING Ty2 from String
2021-03-12 00:07:22,586 [main:106] - GETTING Ty2 from Simple
2021-03-12 00:07:22,586 [main:106] - GETTING Ty2 from Array<Function1<Int?, Char>>
2021-03-12 00:07:22,587 [main:106] - GETTING Ty2 from Any
2021-03-12 00:07:22,588 [main:106] - GETTING Ty2 from KClass<out Any>
2021-03-12 00:07:22,597 [main:106] - GETTING Ty2 from Boolean
2021-03-12 00:07:22,599 [main:106] - GETTING Ty2 from EmptyCoroutineContext
2021-03-12 00:07:22,600 [main:106] - GETTING Ty2 from Boolean
2021-03-12 00:07:22,601 [main:106] - GETTING Ty2 from KClass<out Any>
2021-03-12 00:07:22,602 [main:106] - GETTING Ty2 from String
2021-03-12 00:07:22,602 [main:106] - GETTING Ty2 from Any?
2021-03-12 00:07:22,603 [main:106] - GETTING Ty2 from Simple
2021-03-12 00:07:22,604 [main:106] - GETTING Ty2 from Kla1
2021-03-12 00:07:22,605 [main:106] - GETTING Ty2 from Boolean
2021-03-12 00:07:22,605 [main:111] - Cant find and generate replacement for value type Ty2
2021-03-12 00:07:22,605 [main:107] - replacing (prope19 != "OK", Boolean)
2021-03-12 00:07:22,605 [main:50] - replacing prope19 != "OK" Boolean
2021-03-12 00:07:22,605 [main:54] - Getting value of type Boolean
2021-03-12 00:07:22,826 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:07:22,836 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:07:22,836 [main:61] - GENERATED IS CALL =false
2021-03-12 00:07:22,878 [main:67] - randomType = Kla0
2021-03-12 00:07:23,104 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 00:07:23,115 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}
2021-03-12 00:07:23,336 [main:194] - Type params = []
2021-03-12 00:07:23,555 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 00:07:23,788 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:07:23,801 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:07:24,353 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 00:07:24,599 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:07:24,612 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:07:25,503 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-12 00:07:25,749 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 00:07:25,761 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 00:07:26,622 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 00:07:26,622 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:07:26,622 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:07:26,634 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@6f463c91]
2021-03-12 00:07:26,634 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-12 00:07:26,634 [main:78] - Generated call from random type = (Kla0()).equals((Kla1()).prope2).equals((Kla1()).prope2)
2021-03-12 00:07:26,634 [main:114] - replacement of prope19 != "OK" of type Boolean is (Kla0()).equals((Kla1()).prope2).equals((Kla1()).prope2)
2021-03-12 00:07:26,855 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:07:26,856 [main:66] - Compilation checking started
2021-03-12 00:07:27,941 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString((Kla5.context).equals(Kla1().prope2).compareTo(true)))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}

fun <Ty2> fu24(a: Kla15): Ty2 = fu28(a) {
    it.value as Ty2
}

fun <Ty2> fu25(a: Kla15): Ty2 = fu28(Kla15("fppeq")) {
    it.fu29()
}

fun <Ty2> fu26(a: Kla15): Ty2 = fu28(a) {
    it.fu31()
}

fun <Ty2> fu27(a: Kla15): Ty2 = fu28(a) {
    fu30(it)
}

fun <Ty2, Ty3> fu28(value: Ty2, f: (Ty2) -> Ty3): Ty3 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
return f(value)
}

fun <Ty2> Kla15.fu29(): Ty2 = value as Ty2

fun <Ty2> fu30(ic: Kla15): Ty2 = ic.value as Ty2

inline class Kla15(val value: String) {
    fun <Ty2> fu31(): Ty2 = value as Ty2
}

fun box105(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
var prope19 = (Kla1().prope2).toString() + "K"
    if (prope19 != "OK") return "FAIL 1: $prope19"

    prope19 = fu25<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 2: $prope19"

    prope19 = fu26<String>(Kla15("O")) + "K"
    if ((Kla0()).equals((Kla1()).prope2).equals((Kla1()).prope2)) return "ynwvn"

    prope19 = fu27<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 3: $prope19"

    return "OK"
}


2021-03-12 00:07:27,942 [main:107] - replacing (prope19, String)
2021-03-12 00:07:27,942 [main:50] - replacing prope19 String
2021-03-12 00:07:27,942 [main:54] - Getting value of type String
2021-03-12 00:07:28,167 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:07:28,177 [main:58] - GENERATED VALUE OF TYPE String = "ttuwg"
2021-03-12 00:07:28,178 [main:61] - GENERATED IS CALL =false
2021-03-12 00:07:28,219 [main:67] - randomType = Kla1
2021-03-12 00:07:28,440 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 00:07:28,450 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 00:07:28,469 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@51623da1]
2021-03-12 00:07:28,470 [main:78] - Generated call from random type = (Kla1()).prope2?.toString()!!
2021-03-12 00:07:28,471 [main:106] - GETTING String from Simple
2021-03-12 00:07:28,481 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3da0c972]]
2021-03-12 00:07:28,481 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3da0c972]
2021-03-12 00:07:28,482 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.substring((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)))
2021-03-12 00:07:28,482 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c69b29d]]
2021-03-12 00:07:28,482 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c69b29d]
2021-03-12 00:07:28,703 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:07:28,714 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:07:28,725 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.dropWhile({a: Char -> true})
2021-03-12 00:07:28,725 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65c791d4]]
2021-03-12 00:07:28,725 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65c791d4]
2021-03-12 00:07:28,725 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.trimIndent()
2021-03-12 00:07:28,725 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4635417e]]
2021-03-12 00:07:28,725 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4635417e]
2021-03-12 00:07:28,725 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.reversed()
2021-03-12 00:07:28,725 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ddbe32e]]
2021-03-12 00:07:28,725 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ddbe32e]
2021-03-12 00:07:28,726 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.decapitalize()
2021-03-12 00:07:28,726 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dc46393]]
2021-03-12 00:07:28,726 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dc46393]
2021-03-12 00:07:28,726 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.prependIndent(fu1(true))
2021-03-12 00:07:28,726 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25ea4871]]
2021-03-12 00:07:28,726 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25ea4871]
2021-03-12 00:07:28,964 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:07:28,978 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("prqba")
2021-03-12 00:07:28,978 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2748ca6f]]
2021-03-12 00:07:28,978 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2748ca6f]
2021-03-12 00:07:29,204 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:07:29,215 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.substringBefore('', (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value)
2021-03-12 00:07:29,215 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a719753]]
2021-03-12 00:07:29,215 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a719753]
2021-03-12 00:07:29,436 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:07:29,670 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:07:29,682 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:07:30,231 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:07:30,242 [main:95] - GENERATED = StringBuilder(-442543030)
2021-03-12 00:07:30,242 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removePrefix(StringBuilder(-442543030))
2021-03-12 00:07:30,242 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]]
2021-03-12 00:07:30,242 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]
2021-03-12 00:07:30,243 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.uppercase()
2021-03-12 00:07:30,243 [main:114] - replacement of prope19 of type String is (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.decapitalize()
2021-03-12 00:07:30,462 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:07:30,463 [main:66] - Compilation checking started
2021-03-12 00:07:31,512 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString((Kla5.context).equals(Kla1().prope2).compareTo(true)))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}

fun <Ty2> fu24(a: Kla15): Ty2 = fu28(a) {
    it.value as Ty2
}

fun <Ty2> fu25(a: Kla15): Ty2 = fu28(Kla15("fppeq")) {
    it.fu29()
}

fun <Ty2> fu26(a: Kla15): Ty2 = fu28(a) {
    it.fu31()
}

fun <Ty2> fu27(a: Kla15): Ty2 = fu28(a) {
    fu30(it)
}

fun <Ty2, Ty3> fu28(value: Ty2, f: (Ty2) -> Ty3): Ty3 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
return f(value)
}

fun <Ty2> Kla15.fu29(): Ty2 = value as Ty2

fun <Ty2> fu30(ic: Kla15): Ty2 = ic.value as Ty2

inline class Kla15(val value: String) {
    fun <Ty2> fu31(): Ty2 = value as Ty2
}

fun box105(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
var prope19 = (Kla1().prope2).toString() + "K"
    if (prope19 != "OK") return "FAIL 1: $(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.decapitalize()"

    prope19 = fu25<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 2: $prope19"

    prope19 = fu26<String>(Kla15("O")) + "K"
    if ((Kla0()).equals((Kla1()).prope2).equals((Kla1()).prope2)) return "ynwvn"

    prope19 = fu27<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 3: $prope19"

    return "OK"
}


2021-03-12 00:07:31,514 [main:107] - replacing ("K", String)
2021-03-12 00:07:31,514 [main:50] - replacing "K" String
2021-03-12 00:07:31,514 [main:54] - Getting value of type String
2021-03-12 00:07:31,744 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:07:31,754 [main:58] - GENERATED VALUE OF TYPE String = "dpvhc"
2021-03-12 00:07:31,754 [main:61] - GENERATED IS CALL =false
2021-03-12 00:07:32,366 [main:67] - randomType = ArrayList<Sequence<Byte>>
2021-03-12 00:07:32,590 [main:302] - generating value of type = ArrayList<Sequence<Byte>> false depth = 0
2021-03-12 00:07:32,845 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Sequence<Byte>> = TODO()
2021-03-12 00:07:32,857 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Sequence<Byte>> = TODO()
2021-03-12 00:07:33,110 [main:95] - GENERATED = arrayListOf<Sequence<Byte>>()
2021-03-12 00:07:33,260 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@fb675b5]
2021-03-12 00:07:33,260 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@745a3724]
2021-03-12 00:07:33,482 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:07:33,718 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:07:33,952 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:07:33,965 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:07:34,487 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:07:34,501 [main:95] - GENERATED = StringBuilder("betpo")
2021-03-12 00:07:34,722 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:07:34,974 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:07:35,211 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 00:07:35,221 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 00:07:35,235 [main:78] - Generated call from random type = (arrayListOf<Sequence<Byte>>()).toArray().joinToString("qcnux", StringBuilder("betpo"), StringBuilder(), Kla7().prope10, "haxha", {a: T -> "fkcsc"})
2021-03-12 00:07:35,236 [main:106] - GETTING String from Continuation<Any?>
2021-03-12 00:07:35,243 [main:106] - GETTING String from Continuation<ArrayDeque<Double>>
2021-03-12 00:07:35,251 [main:106] - GETTING String from Array<Function1<Int?, Char>>
2021-03-12 00:07:35,266 [main:113] - Case = [public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@745a3724]]
2021-03-12 00:07:35,266 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@745a3724]
2021-03-12 00:07:35,490 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:07:35,725 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:07:35,960 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:07:36,197 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:07:36,210 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:07:36,731 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:07:36,745 [main:95] - GENERATED = StringBuilder("tepjj")
2021-03-12 00:07:36,967 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:07:37,205 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 00:07:37,215 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 00:07:37,450 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:07:37,463 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:07:37,986 [main:302] - generating value of type = String true depth = 4
2021-03-12 00:07:37,997 [main:95] - GENERATED = StringBuilder("nkzbg")
2021-03-12 00:07:37,997 [main:117] - GENERATED CALL = ((emptyArray<Function1<Int?, Char>>())).joinToString("tyvuw", "nvfql", StringBuilder("tepjj"), (Kla4().prope5).compareTo(Kla4().prope5), StringBuilder(), {a: T -> StringBuilder("nkzbg")})
2021-03-12 00:07:37,997 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@6bf16dff], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]]
2021-03-12 00:07:37,997 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-12 00:07:37,998 [main:117] - GENERATED CALL = ((emptyArray<Function1<Int?, Char>>())).size.toString((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)))
2021-03-12 00:07:37,998 [main:113] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@48d7aa61]]
2021-03-12 00:07:37,998 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@48d7aa61]
2021-03-12 00:07:37,998 [main:117] - GENERATED CALL = ((emptyArray<Function1<Int?, Char>>())).contentToString()
2021-03-12 00:07:37,998 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5e250a1a]]
2021-03-12 00:07:37,998 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5e250a1a]
2021-03-12 00:07:37,998 [main:117] - GENERATED CALL = ((emptyArray<Function1<Int?, Char>>())).contentDeepToString()
2021-03-12 00:07:37,998 [main:114] - replacement of "K" of type String is ((emptyArray<Function1<Int?, Char>>())).joinToString("tyvuw", "nvfql", StringBuilder("tepjj"), (Kla4().prope5).compareTo(Kla4().prope5), StringBuilder(), {a: T -> StringBuilder("nkzbg")})
2021-03-12 00:07:38,221 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:07:38,222 [main:66] - Compilation checking started
2021-03-12 00:07:38,995 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString((Kla5.context).equals(Kla1().prope2).compareTo(true)))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}

fun <Ty2> fu24(a: Kla15): Ty2 = fu28(a) {
    it.value as Ty2
}

fun <Ty2> fu25(a: Kla15): Ty2 = fu28(Kla15("fppeq")) {
    it.fu29()
}

fun <Ty2> fu26(a: Kla15): Ty2 = fu28(a) {
    it.fu31()
}

fun <Ty2> fu27(a: Kla15): Ty2 = fu28(a) {
    fu30(it)
}

fun <Ty2, Ty3> fu28(value: Ty2, f: (Ty2) -> Ty3): Ty3 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
return f(value)
}

fun <Ty2> Kla15.fu29(): Ty2 = value as Ty2

fun <Ty2> fu30(ic: Kla15): Ty2 = ic.value as Ty2

inline class Kla15(val value: String) {
    fun <Ty2> fu31(): Ty2 = value as Ty2
}

fun box105(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
var prope19 = (Kla1().prope2).toString() + "K"
    if (prope19 != "OK") return "FAIL 1: $(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.decapitalize()"

    prope19 = fu25<String>(Kla15("O")) + ((emptyArray<Function1<Int?, Char>>())).joinToString("tyvuw", "nvfql", StringBuilder("tepjj"), (Kla4().prope5).compareTo(Kla4().prope5), StringBuilder(), {a: T -> StringBuilder("nkzbg")})
    if (prope19 != "OK") return "FAIL 2: $prope19"

    prope19 = fu26<String>(Kla15("O")) + "K"
    if ((Kla0()).equals((Kla1()).prope2).equals((Kla1()).prope2)) return "ynwvn"

    prope19 = fu27<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 3: $prope19"

    return "OK"
}


2021-03-12 00:07:38,996 [main:107] - replacing ({
    it.fu29()
}, Function1<Kla15, Ty2>)
2021-03-12 00:07:38,996 [main:50] - replacing {
    it.fu29()
} Function1<Kla15, Ty2>
2021-03-12 00:07:38,996 [main:54] - Getting value of type Function1<Kla15, Ty2>
2021-03-12 00:07:39,229 [main:302] - generating value of type = Function1<Kla15, Ty2> false depth = 0
2021-03-12 00:07:39,240 [main:302] - generating value of type = Ty2 false depth = 1
2021-03-12 00:07:39,253 [main:58] - GENERATED VALUE OF TYPE Function1<Kla15, Ty2> = {a: Kla15 -> }
2021-03-12 00:07:39,253 [main:61] - GENERATED IS CALL =false
2021-03-12 00:07:40,467 [main:67] - randomType = HashSet<LinkedHashSet<Float>>?
2021-03-12 00:07:40,689 [main:302] - generating value of type = HashSet<LinkedHashSet<Float>> false depth = 0
2021-03-12 00:07:40,925 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: LinkedHashSet<Float>): HashSet<LkedHashSet<Float>> = TODO()
2021-03-12 00:07:40,938 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: LinkedHashSet<Float>): HashSet<LkedHashSet<Float>> = TODO()
2021-03-12 00:07:41,180 [main:302] - generating value of type = LinkedHashSet<Float> false depth = 3
2021-03-12 00:07:41,417 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashSet<Float> = TODO()
2021-03-12 00:07:41,429 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashSet<Float> = TODO()
2021-03-12 00:07:42,246 [main:302] - generating value of type = Int true depth = 6
2021-03-12 00:07:42,257 [main:302] - generating value of type = Float true depth = 6
2021-03-12 00:07:42,267 [main:95] - GENERATED = LinkedHashSet<Float>(909885161, 0.26493007f)
2021-03-12 00:07:42,267 [main:95] - GENERATED = hashSetOf<LinkedHashSet<Float>>(LinkedHashSet<Float>(909885161, 0.26493007f))
2021-03-12 00:07:42,394 [main:106] - GETTING Function1<Kla15, Ty2> from String?
2021-03-12 00:07:42,414 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:07:42,420 [main:106] - GETTING Function1<Kla15, Ty2> from Kla1
2021-03-12 00:07:42,433 [main:106] - GETTING Function1<Kla15, Ty2> from String
2021-03-12 00:07:42,449 [main:106] - GETTING Function1<Kla15, Ty2> from String
2021-03-12 00:07:42,451 [main:106] - GETTING Function1<Kla15, Ty2> from Continuation<Any?>
2021-03-12 00:07:42,458 [main:106] - GETTING Function1<Kla15, Ty2> from Continuation<ArrayDeque<Double>>
2021-03-12 00:07:42,467 [main:106] - GETTING Function1<Kla15, Ty2> from String?
2021-03-12 00:07:42,468 [main:106] - GETTING Function1<Kla15, Ty2> from Any
2021-03-12 00:07:42,472 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:07:42,473 [main:106] - GETTING Function1<Kla15, Ty2> from Any?
2021-03-12 00:07:42,478 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:07:42,479 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:07:42,480 [main:106] - GETTING Function1<Kla15, Ty2> from Continuation<Any?>
2021-03-12 00:07:42,482 [main:106] - GETTING Function1<Kla15, Ty2> from Int
2021-03-12 00:07:42,512 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:07:42,514 [main:106] - GETTING Function1<Kla15, Ty2> from Any
2021-03-12 00:07:42,515 [main:106] - GETTING Function1<Kla15, Ty2> from Simple
2021-03-12 00:07:42,523 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:07:42,524 [main:106] - GETTING Function1<Kla15, Ty2> from Continuation<Function2<Char, Double, ArrayDeque<Char>>>
2021-03-12 00:07:42,535 [main:106] - GETTING Function1<Kla15, Ty2> from Boolean
2021-03-12 00:07:42,544 [main:106] - GETTING Function1<Kla15, Ty2> from Kla1
2021-03-12 00:07:42,545 [main:106] - GETTING Function1<Kla15, Ty2> from Array<Function1<Int?, Char>>
2021-03-12 00:07:42,562 [main:106] - GETTING Function1<Kla15, Ty2> from Simple
2021-03-12 00:07:42,563 [main:106] - GETTING Function1<Kla15, Ty2> from Any?
2021-03-12 00:07:42,564 [main:106] - GETTING Function1<Kla15, Ty2> from Function0<Unit>
2021-03-12 00:07:42,574 [main:106] - GETTING Function1<Kla15, Ty2> from Int
2021-03-12 00:07:42,576 [main:106] - GETTING Function1<Kla15, Ty2> from Simple
2021-03-12 00:07:42,577 [main:106] - GETTING Function1<Kla15, Ty2> from Function0<Unit>
2021-03-12 00:07:42,578 [main:106] - GETTING Function1<Kla15, Ty2> from KClass<out Any>
2021-03-12 00:07:42,587 [main:106] - GETTING Function1<Kla15, Ty2> from Int
2021-03-12 00:07:42,589 [main:106] - GETTING Function1<Kla15, Ty2> from Array<Function1<Int?, Char>>
2021-03-12 00:07:42,590 [main:106] - GETTING Function1<Kla15, Ty2> from Any?
2021-03-12 00:07:42,591 [main:106] - GETTING Function1<Kla15, Ty2> from Boolean
2021-03-12 00:07:42,593 [main:106] - GETTING Function1<Kla15, Ty2> from Int
2021-03-12 00:07:42,594 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:07:42,595 [main:106] - GETTING Function1<Kla15, Ty2> from Any
2021-03-12 00:07:42,597 [main:106] - GETTING Function1<Kla15, Ty2> from Any
2021-03-12 00:07:42,598 [main:106] - GETTING Function1<Kla15, Ty2> from EmptyCoroutineContext
2021-03-12 00:07:42,613 [main:106] - GETTING Function1<Kla15, Ty2> from String
2021-03-12 00:07:42,615 [main:106] - GETTING Function1<Kla15, Ty2> from Boolean
2021-03-12 00:07:42,616 [main:106] - GETTING Function1<Kla15, Ty2> from KClass<out Any>
2021-03-12 00:07:42,617 [main:106] - GETTING Function1<Kla15, Ty2> from Any
2021-03-12 00:07:42,619 [main:106] - GETTING Function1<Kla15, Ty2> from Simple
2021-03-12 00:07:42,620 [main:106] - GETTING Function1<Kla15, Ty2> from Boolean
2021-03-12 00:07:42,621 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:07:42,623 [main:106] - GETTING Function1<Kla15, Ty2> from Boolean
2021-03-12 00:07:42,624 [main:106] - GETTING Function1<Kla15, Ty2> from Kla5
2021-03-12 00:07:42,642 [main:106] - GETTING Function1<Kla15, Ty2> from String
2021-03-12 00:07:42,643 [main:106] - GETTING Function1<Kla15, Ty2> from EmptyCoroutineContext
2021-03-12 00:07:42,644 [main:106] - GETTING Function1<Kla15, Ty2> from Kla7
2021-03-12 00:07:42,649 [main:114] - replacement of {
    it.fu29()
} of type Function1<Kla15, Ty2> is {a: Kla15 -> }
2021-03-12 00:07:42,870 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:07:42,870 [main:66] - Compilation checking started
2021-03-12 00:07:43,665 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString((Kla5.context).equals(Kla1().prope2).compareTo(true)))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}

fun <Ty2> fu24(a: Kla15): Ty2 = fu28(a) {
    it.value as Ty2
}

fun <Ty2> fu25(a: Kla15): Ty2 = fu28(Kla15("fppeq")) {a: Kla15 -> }

fun <Ty2> fu26(a: Kla15): Ty2 = fu28(a) {
    it.fu31()
}

fun <Ty2> fu27(a: Kla15): Ty2 = fu28(a) {
    fu30(it)
}

fun <Ty2, Ty3> fu28(value: Ty2, f: (Ty2) -> Ty3): Ty3 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
return f(value)
}

fun <Ty2> Kla15.fu29(): Ty2 = value as Ty2

fun <Ty2> fu30(ic: Kla15): Ty2 = ic.value as Ty2

inline class Kla15(val value: String) {
    fun <Ty2> fu31(): Ty2 = value as Ty2
}

fun box105(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
var prope19 = (Kla1().prope2).toString() + "K"
    if (prope19 != "OK") return "FAIL 1: $(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.decapitalize()"

    prope19 = fu25<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 2: $prope19"

    prope19 = fu26<String>(Kla15("O")) + "K"
    if ((Kla0()).equals((Kla1()).prope2).equals((Kla1()).prope2)) return "ynwvn"

    prope19 = fu27<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 3: $prope19"

    return "OK"
}


2021-03-12 00:07:43,666 [main:107] - replacing (value, String)
2021-03-12 00:07:43,666 [main:50] - replacing value String
2021-03-12 00:07:43,666 [main:54] - Getting value of type String
2021-03-12 00:07:43,894 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:07:43,905 [main:58] - GENERATED VALUE OF TYPE String = "bjkjd"
2021-03-12 00:07:43,905 [main:61] - GENERATED IS CALL =false
2021-03-12 00:07:43,926 [main:67] - randomType = Int
2021-03-12 00:07:44,152 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:07:44,192 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@22aa6b3b]
2021-03-12 00:07:44,192 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ed8dcd9]
2021-03-12 00:07:44,192 [main:78] - Generated call from random type = (-1601450879).toChar().uppercase()
2021-03-12 00:07:44,193 [main:106] - GETTING String from Kla1
2021-03-12 00:07:44,205 [main:113] - Case = [public final var prope2: kotlin.Any? defined in Kla1[PropertyDescriptorImpl@1587e01a], public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@51623da1]]
2021-03-12 00:07:44,205 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@51623da1]
2021-03-12 00:07:44,205 [main:117] - GENERATED CALL = (Kla1()).prope2?.toString()
2021-03-12 00:07:44,205 [main:114] - replacement of value of type String is "bjkjd"
2021-03-12 00:07:44,442 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 00:07:44,443 [main:66] - Compilation checking started
2021-03-12 00:07:45,242 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString((Kla5.context).equals(Kla1().prope2).compareTo(true)))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}

fun <Ty2> fu24(a: Kla15): Ty2 = fu28(a) {
    it."bjkjd" as Ty2
}

fun <Ty2> fu25(a: Kla15): Ty2 = fu28(Kla15("fppeq")) {
    it.fu29()
}

fun <Ty2> fu26(a: Kla15): Ty2 = fu28(a) {
    it.fu31()
}

fun <Ty2> fu27(a: Kla15): Ty2 = fu28(a) {
    fu30(it)
}

fun <Ty2, Ty3> fu28(value: Ty2, f: (Ty2) -> Ty3): Ty3 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
return f(value)
}

fun <Ty2> Kla15.fu29(): Ty2 = value as Ty2

fun <Ty2> fu30(ic: Kla15): Ty2 = ic.value as Ty2

inline class Kla15(val value: String) {
    fun <Ty2> fu31(): Ty2 = value as Ty2
}

fun box105(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
var prope19 = (Kla1().prope2).toString() + "K"
    if (prope19 != "OK") return "FAIL 1: $(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.decapitalize()"

    prope19 = fu25<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 2: $prope19"

    prope19 = fu26<String>(Kla15("O")) + "K"
    if ((Kla0()).equals((Kla1()).prope2).equals((Kla1()).prope2)) return "ynwvn"

    prope19 = fu27<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 3: $prope19"

    return "OK"
}


2021-03-12 00:07:45,243 [main:107] - replacing (value, String)
2021-03-12 00:07:45,243 [main:50] - replacing value String
2021-03-12 00:07:45,243 [main:54] - Getting value of type String
2021-03-12 00:07:45,467 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:07:45,478 [main:58] - GENERATED VALUE OF TYPE String = "toaig"
2021-03-12 00:07:45,478 [main:61] - GENERATED IS CALL =false
2021-03-12 00:07:45,499 [main:67] - randomType = Double
2021-03-12 00:07:45,724 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:07:45,761 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@70811b67]
2021-03-12 00:07:45,762 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ed8dcd9]
2021-03-12 00:07:45,762 [main:78] - Generated call from random type = (0.302993517286428).toChar().uppercase()
2021-03-12 00:07:45,763 [main:106] - GETTING String from Boolean
2021-03-12 00:07:45,771 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]]
2021-03-12 00:07:45,771 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:07:45,995 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:07:46,006 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-12 00:07:46,233 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:07:46,243 [main:117] - GENERATED CALL = ((Kla5.context).equals(Kla1().prope2)).compareTo(true).toString(-2105863048)
2021-03-12 00:07:46,243 [main:114] - replacement of value of type String is ((Kla5.context).equals(Kla1().prope2)).compareTo(true).toString(-2105863048)
2021-03-12 00:07:46,463 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:07:46,464 [main:66] - Compilation checking started
2021-03-12 00:07:47,573 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString((Kla5.context).equals(Kla1().prope2).compareTo(true)))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}

fun <Ty2> fu24(a: Kla15): Ty2 = fu28(a) {
    it.value as Ty2
}

fun <Ty2> fu25(a: Kla15): Ty2 = fu28(Kla15("fppeq")) {
    it.fu29()
}

fun <Ty2> fu26(a: Kla15): Ty2 = fu28(a) {
    it.fu31()
}

fun <Ty2> fu27(a: Kla15): Ty2 = fu28(a) {
    fu30(it)
}

fun <Ty2, Ty3> fu28(value: Ty2, f: (Ty2) -> Ty3): Ty3 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
return f(value)
}

fun <Ty2> Kla15.fu29(): Ty2 = value as Ty2

fun <Ty2> fu30(ic: Kla15): Ty2 = ic.value as Ty2

inline class Kla15(val value: String) {
    fun <Ty2> fu31(): Ty2 = ((Kla5.context).equals(Kla1().prope2)).compareTo(true).toString(-2105863048) as Ty2
}

fun box105(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
var prope19 = (Kla1().prope2).toString() + "K"
    if (prope19 != "OK") return "FAIL 1: $(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.decapitalize()"

    prope19 = fu25<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 2: $prope19"

    prope19 = fu26<String>(Kla15("O")) + "K"
    if ((Kla0()).equals((Kla1()).prope2).equals((Kla1()).prope2)) return "ynwvn"

    prope19 = fu27<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 3: $prope19"

    return "OK"
}


2021-03-12 00:07:47,574 [main:107] - replacing ("K", String)
2021-03-12 00:07:47,575 [main:50] - replacing "K" String
2021-03-12 00:07:47,575 [main:54] - Getting value of type String
2021-03-12 00:07:47,812 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:07:47,823 [main:58] - GENERATED VALUE OF TYPE String = "czebb"
2021-03-12 00:07:47,823 [main:61] - GENERATED IS CALL =false
2021-03-12 00:07:47,866 [main:67] - randomType = String?
2021-03-12 00:07:48,091 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:07:48,125 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@78fb2a59]
2021-03-12 00:07:48,125 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bdf8378]
2021-03-12 00:07:48,350 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:07:48,361 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:07:48,371 [main:78] - Generated call from random type = ("iljih")?.plus(Kla9().prope12).filter({a: Char -> true})
2021-03-12 00:07:48,372 [main:106] - GETTING String from Any
2021-03-12 00:07:48,377 [main:106] - GETTING String from CoroutineContext
2021-03-12 00:07:48,383 [main:106] - GETTING String from Boolean
2021-03-12 00:07:48,390 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]]
2021-03-12 00:07:48,390 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7023f6c]
2021-03-12 00:07:48,391 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-12 00:07:48,617 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:07:48,628 [main:117] - GENERATED CALL = (Kla4().prope5).compareTo(Kla12().prope16).toString(1190257030)
2021-03-12 00:07:48,628 [main:114] - replacement of "K" of type String is ("iljih")?.plus(Kla9().prope12).filter({a: Char -> true})
2021-03-12 00:07:48,849 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:07:48,850 [main:66] - Compilation checking started
2021-03-12 00:07:49,933 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString((Kla5.context).equals(Kla1().prope2).compareTo(true)))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}

fun <Ty2> fu24(a: Kla15): Ty2 = fu28(a) {
    it.value as Ty2
}

fun <Ty2> fu25(a: Kla15): Ty2 = fu28(Kla15("fppeq")) {
    it.fu29()
}

fun <Ty2> fu26(a: Kla15): Ty2 = fu28(a) {
    it.fu31()
}

fun <Ty2> fu27(a: Kla15): Ty2 = fu28(a) {
    fu30(it)
}

fun <Ty2, Ty3> fu28(value: Ty2, f: (Ty2) -> Ty3): Ty3 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
return f(value)
}

fun <Ty2> Kla15.fu29(): Ty2 = value as Ty2

fun <Ty2> fu30(ic: Kla15): Ty2 = ic.value as Ty2

inline class Kla15(val value: String) {
    fun <Ty2> fu31(): Ty2 = ((Kla5.context).equals(Kla1().prope2)).compareTo(true).toString(-2105863048) as Ty2
}

fun box105(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
var prope19 = (Kla1().prope2).toString() + ("iljih")?.plus(Kla9().prope12).filter({a: Char -> true})
    if (prope19 != "OK") return "FAIL 1: $(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.decapitalize()"

    prope19 = fu25<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 2: $prope19"

    prope19 = fu26<String>(Kla15("O")) + "K"
    if ((Kla0()).equals((Kla1()).prope2).equals((Kla1()).prope2)) return "ynwvn"

    prope19 = fu27<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 3: $prope19"

    return "OK"
}


2021-03-12 00:07:49,934 [main:107] - replacing ({
    fu30(it)
}, Function1<Kla15, Ty2>)
2021-03-12 00:07:49,934 [main:50] - replacing {
    fu30(it)
} Function1<Kla15, Ty2>
2021-03-12 00:07:49,934 [main:54] - Getting value of type Function1<Kla15, Ty2>
2021-03-12 00:07:50,163 [main:302] - generating value of type = Function1<Kla15, Ty2> false depth = 0
2021-03-12 00:07:50,174 [main:302] - generating value of type = Ty2 false depth = 1
2021-03-12 00:07:50,187 [main:58] - GENERATED VALUE OF TYPE Function1<Kla15, Ty2> = {a: Kla15 -> }
2021-03-12 00:07:50,188 [main:61] - GENERATED IS CALL =false
2021-03-12 00:07:51,413 [main:67] - randomType = Set<Kla10<Short?>>?
2021-03-12 00:07:51,415 [main:106] - GETTING Function1<Kla15, Ty2> from Any
2021-03-12 00:07:51,419 [main:106] - GETTING Function1<Kla15, Ty2> from Boolean
2021-03-12 00:07:51,428 [main:106] - GETTING Function1<Kla15, Ty2> from Int
2021-03-12 00:07:51,458 [main:106] - GETTING Function1<Kla15, Ty2> from Simple
2021-03-12 00:07:51,465 [main:106] - GETTING Function1<Kla15, Ty2> from EmptyCoroutineContext
2021-03-12 00:07:51,479 [main:106] - GETTING Function1<Kla15, Ty2> from String?
2021-03-12 00:07:51,498 [main:106] - GETTING Function1<Kla15, Ty2> from String
2021-03-12 00:07:51,515 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:07:51,521 [main:106] - GETTING Function1<Kla15, Ty2> from Int
2021-03-12 00:07:51,522 [main:106] - GETTING Function1<Kla15, Ty2> from Array<Function1<Int?, Char>>
2021-03-12 00:07:51,538 [main:106] - GETTING Function1<Kla15, Ty2> from Array<Function1<Int?, Char>>
2021-03-12 00:07:51,540 [main:106] - GETTING Function1<Kla15, Ty2> from Boolean
2021-03-12 00:07:51,541 [main:106] - GETTING Function1<Kla15, Ty2> from Any
2021-03-12 00:07:51,542 [main:106] - GETTING Function1<Kla15, Ty2> from KClass<out Any>
2021-03-12 00:07:51,551 [main:106] - GETTING Function1<Kla15, Ty2> from Function0<Unit>
2021-03-12 00:07:51,560 [main:106] - GETTING Function1<Kla15, Ty2> from Kla1
2021-03-12 00:07:51,573 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:07:51,575 [main:106] - GETTING Function1<Kla15, Ty2> from Simple
2021-03-12 00:07:51,576 [main:106] - GETTING Function1<Kla15, Ty2> from Simple
2021-03-12 00:07:51,577 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:07:51,579 [main:106] - GETTING Function1<Kla15, Ty2> from Simple
2021-03-12 00:07:51,580 [main:106] - GETTING Function1<Kla15, Ty2> from Int
2021-03-12 00:07:51,581 [main:106] - GETTING Function1<Kla15, Ty2> from Continuation<ArrayDeque<Double>>
2021-03-12 00:07:51,590 [main:106] - GETTING Function1<Kla15, Ty2> from String
2021-03-12 00:07:51,592 [main:106] - GETTING Function1<Kla15, Ty2> from Function0<Unit>
2021-03-12 00:07:51,593 [main:106] - GETTING Function1<Kla15, Ty2> from KClass<out Any>
2021-03-12 00:07:51,594 [main:106] - GETTING Function1<Kla15, Ty2> from Boolean
2021-03-12 00:07:51,596 [main:106] - GETTING Function1<Kla15, Ty2> from Continuation<Function2<Char, Double, ArrayDeque<Char>>>
2021-03-12 00:07:51,607 [main:106] - GETTING Function1<Kla15, Ty2> from Any
2021-03-12 00:07:51,608 [main:106] - GETTING Function1<Kla15, Ty2> from Any?
2021-03-12 00:07:51,613 [main:106] - GETTING Function1<Kla15, Ty2> from String?
2021-03-12 00:07:51,614 [main:106] - GETTING Function1<Kla15, Ty2> from String
2021-03-12 00:07:51,616 [main:106] - GETTING Function1<Kla15, Ty2> from String
2021-03-12 00:07:51,617 [main:106] - GETTING Function1<Kla15, Ty2> from Any
2021-03-12 00:07:51,618 [main:106] - GETTING Function1<Kla15, Ty2> from Kla5
2021-03-12 00:07:51,636 [main:106] - GETTING Function1<Kla15, Ty2> from Kla1
2021-03-12 00:07:51,637 [main:106] - GETTING Function1<Kla15, Ty2> from EmptyCoroutineContext
2021-03-12 00:07:51,638 [main:106] - GETTING Function1<Kla15, Ty2> from Boolean
2021-03-12 00:07:51,640 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:07:51,641 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:07:51,642 [main:106] - GETTING Function1<Kla15, Ty2> from Any?
2021-03-12 00:07:51,644 [main:106] - GETTING Function1<Kla15, Ty2> from Any?
2021-03-12 00:07:51,645 [main:106] - GETTING Function1<Kla15, Ty2> from Int
2021-03-12 00:07:51,647 [main:106] - GETTING Function1<Kla15, Ty2> from Boolean
2021-03-12 00:07:51,648 [main:106] - GETTING Function1<Kla15, Ty2> from Continuation<Any?>
2021-03-12 00:07:51,656 [main:106] - GETTING Function1<Kla15, Ty2> from Kla7
2021-03-12 00:07:51,662 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:07:51,663 [main:106] - GETTING Function1<Kla15, Ty2> from Any
2021-03-12 00:07:51,664 [main:106] - GETTING Function1<Kla15, Ty2> from Continuation<Any?>
2021-03-12 00:07:51,666 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:07:51,667 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:07:51,667 [main:114] - replacement of {
    fu30(it)
} of type Function1<Kla15, Ty2> is {a: Kla15 -> }
2021-03-12 00:07:51,897 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:07:51,898 [main:66] - Compilation checking started
2021-03-12 00:07:52,667 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString((Kla5.context).equals(Kla1().prope2).compareTo(true)))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}

fun <Ty2> fu24(a: Kla15): Ty2 = fu28(a) {
    it.value as Ty2
}

fun <Ty2> fu25(a: Kla15): Ty2 = fu28(Kla15("fppeq")) {
    it.fu29()
}

fun <Ty2> fu26(a: Kla15): Ty2 = fu28(a) {
    it.fu31()
}

fun <Ty2> fu27(a: Kla15): Ty2 = fu28(a) {a: Kla15 -> }

fun <Ty2, Ty3> fu28(value: Ty2, f: (Ty2) -> Ty3): Ty3 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
return f(value)
}

fun <Ty2> Kla15.fu29(): Ty2 = value as Ty2

fun <Ty2> fu30(ic: Kla15): Ty2 = ic.value as Ty2

inline class Kla15(val value: String) {
    fun <Ty2> fu31(): Ty2 = ((Kla5.context).equals(Kla1().prope2)).compareTo(true).toString(-2105863048) as Ty2
}

fun box105(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
var prope19 = (Kla1().prope2).toString() + ("iljih")?.plus(Kla9().prope12).filter({a: Char -> true})
    if (prope19 != "OK") return "FAIL 1: $(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.decapitalize()"

    prope19 = fu25<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 2: $prope19"

    prope19 = fu26<String>(Kla15("O")) + "K"
    if ((Kla0()).equals((Kla1()).prope2).equals((Kla1()).prope2)) return "ynwvn"

    prope19 = fu27<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 3: $prope19"

    return "OK"
}


2021-03-12 00:07:52,668 [main:107] - replacing (prope19, String)
2021-03-12 00:07:52,669 [main:50] - replacing prope19 String
2021-03-12 00:07:52,669 [main:54] - Getting value of type String
2021-03-12 00:07:52,899 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:07:52,910 [main:58] - GENERATED VALUE OF TYPE String = "bdkbj"
2021-03-12 00:07:52,910 [main:61] - GENERATED IS CALL =false
2021-03-12 00:07:53,894 [main:67] - randomType = HashMap<Map<Double, UByte>, Char>
2021-03-12 00:07:54,142 [main:302] - generating value of type = HashMap<Map<Double, UByte>, Char> false depth = 0
2021-03-12 00:07:54,379 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Map<Double, UByte>, Char>): HashMap<Map<Double, UByte>, Char> = TODO()
2021-03-12 00:07:54,392 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Map<Double, UByte>, Char>): HashMap<Map<Double, UByte>, Char> = TODO()
2021-03-12 00:07:54,633 [main:302] - generating value of type = Pair<Map<Double, UByte>, Char> false depth = 3
2021-03-12 00:07:54,872 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Map<Double, UByte>, second: Char): Pair<Map<Double, UByte>, Char> = TODO()
2021-03-12 00:07:54,885 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Map<Double, UByte>, second: Char): Pair<Map<Double, UByte>, Char> = TODO()
2021-03-12 00:07:55,138 [main:302] - generating value of type = Map<Double, UByte> false depth = 6
2021-03-12 00:07:55,376 [main:43] - GENERATING CALL OF fun <K, V> HashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Map<Double, UByte> = TODO()
2021-03-12 00:07:55,389 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Map<Double, UByte> = TODO()
2021-03-12 00:07:56,212 [main:302] - generating value of type = Int true depth = 9
2021-03-12 00:07:56,222 [main:302] - generating value of type = Float true depth = 9
2021-03-12 00:07:56,233 [main:95] - GENERATED = HashMap<Double, UByte>(-1072560758, 0.7770116f)
2021-03-12 00:07:56,233 [main:302] - generating value of type = Char true depth = 6
2021-03-12 00:07:56,243 [main:95] - GENERATED = Pair<Map<Double, UByte>, Char>(HashMap<Double, UByte>(-1072560758, 0.7770116f), '峣')
2021-03-12 00:07:56,244 [main:95] - GENERATED = linkedMapOf<Map<Double, UByte>, Char>(Pair<Map<Double, UByte>, Char>(HashMap<Double, UByte>(-1072560758, 0.7770116f), '峣'))
2021-03-12 00:07:56,356 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-12 00:07:56,586 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:07:56,597 [main:78] - Generated call from random type = (linkedMapOf<Map<Double, UByte>, Char>(Pair<Map<Double, UByte>, Char>(HashMap<Double, UByte>(-1072560758, 0.7770116f), '峣'))).size.toString(1997467589)
2021-03-12 00:07:56,598 [main:106] - GETTING String from Any
2021-03-12 00:07:56,603 [main:106] - GETTING String from Continuation<Any?>
2021-03-12 00:07:56,610 [main:106] - GETTING String from Simple
2021-03-12 00:07:56,615 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]]
2021-03-12 00:07:56,615 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7d8547]
2021-03-12 00:07:56,616 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.uppercase()
2021-03-12 00:07:56,616 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70796165]]
2021-03-12 00:07:56,616 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70796165]
2021-03-12 00:07:56,838 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 00:07:56,849 [main:302] - generating value of type = Char true depth = 1
2021-03-12 00:07:56,859 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.replaceFirstChar({a: Char -> '⾗'})
2021-03-12 00:07:56,860 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bdf8378]]
2021-03-12 00:07:56,860 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bdf8378]
2021-03-12 00:07:57,085 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:07:57,096 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:07:57,106 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filter({a: Char -> true})
2021-03-12 00:07:57,107 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb7f30e]]
2021-03-12 00:07:57,107 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb7f30e]
2021-03-12 00:07:57,332 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:07:57,343 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.replaceAfter('', (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb"), (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb"))
2021-03-12 00:07:57,344 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3da0c972]]
2021-03-12 00:07:57,344 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3da0c972]
2021-03-12 00:07:57,570 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:07:57,580 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.substring(1017987949)
2021-03-12 00:07:57,580 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@467f48e7]]
2021-03-12 00:07:57,580 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@467f48e7]
2021-03-12 00:07:57,804 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:07:58,045 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:07:58,055 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.padStart(354550875, '')
2021-03-12 00:07:58,056 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a719753]]
2021-03-12 00:07:58,056 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a719753]
2021-03-12 00:07:58,281 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:07:58,516 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:07:58,528 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:07:59,086 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:07:59,322 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:07:59,335 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:07:59,862 [main:302] - generating value of type = String true depth = 6
2021-03-12 00:07:59,872 [main:95] - GENERATED = StringBuilder("skfwt")
2021-03-12 00:07:59,873 [main:95] - GENERATED = StringBuilder(StringBuilder("skfwt"))
2021-03-12 00:07:59,873 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removePrefix(StringBuilder(StringBuilder("skfwt")))
2021-03-12 00:07:59,873 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2748ca6f]]
2021-03-12 00:07:59,873 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2748ca6f]
2021-03-12 00:08:00,099 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:08:00,110 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.substringBefore('썙', (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value)
2021-03-12 00:08:00,110 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@406dcd44]]
2021-03-12 00:08:00,110 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@406dcd44]
2021-03-12 00:08:00,333 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:08:00,344 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.replaceBefore('ꖫ', var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
2021-03-12 00:08:00,345 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4635417e]]
2021-03-12 00:08:00,345 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4635417e]
2021-03-12 00:08:00,345 [main:117] - GENERATED CALL = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.reversed()
2021-03-12 00:08:00,345 [main:114] - replacement of prope19 of type String is (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removePrefix(StringBuilder(StringBuilder("skfwt")))
2021-03-12 00:08:00,567 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:08:00,568 [main:66] - Compilation checking started
2021-03-12 00:08:01,648 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString((Kla5.context).equals(Kla1().prope2).compareTo(true)))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}

fun <Ty2> fu24(a: Kla15): Ty2 = fu28(a) {
    it.value as Ty2
}

fun <Ty2> fu25(a: Kla15): Ty2 = fu28(Kla15("fppeq")) {
    it.fu29()
}

fun <Ty2> fu26(a: Kla15): Ty2 = fu28(a) {
    it.fu31()
}

fun <Ty2> fu27(a: Kla15): Ty2 = fu28(a) {
    fu30(it)
}

fun <Ty2, Ty3> fu28(value: Ty2, f: (Ty2) -> Ty3): Ty3 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
return f(value)
}

fun <Ty2> Kla15.fu29(): Ty2 = value as Ty2

fun <Ty2> fu30(ic: Kla15): Ty2 = ic.value as Ty2

inline class Kla15(val value: String) {
    fun <Ty2> fu31(): Ty2 = ((Kla5.context).equals(Kla1().prope2)).compareTo(true).toString(-2105863048) as Ty2
}

fun box105(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
var prope19 = (Kla1().prope2).toString() + ("iljih")?.plus(Kla9().prope12).filter({a: Char -> true})
    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removePrefix(StringBuilder(StringBuilder("skfwt"))) != "OK") return "FAIL 1: $(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.decapitalize()"

    prope19 = fu25<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 2: $prope19"

    prope19 = fu26<String>(Kla15("O")) + "K"
    if ((Kla0()).equals((Kla1()).prope2).equals((Kla1()).prope2)) return "ynwvn"

    prope19 = fu27<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 3: $prope19"

    return "OK"
}


2021-03-12 00:08:01,650 [main:107] - replacing (prope19, String)
2021-03-12 00:08:01,651 [main:50] - replacing prope19 String
2021-03-12 00:08:01,651 [main:54] - Getting value of type String
2021-03-12 00:08:01,898 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:08:01,908 [main:58] - GENERATED VALUE OF TYPE String = "hztbq"
2021-03-12 00:08:01,908 [main:61] - GENERATED IS CALL =false
2021-03-12 00:08:01,930 [main:67] - randomType = Int
2021-03-12 00:08:02,160 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:08:02,200 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@22aa6b3b]
2021-03-12 00:08:02,200 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bd5a71c]
2021-03-12 00:08:02,200 [main:78] - Generated call from random type = (2025328724).toChar().titlecase()
2021-03-12 00:08:02,201 [main:106] - GETTING String from Continuation<ArrayDeque<Double>>
2021-03-12 00:08:02,209 [main:106] - GETTING String from Int
2021-03-12 00:08:02,237 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@775c1043], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f929571]]
2021-03-12 00:08:02,238 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@775c1043]
2021-03-12 00:08:02,238 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f929571]
2021-03-12 00:08:02,238 [main:117] - GENERATED CALL = (Kla7().prope10).toByte().toString(Kla7().fu16())
2021-03-12 00:08:02,238 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@22aa6b3b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@594b2e66]]
2021-03-12 00:08:02,238 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@22aa6b3b]
2021-03-12 00:08:02,238 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@594b2e66]
2021-03-12 00:08:02,238 [main:117] - GENERATED CALL = (Kla7().prope10).toChar().lowercase()
2021-03-12 00:08:02,238 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c2b5639], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12649ad8]]
2021-03-12 00:08:02,238 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c2b5639]
2021-03-12 00:08:02,466 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:08:02,477 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12649ad8]
2021-03-12 00:08:02,477 [main:117] - GENERATED CALL = (Kla7().prope10).div(6902513122451924581).toString(Kla7().fu16())
2021-03-12 00:08:02,477 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5c3a8215], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12649ad8]]
2021-03-12 00:08:02,477 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5c3a8215]
2021-03-12 00:08:02,478 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12649ad8]
2021-03-12 00:08:02,705 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:08:02,716 [main:117] - GENERATED CALL = (Kla7().prope10).toLong().toString(1395278221)
2021-03-12 00:08:02,716 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67911796], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6015949f]]
2021-03-12 00:08:02,716 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67911796]
2021-03-12 00:08:02,716 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6015949f]
2021-03-12 00:08:02,716 [main:117] - GENERATED CALL = (Kla7().prope10).toShort().toString((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)))
2021-03-12 00:08:02,716 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@22aa6b3b], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@517b5e0]]
2021-03-12 00:08:02,716 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@22aa6b3b]
2021-03-12 00:08:02,716 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@517b5e0]
2021-03-12 00:08:02,717 [main:117] - GENERATED CALL = (Kla7().prope10).toChar().plus((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value)
2021-03-12 00:08:02,717 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5027e367], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]]
2021-03-12 00:08:02,717 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5027e367]
2021-03-12 00:08:02,717 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-12 00:08:02,717 [main:117] - GENERATED CALL = (Kla7().prope10).toInt().toString((Kla4().prope5).compareTo(Kla4().prope5))
2021-03-12 00:08:02,717 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]]
2021-03-12 00:08:02,717 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-12 00:08:02,717 [main:117] - GENERATED CALL = (Kla7().prope10).toString((Kla4().prope5).compareTo(Kla4().prope5))
2021-03-12 00:08:02,717 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3add5d6f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]]
2021-03-12 00:08:02,717 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3add5d6f]
2021-03-12 00:08:02,945 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:08:02,956 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d75e976]
2021-03-12 00:08:03,187 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:08:03,197 [main:117] - GENERATED CALL = (Kla7().prope10).compareTo(149679179).toString(-1729293884)
2021-03-12 00:08:03,198 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@22aa6b3b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bd5a71c]]
2021-03-12 00:08:03,198 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@22aa6b3b]
2021-03-12 00:08:03,198 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bd5a71c]
2021-03-12 00:08:03,198 [main:117] - GENERATED CALL = (Kla7().prope10).toChar().titlecase()
2021-03-12 00:08:03,198 [main:114] - replacement of prope19 of type String is (Kla7().prope10).toShort().toString((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)))
2021-03-12 00:08:03,426 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:08:03,426 [main:66] - Compilation checking started
2021-03-12 00:08:04,651 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString((Kla5.context).equals(Kla1().prope2).compareTo(true)))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}

fun <Ty2> fu24(a: Kla15): Ty2 = fu28(a) {
    it.value as Ty2
}

fun <Ty2> fu25(a: Kla15): Ty2 = fu28(Kla15("fppeq")) {
    it.fu29()
}

fun <Ty2> fu26(a: Kla15): Ty2 = fu28(a) {
    it.fu31()
}

fun <Ty2> fu27(a: Kla15): Ty2 = fu28(a) {
    fu30(it)
}

fun <Ty2, Ty3> fu28(value: Ty2, f: (Ty2) -> Ty3): Ty3 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
return f(value)
}

fun <Ty2> Kla15.fu29(): Ty2 = value as Ty2

fun <Ty2> fu30(ic: Kla15): Ty2 = ic.value as Ty2

inline class Kla15(val value: String) {
    fun <Ty2> fu31(): Ty2 = ((Kla5.context).equals(Kla1().prope2)).compareTo(true).toString(-2105863048) as Ty2
}

fun box105(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
var prope19 = (Kla1().prope2).toString() + ("iljih")?.plus(Kla9().prope12).filter({a: Char -> true})
    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removePrefix(StringBuilder(StringBuilder("skfwt"))) != "OK") return "FAIL 1: $(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.decapitalize()"

    prope19 = fu25<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 2: $prope19"

    prope19 = fu26<String>(Kla15("O")) + "K"
    if ((Kla0()).equals((Kla1()).prope2).equals((Kla1()).prope2)) return "ynwvn"

    prope19 = fu27<String>(Kla15("O")) + "K"
    if ((Kla7().prope10).toShort().toString((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true))) != "OK") return "FAIL 3: $prope19"

    return "OK"
}


2021-03-12 00:08:04,653 [main:107] - replacing (fu26<String>(Kla15("O")) + "K", String)
2021-03-12 00:08:04,653 [main:50] - replacing fu26<String>(Kla15("O")) + "K" String
2021-03-12 00:08:04,653 [main:54] - Getting value of type String
2021-03-12 00:08:04,902 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:08:04,914 [main:58] - GENERATED VALUE OF TYPE String = "smzei"
2021-03-12 00:08:04,914 [main:61] - GENERATED IS CALL =false
2021-03-12 00:08:04,936 [main:67] - randomType = String
2021-03-12 00:08:05,167 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:08:05,194 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b1b626e]
2021-03-12 00:08:05,423 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:08:05,662 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:08:05,673 [main:78] - Generated call from random type = ("iqqtb").replaceAfterLast('ᚎ', var prope12 =
2021-03-12 00:08:05,673 [main:106] - GETTING String from String
2021-03-12 00:08:05,690 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71bb39bb]]
2021-03-12 00:08:05,690 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71bb39bb]
2021-03-12 00:08:05,918 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:08:05,932 [main:117] - GENERATED CALL = ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value).removeSuffix("knyyu")
2021-03-12 00:08:05,933 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f51d7e]]
2021-03-12 00:08:05,933 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f51d7e]
2021-03-12 00:08:05,933 [main:117] - GENERATED CALL = ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value).toLowerCase()
2021-03-12 00:08:05,933 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34b77bd5]]
2021-03-12 00:08:05,933 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34b77bd5]
2021-03-12 00:08:05,933 [main:117] - GENERATED CALL = ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value).drop((Kla4().prope5).compareTo(Kla4().prope5))
2021-03-12 00:08:05,933 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@742bca8e]]
2021-03-12 00:08:05,933 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@742bca8e]
2021-03-12 00:08:05,934 [main:117] - GENERATED CALL = ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value).toUpperCase()
2021-03-12 00:08:05,934 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7707aa0e], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df9bb6b]]
2021-03-12 00:08:05,934 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7707aa0e]
2021-03-12 00:08:05,934 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df9bb6b]
2021-03-12 00:08:06,164 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:08:06,179 [main:117] - GENERATED CALL = ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value).subSequence(val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true).commonSuffixWith(StringBuilder(), Kla12().prope16)
2021-03-12 00:08:06,179 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@788dfd0b]]
2021-03-12 00:08:06,179 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@788dfd0b]
2021-03-12 00:08:06,408 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:08:06,655 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:08:06,666 [main:117] - GENERATED CALL = ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value).substringBeforeLast('㓳', "cslqx")
2021-03-12 00:08:06,666 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@406dcd44]]
2021-03-12 00:08:06,666 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@406dcd44]
2021-03-12 00:08:06,896 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:08:07,141 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:08:07,153 [main:117] - GENERATED CALL = ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value).replaceBefore('ፑ', "klezn", fu1(true))
2021-03-12 00:08:07,153 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fc35b5f]]
2021-03-12 00:08:07,153 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fc35b5f]
2021-03-12 00:08:07,381 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:08:07,392 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:08:07,402 [main:117] - GENERATED CALL = ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value).takeLastWhile({a: Char -> false})
2021-03-12 00:08:07,403 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3da0c972]]
2021-03-12 00:08:07,403 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3da0c972]
2021-03-12 00:08:07,403 [main:117] - GENERATED CALL = ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value).substring((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)))
2021-03-12 00:08:07,403 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@467f48e7]]
2021-03-12 00:08:07,403 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@467f48e7]
2021-03-12 00:08:07,635 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:08:07,874 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:08:07,885 [main:117] - GENERATED CALL = ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value).padStart(-1280462368, '똾')
2021-03-12 00:08:07,885 [main:114] - replacement of fu26<String>(Kla15("O")) + "K" of type String is (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value
2021-03-12 00:08:08,122 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:08:08,122 [main:66] - Compilation checking started
2021-03-12 00:08:09,232 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString((Kla5.context).equals(Kla1().prope2).compareTo(true)))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}

fun <Ty2> fu24(a: Kla15): Ty2 = fu28(a) {
    it.value as Ty2
}

fun <Ty2> fu25(a: Kla15): Ty2 = fu28(Kla15("fppeq")) {
    it.fu29()
}

fun <Ty2> fu26(a: Kla15): Ty2 = fu28(a) {
    it.fu31()
}

fun <Ty2> fu27(a: Kla15): Ty2 = fu28(a) {
    fu30(it)
}

fun <Ty2, Ty3> fu28(value: Ty2, f: (Ty2) -> Ty3): Ty3 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
return f(value)
}

fun <Ty2> Kla15.fu29(): Ty2 = value as Ty2

fun <Ty2> fu30(ic: Kla15): Ty2 = ic.value as Ty2

inline class Kla15(val value: String) {
    fun <Ty2> fu31(): Ty2 = ((Kla5.context).equals(Kla1().prope2)).compareTo(true).toString(-2105863048) as Ty2
}

fun box105(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
var prope19 = (Kla1().prope2).toString() + ("iljih")?.plus(Kla9().prope12).filter({a: Char -> true})
    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removePrefix(StringBuilder(StringBuilder("skfwt"))) != "OK") return "FAIL 1: $(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.decapitalize()"

    prope19 = fu25<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 2: $prope19"

    prope19 = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value
    if ((Kla0()).equals((Kla1()).prope2).equals((Kla1()).prope2)) return "ynwvn"

    prope19 = fu27<String>(Kla15("O")) + "K"
    if ((Kla7().prope10).toShort().toString((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true))) != "OK") return "FAIL 3: $prope19"

    return "OK"
}


2021-03-12 00:08:09,233 [main:107] - replacing (((Kla5.context).equals(Kla1().prope2)).compareTo(true).toString(-2105863048) as Ty2, Ty2)
2021-03-12 00:08:09,233 [main:50] - replacing ((Kla5.context).equals(Kla1().prope2)).compareTo(true).toString(-2105863048) as Ty2 Ty2
2021-03-12 00:08:09,233 [main:54] - Getting value of type Ty2
2021-03-12 00:08:09,468 [main:302] - generating value of type = Ty2 false depth = 0
2021-03-12 00:08:09,484 [main:58] - GENERATED VALUE OF TYPE Ty2 = 
2021-03-12 00:08:10,126 [main:67] - randomType = Function1<UInt, Kla15>
2021-03-12 00:08:10,127 [main:106] - GETTING Ty2 from Kla1
2021-03-12 00:08:10,140 [main:106] - GETTING Ty2 from Boolean
2021-03-12 00:08:10,148 [main:106] - GETTING Ty2 from Any
2021-03-12 00:08:10,151 [main:106] - GETTING Ty2 from String
2021-03-12 00:08:10,168 [main:106] - GETTING Ty2 from Int
2021-03-12 00:08:10,197 [main:106] - GETTING Ty2 from Int
2021-03-12 00:08:10,198 [main:106] - GETTING Ty2 from Boolean
2021-03-12 00:08:10,199 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-12 00:08:10,205 [main:106] - GETTING Ty2 from String
2021-03-12 00:08:10,206 [main:106] - GETTING Ty2 from KClass<out Any>
2021-03-12 00:08:10,214 [main:106] - GETTING Ty2 from Any
2021-03-12 00:08:10,215 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-12 00:08:10,216 [main:106] - GETTING Ty2 from Simple
2021-03-12 00:08:10,222 [main:106] - GETTING Ty2 from Array<Function1<Int?, Char>>
2021-03-12 00:08:10,238 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-12 00:08:10,239 [main:106] - GETTING Ty2 from String?
2021-03-12 00:08:10,258 [main:106] - GETTING Ty2 from String
2021-03-12 00:08:10,259 [main:106] - GETTING Ty2 from Int
2021-03-12 00:08:10,260 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-12 00:08:10,261 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-12 00:08:10,262 [main:106] - GETTING Ty2 from Simple
2021-03-12 00:08:10,262 [main:106] - GETTING Ty2 from Any
2021-03-12 00:08:10,263 [main:106] - GETTING Ty2 from Kla5
2021-03-12 00:08:10,280 [main:106] - GETTING Ty2 from KClass<out Any>
2021-03-12 00:08:10,281 [main:106] - GETTING Ty2 from Int
2021-03-12 00:08:10,282 [main:106] - GETTING Ty2 from Boolean
2021-03-12 00:08:10,283 [main:106] - GETTING Ty2 from Continuation<ArrayDeque<Double>>
2021-03-12 00:08:10,291 [main:106] - GETTING Ty2 from Simple
2021-03-12 00:08:10,291 [main:106] - GETTING Ty2 from Any?
2021-03-12 00:08:10,295 [main:106] - GETTING Ty2 from Function0<Unit>
2021-03-12 00:08:10,303 [main:106] - GETTING Ty2 from Kla7
2021-03-12 00:08:10,308 [main:106] - GETTING Ty2 from Any
2021-03-12 00:08:10,309 [main:106] - GETTING Ty2 from Any?
2021-03-12 00:08:10,310 [main:106] - GETTING Ty2 from Array<Function1<Int?, Char>>
2021-03-12 00:08:10,311 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-12 00:08:10,312 [main:106] - GETTING Ty2 from Any?
2021-03-12 00:08:10,312 [main:106] - GETTING Ty2 from String?
2021-03-12 00:08:10,313 [main:106] - GETTING Ty2 from Any
2021-03-12 00:08:10,314 [main:106] - GETTING Ty2 from Function0<Unit>
2021-03-12 00:08:10,315 [main:106] - GETTING Ty2 from EmptyCoroutineContext
2021-03-12 00:08:10,329 [main:106] - GETTING Ty2 from Kla1
2021-03-12 00:08:10,330 [main:106] - GETTING Ty2 from String
2021-03-12 00:08:10,331 [main:106] - GETTING Ty2 from Boolean
2021-03-12 00:08:10,332 [main:106] - GETTING Ty2 from Boolean
2021-03-12 00:08:10,333 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-12 00:08:10,334 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-12 00:08:10,335 [main:106] - GETTING Ty2 from Continuation<Any?>
2021-03-12 00:08:10,342 [main:106] - GETTING Ty2 from Simple
2021-03-12 00:08:10,343 [main:106] - GETTING Ty2 from EmptyCoroutineContext
2021-03-12 00:08:10,344 [main:106] - GETTING Ty2 from Continuation<Function2<Char, Double, ArrayDeque<Char>>>
2021-03-12 00:08:10,354 [main:106] - GETTING Ty2 from Continuation<Any?>
2021-03-12 00:08:10,354 [main:111] - Cant find and generate replacement for ((Kla5.context).equals(Kla1().prope2)).compareTo(true).toString(-2105863048) as Ty2 type Ty2
2021-03-12 00:08:10,354 [main:107] - replacing ((Kla1().prope2).toString() + ("iljih")?.plus(Kla9().prope12).filter({a: Char -> true}), String)
2021-03-12 00:08:10,355 [main:50] - replacing (Kla1().prope2).toString() + ("iljih")?.plus(Kla9().prope12).filter({a: Char -> true}) String
2021-03-12 00:08:10,355 [main:54] - Getting value of type String
2021-03-12 00:08:10,584 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:08:10,594 [main:58] - GENERATED VALUE OF TYPE String = "nsuwl"
2021-03-12 00:08:10,594 [main:61] - GENERATED IS CALL =false
2021-03-12 00:08:10,984 [main:67] - randomType = MutableMap<Kla5, Kla9>
2021-03-12 00:08:10,984 [main:106] - GETTING String from String
2021-03-12 00:08:11,006 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30ecd0aa]]
2021-03-12 00:08:11,006 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30ecd0aa]
2021-03-12 00:08:11,006 [main:117] - GENERATED CALL = (fu0("rammy")).trim()
2021-03-12 00:08:11,006 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7707aa0e], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15007a46]]
2021-03-12 00:08:11,006 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7707aa0e]
2021-03-12 00:08:11,006 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15007a46]
2021-03-12 00:08:11,007 [main:117] - GENERATED CALL = (fu0("rammy")).subSequence((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)), (Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true))).repeat(Kla7().prope10)
2021-03-12 00:08:11,007 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb7f30e]]
2021-03-12 00:08:11,007 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb7f30e]
2021-03-12 00:08:11,240 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:08:11,480 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:08:11,490 [main:117] - GENERATED CALL = (fu0("rammy")).replaceAfter('瑘', fu0("rammy"), "olswd")
2021-03-12 00:08:11,491 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df9bb6b]]
2021-03-12 00:08:11,491 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df9bb6b]
2021-03-12 00:08:11,723 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:08:11,737 [main:117] - GENERATED CALL = (fu0("rammy")).commonSuffixWith("otseq", (Kla5.context).equals(Kla1().prope2))
2021-03-12 00:08:11,737 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dc46393]]
2021-03-12 00:08:11,737 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dc46393]
2021-03-12 00:08:11,737 [main:117] - GENERATED CALL = (fu0("rammy")).prependIndent(var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
2021-03-12 00:08:11,737 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55fca0d2]]
2021-03-12 00:08:11,737 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55fca0d2]
2021-03-12 00:08:11,737 [main:117] - GENERATED CALL = (fu0("rammy")).trimStart()
2021-03-12 00:08:11,737 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@467f48e7]]
2021-03-12 00:08:11,738 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@467f48e7]
2021-03-12 00:08:11,966 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:08:11,977 [main:117] - GENERATED CALL = (fu0("rammy")).padStart(Kla7().fu16(), '䇅')
2021-03-12 00:08:11,977 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45094caa], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@517b5e0]]
2021-03-12 00:08:11,977 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45094caa]
2021-03-12 00:08:11,978 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@517b5e0]
2021-03-12 00:08:12,211 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:08:12,222 [main:117] - GENERATED CALL = (fu0("rammy")).get(Kla7().prope10).plus("fmbef")
2021-03-12 00:08:12,222 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4632cdd]]
2021-03-12 00:08:12,222 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4632cdd]
2021-03-12 00:08:12,451 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:08:12,693 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:08:12,704 [main:117] - GENERATED CALL = (fu0("rammy")).replace('?', '䯶', Kla12().prope16)
2021-03-12 00:08:12,704 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fc35b5f]]
2021-03-12 00:08:12,704 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fc35b5f]
2021-03-12 00:08:12,931 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:08:12,942 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:08:12,953 [main:117] - GENERATED CALL = (fu0("rammy")).takeLastWhile({a: Char -> false})
2021-03-12 00:08:12,953 [main:114] - replacement of (Kla1().prope2).toString() + ("iljih")?.plus(Kla9().prope12).filter({a: Char -> true}) of type String is (fu0("rammy")).trim()
2021-03-12 00:08:13,185 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:08:13,185 [main:66] - Compilation checking started
2021-03-12 00:08:13,988 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString((Kla5.context).equals(Kla1().prope2).compareTo(true)))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}

fun <Ty2> fu24(a: Kla15): Ty2 = fu28(a) {
    it.value as Ty2
}

fun <Ty2> fu25(a: Kla15): Ty2 = fu28(Kla15("fppeq")) {
    it.fu29()
}

fun <Ty2> fu26(a: Kla15): Ty2 = fu28(a) {
    it.fu31()
}

fun <Ty2> fu27(a: Kla15): Ty2 = fu28(a) {
    fu30(it)
}

fun <Ty2, Ty3> fu28(value: Ty2, f: (Ty2) -> Ty3): Ty3 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
return f(value)
}

fun <Ty2> Kla15.fu29(): Ty2 = value as Ty2

fun <Ty2> fu30(ic: Kla15): Ty2 = ic.value as Ty2

inline class Kla15(val value: String) {
    fun <Ty2> fu31(): Ty2 = ((Kla5.context).equals(Kla1().prope2)).compareTo(true).toString(-2105863048) as Ty2
}

fun box105(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
var prope19 = (fu0("rammy")).trim()
    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removePrefix(StringBuilder(StringBuilder("skfwt"))) != "OK") return "FAIL 1: $(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.decapitalize()"

    prope19 = fu25<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 2: $prope19"

    prope19 = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value
    if ((Kla0()).equals((Kla1()).prope2).equals((Kla1()).prope2)) return "ynwvn"

    prope19 = fu27<String>(Kla15("O")) + "K"
    if ((Kla7().prope10).toShort().toString((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true))) != "OK") return "FAIL 3: $prope19"

    return "OK"
}


2021-03-12 00:08:13,990 [main:107] - replacing ({
    it.fu29()
}, Function1<Kla15, Ty2>)
2021-03-12 00:08:13,990 [main:50] - replacing {
    it.fu29()
} Function1<Kla15, Ty2>
2021-03-12 00:08:13,990 [main:54] - Getting value of type Function1<Kla15, Ty2>
2021-03-12 00:08:14,223 [main:302] - generating value of type = Function1<Kla15, Ty2> false depth = 0
2021-03-12 00:08:14,234 [main:302] - generating value of type = Ty2 false depth = 1
2021-03-12 00:08:14,247 [main:58] - GENERATED VALUE OF TYPE Function1<Kla15, Ty2> = {a: Kla15 -> }
2021-03-12 00:08:14,248 [main:61] - GENERATED IS CALL =false
2021-03-12 00:08:14,538 [main:67] - randomType = UByte
2021-03-12 00:08:14,767 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 00:08:14,804 [main:106] - GETTING Function1<Kla15, Ty2> from KClass<out Any>
2021-03-12 00:08:14,813 [main:106] - GETTING Function1<Kla15, Ty2> from Simple
2021-03-12 00:08:14,820 [main:106] - GETTING Function1<Kla15, Ty2> from Function0<Unit>
2021-03-12 00:08:14,829 [main:106] - GETTING Function1<Kla15, Ty2> from Kla1
2021-03-12 00:08:14,842 [main:106] - GETTING Function1<Kla15, Ty2> from EmptyCoroutineContext
2021-03-12 00:08:14,855 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:08:14,861 [main:106] - GETTING Function1<Kla15, Ty2> from Any
2021-03-12 00:08:14,865 [main:106] - GETTING Function1<Kla15, Ty2> from Simple
2021-03-12 00:08:14,866 [main:106] - GETTING Function1<Kla15, Ty2> from EmptyCoroutineContext
2021-03-12 00:08:14,868 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:08:14,869 [main:106] - GETTING Function1<Kla15, Ty2> from Any
2021-03-12 00:08:14,871 [main:106] - GETTING Function1<Kla15, Ty2> from Continuation<Function2<Char, Double, ArrayDeque<Char>>>
2021-03-12 00:08:14,881 [main:106] - GETTING Function1<Kla15, Ty2> from Continuation<Any?>
2021-03-12 00:08:14,889 [main:106] - GETTING Function1<Kla15, Ty2> from KClass<out Any>
2021-03-12 00:08:14,890 [main:106] - GETTING Function1<Kla15, Ty2> from Boolean
2021-03-12 00:08:14,899 [main:106] - GETTING Function1<Kla15, Ty2> from Boolean
2021-03-12 00:08:14,901 [main:106] - GETTING Function1<Kla15, Ty2> from String?
2021-03-12 00:08:14,920 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:08:14,922 [main:106] - GETTING Function1<Kla15, Ty2> from Any
2021-03-12 00:08:14,923 [main:106] - GETTING Function1<Kla15, Ty2> from String
2021-03-12 00:08:14,940 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:08:14,942 [main:106] - GETTING Function1<Kla15, Ty2> from Array<Function1<Int?, Char>>
2021-03-12 00:08:14,958 [main:106] - GETTING Function1<Kla15, Ty2> from Boolean
2021-03-12 00:08:14,960 [main:106] - GETTING Function1<Kla15, Ty2> from String
2021-03-12 00:08:14,961 [main:106] - GETTING Function1<Kla15, Ty2> from String
2021-03-12 00:08:14,962 [main:106] - GETTING Function1<Kla15, Ty2> from Kla5
2021-03-12 00:08:14,980 [main:106] - GETTING Function1<Kla15, Ty2> from Any?
2021-03-12 00:08:14,984 [main:106] - GETTING Function1<Kla15, Ty2> from Boolean
2021-03-12 00:08:14,986 [main:106] - GETTING Function1<Kla15, Ty2> from Int
2021-03-12 00:08:15,016 [main:106] - GETTING Function1<Kla15, Ty2> from Function0<Unit>
2021-03-12 00:08:15,018 [main:106] - GETTING Function1<Kla15, Ty2> from Simple
2021-03-12 00:08:15,019 [main:106] - GETTING Function1<Kla15, Ty2> from Int
2021-03-12 00:08:15,021 [main:106] - GETTING Function1<Kla15, Ty2> from Simple
2021-03-12 00:08:15,022 [main:106] - GETTING Function1<Kla15, Ty2> from Boolean
2021-03-12 00:08:15,023 [main:106] - GETTING Function1<Kla15, Ty2> from String
2021-03-12 00:08:15,025 [main:106] - GETTING Function1<Kla15, Ty2> from Array<Function1<Int?, Char>>
2021-03-12 00:08:15,026 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:08:15,028 [main:106] - GETTING Function1<Kla15, Ty2> from Int
2021-03-12 00:08:15,029 [main:106] - GETTING Function1<Kla15, Ty2> from Any?
2021-03-12 00:08:15,030 [main:106] - GETTING Function1<Kla15, Ty2> from Continuation<Any?>
2021-03-12 00:08:15,032 [main:106] - GETTING Function1<Kla15, Ty2> from Kla7
2021-03-12 00:08:15,038 [main:106] - GETTING Function1<Kla15, Ty2> from Kla1
2021-03-12 00:08:15,040 [main:106] - GETTING Function1<Kla15, Ty2> from Int
2021-03-12 00:08:15,041 [main:106] - GETTING Function1<Kla15, Ty2> from Any?
2021-03-12 00:08:15,042 [main:106] - GETTING Function1<Kla15, Ty2> from Continuation<ArrayDeque<Double>>
2021-03-12 00:08:15,051 [main:106] - GETTING Function1<Kla15, Ty2> from Any
2021-03-12 00:08:15,052 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:08:15,054 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:08:15,055 [main:106] - GETTING Function1<Kla15, Ty2> from Any
2021-03-12 00:08:15,057 [main:106] - GETTING Function1<Kla15, Ty2> from String?
2021-03-12 00:08:15,058 [main:106] - GETTING Function1<Kla15, Ty2> from CoroutineContext
2021-03-12 00:08:15,058 [main:114] - replacement of {
    it.fu29()
} of type Function1<Kla15, Ty2> is {a: Kla15 -> }
2021-03-12 00:08:15,290 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:08:15,290 [main:66] - Compilation checking started
2021-03-12 00:08:16,087 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString((Kla5.context).equals(Kla1().prope2).compareTo(true)))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}

fun <Ty2> fu24(a: Kla15): Ty2 = fu28(a) {
    it.value as Ty2
}

fun <Ty2> fu25(a: Kla15): Ty2 = fu28(Kla15("fppeq")) {a: Kla15 -> }

fun <Ty2> fu26(a: Kla15): Ty2 = fu28(a) {
    it.fu31()
}

fun <Ty2> fu27(a: Kla15): Ty2 = fu28(a) {
    fu30(it)
}

fun <Ty2, Ty3> fu28(value: Ty2, f: (Ty2) -> Ty3): Ty3 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
return f(value)
}

fun <Ty2> Kla15.fu29(): Ty2 = value as Ty2

fun <Ty2> fu30(ic: Kla15): Ty2 = ic.value as Ty2

inline class Kla15(val value: String) {
    fun <Ty2> fu31(): Ty2 = ((Kla5.context).equals(Kla1().prope2)).compareTo(true).toString(-2105863048) as Ty2
}

fun box105(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
var prope19 = (Kla1().prope2).toString() + ("iljih")?.plus(Kla9().prope12).filter({a: Char -> true})
    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removePrefix(StringBuilder(StringBuilder("skfwt"))) != "OK") return "FAIL 1: $(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.decapitalize()"

    prope19 = fu25<String>(Kla15("O")) + "K"
    if (prope19 != "OK") return "FAIL 2: $prope19"

    prope19 = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value
    if ((Kla0()).equals((Kla1()).prope2).equals((Kla1()).prope2)) return "ynwvn"

    prope19 = fu27<String>(Kla15("O")) + "K"
    if ((Kla7().prope10).toShort().toString((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true))) != "OK") return "FAIL 3: $prope19"

    return "OK"
}


2021-03-12 00:08:16,088 [main:107] - replacing (prope19 != "OK", Boolean)
2021-03-12 00:08:16,088 [main:50] - replacing prope19 != "OK" Boolean
2021-03-12 00:08:16,088 [main:54] - Getting value of type Boolean
2021-03-12 00:08:16,319 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:08:16,330 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 00:08:16,330 [main:61] - GENERATED IS CALL =false
2021-03-12 00:08:17,656 [main:67] - randomType = LinkedHashSet<LinkedHashSet<LinkedHashMap<String, Kla1>>>
2021-03-12 00:08:17,884 [main:302] - generating value of type = LinkedHashSet<LinkedHashSet<LinkedHashMap<String, Kla1>>> false depth = 0
2021-03-12 00:08:18,135 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int): LinkedHashSet<LinkedHashSet<LinkedHashMap<String, Kla1>>> = TODO()
2021-03-12 00:08:18,149 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int): LinkedHashSet<LinkedHashSet<LinkedHashMap<String, Kla1>>> = TODO()
2021-03-12 00:08:18,729 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:08:18,740 [main:95] - GENERATED = LinkedHashSet<LinkedHashSet<LinkedHashMap<String, Kla1>>>(1234415137)
2021-03-12 00:08:18,912 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@12bf9790]
2021-03-12 00:08:18,912 [main:149] - GENERATING call of type public operator fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.contains(element: T): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@37cc09a5]
2021-03-12 00:08:19,149 [main:302] - generating value of type = T false depth = 0
2021-03-12 00:08:19,404 [main:43] - GENERATING CALL OF fun <T> enumValueOf(name: kotlin.String): T = TODO()
2021-03-12 00:08:19,417 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValueOf(name: kotlin.String): T = TODO()
2021-03-12 00:08:19,954 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:08:19,965 [main:95] - GENERATED = enumValueOf<Enum<T>>("enmkl")
2021-03-12 00:08:19,965 [main:78] - Generated call from random type = (LinkedHashSet<LinkedHashSet<LinkedHashMap<String, Kla1>>>(1234415137)).toArray().contains(enumValueOf<Enum<T>>("enmkl"))
2021-03-12 00:08:19,966 [main:106] - GETTING Boolean from Kla5
2021-03-12 00:08:19,982 [main:113] - Case = [public open fun resumeWith(prope2: kotlin.Result<kotlin.Unit>): kotlin.Unit defined in Kla2[SimpleFunctionDescriptorImpl@70a7c134], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3ca3c839]]
2021-03-12 00:08:19,982 [main:149] - GENERATING call of type public open fun resumeWith(prope2: kotlin.Result<kotlin.Unit>): kotlin.Unit defined in Kla2[SimpleFunctionDescriptorImpl@70a7c134]
2021-03-12 00:08:20,214 [main:302] - generating value of type = Result<Unit> false depth = 0
2021-03-12 00:08:20,455 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Unit): Result<Unit> = TODO()
2021-03-12 00:08:20,468 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Unit): Result<Unit> = TODO()
2021-03-12 00:08:21,016 [main:302] - generating value of type = Function0<Unit> false depth = 3
2021-03-12 00:08:21,026 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 00:08:21,268 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:08:21,281 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:08:21,818 [main:302] - generating value of type = Any false depth = 7
2021-03-12 00:08:21,818 [main:95] - GENERATED = print("tqxfb")
2021-03-12 00:08:21,818 [main:95] - GENERATED = runCatching<Unit>({ print("tqxfb")})
2021-03-12 00:08:21,818 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3ca3c839]
2021-03-12 00:08:21,818 [main:117] - GENERATED CALL = (Kla5).resumeWith(runCatching<Unit>({ print("tqxfb")})).equals((Kla1()).prope2)
2021-03-12 00:08:21,819 [main:113] - Case = [public open val context: kotlin.coroutines.CoroutineContext defined in Kla5[PropertyDescriptorImpl@1934203f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@31bb6b78]]
2021-03-12 00:08:21,819 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@31bb6b78]
2021-03-12 00:08:22,050 [main:117] - GENERATED CALL = (Kla5).context.equals(null)
2021-03-12 00:08:22,050 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla5[DeserializedSimpleFunctionDescriptor@5a40b70d], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]]
2021-03-12 00:08:22,050 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla5[DeserializedSimpleFunctionDescriptor@5a40b70d]
2021-03-12 00:08:22,050 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4769548f]
2021-03-12 00:08:22,281 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:08:22,292 [main:117] - GENERATED CALL = (Kla5).equals(Kla9().prope12).xor(false)
2021-03-12 00:08:22,292 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla5[DeserializedSimpleFunctionDescriptor@5a40b70d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]]
2021-03-12 00:08:22,292 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla5[DeserializedSimpleFunctionDescriptor@5a40b70d]
2021-03-12 00:08:22,292 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4628ec69]
2021-03-12 00:08:22,293 [main:117] - GENERATED CALL = (Kla5).equals(Kla1().prope2).equals(Kla1().prope2)
2021-03-12 00:08:22,293 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla5[DeserializedSimpleFunctionDescriptor@5a40b70d], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]]
2021-03-12 00:08:22,293 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla5[DeserializedSimpleFunctionDescriptor@5a40b70d]
2021-03-12 00:08:22,521 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:08:22,521 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@617335ea]
2021-03-12 00:08:22,750 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:08:22,760 [main:117] - GENERATED CALL = (Kla5).equals("mqijw").and(true)
2021-03-12 00:08:22,761 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla5[DeserializedSimpleFunctionDescriptor@5a40b70d]]
2021-03-12 00:08:22,761 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla5[DeserializedSimpleFunctionDescriptor@5a40b70d]
2021-03-12 00:08:22,761 [main:117] - GENERATED CALL = (Kla5).equals((Kla1()).prope2)
2021-03-12 00:08:22,761 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla5[DeserializedSimpleFunctionDescriptor@5a40b70d], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]]
2021-03-12 00:08:22,761 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla5[DeserializedSimpleFunctionDescriptor@5a40b70d]
2021-03-12 00:08:22,990 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:08:22,990 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-12 00:08:22,990 [main:117] - GENERATED CALL = (Kla5).equals("ehhlr").or((localCaptured()).equals(Kla1().prope2))
2021-03-12 00:08:22,990 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla5[DeserializedSimpleFunctionDescriptor@5a40b70d], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]]
2021-03-12 00:08:22,990 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla5[DeserializedSimpleFunctionDescriptor@5a40b70d]
2021-03-12 00:08:22,991 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@26c1a18b]
2021-03-12 00:08:22,991 [main:117] - GENERATED CALL = (Kla5).equals(Kla9().prope12).not()
2021-03-12 00:08:22,991 [main:113] - Case = [public open fun resume(value: kotlin.Unit): kotlin.Unit defined in Kla5[SimpleFunctionDescriptorImpl@5d061f5e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3ca3c839]]
2021-03-12 00:08:22,991 [main:149] - GENERATING call of type public open fun resume(value: kotlin.Unit): kotlin.Unit defined in Kla5[SimpleFunctionDescriptorImpl@5d061f5e]
2021-03-12 00:08:22,991 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3ca3c839]
2021-03-12 00:08:23,247 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:08:23,248 [main:117] - GENERATED CALL = (Kla5).resume(Kla13.resume()).equals("ljrhx")
2021-03-12 00:08:23,248 [main:114] - replacement of prope19 != "OK" of type Boolean is (Kla5).equals((Kla1()).prope2)
2021-03-12 00:08:23,474 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:08:23,475 [main:66] - Compilation checking started
2021-03-12 00:08:24,545 [main:53] - Result = true
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString((Kla5.context).equals(Kla1().prope2).compareTo(true)))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}

fun <Ty2> fu24(a: Kla15): Ty2 = fu28(a) {
    it.value as Ty2
}

fun <Ty2> fu25(a: Kla15): Ty2 = fu28(Kla15("fppeq")) {
    it.fu29()
}

fun <Ty2> fu26(a: Kla15): Ty2 = fu28(a) {
    it.fu31()
}

fun <Ty2> fu27(a: Kla15): Ty2 = fu28(a) {
    fu30(it)
}

fun <Ty2, Ty3> fu28(value: Ty2, f: (Ty2) -> Ty3): Ty3 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
return f(value)
}

fun <Ty2> Kla15.fu29(): Ty2 = value as Ty2

fun <Ty2> fu30(ic: Kla15): Ty2 = ic.value as Ty2

inline class Kla15(val value: String) {
    fun <Ty2> fu31(): Ty2 = ((Kla5.context).equals(Kla1().prope2)).compareTo(true).toString(-2105863048) as Ty2
}

fun box105(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
var prope19 = (Kla1().prope2).toString() + ("iljih")?.plus(Kla9().prope12).filter({a: Char -> true})
    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removePrefix(StringBuilder(StringBuilder("skfwt"))) != "OK") return "FAIL 1: $(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.decapitalize()"

    prope19 = fu25<String>(Kla15("O")) + "K"
    if ((Kla5).equals((Kla1()).prope2)) return "FAIL 2: $prope19"

    prope19 = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value
    if ((Kla0()).equals((Kla1()).prope2).equals((Kla1()).prope2)) return "ynwvn"

    prope19 = fu27<String>(Kla15("O")) + "K"
    if ((Kla7().prope10).toShort().toString((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true))) != "OK") return "FAIL 3: $prope19"

    return "OK"
}


2021-03-12 00:08:24,546 [main:107] - replacing ("OK", String)
2021-03-12 00:08:24,547 [main:50] - replacing "OK" String
2021-03-12 00:08:24,547 [main:54] - Getting value of type String
2021-03-12 00:08:24,778 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:08:24,789 [main:58] - GENERATED VALUE OF TYPE String = "yaysy"
2021-03-12 00:08:24,789 [main:61] - GENERATED IS CALL =false
2021-03-12 00:08:24,811 [main:67] - randomType = Short
2021-03-12 00:08:25,039 [main:302] - generating value of type = Short true depth = 0
2021-03-12 00:08:25,082 [main:149] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@53aa86b7]
2021-03-12 00:08:25,082 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6015949f]
2021-03-12 00:08:25,082 [main:78] - Generated call from random type = (31618).toShort().toString(Kla7().prope10)
2021-03-12 00:08:25,083 [main:106] - GETTING String from Simple
2021-03-12 00:08:25,089 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@160250e6]]
2021-03-12 00:08:25,089 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@160250e6]
2021-03-12 00:08:25,318 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:08:25,329 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.dropLast(804394358)
2021-03-12 00:08:25,329 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25ea4871]]
2021-03-12 00:08:25,329 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25ea4871]
2021-03-12 00:08:25,564 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:08:25,578 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removeSurrounding(StringBuilder())
2021-03-12 00:08:25,578 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3f6d2d]]
2021-03-12 00:08:25,578 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3f6d2d]
2021-03-12 00:08:25,809 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:08:25,823 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.replaceRange((Kla4().prope5).compareTo(Kla4().prope5), Kla7().prope10, "cdyuv")
2021-03-12 00:08:25,824 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb7f30e]]
2021-03-12 00:08:25,824 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb7f30e]
2021-03-12 00:08:26,053 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:08:26,065 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.replaceAfter('끲', var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
2021-03-12 00:08:26,065 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@467f48e7]]
2021-03-12 00:08:26,065 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@467f48e7]
2021-03-12 00:08:26,293 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:08:26,304 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.padStart(Kla7().fu16(), '覲')
2021-03-12 00:08:26,304 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d703db2]]
2021-03-12 00:08:26,304 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d703db2]
2021-03-12 00:08:26,304 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.takeLast((Kla4().prope5).compareTo(Kla4().prope5))
2021-03-12 00:08:26,305 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dc46393]]
2021-03-12 00:08:26,305 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dc46393]
2021-03-12 00:08:26,305 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.prependIndent(var prope12 =
2021-03-12 00:08:26,305 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31e6d0e1]]
2021-03-12 00:08:26,305 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31e6d0e1]
2021-03-12 00:08:26,533 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:08:26,543 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:08:26,554 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.dropLastWhile({a: Char -> false})
2021-03-12 00:08:26,554 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ddbe32e]]
2021-03-12 00:08:26,555 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ddbe32e]
2021-03-12 00:08:26,555 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.decapitalize()
2021-03-12 00:08:26,555 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bdf8378]]
2021-03-12 00:08:26,555 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bdf8378]
2021-03-12 00:08:26,784 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:08:26,794 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:08:26,805 [main:117] - GENERATED CALL = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.filter({a: Char -> true})
2021-03-12 00:08:26,805 [main:114] - replacement of "OK" of type String is (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.padStart(Kla7().fu16(), '覲')
2021-03-12 00:08:27,032 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:08:27,033 [main:66] - Compilation checking started
2021-03-12 00:08:27,825 [main:49] - Result = false
Text:
import kotlin.reflect.full.valueParameters
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Retention(AnnotationRetention.RUNTIME)
annotation class Simple(val value: String)

fun local(): Any {
    class A(@Simple("OK") val z: String)
    return A("OK")
}

fun localCaptured(): Any {
    val z  = 1
    class A(@Simple("K") val z: String) {
        val x = z
    }
    return A("K")
}

fun box(): String {
    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
    //KT-25573
    //return (localCaptured()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "kjamm"}

suspend fun fu1(suspend: Boolean): String {
    if ((394979539)?.div(0.2309832731354714).isNaN()) return "O"

    return ('ੱ').toShort().toString(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box427(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value

    fu2 { require((local()::class).equals("bfcao"))}

    return (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vabdx"}).exceptionOrNull()?.let({a: Throwable -> print("stscd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        "bgxrn"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if ((-14217).rangeTo(-70).contains(null)) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.trimStart() + c + (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { (local()::class).equals("bfcao").equals("sygyd") }?.let { error((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.removePrefix(StringBuilder()) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceRange(-669730402, ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true), "ivkkn") +
                prope3.joinToString(separator = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.trimStart())) }
    }

    fun fu9(method: String) {
        prope3.find { prope1.prope5} ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLastWhile({a: Char -> true}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 334160728
    var prope5 = (local()).equals(null).xor(false)

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (local()).equals("wbiaq").or(true)
        prope6 = { println()}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-70, 1523211322)) {
            if ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.toBoolean()) error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.dropLast(394979539) + ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.compareTo("fyqip", true))
            prope6()
        }
        if ((local()).equals("xmuoq").not())
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.replaceFirst('괟', 'ੱ', true) + prope4)
        if (true) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((local()).equals("ydmdp")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.endsWith("ametx", true)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla7 {
    var prope10 = 334160728
    suspend fun fu16(v: Int): Int = (Kla5).equals("ubcow").compareTo(Kla4().prope5)
}

fun fu12(c: suspend Kla7.() -> Int): Kla7 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla7()
    c.startCoroutine(Kla7(), fu14 {a: Int -> println("hahzb")})

    return Kla7()
}

inline fun fu13(x: (Int) -> Unit) {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(localCaptured()).equals(Kla1().prope2).compareTo(true)) {
        {a: Int -> check(false, { "gfhru"})}(i)
    }
}

fun box520(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
var prope12 = ""

    val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)

    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSurrounding("xuwqb") != (Kla1()).prope2?.toString()!!) return (emptyArray<Function1<Int?, Char>>())?.contentToString()
    if ((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true)) != (local()::class).qualifiedName?.length) return (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removeSuffix(StringBuilder("xvciw"))

    return "OK"
}

fun <Ty1> fu14(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
x(prope12.getOrThrow())
    }
}

fun fu15(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
print("cumew")
    }
}

open class Kla8(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla14 : Kla8()
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "uqhky"}).getOrThrow()
    }
}

class Kla9 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope12: Result<Any?>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
this.prope12 = runCatching<Any?>({ "lcvpl"}).getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla10<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            fu17(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla11 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println("qorrr")}

    fun fu19(c: Continuation<*>) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((85.toUShort()).toShort().toString(-669730402) + c + (Kla4().prope5).compareTo(Kla4().prope5).toString(334160728))
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { true}?.let { error(('?')?.toByte().toString(1549255080) + it + ((local()::class)).qualifiedName +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope14.find { (fu3<Simple>({a: Simple -> print("jkaqk")})).context.equals("cewkv") } ?: error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.padStart(70, 'ੱ') + (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.filterNot({a: Char -> (Kla5).equals("ubcow")}) +
                prope14.joinToString(separator = "\n"))
    }
}

val prope8 = Kla11()

class Kla12 {
    private var prope15 = 0
    var prope16 = (Kla1()).equals(Kla1().prope2).or(Kla4().prope5)

    var prope17: () -> Unit = Kla4().prope6

    fun fu22() {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope15 = 0
        prope16 = false
        Kla4().prope6 = Kla4().prope6
    }

    suspend fun fu16() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(prope1.prope5, { "qyskf"})}

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
for (i in IntRange(334160728, -692622053)) {
            if (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).equals(Kla1().prope2).or(Kla4().prope5)) error((394979539).toString(70))
            prope17()
        }
        if (prope15 != -70)
            error(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value.filterIndexed({a: Int, b: Char -> false}) + "kdwyw" + prope15)
        if (prope16) error((0.8250154860545721).toShort().toString((Kla5.context).equals(Kla1().prope2).compareTo(true)))
        prope17()
        if ((fu3<Simple>({a: Simple -> print("jkaqk")})).equals(Kla1().prope2).and(Kla4().prope5) && (30123.toUShort()).rangeTo(25950.toUShort()).equals(Kla1().prope2)) error(((0.7442545f)).compareTo(125).toString(prope15))
    }
}

val prope9 = Kla12()

object Kla13: Kla10<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope17 = { print("dydzs")}
    }

    override fun fu17(exception: Throwable) {
        var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
val prope0 = Kla3()
val prope1 = Kla4()
throw NotImplementedError("lcxqh")
    }
}

fun <Ty2> fu24(a: Kla15): Ty2 = fu28(a) {
    it.value as Ty2
}

fun <Ty2> fu25(a: Kla15): Ty2 = fu28(Kla15("fppeq")) {
    it.fu29()
}

fun <Ty2> fu26(a: Kla15): Ty2 = fu28(a) {
    it.fu31()
}

fun <Ty2> fu27(a: Kla15): Ty2 = fu28(a) {
    fu30(it)
}

fun <Ty2, Ty3> fu28(value: Ty2, f: (Ty2) -> Ty3): Ty3 {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
return f(value)
}

fun <Ty2> Kla15.fu29(): Ty2 = value as Ty2

fun <Ty2> fu30(ic: Kla15): Ty2 = ic.value as Ty2

inline class Kla15(val value: String) {
    fun <Ty2> fu31(): Ty2 = ((Kla5.context).equals(Kla1().prope2)).compareTo(true).toString(-2105863048) as Ty2
}

fun box105(): String {
    var prope2 = ((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)).value
var prope12 = ""
val prope13 = (Kla5.context).equals(Kla1().prope2).compareTo(true)
val prope0 = Kla3()
val prope1 = Kla4()
val prope8 = Kla11()
val prope9 = Kla12()
var prope19 = (Kla1().prope2).toString() + ("iljih")?.plus(Kla9().prope12).filter({a: Char -> true})
    if ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.removePrefix(StringBuilder(StringBuilder("skfwt"))) != (local()::class.constructors.single().valueParameters.single().annotations.single() as Simple).value.padStart(Kla7().fu16(), '覲')) return "FAIL 1: $(((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value.decapitalize()"

    prope19 = fu25<String>(Kla15("O")) + "K"
    if ((Kla5).equals((Kla1()).prope2)) return "FAIL 2: $prope19"

    prope19 = (((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple))).value
    if ((Kla0()).equals((Kla1()).prope2).equals((Kla1()).prope2)) return "ynwvn"

    prope19 = fu27<String>(Kla15("O")) + "K"
    if ((Kla7().prope10).toShort().toString((Kla4().prope5).compareTo(Kla4().prope5).div((localCaptured()).equals(Kla1().prope2).compareTo(true))) != "OK") return "FAIL 3: $prope19"

    return "OK"
}


2021-03-12 00:08:27,826 [main:107] - replacing (prope19, String)
2021-03-12 00:08:27,827 [main:50] - replacing prope19 String
2021-03-12 00:08:27,827 [main:54] - Getting value of type String
2021-03-12 00:08:28,055 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:08:28,067 [main:58] - GENERATED VALUE OF TYPE String = "punta"
2021-03-12 00:08:28,067 [main:61] - GENERATED IS CALL =false
2021-03-12 00:08:28,430 [main:67] - randomType = Sequence<Kla4>
2021-03-12 00:08:28,431 [main:106] - GETTING String from Continuation<Any?>
2021-03-12 00:08:28,438 [main:106] - GETTING String from CoroutineContext
2021-03-12 00:08:28,444 [main:106] - GETTING String from CoroutineContext
2021-03-12 00:08:28,445 [main:106] - GETTING String from Simple
2021-03-12 00:08:28,451 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25ea4871]]
2021-03-12 00:08:28,451 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25ea4871]
2021-03-12 00:08:28,681 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:08:28,695 [main:117] - GENERATED CALL = ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)))).value.removeSurrounding(StringBuilder())
2021-03-12 00:08:28,695 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@419cb17]]
2021-03-12 00:08:28,695 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@419cb17]
2021-03-12 00:08:28,923 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:08:29,164 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:08:29,175 [main:117] - GENERATED CALL = ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)))).value.replaceFirst('흰', 'ѕ', (localCaptured()).equals(Kla1().prope2))
2021-03-12 00:08:29,175 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40de1f8a]]
2021-03-12 00:08:29,175 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40de1f8a]
2021-03-12 00:08:29,175 [main:117] - GENERATED CALL = ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)))).value.capitalize()
2021-03-12 00:08:29,175 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d703db2]]
2021-03-12 00:08:29,175 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d703db2]
2021-03-12 00:08:29,403 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:08:29,414 [main:117] - GENERATED CALL = ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)))).value.takeLast(238859258)
2021-03-12 00:08:29,414 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e73de07]]
2021-03-12 00:08:29,414 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e73de07]
2021-03-12 00:08:29,642 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:08:29,653 [main:117] - GENERATED CALL = ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)))).value.padEnd((Kla4().prope5).compareTo(Kla4().prope5), 'Ȇ')
2021-03-12 00:08:29,654 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fc35b5f]]
2021-03-12 00:08:29,654 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fc35b5f]
2021-03-12 00:08:29,881 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:08:29,891 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:08:29,902 [main:117] - GENERATED CALL = ((((local()::class.constructors.single().valueParameters.single().annotations.single() as Simple)))).value.takeLastWhile({a: Char -> false})
2021-03-12 00:08:29,902 [main:113] - Case = [public final val value: kotlin.String defined in Simple[PropertyDescriptorImpl@270ee316], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b1b626e]]
2021-03-12 00:08:29,902 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b1b626e]
2021-03-12 00:08:30,131 [main:302] - generating value of type = Char true depth = 0
