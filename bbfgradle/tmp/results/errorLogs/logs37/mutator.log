2021-03-11 21:16:02,365 [main:66] - Compilation checking started
2021-03-11 21:16:04,576 [main:43] - GENERATING CALL OF fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}
2021-03-11 21:16:04,979 [main:61] - WITHOUT TYPE PARAMS = fun <T : Sequence<*>> test(sequence: Sequence<*>): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}
2021-03-11 21:16:05,134 [main:302] - generating value of type = Sequence<*> false depth = 1
2021-03-11 21:16:05,270 [main:43] - GENERATING CALL OF fun <T> sequenceOf(elements: Any?): Sequence<*> = TODO()
2021-03-11 21:16:05,275 [main:61] - WITHOUT TYPE PARAMS = fun <T> sequenceOf(elements: Any?): Sequence<*> = TODO()
2021-03-11 21:16:05,420 [main:302] - generating value of type = Any false depth = 4
2021-03-11 21:16:05,424 [main:95] - GENERATED = sequenceOf<Any?>("amfxx")
2021-03-11 21:16:05,425 [main:95] - GENERATED = test<Sequence<*>>(sequenceOf<Any?>("amfxx"))
2021-03-11 21:16:05,573 [main:45] - Trying to change 8 nodes
2021-03-11 21:16:05,579 [main:53] - replacing ("$index:$x;", String)
2021-03-11 21:16:05,580 [main:50] - replacing "$index:$x;" String
2021-03-11 21:16:05,580 [main:54] - Getting value of type String
2021-03-11 21:16:05,694 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:16:05,694 [main:58] - GENERATED VALUE OF TYPE String = "bbsjo"
2021-03-11 21:16:05,695 [main:61] - GENERATED IS CALL =false
2021-03-11 21:16:05,827 [main:67] - randomType = Double
2021-03-11 21:16:05,923 [main:302] - generating value of type = Double true depth = 0
2021-03-11 21:16:06,039 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5cf95d65]
2021-03-11 21:16:06,041 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5460c665]
2021-03-11 21:16:06,042 [main:78] - Generated call from random type = (0.08743966404603876).toChar().lowercase()
2021-03-11 21:16:06,044 [main:106] - GETTING String from T
2021-03-11 21:16:06,069 [main:113] - Case = [public fun <T> kotlin.sequences.Sequence<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.sequences[DeserializedSimpleFunctionDescriptor@5a4be77f]]
2021-03-11 21:16:06,069 [main:149] - GENERATING call of type public fun <T> kotlin.sequences.Sequence<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.sequences[DeserializedSimpleFunctionDescriptor@5a4be77f]
2021-03-11 21:16:06,185 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:16:06,300 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:16:06,399 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:16:06,540 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:06,667 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:16:06,781 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 21:16:06,781 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 21:16:06,789 [main:117] - GENERATED CALL = (sequence).joinToString("qohex", StringBuilder(), "xwwyb", -786019528, StringBuilder(), {a: T -> StringBuilder()})
2021-03-11 21:16:06,789 [main:61] - replacement of "$index:$x;" of type String is "bbsjo"
2021-03-11 21:16:06,898 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 21:16:06,899 [main:66] - Compilation checking started
2021-03-11 21:16:07,475 [main:53] - Result = true
Text:
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("bbsjo")
    }

    return s.toString()
}


2021-03-11 21:16:07,476 [main:53] - replacing (x, Any?)
2021-03-11 21:16:07,476 [main:50] - replacing x Any?
2021-03-11 21:16:07,476 [main:54] - Getting value of type Any?
2021-03-11 21:16:07,604 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:16:07,604 [main:58] - GENERATED VALUE OF TYPE Any? = "nkbxj"
2021-03-11 21:16:07,605 [main:61] - GENERATED IS CALL =false
2021-03-11 21:16:07,820 [main:67] - randomType = Sequence<Char>
2021-03-11 21:16:07,822 [main:106] - GETTING Any? from String
2021-03-11 21:16:07,873 [main:61] - replacement of x of type Any? is "nkbxj"
2021-03-11 21:16:07,959 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 21:16:07,961 [main:53] - replacing ({
        s.append("bbsjo")
    }, StringBuilder)
2021-03-11 21:16:07,961 [main:50] - replacing {
        s.append("bbsjo")
    } StringBuilder
2021-03-11 21:16:07,962 [main:54] - Getting value of type StringBuilder
2021-03-11 21:16:08,056 [main:302] - generating value of type = StringBuilder false depth = 0
2021-03-11 21:16:08,174 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): StringBuilder = TODO()
2021-03-11 21:16:08,177 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): StringBuilder = TODO()
2021-03-11 21:16:08,366 [main:302] - generating value of type = String true depth = 3
2021-03-11 21:16:08,366 [main:95] - GENERATED = StringBuilder("ixlyi")
2021-03-11 21:16:08,367 [main:58] - GENERATED VALUE OF TYPE StringBuilder = StringBuilder("ixlyi")
2021-03-11 21:16:08,367 [main:61] - GENERATED IS CALL =true
2021-03-11 21:16:08,472 [main:67] - randomType = Long
2021-03-11 21:16:08,564 [main:302] - generating value of type = Long true depth = 0
2021-03-11 21:16:08,646 [main:106] - GETTING StringBuilder from T
2021-03-11 21:16:08,664 [main:106] - GETTING StringBuilder from StringBuilder
2021-03-11 21:16:08,703 [main:113] - Case = [@kotlin.Deprecated @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]]
2021-03-11 21:16:08,703 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]
2021-03-11 21:16:08,812 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:16:08,813 [main:117] - GENERATED CALL = (s).append("uqjit")
2021-03-11 21:16:08,814 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.insertRange(index: kotlin.Int, value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@919ebd1]]
2021-03-11 21:16:08,814 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.insertRange(index: kotlin.Int, value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@919ebd1]
2021-03-11 21:16:08,908 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:08,999 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 21:16:09,096 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 21:16:09,099 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 21:16:09,190 [main:302] - generating value of type = Char true depth = 3
2021-03-11 21:16:09,191 [main:95] - GENERATED = charArrayOf('妶')
2021-03-11 21:16:09,318 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:09,418 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:09,419 [main:117] - GENERATED CALL = (s).insertRange(-433618056, charArrayOf('妶'), -129181990, -379747990)
2021-03-11 21:16:09,420 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.setRange(startIndex: kotlin.Int, endIndex: kotlin.Int, value: kotlin.String): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e1dd4f]]
2021-03-11 21:16:09,420 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.setRange(startIndex: kotlin.Int, endIndex: kotlin.Int, value: kotlin.String): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e1dd4f]
2021-03-11 21:16:09,503 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:09,583 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:09,585 [main:117] - GENERATED CALL = (s).setRange(2043471769, -1691889574, test<Sequence<*>>(sequenceOf<Any?>("amfxx")))
2021-03-11 21:16:09,585 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.appendRange(value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@83df233]]
2021-03-11 21:16:09,585 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.appendRange(value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@83df233]
2021-03-11 21:16:09,668 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 21:16:09,812 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 21:16:09,814 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 21:16:09,906 [main:302] - generating value of type = Char true depth = 3
2021-03-11 21:16:09,907 [main:95] - GENERATED = charArrayOf('葈')
2021-03-11 21:16:09,989 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:10,076 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:10,077 [main:117] - GENERATED CALL = (s).appendRange(charArrayOf('葈'), -322587110, -1127143076)
2021-03-11 21:16:10,078 [main:113] - Case = [public final fun reverse(): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@1112b12f]]
2021-03-11 21:16:10,078 [main:149] - GENERATING call of type public final fun reverse(): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@1112b12f]
2021-03-11 21:16:10,079 [main:117] - GENERATED CALL = (s).reverse()
2021-03-11 21:16:10,079 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun insert(index: kotlin.Int, value: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@7608f21f]]
2021-03-11 21:16:10,079 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun insert(index: kotlin.Int, value: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@7608f21f]
2021-03-11 21:16:10,184 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:10,269 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:16:10,270 [main:117] - GENERATED CALL = (s).insert(2058276776, "vjksp")
2021-03-11 21:16:10,270 [main:113] - Case = [@kotlin.SinceKotlin public inline fun kotlin.text.StringBuilder.clear(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f55dea2]]
2021-03-11 21:16:10,270 [main:149] - GENERATING call of type @kotlin.SinceKotlin public inline fun kotlin.text.StringBuilder.clear(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f55dea2]
2021-03-11 21:16:10,271 [main:117] - GENERATED CALL = (s).clear()
2021-03-11 21:16:10,271 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3222ab2a]]
2021-03-11 21:16:10,271 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3222ab2a]
2021-03-11 21:16:10,350 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:10,439 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:10,440 [main:117] - GENERATED CALL = (s).deleteRange(1288229436, -1649414918)
2021-03-11 21:16:10,440 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteAt(index: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c1f3138]]
2021-03-11 21:16:10,440 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteAt(index: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c1f3138]
2021-03-11 21:16:10,527 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:10,528 [main:117] - GENERATED CALL = (s).deleteAt(-777931323)
2021-03-11 21:16:10,528 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.appendLine(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57bb770e]]
2021-03-11 21:16:10,528 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.appendLine(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57bb770e]
2021-03-11 21:16:10,529 [main:117] - GENERATED CALL = (s).appendLine()
2021-03-11 21:16:10,529 [main:61] - replacement of {
        s.append("bbsjo")
    } of type StringBuilder is (s).appendLine()
2021-03-11 21:16:10,628 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:16:10,629 [main:66] - Compilation checking started
2021-03-11 21:16:11,075 [main:53] - Result = true
Text:
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) (s).appendLine()

    return s.toString()
}


2021-03-11 21:16:11,077 [main:53] - replacing (s.toString(), String)
2021-03-11 21:16:11,077 [main:50] - replacing s.toString() String
2021-03-11 21:16:11,077 [main:54] - Getting value of type String
2021-03-11 21:16:11,194 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:16:11,194 [main:58] - GENERATED VALUE OF TYPE String = "xuosb"
2021-03-11 21:16:11,194 [main:61] - GENERATED IS CALL =false
2021-03-11 21:16:11,492 [main:67] - randomType = Function1<UInt, Char>
2021-03-11 21:16:11,493 [main:106] - GETTING String from StringBuilder
2021-03-11 21:16:11,523 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@5bce1e69], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6289cda]]
2021-03-11 21:16:11,523 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@5bce1e69]
2021-03-11 21:16:11,614 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:11,614 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6289cda]
2021-03-11 21:16:11,615 [main:117] - GENERATED CALL = (s).substring(-635276299).capitalize()
2021-03-11 21:16:11,615 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@14f96a7c], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@301a9a06]]
2021-03-11 21:16:11,615 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@14f96a7c]
2021-03-11 21:16:11,703 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:11,788 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:11,789 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@301a9a06]
2021-03-11 21:16:11,867 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:16:11,982 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:16:11,984 [main:117] - GENERATED CALL = (s).subSequence(-278283570, -548957016).commonSuffixWith("nvsgm", false)
2021-03-11 21:16:11,984 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@5bce1e69], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ce95b9a]]
2021-03-11 21:16:11,984 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@5bce1e69]
2021-03-11 21:16:12,082 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:12,083 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ce95b9a]
2021-03-11 21:16:12,167 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:16:12,172 [main:117] - GENERATED CALL = (s).substring(-462577949).removeSurrounding(StringBuilder())
2021-03-11 21:16:12,172 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e0944ff]]
2021-03-11 21:16:12,172 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e0944ff]
2021-03-11 21:16:12,255 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:16:12,339 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:16:12,340 [main:117] - GENERATED CALL = (s).commonPrefixWith("tbris", true)
2021-03-11 21:16:12,341 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f9c2844]]
2021-03-11 21:16:12,341 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f9c2844]
2021-03-11 21:16:12,447 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 21:16:12,543 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 21:16:12,545 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 21:16:12,815 [main:302] - generating value of type = String true depth = 3
2021-03-11 21:16:12,815 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-11 21:16:12,818 [main:95] - GENERATED = Regex("uzsbb", kotlin.text.RegexOption.MULTILINE)
2021-03-11 21:16:12,820 [main:117] - GENERATED CALL = (s).replaceFirst(Regex("uzsbb", kotlin.text.RegexOption.MULTILINE), test<Sequence<*>>(sequenceOf<Any?>("amfxx")))
2021-03-11 21:16:12,820 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@5bce1e69], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51275fbe]]
2021-03-11 21:16:12,820 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@5bce1e69]
2021-03-11 21:16:12,917 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:12,917 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51275fbe]
2021-03-11 21:16:12,922 [main:117] - GENERATED CALL = (s).substring(1967348741).toLowerCase()
2021-03-11 21:16:12,923 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@14f96a7c], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521e9242]]
2021-03-11 21:16:12,923 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@14f96a7c]
2021-03-11 21:16:13,010 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:13,092 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:13,092 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521e9242]
2021-03-11 21:16:13,173 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 21:16:13,259 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 21:16:13,261 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 21:16:13,476 [main:302] - generating value of type = String true depth = 3
2021-03-11 21:16:13,476 [main:95] - GENERATED = Regex("mvxnv")
2021-03-11 21:16:13,557 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 21:16:13,557 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 21:16:13,562 [main:117] - GENERATED CALL = (s).subSequence(1588513278, -298585676).replace(Regex("mvxnv"), {a: MatchResult -> StringBuilder()})
2021-03-11 21:16:13,562 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@14f96a7c], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f9c2844]]
2021-03-11 21:16:13,562 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@14f96a7c]
2021-03-11 21:16:13,646 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:13,738 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:13,739 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f9c2844]
2021-03-11 21:16:13,838 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 21:16:13,930 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 21:16:13,932 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 21:16:14,193 [main:302] - generating value of type = String true depth = 3
2021-03-11 21:16:14,193 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-11 21:16:14,294 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): Set<RegexOption> = TODO()
2021-03-11 21:16:14,296 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): Set<RegexOption> = TODO()
2021-03-11 21:16:14,407 [main:95] - GENERATED = linkedSetOf<RegexOption>()
2021-03-11 21:16:14,408 [main:95] - GENERATED = Regex("seutf", linkedSetOf<RegexOption>())
2021-03-11 21:16:14,409 [main:117] - GENERATED CALL = (s).subSequence(1898325821, -2074283154).replaceFirst(Regex("seutf", linkedSetOf<RegexOption>()), test<Sequence<*>>(sequenceOf<Any?>("amfxx")))
2021-03-11 21:16:14,409 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@5bce1e69], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12972847]]
2021-03-11 21:16:14,410 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@5bce1e69]
2021-03-11 21:16:14,502 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:14,503 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12972847]
2021-03-11 21:16:14,582 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:14,583 [main:117] - GENERATED CALL = (s).substring(1170818921).substring(1000804832)
2021-03-11 21:16:14,583 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@5bce1e69], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f07bbf3]]
2021-03-11 21:16:14,583 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@5bce1e69]
2021-03-11 21:16:14,661 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:14,661 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f07bbf3]
2021-03-11 21:16:14,661 [main:117] - GENERATED CALL = (s).substring(-588046017).trimIndent()
2021-03-11 21:16:14,661 [main:61] - replacement of s.toString() of type String is (s).substring(-588046017).trimIndent()
2021-03-11 21:16:14,766 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:16:14,766 [main:66] - Compilation checking started
2021-03-11 21:16:15,163 [main:53] - Result = true
Text:
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) (s).appendLine()

    return (s).substring(-588046017).trimIndent()
}


2021-03-11 21:16:15,164 [main:53] - replacing (index, Int)
2021-03-11 21:16:15,164 [main:50] - replacing index Int
2021-03-11 21:16:15,164 [main:54] - Getting value of type Int
2021-03-11 21:16:15,251 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:15,252 [main:58] - GENERATED VALUE OF TYPE Int = 2040733163
2021-03-11 21:16:15,252 [main:61] - GENERATED IS CALL =false
2021-03-11 21:16:15,341 [main:67] - randomType = UByte
2021-03-11 21:16:15,429 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 21:16:15,478 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@425fb454]
2021-03-11 21:16:15,479 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@78246a11]
2021-03-11 21:16:15,479 [main:78] - Generated call from random type = (117.toUByte()).toFloat().roundToInt()
2021-03-11 21:16:15,480 [main:106] - GETTING Int from String
2021-03-11 21:16:15,512 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3809f4ec]]
2021-03-11 21:16:15,512 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:16:15,513 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3809f4ec]
2021-03-11 21:16:15,608 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:15,609 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("amfxx"))).compareTo(test<Sequence<*>>(sequenceOf<Any?>("amfxx"))).and(-318233161)
2021-03-11 21:16:15,609 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73cae081]]
2021-03-11 21:16:15,609 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:16:15,610 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73cae081]
2021-03-11 21:16:15,610 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("amfxx"))).compareTo(test<Sequence<*>>(sequenceOf<Any?>("amfxx"))).unaryPlus()
2021-03-11 21:16:15,611 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26ff428]]
2021-03-11 21:16:15,611 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26ff428]
2021-03-11 21:16:15,612 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("amfxx"))).length.toInt()
2021-03-11 21:16:15,612 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@56211d6b]]
2021-03-11 21:16:15,612 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:16:15,613 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@56211d6b]
2021-03-11 21:16:15,613 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("amfxx"))).compareTo(test<Sequence<*>>(sequenceOf<Any?>("amfxx"))).countLeadingZeroBits()
2021-03-11 21:16:15,614 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29739d16]]
2021-03-11 21:16:15,614 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29739d16]
2021-03-11 21:16:15,614 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("amfxx"))).count()
2021-03-11 21:16:15,615 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5c706708]]
2021-03-11 21:16:15,615 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:16:15,615 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5c706708]
2021-03-11 21:16:15,704 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:16:15,705 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("amfxx"))).compareTo(test<Sequence<*>>(sequenceOf<Any?>("amfxx"))).times(30)
2021-03-11 21:16:15,705 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dea145]]
2021-03-11 21:16:15,705 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:16:15,800 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:15,889 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:15,890 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dea145]
2021-03-11 21:16:15,975 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 21:16:16,058 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 21:16:16,059 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 21:16:16,162 [main:302] - generating value of type = Char true depth = 3
2021-03-11 21:16:16,163 [main:95] - GENERATED = charArrayOf('畖')
2021-03-11 21:16:16,258 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:16,337 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:16:16,338 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("amfxx"))).subSequence(-2033403775, 768808910).indexOfAny(charArrayOf('畖'), -553893543, false)
2021-03-11 21:16:16,338 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@443253eb]]
2021-03-11 21:16:16,339 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@443253eb]
2021-03-11 21:16:16,419 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:16,420 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("amfxx"))).length.rotateRight(635878073)
2021-03-11 21:16:16,420 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@e05c51c]]
2021-03-11 21:16:16,420 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:16:16,498 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:16,498 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@e05c51c]
2021-03-11 21:16:16,499 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("amfxx"))).get(1178193088).toInt()
2021-03-11 21:16:16,499 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@30e6a3f5]]
2021-03-11 21:16:16,499 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:16:16,499 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@30e6a3f5]
2021-03-11 21:16:16,500 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("amfxx"))).compareTo(test<Sequence<*>>(sequenceOf<Any?>("amfxx"))).takeLowestOneBit()
2021-03-11 21:16:16,500 [main:61] - replacement of index of type Int is (test<Sequence<*>>(sequenceOf<Any?>("amfxx"))).subSequence(-2033403775, 768808910).indexOfAny(charArrayOf('畖'), -553893543, false)
2021-03-11 21:16:16,577 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:16:16,671 [main:119] - TRYING TO REPLACE CONSTANT 588046017
2021-03-11 21:16:16,762 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 21:16:16,762 [main:66] - Compilation checking started
2021-03-11 21:16:17,107 [main:53] - Result = true
Text:
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) (s).appendLine()

    return (s).substring(588046017).trimIndent()
}


2021-03-11 21:16:17,134 [main:66] - Compilation checking started
2021-03-11 21:16:17,136 [main:71] - Wrong syntax or breaks conditions
2021-03-11 21:16:17,146 [main:41] - AFTER TRY 0 res = fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}
2021-03-11 21:16:17,475 [main:43] - GENERATING CALL OF fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}
2021-03-11 21:16:17,478 [main:61] - WITHOUT TYPE PARAMS = fun <T : Sequence<*>> test(sequence: Sequence<*>): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}
2021-03-11 21:16:17,566 [main:302] - generating value of type = Sequence<*> false depth = 1
2021-03-11 21:16:17,651 [main:43] - GENERATING CALL OF fun <T> emptySequence(): Sequence<*> = TODO()
2021-03-11 21:16:17,653 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptySequence(): Sequence<*> = TODO()
2021-03-11 21:16:17,736 [main:95] - GENERATED = emptySequence<Any?>()
2021-03-11 21:16:17,737 [main:95] - GENERATED = test<Sequence<*>>(emptySequence<Any?>())
2021-03-11 21:16:17,823 [main:43] - Try №0
2021-03-11 21:16:30,685 [main:48] - Already checked
2021-03-11 21:16:34,355 [main:69] - Trying to insert override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
2021-03-11 21:16:34,550 [main:66] - Compilation checking started
2021-03-11 21:16:35,665 [main:103] - Trying to change 142 nodes
2021-03-11 21:16:35,665 [main:107] - replacing (Kla6(), Kla6)
2021-03-11 21:16:35,665 [main:50] - replacing Kla6() Kla6
2021-03-11 21:16:35,665 [main:54] - Getting value of type Kla6
2021-03-11 21:16:35,855 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 21:16:35,857 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 21:16:35,857 [main:58] - GENERATED VALUE OF TYPE Kla6 = Kla6()
2021-03-11 21:16:35,858 [main:61] - GENERATED IS CALL =true
2021-03-11 21:16:36,550 [main:67] - randomType = Pair<HashSet<Kla0>, Sequence<Kla6>>?
2021-03-11 21:16:36,701 [main:302] - generating value of type = Pair<HashSet<Kla0>, Sequence<Kla6>> false depth = 0
2021-03-11 21:16:36,868 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: HashSet<Kla0>, second: Sequence<Kla6>): Pair<HashSet<Kla0>, Sequence<Kla6>> = TODO()
2021-03-11 21:16:36,872 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: HashSet<Kla0>, second: Sequence<Kla6>): Pair<HashSet<Kla0>, Sequence<Kla6>> = TODO()
2021-03-11 21:16:37,041 [main:302] - generating value of type = HashSet<Kla0> false depth = 3
2021-03-11 21:16:37,209 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<Kla0> = TODO()
2021-03-11 21:16:37,213 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<Kla0> = TODO()
2021-03-11 21:16:37,363 [main:95] - GENERATED = linkedSetOf<Kla0>()
2021-03-11 21:16:37,364 [main:302] - generating value of type = Sequence<Kla6> false depth = 3
2021-03-11 21:16:37,496 [main:43] - GENERATING CALL OF fun <T> emptySequence(): Sequence<Kla6> = TODO()
2021-03-11 21:16:37,499 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptySequence(): Sequence<Kla6> = TODO()
2021-03-11 21:16:37,642 [main:95] - GENERATED = emptySequence<Kla6>()
2021-03-11 21:16:37,642 [main:95] - GENERATED = Pair<HashSet<Kla0>, Sequence<Kla6>>(linkedSetOf<Kla0>(), emptySequence<Kla6>())
2021-03-11 21:16:37,738 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.sequences.Sequence<T>.minOrNull(): T? defined in kotlin.sequences[DeserializedSimpleFunctionDescriptor@46f5a352]
2021-03-11 21:16:37,739 [main:78] - Generated call from random type = (Pair<HashSet<Kla0>, Sequence<Kla6>>(linkedSetOf<Kla0>(), emptySequence<Kla6>()))?.second.minOrNull()!!
2021-03-11 21:16:37,739 [main:114] - replacement of Kla6() of type Kla6 is (Pair<HashSet<Kla0>, Sequence<Kla6>>(linkedSetOf<Kla0>(), emptySequence<Kla6>()))?.second.minOrNull()!!
2021-03-11 21:16:37,886 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-11 21:16:37,887 [main:66] - Compilation checking started
2021-03-11 21:16:38,417 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass("suspendLambdaAssertionsDisabled.Checker")
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = fu0()
    prope3.fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("Continuation " + prope3 + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = (Pair<HashSet<Kla0>, Sequence<Kla6>>(linkedSetOf<Kla0>(), emptySequence<Kla6>()))?.second.minOrNull()!!

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:16:38,419 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6, String)
2021-03-11 21:16:38,419 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6 String
2021-03-11 21:16:38,419 [main:54] - Getting value of type String
2021-03-11 21:16:38,569 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:16:38,571 [main:58] - GENERATED VALUE OF TYPE String = "baick"
2021-03-11 21:16:38,572 [main:61] - GENERATED IS CALL =false
2021-03-11 21:16:38,732 [main:67] - randomType = Byte
2021-03-11 21:16:38,879 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:16:38,941 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@181c7470]
2021-03-11 21:16:39,076 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:16:39,078 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d5062]
2021-03-11 21:16:39,228 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:39,230 [main:78] - Generated call from random type = (38).compareTo(-82).toString(515641468)
2021-03-11 21:16:39,230 [main:106] - GETTING String from String
2021-03-11 21:16:39,264 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a3cd8f4]]
2021-03-11 21:16:39,264 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a3cd8f4]
2021-03-11 21:16:39,421 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:16:39,423 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:16:39,425 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).filterNot({a: Char -> true})
2021-03-11 21:16:39,426 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@515550f]]
2021-03-11 21:16:39,426 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@515550f]
2021-03-11 21:16:39,579 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:16:39,581 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:16:39,583 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false})
2021-03-11 21:16:39,584 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e478a4f]]
2021-03-11 21:16:39,584 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e478a4f]
2021-03-11 21:16:39,584 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).toUpperCase()
2021-03-11 21:16:39,585 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b5e9f3c]]
2021-03-11 21:16:39,585 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b5e9f3c]
2021-03-11 21:16:39,585 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:16:39,585 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f6c1c44]]
2021-03-11 21:16:39,585 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f6c1c44]
2021-03-11 21:16:39,733 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:39,863 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:40,004 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:16:40,194 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 21:16:40,196 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 21:16:40,517 [main:302] - generating value of type = Int true depth = 3
2021-03-11 21:16:40,520 [main:95] - GENERATED = StringBuilder(864790268)
2021-03-11 21:16:40,521 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).replaceRange(747067798, 993607697, StringBuilder(864790268))
2021-03-11 21:16:40,521 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f4ad11]]
2021-03-11 21:16:40,521 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f4ad11]
2021-03-11 21:16:40,672 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 21:16:40,675 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:16:40,678 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).filterIndexed({a: Int, b: Char -> true})
2021-03-11 21:16:40,678 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bebba8]]
2021-03-11 21:16:40,678 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bebba8]
2021-03-11 21:16:40,865 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:16:40,868 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:16:40,871 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).dropWhile({a: Char -> true})
2021-03-11 21:16:40,871 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa166b9]]
2021-03-11 21:16:40,871 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa166b9]
2021-03-11 21:16:41,011 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:16:41,153 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 21:16:41,156 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 21:16:41,442 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 21:16:41,604 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 21:16:41,617 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 21:16:41,938 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-11 21:16:41,943 [main:95] - GENERATED = StringBuilder("yvygk")
2021-03-11 21:16:41,943 [main:95] - GENERATED = StringBuilder(StringBuilder("yvygk"))
2021-03-11 21:16:41,944 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk")))
2021-03-11 21:16:41,944 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8a1e45]]
2021-03-11 21:16:41,944 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8a1e45]
2021-03-11 21:16:42,075 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:42,077 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).drop(1668002902)
2021-03-11 21:16:42,077 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43f7e1a1]]
2021-03-11 21:16:42,077 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43f7e1a1]
2021-03-11 21:16:42,216 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:16:42,218 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:16:42,220 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).filter({a: Char -> true})
2021-03-11 21:16:42,220 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6 of type String is (test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk")))
2021-03-11 21:16:42,365 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:16:42,366 [main:66] - Compilation checking started
2021-03-11 21:16:42,998 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass("suspendLambdaAssertionsDisabled.Checker")
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = fu0()
    prope3.fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("Continuation " + prope3 + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:16:43,001 [main:107] - replacing (let(x), Unit?)
2021-03-11 21:16:43,001 [main:50] - replacing let(x) Unit?
2021-03-11 21:16:43,001 [main:54] - Getting value of type Unit?
2021-03-11 21:16:43,137 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 21:16:43,280 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 21:16:43,283 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 21:16:43,574 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 21:16:43,576 [main:95] - GENERATED = check(true)
2021-03-11 21:16:43,576 [main:58] - GENERATED VALUE OF TYPE Unit? = check(true)
2021-03-11 21:16:43,576 [main:61] - GENERATED IS CALL =true
2021-03-11 21:16:43,747 [main:67] - randomType = Kla7
2021-03-11 21:16:43,901 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-11 21:16:43,902 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 21:16:43,935 [main:149] - GENERATING call of type public open fun resumeWith(prope4: kotlin.Result<kotlin.Unit>): kotlin.Unit defined in Kla7[SimpleFunctionDescriptorImpl@452f82c0]
2021-03-11 21:16:44,066 [main:302] - generating value of type = Result<Unit> false depth = 0
2021-03-11 21:16:44,199 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Unit): Result<Unit> = TODO()
2021-03-11 21:16:44,201 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Unit): Result<Unit> = TODO()
2021-03-11 21:16:44,481 [main:302] - generating value of type = Function0<Unit> false depth = 3
2021-03-11 21:16:44,483 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 21:16:44,488 [main:95] - GENERATED = runCatching<Unit>({ println()})
2021-03-11 21:16:44,489 [main:78] - Generated call from random type = (Kla7).resumeWith(runCatching<Unit>({ println()}))
2021-03-11 21:16:44,494 [main:106] - GETTING Unit? from String
2021-03-11 21:16:44,525 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bc446be]]
2021-03-11 21:16:44,525 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bc446be]
2021-03-11 21:16:44,674 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 21:16:44,676 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:16:44,838 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 21:16:44,842 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 21:16:45,150 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 21:16:45,152 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 21:16:45,279 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:16:45,282 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:16:45,707 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 21:16:45,709 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 21:16:45,711 [main:302] - generating value of type = Any false depth = 9
2021-03-11 21:16:45,711 [main:95] - GENERATED = require(false, { "wmlwq"})
2021-03-11 21:16:45,712 [main:95] - GENERATED = contract({ require(false, { "wmlwq"})})
2021-03-11 21:16:45,712 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>()))?.forEach({a: Char -> contract({ require(false, { "wmlwq"})})})
2021-03-11 21:16:45,713 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bc446be]]
2021-03-11 21:16:45,713 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:16:45,853 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:45,998 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:46,000 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bc446be]
2021-03-11 21:16:46,135 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 21:16:46,138 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:16:46,265 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:16:46,268 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:16:46,741 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 21:16:46,743 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 21:16:46,744 [main:302] - generating value of type = Any false depth = 5
2021-03-11 21:16:46,745 [main:95] - GENERATED = check(false, { "hskiz"})
2021-03-11 21:16:46,745 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-1176161333, 1220105971).forEach({a: Char -> check(false, { "hskiz"})})
2021-03-11 21:16:46,745 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144d6b6]]
2021-03-11 21:16:46,745 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:16:46,867 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:46,998 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:47,000 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144d6b6]
2021-03-11 21:16:47,120 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 21:16:47,121 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:16:47,251 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 21:16:47,254 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 21:16:47,573 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 21:16:47,575 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 21:16:47,723 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 21:16:47,726 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 21:16:48,145 [main:302] - generating value of type = Int true depth = 8
2021-03-11 21:16:48,147 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-11 21:16:48,149 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 21:16:48,307 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:16:48,310 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:16:48,594 [main:95] - GENERATED = println(null)
2021-03-11 21:16:48,594 [main:95] - GENERATED = repeat(1863634972, {a: Int -> println(null)})
2021-03-11 21:16:48,596 [main:95] - GENERATED = contract({ repeat(1863634972, {a: Int -> println(null)})})
2021-03-11 21:16:48,596 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-1606945851, -1005040532).forEachIndexed({a: Int, b: Char -> contract({ repeat(1863634972, {a: Int -> println(null)})})})
2021-03-11 21:16:48,596 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144d6b6]]
2021-03-11 21:16:48,597 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144d6b6]
2021-03-11 21:16:48,714 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 21:16:48,716 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:16:48,841 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 21:16:48,843 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 21:16:49,157 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 21:16:49,159 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 21:16:49,282 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:16:49,285 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:16:49,549 [main:302] - generating value of type = Any false depth = 8
2021-03-11 21:16:49,549 [main:95] - GENERATED = print("mpald")
2021-03-11 21:16:49,549 [main:95] - GENERATED = contract({ print("mpald")})
2021-03-11 21:16:49,550 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>()))?.forEachIndexed({a: Int, b: Char -> contract({ print("mpald")})})
2021-03-11 21:16:49,550 [main:114] - replacement of let(x) of type Unit? is (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-1176161333, 1220105971).forEach({a: Char -> check(false, { "hskiz"})})
2021-03-11 21:16:49,671 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:16:49,672 [main:66] - Compilation checking started
2021-03-11 21:16:50,072 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass("suspendLambdaAssertionsDisabled.Checker")
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = fu0()
    prope3.fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.(test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-1176161333, 1220105971).forEach({a: Char -> check(false, { "hskiz"})})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("Continuation " + prope3 + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:16:50,075 [main:107] - replacing ({
        fu7(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-11 21:16:50,075 [main:50] - replacing {
        fu7(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-11 21:16:50,075 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-11 21:16:50,200 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-11 21:16:50,201 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:16:50,331 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:16:50,334 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:16:50,741 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 21:16:50,743 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 21:16:50,746 [main:302] - generating value of type = Any false depth = 5
2021-03-11 21:16:50,746 [main:95] - GENERATED = check(false, { "ljoze"})
2021-03-11 21:16:50,746 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> check(false, { "ljoze"})}
2021-03-11 21:16:50,746 [main:61] - GENERATED IS CALL =false
2021-03-11 21:16:50,896 [main:67] - randomType = Char
2021-03-11 21:16:51,015 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:16:51,051 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 21:16:51,082 [main:114] - replacement of {
        fu7(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> check(false, { "ljoze"})}
2021-03-11 21:16:51,201 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 21:16:51,201 [main:66] - Compilation checking started
2021-03-11 21:16:51,804 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass("suspendLambdaAssertionsDisabled.Checker")
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = fu0()
    prope3.fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("Continuation " + prope3 + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:16:51,806 [main:107] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-11 21:16:51,807 [main:50] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-11 21:16:51,807 [main:54] - Getting value of type String
2021-03-11 21:16:51,922 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:16:51,924 [main:58] - GENERATED VALUE OF TYPE String = "swate"
2021-03-11 21:16:51,924 [main:61] - GENERATED IS CALL =false
2021-03-11 21:16:52,196 [main:67] - randomType = Pair<String, UInt>
2021-03-11 21:16:52,309 [main:302] - generating value of type = Pair<String, UInt> false depth = 0
2021-03-11 21:16:52,440 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: String, second: UInt): Pair<String, UInt> = TODO()
2021-03-11 21:16:52,443 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: String, second: UInt): Pair<String, UInt> = TODO()
2021-03-11 21:16:52,568 [main:302] - generating value of type = String true depth = 3
2021-03-11 21:16:52,570 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 21:16:52,572 [main:95] - GENERATED = Pair<String, UInt>("vbbxq", 890619231.toUInt())
2021-03-11 21:16:52,590 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7521e6f1]
2021-03-11 21:16:52,591 [main:78] - Generated call from random type = (Pair<String, UInt>("vbbxq", 890619231.toUInt())).first.decapitalize()
2021-03-11 21:16:52,591 [main:106] - GETTING String from String
2021-03-11 21:16:52,621 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d6d9c96]]
2021-03-11 21:16:52,622 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:16:52,744 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:52,867 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:52,869 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d6d9c96]
2021-03-11 21:16:53,021 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:53,163 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:53,165 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(1120803493, 2120829805).substring(1743542986, 673094828)
2021-03-11 21:16:53,165 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6d8665cd]]
2021-03-11 21:16:53,165 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6d8665cd]
2021-03-11 21:16:53,287 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:16:53,287 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).plus("rwksi")
2021-03-11 21:16:53,287 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a25c860]]
2021-03-11 21:16:53,287 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a25c860]
2021-03-11 21:16:53,405 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:16:53,528 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:16:53,531 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:16:53,532 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@219286a2]]
2021-03-11 21:16:53,532 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@219286a2]
2021-03-11 21:16:53,532 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).trimMargin(test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:16:53,532 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b26d3a0]]
2021-03-11 21:16:53,532 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b26d3a0]
2021-03-11 21:16:53,664 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:16:53,825 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:16:53,835 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).replaceAfterLast('', test<Sequence<*>>(emptySequence<Any?>()), "ozekz")
2021-03-11 21:16:53,835 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e33c23a]]
2021-03-11 21:16:53,835 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e33c23a]
2021-03-11 21:16:53,836 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).prependIndent(test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:16:53,836 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f9c2844]]
2021-03-11 21:16:53,836 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:16:53,977 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:54,113 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:54,115 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f9c2844]
2021-03-11 21:16:54,230 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 21:16:54,347 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 21:16:54,350 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 21:16:54,841 [main:302] - generating value of type = String true depth = 3
2021-03-11 21:16:54,843 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-11 21:16:54,966 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int): Set<RegexOption> = TODO()
2021-03-11 21:16:54,969 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int): Set<RegexOption> = TODO()
2021-03-11 21:16:55,219 [main:302] - generating value of type = Int true depth = 6
2021-03-11 21:16:55,221 [main:95] - GENERATED = LinkedHashSet<RegexOption>(-1423298646)
2021-03-11 21:16:55,221 [main:95] - GENERATED = Regex("bixeg", LinkedHashSet<RegexOption>(-1423298646))
2021-03-11 21:16:55,222 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(-873661425, 122413985).replaceFirst(Regex("bixeg", LinkedHashSet<RegexOption>(-1423298646)), test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:16:55,222 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e478a4f]]
2021-03-11 21:16:55,222 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e478a4f]
2021-03-11 21:16:55,222 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).toUpperCase()
2021-03-11 21:16:55,222 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5460c665]]
2021-03-11 21:16:55,222 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:16:55,337 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:55,339 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5460c665]
2021-03-11 21:16:55,339 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(-1868260665).lowercase()
2021-03-11 21:16:55,339 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9acb24e]]
2021-03-11 21:16:55,339 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9acb24e]
2021-03-11 21:16:55,473 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:55,475 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).takeLast(1767915527)
2021-03-11 21:16:55,475 [main:114] - replacement of "Wrong state-machine generated: it is finished early" of type String is (test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:16:55,625 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:16:55,625 [main:66] - Compilation checking started
2021-03-11 21:16:56,240 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass("suspendLambdaAssertionsDisabled.Checker")
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = fu0()
    prope3.fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("Continuation " + prope3 + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:16:56,242 [main:107] - replacing (this.prope4, Any?)
2021-03-11 21:16:56,242 [main:50] - replacing this.prope4 Any?
2021-03-11 21:16:56,242 [main:54] - Getting value of type Any?
2021-03-11 21:16:56,366 [main:58] - GENERATED VALUE OF TYPE Any? = null
2021-03-11 21:16:56,367 [main:61] - GENERATED IS CALL =false
2021-03-11 21:16:56,657 [main:67] - randomType = Collection<UInt>
2021-03-11 21:16:56,658 [main:106] - GETTING Any? from String
2021-03-11 21:16:56,687 [main:114] - replacement of this.prope4 of type Any? is null
2021-03-11 21:16:56,816 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(NULL)
2021-03-11 21:16:56,817 [main:66] - Compilation checking started
2021-03-11 21:16:57,205 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass("suspendLambdaAssertionsDisabled.Checker")
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = fu0()
    prope3.fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        null = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("Continuation " + prope3 + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:16:57,207 [main:107] - replacing (method, String)
2021-03-11 21:16:57,208 [main:50] - replacing method String
2021-03-11 21:16:57,208 [main:54] - Getting value of type String
2021-03-11 21:16:57,326 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:16:57,328 [main:58] - GENERATED VALUE OF TYPE String = "jpyqj"
2021-03-11 21:16:57,328 [main:61] - GENERATED IS CALL =false
2021-03-11 21:16:57,336 [main:67] - randomType = Kla6
2021-03-11 21:16:57,459 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 21:16:57,462 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 21:16:57,474 [main:106] - GETTING String from String
2021-03-11 21:16:57,508 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cb0314f]]
2021-03-11 21:16:57,508 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cb0314f]
2021-03-11 21:16:57,508 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).uppercase()
2021-03-11 21:16:57,509 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f4c801f]]
2021-03-11 21:16:57,509 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f4c801f]
2021-03-11 21:16:57,635 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:16:57,637 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:16:57,639 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).takeWhile({a: Char -> false})
2021-03-11 21:16:57,639 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46ca7916]]
2021-03-11 21:16:57,639 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46ca7916]
2021-03-11 21:16:57,766 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:16:57,769 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).substringBefore('у', test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:16:57,769 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8a1e45]]
2021-03-11 21:16:57,769 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8a1e45]
2021-03-11 21:16:57,889 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:57,892 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).drop(-694973757)
2021-03-11 21:16:57,892 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51275fbe]]
2021-03-11 21:16:57,892 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51275fbe]
2021-03-11 21:16:57,892 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).toLowerCase()
2021-03-11 21:16:57,892 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45e22a0b]]
2021-03-11 21:16:57,892 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45e22a0b]
2021-03-11 21:16:58,010 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:58,012 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).take(1105381643)
2021-03-11 21:16:58,012 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60c9909]]
2021-03-11 21:16:58,012 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60c9909]
2021-03-11 21:16:58,129 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:16:58,252 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:16:58,384 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:16:58,386 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).replaceFirst('ᮆ', 'é', true)
2021-03-11 21:16:58,386 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f07bbf3]]
2021-03-11 21:16:58,386 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f07bbf3]
2021-03-11 21:16:58,387 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).trimIndent()
2021-03-11 21:16:58,387 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d5062]]
2021-03-11 21:16:58,387 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d5062]
2021-03-11 21:16:58,504 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:16:58,507 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1208886781)
2021-03-11 21:16:58,507 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@515550f]]
2021-03-11 21:16:58,507 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@515550f]
2021-03-11 21:16:58,649 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:16:58,651 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:16:58,653 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false})
2021-03-11 21:16:58,654 [main:114] - replacement of method of type String is (test<Sequence<*>>(emptySequence<Any?>())).replaceFirst('ᮆ', 'é', true)
2021-03-11 21:16:58,793 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:16:58,793 [main:66] - Compilation checking started
2021-03-11 21:16:59,382 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass("suspendLambdaAssertionsDisabled.Checker")
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = fu0()
    prope3.fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("Continuation " + prope3 + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).replaceFirst('ᮆ', 'é', true)) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:16:59,384 [main:107] - replacing (prope4.exceptionOrNull()!!, Throwable)
2021-03-11 21:16:59,385 [main:50] - replacing prope4.exceptionOrNull()!! Throwable
2021-03-11 21:16:59,385 [main:54] - Getting value of type Throwable
2021-03-11 21:16:59,510 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 21:16:59,518 [main:58] - GENERATED VALUE OF TYPE Throwable = UninitializedPropertyAccessException()
2021-03-11 21:16:59,518 [main:61] - GENERATED IS CALL =true
2021-03-11 21:16:59,528 [main:67] - randomType = Kla2
2021-03-11 21:16:59,647 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 21:16:59,650 [main:112] - generating klass Kla2 text = open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}
2021-03-11 21:16:59,765 [main:194] - Type params = []
2021-03-11 21:16:59,894 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 21:17:00,023 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:17:00,027 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:17:00,302 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 21:17:00,430 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:17:00,433 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:17:00,911 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-11 21:17:01,034 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 21:17:01,038 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 21:17:01,436 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 21:17:01,436 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:17:01,436 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:17:01,451 [main:106] - GETTING Throwable from String
2021-03-11 21:17:01,469 [main:114] - replacement of prope4.exceptionOrNull()!! of type Throwable is UninitializedPropertyAccessException()
2021-03-11 21:17:01,637 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 21:17:01,637 [main:66] - Compilation checking started
2021-03-11 21:17:02,248 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass("suspendLambdaAssertionsDisabled.Checker")
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = fu0()
    prope3.fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("Continuation " + prope3 + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).replaceFirst('ᮆ', 'é', true)) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:17:02,251 [main:107] - replacing ("Continuation " + prope3, String)
2021-03-11 21:17:02,251 [main:50] - replacing "Continuation " + prope3 String
2021-03-11 21:17:02,251 [main:54] - Getting value of type String
2021-03-11 21:17:02,377 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:17:02,379 [main:58] - GENERATED VALUE OF TYPE String = "vmgxp"
2021-03-11 21:17:02,379 [main:61] - GENERATED IS CALL =false
2021-03-11 21:17:02,513 [main:67] - randomType = ULong
2021-03-11 21:17:02,629 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 21:17:02,671 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@72d12079]
2021-03-11 21:17:02,672 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@acb0741]
2021-03-11 21:17:02,794 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:02,797 [main:78] - Generated call from random type = (90407604477308863.toULong()).toShort().toString(-209192193)
2021-03-11 21:17:02,797 [main:106] - GETTING String from String
2021-03-11 21:17:02,818 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3897a3]]
2021-03-11 21:17:02,818 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3897a3]
2021-03-11 21:17:02,938 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:02,941 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).repeat(1318800429)
2021-03-11 21:17:02,941 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4618e0d6]]
2021-03-11 21:17:02,941 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4618e0d6]
2021-03-11 21:17:03,053 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:03,168 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:17:03,171 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).padEnd(-2133990106, '')
2021-03-11 21:17:03,171 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@360ff104]]
2021-03-11 21:17:03,171 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@360ff104]
2021-03-11 21:17:03,292 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:17:03,295 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).substringAfterLast('?', test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:17:03,295 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d5062]]
2021-03-11 21:17:03,295 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d5062]
2021-03-11 21:17:03,417 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:03,420 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692)
2021-03-11 21:17:03,420 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@244fa9af]]
2021-03-11 21:17:03,420 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@244fa9af]
2021-03-11 21:17:03,545 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:17:03,736 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:17:03,741 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).substringAfter('ﵧ', "jlhxv")
2021-03-11 21:17:03,741 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bebba8]]
2021-03-11 21:17:03,741 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bebba8]
2021-03-11 21:17:03,880 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:17:03,882 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:17:03,885 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).dropWhile({a: Char -> true})
2021-03-11 21:17:03,885 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f6c1c44]]
2021-03-11 21:17:03,885 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f6c1c44]
2021-03-11 21:17:04,005 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:04,122 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:04,249 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:17:04,372 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 21:17:04,377 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 21:17:04,713 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 21:17:04,719 [main:95] - GENERATED = StringBuilder("rmxeb")
2021-03-11 21:17:04,720 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).replaceRange(-1130808297, -1037969688, StringBuilder("rmxeb"))
2021-03-11 21:17:04,720 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d6d9c96]]
2021-03-11 21:17:04,720 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:17:04,843 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:04,970 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:04,974 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d6d9c96]
2021-03-11 21:17:05,101 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:05,219 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:05,222 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(949863525, -1223349340).substring(-966394613, 2112968091)
2021-03-11 21:17:05,222 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f9c2844]]
2021-03-11 21:17:05,222 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:17:05,380 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:05,507 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:05,510 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f9c2844]
2021-03-11 21:17:05,626 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 21:17:05,746 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 21:17:05,750 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 21:17:06,008 [main:302] - generating value of type = String true depth = 3
2021-03-11 21:17:06,010 [main:95] - GENERATED = Regex("mkjaq")
2021-03-11 21:17:06,143 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:17:06,146 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(201275223, -1733842745).replaceFirst(Regex("mkjaq"), "qybjc")
2021-03-11 21:17:06,146 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@364216f]]
2021-03-11 21:17:06,146 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:17:06,276 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:06,280 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@364216f]
2021-03-11 21:17:06,280 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(1700025075).titlecase()
2021-03-11 21:17:06,280 [main:114] - replacement of "Continuation " + prope3 of type String is (test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692)
2021-03-11 21:17:06,408 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:17:06,409 [main:66] - Compilation checking started
2021-03-11 21:17:07,053 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass("suspendLambdaAssertionsDisabled.Checker")
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = fu0()
    prope3.fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).replaceFirst('ᮆ', 'é', true)) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:17:07,056 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 21:17:07,056 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 21:17:07,056 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 21:17:07,201 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 21:17:07,207 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 21:17:07,213 [main:67] - randomType = String
2021-03-11 21:17:07,340 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:17:07,377 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 21:17:07,396 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 21:17:07,396 [main:107] - replacing ("tail-call optimization miss: method at ", String)
2021-03-11 21:17:07,396 [main:50] - replacing "tail-call optimization miss: method at " String
2021-03-11 21:17:07,396 [main:54] - Getting value of type String
2021-03-11 21:17:07,522 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:17:07,524 [main:58] - GENERATED VALUE OF TYPE String = "nsxva"
2021-03-11 21:17:07,524 [main:61] - GENERATED IS CALL =false
2021-03-11 21:17:08,430 [main:67] - randomType = HashMap<UByte, Function2<Double, Float, List<Kla0>>>
2021-03-11 21:17:08,555 [main:302] - generating value of type = HashMap<UByte, Function2<Double, Float, List<Kla0>>> false depth = 0
2021-03-11 21:17:08,678 [main:43] - GENERATING CALL OF fun <K, V> HashMap(): HashMap<UByte, Function2<Double, Float, List<Kla0>>> = TODO()
2021-03-11 21:17:08,681 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(): HashMap<UByte, Function2<Double, Float, List<Kla0>>> = TODO()
2021-03-11 21:17:08,805 [main:95] - GENERATED = HashMap<UByte, Function2<Double, Float, List<Kla0>>>()
2021-03-11 21:17:08,997 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d5062]
2021-03-11 21:17:09,125 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:09,127 [main:78] - Generated call from random type = (HashMap<UByte, Function2<Double, Float, List<Kla0>>>()).size.toString(-358304686)
2021-03-11 21:17:09,127 [main:114] - replacement of "tail-call optimization miss: method at " of type String is (HashMap<UByte, Function2<Double, Float, List<Kla0>>>()).size.toString(-358304686)
2021-03-11 21:17:09,251 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:17:09,251 [main:66] - Compilation checking started
2021-03-11 21:17:09,962 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass("suspendLambdaAssertionsDisabled.Checker")
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = fu0()
    prope3.fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).replaceFirst('ᮆ', 'é', true)) == true }?.let { error((HashMap<UByte, Function2<Double, Float, List<Kla0>>>()).size.toString(-358304686) + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:17:09,965 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 21:17:09,965 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 21:17:09,965 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 21:17:10,123 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 21:17:10,132 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 21:17:10,448 [main:67] - randomType = Byte?
2021-03-11 21:17:10,568 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:17:10,611 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 21:17:10,627 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 21:17:10,627 [main:107] - replacing (prope3, Kla0)
2021-03-11 21:17:10,628 [main:50] - replacing prope3 Kla0
2021-03-11 21:17:10,628 [main:54] - Getting value of type Kla0
2021-03-11 21:17:10,762 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 21:17:10,765 [main:112] - generating klass Kla0 text = class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}
2021-03-11 21:17:10,765 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-11 21:17:10,765 [main:61] - GENERATED IS CALL =true
2021-03-11 21:17:10,909 [main:67] - randomType = UInt
2021-03-11 21:17:11,040 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 21:17:11,090 [main:106] - GETTING Kla0 from String
2021-03-11 21:17:11,123 [main:114] - replacement of prope3 of type Kla0 is Kla0()
2021-03-11 21:17:11,259 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 21:17:11,260 [main:66] - Compilation checking started
2021-03-11 21:17:11,923 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass("suspendLambdaAssertionsDisabled.Checker")
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = fu0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).replaceFirst('ᮆ', 'é', true)) == true }?.let { error((HashMap<UByte, Function2<Double, Float, List<Kla0>>>()).size.toString(-358304686) + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:17:11,927 [main:107] - replacing (prope7, Boolean)
2021-03-11 21:17:11,927 [main:50] - replacing prope7 Boolean
2021-03-11 21:17:11,927 [main:54] - Getting value of type Boolean
2021-03-11 21:17:12,071 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:17:12,075 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 21:17:12,075 [main:61] - GENERATED IS CALL =false
2021-03-11 21:17:12,234 [main:67] - randomType = Byte
2021-03-11 21:17:12,349 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:17:12,385 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4fda9aa4]
2021-03-11 21:17:12,385 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f66b5ad]
2021-03-11 21:17:12,385 [main:78] - Generated call from random type = (-121).toChar().isWhitespace()
2021-03-11 21:17:12,386 [main:106] - GETTING Boolean from String
2021-03-11 21:17:12,404 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13b9d62f]]
2021-03-11 21:17:12,404 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:17:12,526 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:12,529 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13b9d62f]
2021-03-11 21:17:12,529 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(-106983968).isDigit()
2021-03-11 21:17:12,529 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25d64d20]]
2021-03-11 21:17:12,529 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:17:12,645 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:12,771 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:12,774 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25d64d20]
2021-03-11 21:17:12,892 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 21:17:13,013 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 21:17:13,017 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 21:17:13,459 [main:302] - generating value of type = String true depth = 3
2021-03-11 21:17:13,462 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-11 21:17:13,585 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-11 21:17:13,589 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-11 21:17:13,716 [main:302] - generating value of type = RegexOption false depth = 6
2021-03-11 21:17:13,720 [main:95] - GENERATED = setOfNotNull<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE)
2021-03-11 21:17:13,720 [main:95] - GENERATED = Regex("fpeiu", setOfNotNull<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE))
2021-03-11 21:17:13,720 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(310567987, -1733339979).matches(Regex("fpeiu", setOfNotNull<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE)))
2021-03-11 21:17:13,721 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbf9505]]
2021-03-11 21:17:13,721 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbf9505]
2021-03-11 21:17:13,838 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:17:13,841 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:17:13,844 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).all({a: Char -> false})
2021-03-11 21:17:13,844 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b4c7a5a]]
2021-03-11 21:17:13,845 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:17:13,962 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:13,965 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b4c7a5a]
2021-03-11 21:17:14,100 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:17:14,237 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:17:14,240 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(-1463120922).equals('', true)
2021-03-11 21:17:14,240 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e4d4678]]
2021-03-11 21:17:14,240 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:17:14,356 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:14,359 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e4d4678]
2021-03-11 21:17:14,359 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(-441868296).isLowSurrogate()
2021-03-11 21:17:14,359 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1cebd5fd]]
2021-03-11 21:17:14,359 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1cebd5fd]
2021-03-11 21:17:14,479 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:17:14,480 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).equals("gbhdy")
2021-03-11 21:17:14,480 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3aab0a10]]
2021-03-11 21:17:14,480 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:17:14,606 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:14,731 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:14,734 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3aab0a10]
2021-03-11 21:17:14,734 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(1208132317, -2046620371).isBlank()
2021-03-11 21:17:14,734 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@672d969c]]
2021-03-11 21:17:14,734 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:17:14,850 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:14,853 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@672d969c]
2021-03-11 21:17:14,853 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(2097547114).isISOControl()
2021-03-11 21:17:14,854 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3053cc04]]
2021-03-11 21:17:14,854 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:17:14,988 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:14,992 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3053cc04]
2021-03-11 21:17:14,992 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(-2101752404).isLowerCase()
2021-03-11 21:17:14,992 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1cebd5fd], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@195f7478]]
2021-03-11 21:17:14,992 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1cebd5fd]
2021-03-11 21:17:15,120 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:17:15,120 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@195f7478]
2021-03-11 21:17:15,239 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:17:15,243 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).equals("ramzf").or(false)
2021-03-11 21:17:15,243 [main:114] - replacement of prope7 of type Boolean is (test<Sequence<*>>(emptySequence<Any?>())).equals("gbhdy")
2021-03-11 21:17:15,365 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:17:15,366 [main:66] - Compilation checking started
2021-03-11 21:17:15,754 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass("suspendLambdaAssertionsDisabled.Checker")
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = fu0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).replaceFirst('ᮆ', 'é', true)) == true }?.let { error((HashMap<UByte, Function2<Double, Float, List<Kla0>>>()).size.toString(-358304686) + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.(test<Sequence<*>>(emptySequence<Any?>())).equals("gbhdy") = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:17:15,756 [main:107] - replacing (prope3, Continuation<Unit>)
2021-03-11 21:17:15,756 [main:50] - replacing prope3 Continuation<Unit>
2021-03-11 21:17:15,756 [main:54] - Getting value of type Continuation<Unit>
2021-03-11 21:17:15,874 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 21:17:15,997 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 21:17:16,001 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 21:17:16,422 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 21:17:16,544 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:17:16,548 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:17:16,823 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 21:17:16,951 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:17:16,955 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:17:17,446 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 21:17:17,572 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:17:17,576 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:17:18,002 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 12
2021-03-11 21:17:18,197 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 21:17:18,202 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 21:17:18,626 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 15
2021-03-11 21:17:18,750 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 21:17:18,754 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 21:17:19,209 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 18
2021-03-11 21:17:19,209 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 21:17:19,210 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 21:17:19,210 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:17:19,210 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:17:19,211 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:17:19,211 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 21:17:19,211 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 21:17:19,529 [main:67] - randomType = MutableMap<Int?, String>
2021-03-11 21:17:19,530 [main:106] - GETTING Continuation<Unit> from String
2021-03-11 21:17:19,556 [main:111] - Cant find and generate replacement for prope3 type Continuation<Unit>
2021-03-11 21:17:19,556 [main:107] - replacing ({ it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).replaceFirst('ᮆ', 'é', true)) == true }, Function0<Boolean>)
2021-03-11 21:17:19,557 [main:50] - replacing { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).replaceFirst('ᮆ', 'é', true)) == true } Function0<Boolean>
2021-03-11 21:17:19,557 [main:54] - Getting value of type Function0<Boolean>
2021-03-11 21:17:19,677 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 21:17:19,680 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:17:19,683 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-11 21:17:19,683 [main:61] - GENERATED IS CALL =false
2021-03-11 21:17:19,967 [main:67] - randomType = Array<HashSet<Kla6>>
2021-03-11 21:17:20,106 [main:302] - generating value of type = Array<HashSet<Kla6>> false depth = 0
2021-03-11 21:17:20,247 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->HashSet<Kla6>): Array<HashSet<Kla6>> = TODO()
2021-03-11 21:17:20,252 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->HashSet<Kla6>): Array<HashSet<Kla6>> = TODO()
2021-03-11 21:17:20,661 [main:302] - generating value of type = Int true depth = 3
2021-03-11 21:17:20,664 [main:302] - generating value of type = Function1<Int, HashSet<Kla6>> false depth = 3
2021-03-11 21:17:20,667 [main:302] - generating value of type = HashSet<Kla6> false depth = 4
2021-03-11 21:17:20,789 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<Kla6> = TODO()
2021-03-11 21:17:20,793 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<Kla6> = TODO()
2021-03-11 21:17:21,237 [main:302] - generating value of type = Int true depth = 7
2021-03-11 21:17:21,240 [main:302] - generating value of type = Float true depth = 7
2021-03-11 21:17:21,244 [main:95] - GENERATED = HashSet<Kla6>(86287070, 0.65534705f)
2021-03-11 21:17:21,244 [main:95] - GENERATED = Array<HashSet<Kla6>>(-1209863242, {a: Int -> HashSet<Kla6>(86287070, 0.65534705f)})
2021-03-11 21:17:21,269 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 21:17:21,292 [main:114] - replacement of { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).replaceFirst('ᮆ', 'é', true)) == true } of type Function0<Boolean> is { false}
2021-03-11 21:17:21,414 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 21:17:21,414 [main:66] - Compilation checking started
2021-03-11 21:17:22,005 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass("suspendLambdaAssertionsDisabled.Checker")
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = fu0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((HashMap<UByte, Function2<Double, Float, List<Kla0>>>()).size.toString(-358304686) + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:17:22,007 [main:107] - replacing ("suspendLambdaAssertionsDisabled.Checker", String)
2021-03-11 21:17:22,007 [main:50] - replacing "suspendLambdaAssertionsDisabled.Checker" String
2021-03-11 21:17:22,007 [main:54] - Getting value of type String
2021-03-11 21:17:22,122 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:17:22,124 [main:58] - GENERATED VALUE OF TYPE String = "mcblu"
2021-03-11 21:17:22,125 [main:61] - GENERATED IS CALL =false
2021-03-11 21:17:22,256 [main:67] - randomType = ULong
2021-03-11 21:17:22,376 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 21:17:22,406 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@7833d7e2]
2021-03-11 21:17:22,407 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@acb0741]
2021-03-11 21:17:22,521 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:22,524 [main:78] - Generated call from random type = (556118293257207526.toULong()).toShort().toString(-366771252)
2021-03-11 21:17:22,524 [main:106] - GETTING String from String
2021-03-11 21:17:22,545 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a8e3284]]
2021-03-11 21:17:22,545 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a8e3284]
2021-03-11 21:17:22,658 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:17:22,777 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:17:22,780 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).substringBeforeLast('', "gdjua")
2021-03-11 21:17:22,781 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b5e9f3c]]
2021-03-11 21:17:22,781 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b5e9f3c]
2021-03-11 21:17:22,781 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:17:22,781 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6968e6c6]]
2021-03-11 21:17:22,781 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6968e6c6]
2021-03-11 21:17:22,896 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 21:17:23,019 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(elements: Int): Iterable<Int> = TODO()
2021-03-11 21:17:23,022 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(elements: Int): Iterable<Int> = TODO()
2021-03-11 21:17:23,142 [main:302] - generating value of type = Int true depth = 3
2021-03-11 21:17:23,145 [main:95] - GENERATED = setOfNotNull<Int>(1643177491)
2021-03-11 21:17:23,145 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).slice(setOfNotNull<Int>(1643177491))
2021-03-11 21:17:23,145 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@360ff104]]
2021-03-11 21:17:23,145 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@360ff104]
2021-03-11 21:17:23,258 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:17:23,261 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).substringAfterLast('廏', test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:17:23,261 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3897a3]]
2021-03-11 21:17:23,261 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3897a3]
2021-03-11 21:17:23,393 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:23,396 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).repeat(303498927)
2021-03-11 21:17:23,397 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7521e6f1]]
2021-03-11 21:17:23,397 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7521e6f1]
2021-03-11 21:17:23,397 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).decapitalize()
2021-03-11 21:17:23,397 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d6d9c96]]
2021-03-11 21:17:23,397 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:17:23,527 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:23,645 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:23,649 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d6d9c96]
2021-03-11 21:17:23,764 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:23,883 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:23,886 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(1727683894, -921437203).substring(-111883967, -20909106)
2021-03-11 21:17:23,886 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49f679ff]]
2021-03-11 21:17:23,887 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49f679ff]
2021-03-11 21:17:24,002 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:17:24,119 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:17:24,261 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:17:24,266 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).replace('腖', '', false)
2021-03-11 21:17:24,423 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5792ac7b]]
2021-03-11 21:17:24,423 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5792ac7b]
2021-03-11 21:17:24,536 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:17:24,539 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:17:24,542 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).dropLastWhile({a: Char -> true})
2021-03-11 21:17:24,542 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60c9909]]
2021-03-11 21:17:24,542 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60c9909]
2021-03-11 21:17:24,655 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:17:24,769 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:17:24,884 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:17:24,887 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).replaceFirst('', 'Ṑ', true)
2021-03-11 21:17:24,887 [main:114] - replacement of "suspendLambdaAssertionsDisabled.Checker" of type String is (test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:17:25,001 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:17:25,001 [main:66] - Compilation checking started
2021-03-11 21:17:25,593 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = fu0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((HashMap<UByte, Function2<Double, Float, List<Kla0>>>()).size.toString(-358304686) + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:17:25,595 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 21:17:25,595 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 21:17:25,595 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 21:17:25,776 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 21:17:25,782 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 21:17:25,930 [main:67] - randomType = Byte
2021-03-11 21:17:26,061 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:17:26,108 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 21:17:26,127 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 21:17:26,127 [main:107] - replacing (let(x), Unit?)
2021-03-11 21:17:26,127 [main:50] - replacing let(x) Unit?
2021-03-11 21:17:26,127 [main:54] - Getting value of type Unit?
2021-03-11 21:17:26,254 [main:58] - GENERATED VALUE OF TYPE Unit? = null
2021-03-11 21:17:26,255 [main:61] - GENERATED IS CALL =false
2021-03-11 21:17:26,395 [main:67] - randomType = UInt
2021-03-11 21:17:26,510 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 21:17:26,543 [main:106] - GETTING Unit? from String
2021-03-11 21:17:26,560 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144d6b6]]
2021-03-11 21:17:26,560 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:17:26,678 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:26,804 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:26,807 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144d6b6]
2021-03-11 21:17:26,924 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 21:17:26,927 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:17:27,086 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 21:17:27,091 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 21:17:27,374 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 21:17:27,377 [main:95] - GENERATED = require(false)
2021-03-11 21:17:27,378 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(629156896, -530334638).forEachIndexed({a: Int, b: Char -> require(false)})
2021-03-11 21:17:27,378 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bc446be]]
2021-03-11 21:17:27,378 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bc446be]
2021-03-11 21:17:27,506 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 21:17:27,509 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:17:27,645 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:17:27,650 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:17:28,069 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 21:17:28,072 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 21:17:28,075 [main:302] - generating value of type = Any false depth = 5
2021-03-11 21:17:28,075 [main:95] - GENERATED = require(false, { "nymjq"})
2021-03-11 21:17:28,076 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>()))?.forEach({a: Char -> require(false, { "nymjq"})})
2021-03-11 21:17:28,076 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bc446be]]
2021-03-11 21:17:28,076 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:17:28,216 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:28,369 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:28,372 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bc446be]
2021-03-11 21:17:28,504 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 21:17:28,509 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:17:28,629 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:17:28,633 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:17:28,894 [main:302] - generating value of type = Any false depth = 4
2021-03-11 21:17:28,894 [main:95] - GENERATED = println("jbeqa")
2021-03-11 21:17:28,894 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-540758946, 1128915736).forEach({a: Char -> println("jbeqa")})
2021-03-11 21:17:28,895 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144d6b6]]
2021-03-11 21:17:28,895 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144d6b6]
2021-03-11 21:17:29,010 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 21:17:29,013 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:17:29,019 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>()))?.forEachIndexed({a: Int, b: Char -> println()})
2021-03-11 21:17:29,019 [main:114] - replacement of let(x) of type Unit? is (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-540758946, 1128915736).forEach({a: Char -> println("jbeqa")})
2021-03-11 21:17:29,132 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:17:29,133 [main:66] - Compilation checking started
2021-03-11 21:17:29,541 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = fu0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.(test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-540758946, 1128915736).forEach({a: Char -> println("jbeqa")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((HashMap<UByte, Function2<Double, Float, List<Kla0>>>()).size.toString(-358304686) + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:17:29,543 [main:107] - replacing (fu0(), Kla0)
2021-03-11 21:17:29,543 [main:50] - replacing fu0() Kla0
2021-03-11 21:17:29,543 [main:54] - Getting value of type Kla0
2021-03-11 21:17:29,663 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 21:17:29,666 [main:112] - generating klass Kla0 text = class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}
2021-03-11 21:17:29,666 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-11 21:17:29,666 [main:61] - GENERATED IS CALL =true
2021-03-11 21:17:29,672 [main:67] - randomType = UByte
2021-03-11 21:17:29,791 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 21:17:29,823 [main:106] - GETTING Kla0 from String
2021-03-11 21:17:29,841 [main:114] - replacement of fu0() of type Kla0 is Kla0()
2021-03-11 21:17:29,955 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 21:17:29,955 [main:66] - Compilation checking started
2021-03-11 21:17:30,532 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((HashMap<UByte, Function2<Double, Float, List<Kla0>>>()).size.toString(-358304686) + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:17:30,534 [main:107] - replacing (prope6 != numberOfSuspensions, Boolean)
2021-03-11 21:17:30,535 [main:50] - replacing prope6 != numberOfSuspensions Boolean
2021-03-11 21:17:30,535 [main:54] - Getting value of type Boolean
2021-03-11 21:17:30,650 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:17:30,653 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 21:17:30,653 [main:61] - GENERATED IS CALL =false
2021-03-11 21:17:30,665 [main:67] - randomType = Kla3
2021-03-11 21:17:30,786 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 21:17:30,789 [main:112] - generating klass Kla3 text = class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-11 21:17:30,805 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@16016e70]
2021-03-11 21:17:30,926 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:17:30,927 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2e220c0c]
2021-03-11 21:17:31,046 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:17:31,049 [main:78] - Generated call from random type = (Kla3()).equals("eouqz").and(true)
2021-03-11 21:17:31,050 [main:106] - GETTING Boolean from String
2021-03-11 21:17:31,074 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbf9505]]
2021-03-11 21:17:31,075 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:17:31,191 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:31,309 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:31,312 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbf9505]
2021-03-11 21:17:31,425 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:17:31,428 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:17:31,431 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(-789839721, -1458487173).all({a: Char -> false})
2021-03-11 21:17:31,431 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@742e80b6]]
2021-03-11 21:17:31,431 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@742e80b6]
2021-03-11 21:17:31,549 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:17:31,549 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult")
2021-03-11 21:17:31,549 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21bfe604]]
2021-03-11 21:17:31,549 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:17:31,664 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:31,793 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:31,797 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21bfe604]
2021-03-11 21:17:31,797 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(1673810022, 785563898).isNotBlank()
2021-03-11 21:17:31,797 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ae52880]]
2021-03-11 21:17:31,797 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ae52880]
2021-03-11 21:17:31,797 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).any()
2021-03-11 21:17:31,797 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f5a3056]]
2021-03-11 21:17:31,797 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:17:31,947 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:32,085 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:32,088 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f5a3056]
2021-03-11 21:17:32,203 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:17:32,323 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:17:32,326 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(-1403030399, -1890903985).endsWith('⸩', false)
2021-03-11 21:17:32,326 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e4d4678]]
2021-03-11 21:17:32,326 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:17:32,442 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:32,446 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e4d4678]
2021-03-11 21:17:32,446 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(347398960).isLowSurrogate()
2021-03-11 21:17:32,446 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b17fc1a]]
2021-03-11 21:17:32,446 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:17:32,561 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:32,564 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b17fc1a]
2021-03-11 21:17:32,564 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(1145190627).isDefined()
2021-03-11 21:17:32,564 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3053cc04]]
2021-03-11 21:17:32,564 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:17:32,678 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:32,681 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3053cc04]
2021-03-11 21:17:32,681 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(-935299856).isLowerCase()
2021-03-11 21:17:32,681 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1cebd5fd], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2e220c0c]]
2021-03-11 21:17:32,681 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1cebd5fd]
2021-03-11 21:17:32,794 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:17:32,794 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2e220c0c]
2021-03-11 21:17:32,929 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:17:32,933 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).equals("afgmi").and(false)
2021-03-11 21:17:32,933 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1cebd5fd], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14f5137e]]
2021-03-11 21:17:32,933 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1cebd5fd]
2021-03-11 21:17:33,061 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:17:33,061 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14f5137e]
2021-03-11 21:17:33,184 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:17:33,184 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).equals("wceuo").equals("gggor")
2021-03-11 21:17:33,185 [main:114] - replacement of prope6 != numberOfSuspensions of type Boolean is (test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult")
2021-03-11 21:17:33,300 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:17:33,301 [main:66] - Compilation checking started
2021-03-11 21:17:33,908 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((HashMap<UByte, Function2<Double, Float, List<Kla0>>>()).size.toString(-358304686) + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:17:33,911 [main:107] - replacing (this.prope4, Any?)
2021-03-11 21:17:33,911 [main:50] - replacing this.prope4 Any?
2021-03-11 21:17:33,911 [main:54] - Getting value of type Any?
2021-03-11 21:17:34,041 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:17:34,042 [main:58] - GENERATED VALUE OF TYPE Any? = "svnuu"
2021-03-11 21:17:34,042 [main:61] - GENERATED IS CALL =false
2021-03-11 21:17:34,054 [main:67] - randomType = Kla6
2021-03-11 21:17:34,167 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 21:17:34,170 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 21:17:34,178 [main:106] - GETTING Any? from String
2021-03-11 21:17:34,197 [main:114] - replacement of this.prope4 of type Any? is "svnuu"
2021-03-11 21:17:34,327 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 21:17:34,327 [main:66] - Compilation checking started
2021-03-11 21:17:34,683 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        "svnuu" = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((HashMap<UByte, Function2<Double, Float, List<Kla0>>>()).size.toString(-358304686) + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:17:34,685 [main:107] - replacing (prope4.exceptionOrNull()?.let(x), Unit?)
2021-03-11 21:17:34,685 [main:50] - replacing prope4.exceptionOrNull()?.let(x) Unit?
2021-03-11 21:17:34,686 [main:54] - Getting value of type Unit?
2021-03-11 21:17:34,809 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 21:17:34,938 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:17:34,942 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:17:35,206 [main:302] - generating value of type = Any false depth = 3
2021-03-11 21:17:35,206 [main:95] - GENERATED = print("cgupi")
2021-03-11 21:17:35,206 [main:58] - GENERATED VALUE OF TYPE Unit? = print("cgupi")
2021-03-11 21:17:35,206 [main:61] - GENERATED IS CALL =true
2021-03-11 21:17:35,342 [main:67] - randomType = Short
2021-03-11 21:17:35,455 [main:302] - generating value of type = Short true depth = 0
2021-03-11 21:17:35,492 [main:106] - GETTING Unit? from String
2021-03-11 21:17:35,509 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144d6b6]]
2021-03-11 21:17:35,510 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:17:35,639 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:35,761 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:35,764 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144d6b6]
2021-03-11 21:17:35,879 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 21:17:35,882 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:17:36,000 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:17:36,004 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:17:36,252 [main:302] - generating value of type = Any false depth = 4
2021-03-11 21:17:36,253 [main:95] - GENERATED = print("dvxfx")
2021-03-11 21:17:36,253 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
2021-03-11 21:17:36,253 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bc446be]]
2021-03-11 21:17:36,253 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bc446be]
2021-03-11 21:17:36,367 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 21:17:36,370 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:17:36,491 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:17:36,495 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:17:36,748 [main:302] - generating value of type = Any false depth = 4
2021-03-11 21:17:36,748 [main:95] - GENERATED = println("chkxp")
2021-03-11 21:17:36,748 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>()))?.forEach({a: Char -> println("chkxp")})
2021-03-11 21:17:36,748 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bc446be]]
2021-03-11 21:17:36,749 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:17:36,878 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:36,996 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:36,999 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bc446be]
2021-03-11 21:17:37,120 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 21:17:37,124 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:17:37,244 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:17:37,247 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:17:37,498 [main:302] - generating value of type = Any false depth = 4
2021-03-11 21:17:37,498 [main:95] - GENERATED = print("rkhwo")
2021-03-11 21:17:37,499 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(1243874411, -1350078857).forEach({a: Char -> print("rkhwo")})
2021-03-11 21:17:37,499 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144d6b6]]
2021-03-11 21:17:37,499 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144d6b6]
2021-03-11 21:17:37,623 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 21:17:37,627 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:17:37,751 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 21:17:37,755 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 21:17:38,054 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 21:17:38,058 [main:95] - GENERATED = require(true)
2021-03-11 21:17:38,058 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>()))?.forEachIndexed({a: Int, b: Char -> require(true)})
2021-03-11 21:17:38,059 [main:114] - replacement of prope4.exceptionOrNull()?.let(x) of type Unit? is (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
2021-03-11 21:17:38,197 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:17:38,198 [main:66] - Compilation checking started
2021-03-11 21:17:38,790 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((HashMap<UByte, Function2<Double, Float, List<Kla0>>>()).size.toString(-358304686) + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:17:38,792 [main:107] - replacing ({}, Function0<Unit>)
2021-03-11 21:17:38,792 [main:50] - replacing {} Function0<Unit>
2021-03-11 21:17:38,792 [main:54] - Getting value of type Function0<Unit>
2021-03-11 21:17:38,918 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 21:17:38,921 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:17:39,054 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:17:39,059 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:17:39,494 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 21:17:39,497 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 21:17:39,500 [main:302] - generating value of type = Any false depth = 5
2021-03-11 21:17:39,501 [main:95] - GENERATED = check(false, { "pwfef"})
2021-03-11 21:17:39,501 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "pwfef"})}
2021-03-11 21:17:39,501 [main:61] - GENERATED IS CALL =false
2021-03-11 21:17:39,652 [main:67] - randomType = Array<Kla0>
2021-03-11 21:17:39,774 [main:302] - generating value of type = Array<Kla0> false depth = 0
2021-03-11 21:17:39,904 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Kla0> = TODO()
2021-03-11 21:17:39,908 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Kla0> = TODO()
2021-03-11 21:17:40,036 [main:95] - GENERATED = emptyArray<Kla0>()
2021-03-11 21:17:40,053 [main:106] - GETTING Function0<Unit> from String
2021-03-11 21:17:40,083 [main:114] - replacement of {} of type Function0<Unit> is { check(false, { "pwfef"})}
2021-03-11 21:17:40,205 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 21:17:40,206 [main:66] - Compilation checking started
2021-03-11 21:17:40,770 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((HashMap<UByte, Function2<Double, Float, List<Kla0>>>()).size.toString(-358304686) + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:17:40,772 [main:107] - replacing ("\n", String)
2021-03-11 21:17:40,773 [main:50] - replacing "\n" String
2021-03-11 21:17:40,773 [main:54] - Getting value of type String
2021-03-11 21:17:40,896 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:17:40,899 [main:58] - GENERATED VALUE OF TYPE String = "tjfnf"
2021-03-11 21:17:40,900 [main:61] - GENERATED IS CALL =false
2021-03-11 21:17:41,063 [main:67] - randomType = Array<String>
2021-03-11 21:17:41,182 [main:302] - generating value of type = Array<String> false depth = 0
2021-03-11 21:17:41,309 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<Strg> = TODO()
2021-03-11 21:17:41,314 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<Strg> = TODO()
2021-03-11 21:17:41,588 [main:302] - generating value of type = Int true depth = 3
2021-03-11 21:17:41,591 [main:95] - GENERATED = arrayOfNulls<String>(-710152092)
2021-03-11 21:17:41,605 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@7c63107f]
2021-03-11 21:17:41,724 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:41,728 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43f7e1a1]
2021-03-11 21:17:41,846 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:17:41,850 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:17:41,853 [main:78] - Generated call from random type = (arrayOfNulls<String>(-710152092)).get(-801943440).filter({a: Char -> false})
2021-03-11 21:17:41,853 [main:106] - GETTING String from String
2021-03-11 21:17:41,870 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f07bbf3]]
2021-03-11 21:17:41,871 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f07bbf3]
2021-03-11 21:17:41,871 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).trimIndent()
2021-03-11 21:17:41,871 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7521e6f1]]
2021-03-11 21:17:41,871 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7521e6f1]
2021-03-11 21:17:41,871 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).decapitalize()
2021-03-11 21:17:41,871 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46ca7916]]
2021-03-11 21:17:41,871 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46ca7916]
2021-03-11 21:17:41,987 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:17:41,990 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).substringBefore('晑', test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:17:41,990 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5460c665]]
2021-03-11 21:17:41,990 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:17:42,105 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:42,108 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5460c665]
2021-03-11 21:17:42,109 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(-2030229434).lowercase()
2021-03-11 21:17:42,109 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33a5afe8]]
2021-03-11 21:17:42,109 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33a5afe8]
2021-03-11 21:17:42,263 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:42,401 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:42,404 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).removeRange(-1153923326, -1826647384)
2021-03-11 21:17:42,405 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b5e9f3c]]
2021-03-11 21:17:42,405 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b5e9f3c]
2021-03-11 21:17:42,526 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:17:42,530 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin("rnwhw", test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:17:42,530 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f4ad11]]
2021-03-11 21:17:42,530 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f4ad11]
2021-03-11 21:17:42,649 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 21:17:42,652 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:17:42,655 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).filterIndexed({a: Int, b: Char -> false})
2021-03-11 21:17:42,655 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5792ac7b]]
2021-03-11 21:17:42,655 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5792ac7b]
2021-03-11 21:17:42,774 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:17:42,777 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:17:42,781 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).dropLastWhile({a: Char -> false})
2021-03-11 21:17:42,781 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e33c23a]]
2021-03-11 21:17:42,781 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e33c23a]
2021-03-11 21:17:42,781 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).prependIndent(test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:17:42,781 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d5062]]
2021-03-11 21:17:42,781 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d5062]
2021-03-11 21:17:42,896 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:42,900 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.toString(-174420332)
2021-03-11 21:17:42,900 [main:114] - replacement of "\n" of type String is "tjfnf"
2021-03-11 21:17:43,017 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 21:17:43,018 [main:66] - Compilation checking started
2021-03-11 21:17:43,594 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((HashMap<UByte, Function2<Double, Float, List<Kla0>>>()).size.toString(-358304686) + it + " has state-machine " +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:17:43,597 [main:107] - replacing (prope7, Boolean)
2021-03-11 21:17:43,597 [main:50] - replacing prope7 Boolean
2021-03-11 21:17:43,597 [main:54] - Getting value of type Boolean
2021-03-11 21:17:43,748 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:17:43,751 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 21:17:43,751 [main:61] - GENERATED IS CALL =false
2021-03-11 21:17:43,758 [main:67] - randomType = UByte
2021-03-11 21:17:43,879 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 21:17:43,921 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@74fb8694]
2021-03-11 21:17:43,921 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@cb9e980]
2021-03-11 21:17:44,038 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:17:44,038 [main:78] - Generated call from random type = (101.toUByte()).toLong().equals("fowpc")
2021-03-11 21:17:44,039 [main:106] - GETTING Boolean from String
2021-03-11 21:17:44,057 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@276007ca]]
2021-03-11 21:17:44,057 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@276007ca]
2021-03-11 21:17:44,057 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).toBoolean()
2021-03-11 21:17:44,057 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c2e8d5f]]
2021-03-11 21:17:44,057 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:17:44,173 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:44,177 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c2e8d5f]
2021-03-11 21:17:44,177 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(-362674838).isTitleCase()
2021-03-11 21:17:44,177 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1cebd5fd], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2e220c0c]]
2021-03-11 21:17:44,177 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1cebd5fd]
2021-03-11 21:17:44,293 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:17:44,293 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2e220c0c]
2021-03-11 21:17:44,420 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:17:44,424 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)
2021-03-11 21:17:44,424 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ae52880]]
2021-03-11 21:17:44,424 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ae52880]
2021-03-11 21:17:44,424 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).any()
2021-03-11 21:17:44,424 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5339ba5]]
2021-03-11 21:17:44,424 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:17:44,560 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:44,563 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5339ba5]
2021-03-11 21:17:44,563 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(1704414339).isUpperCase()
2021-03-11 21:17:44,564 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbf9505]]
2021-03-11 21:17:44,564 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:17:44,692 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:44,812 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:44,815 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbf9505]
2021-03-11 21:17:44,930 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:17:44,933 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:17:44,937 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(790817353, -1394493078).all({a: Char -> true})
2021-03-11 21:17:44,937 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1cebd5fd], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14f5137e]]
2021-03-11 21:17:44,937 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1cebd5fd]
2021-03-11 21:17:45,082 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:17:45,082 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14f5137e]
2021-03-11 21:17:45,216 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:17:45,217 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).equals("sbqxj").equals("setey")
2021-03-11 21:17:45,217 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25d64d20]]
2021-03-11 21:17:45,217 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:17:45,334 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:45,452 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:45,456 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25d64d20]
2021-03-11 21:17:45,572 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 21:17:45,693 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 21:17:45,697 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 21:17:46,090 [main:302] - generating value of type = String true depth = 3
2021-03-11 21:17:46,093 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-11 21:17:46,097 [main:95] - GENERATED = Regex("ewxvj", kotlin.text.RegexOption.MULTILINE)
2021-03-11 21:17:46,097 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(886120877, -1185503603).matches(Regex("ewxvj", kotlin.text.RegexOption.MULTILINE))
2021-03-11 21:17:46,097 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53eda1ba]]
2021-03-11 21:17:46,097 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53eda1ba]
2021-03-11 21:17:46,215 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:46,218 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).hasSurrogatePairAt(689312265)
2021-03-11 21:17:46,218 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13b9d62f]]
2021-03-11 21:17:46,218 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:17:46,385 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:46,389 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13b9d62f]
2021-03-11 21:17:46,389 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(-1013500578).isDigit()
2021-03-11 21:17:46,389 [main:114] - replacement of prope7 of type Boolean is (test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)
2021-03-11 21:17:46,521 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:17:46,521 [main:66] - Compilation checking started
2021-03-11 21:17:47,137 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((HashMap<UByte, Function2<Double, Float, List<Kla0>>>()).size.toString(-358304686) + it + " has state-machine " +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:17:47,141 [main:107] - replacing (prope4, Result<Ty0>)
2021-03-11 21:17:47,141 [main:50] - replacing prope4 Result<Ty0>
2021-03-11 21:17:47,141 [main:54] - Getting value of type Result<Ty0>
2021-03-11 21:17:47,291 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 21:17:47,424 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 21:17:47,430 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 21:17:47,718 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 21:17:47,718 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 21:17:47,725 [main:67] - randomType = UByte
2021-03-11 21:17:47,845 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 21:17:47,884 [main:106] - GETTING Result<Ty0> from String
2021-03-11 21:17:47,902 [main:111] - Cant find and generate replacement for prope4 type Result<Ty0>
2021-03-11 21:17:47,902 [main:107] - replacing (prope4.getOrThrow(), Ty0)
2021-03-11 21:17:47,902 [main:50] - replacing prope4.getOrThrow() Ty0
2021-03-11 21:17:47,902 [main:54] - Getting value of type Ty0
2021-03-11 21:17:48,036 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 21:17:48,043 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 21:17:48,636 [main:67] - randomType = LinkedHashMap<Int?, ArrayDeque<Int>>?
2021-03-11 21:17:48,754 [main:302] - generating value of type = LinkedHashMap<Int?, ArrayDeque<Int>> false depth = 0
2021-03-11 21:17:48,878 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Int?, ArrayDeque<Int>> = TODO()
2021-03-11 21:17:48,882 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Int?, ArrayDeque<Int>> = TODO()
2021-03-11 21:17:49,006 [main:95] - GENERATED = linkedMapOf<Int?, ArrayDeque<Int>>()
2021-03-11 21:17:49,180 [main:106] - GETTING Ty0 from String
2021-03-11 21:17:49,198 [main:111] - Cant find and generate replacement for prope4.getOrThrow() type Ty0
2021-03-11 21:17:49,198 [main:107] - replacing ((HashMap<UByte, Function2<Double, Float, List<Kla0>>>()).size.toString(-358304686) + it + " has state-machine ", String)
2021-03-11 21:17:49,198 [main:50] - replacing (HashMap<UByte, Function2<Double, Float, List<Kla0>>>()).size.toString(-358304686) + it + " has state-machine " String
2021-03-11 21:17:49,198 [main:54] - Getting value of type String
2021-03-11 21:17:49,316 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:17:49,320 [main:58] - GENERATED VALUE OF TYPE String = "sinhi"
2021-03-11 21:17:49,320 [main:61] - GENERATED IS CALL =false
2021-03-11 21:17:49,333 [main:67] - randomType = Kla6
2021-03-11 21:17:49,470 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 21:17:49,474 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 21:17:49,485 [main:106] - GETTING String from String
2021-03-11 21:17:49,510 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6968e6c6]]
2021-03-11 21:17:49,510 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6968e6c6]
2021-03-11 21:17:49,630 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 21:17:49,753 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(elements: Int): Iterable<Int> = TODO()
2021-03-11 21:17:49,757 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(elements: Int): Iterable<Int> = TODO()
2021-03-11 21:17:49,882 [main:302] - generating value of type = Int true depth = 3
2021-03-11 21:17:49,885 [main:95] - GENERATED = listOfNotNull<Int>(534691785)
2021-03-11 21:17:49,885 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).slice(listOfNotNull<Int>(534691785))
2021-03-11 21:17:49,886 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e478a4f]]
2021-03-11 21:17:49,886 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e478a4f]
2021-03-11 21:17:49,886 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).toUpperCase()
2021-03-11 21:17:49,886 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d5062]]
2021-03-11 21:17:49,886 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d5062]
2021-03-11 21:17:50,002 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:50,005 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.toString(13231368)
2021-03-11 21:17:50,005 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b5e9f3c]]
2021-03-11 21:17:50,005 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b5e9f3c]
2021-03-11 21:17:50,005 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:17:50,006 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@515550f]]
2021-03-11 21:17:50,006 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@515550f]
2021-03-11 21:17:50,122 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:17:50,125 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:17:50,129 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true})
2021-03-11 21:17:50,129 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bebba8]]
2021-03-11 21:17:50,129 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bebba8]
2021-03-11 21:17:50,245 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:17:50,248 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:17:50,252 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).dropWhile({a: Char -> true})
2021-03-11 21:17:50,252 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3897a3]]
2021-03-11 21:17:50,252 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3897a3]
2021-03-11 21:17:50,367 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:50,371 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).repeat(1754035281)
2021-03-11 21:17:50,371 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@490e462b]]
2021-03-11 21:17:50,371 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@490e462b]
2021-03-11 21:17:50,371 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).replaceIndent(test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:17:50,371 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f6c1c44]]
2021-03-11 21:17:50,371 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f6c1c44]
2021-03-11 21:17:50,493 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:50,615 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:50,746 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:17:50,753 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).replaceRange(1353886547, -874311850, StringBuilder())
2021-03-11 21:17:50,754 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f4ad11]]
2021-03-11 21:17:50,754 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f4ad11]
2021-03-11 21:17:50,909 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 21:17:50,912 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:17:50,917 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).filterIndexed({a: Int, b: Char -> false})
2021-03-11 21:17:50,917 [main:114] - replacement of (HashMap<UByte, Function2<Double, Float, List<Kla0>>>()).size.toString(-358304686) + it + " has state-machine " of type String is (test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true})
2021-03-11 21:17:51,053 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:17:51,053 [main:66] - Compilation checking started
2021-03-11 21:17:51,612 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:17:51,614 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-11 21:17:51,614 [main:50] - replacing numberOfSuspensions Int
2021-03-11 21:17:51,614 [main:54] - Getting value of type Int
2021-03-11 21:17:51,735 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:51,738 [main:58] - GENERATED VALUE OF TYPE Int = -1779983411
2021-03-11 21:17:51,738 [main:61] - GENERATED IS CALL =false
2021-03-11 21:17:51,743 [main:67] - randomType = Char
2021-03-11 21:17:51,863 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:17:51,894 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1ef21d8a]
2021-03-11 21:17:51,895 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3ecae84c]
2021-03-11 21:17:51,895 [main:78] - Generated call from random type = ('଴').toByte().countLeadingZeroBits()
2021-03-11 21:17:51,895 [main:106] - GETTING Int from String
2021-03-11 21:17:51,915 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62c3b8ca]]
2021-03-11 21:17:51,915 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:17:52,032 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:17:52,035 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62c3b8ca]
2021-03-11 21:17:52,035 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).compareTo("cbkur").unaryMinus()
2021-03-11 21:17:52,035 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public abstract val length: kotlin.Int defined in kotlin.CharSequence[DeserializedPropertyDescriptor@23247030]]
2021-03-11 21:17:52,035 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:17:52,153 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:52,272 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:52,275 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(-598974361, -110182889).length
2021-03-11 21:17:52,275 [main:113] - Case = [public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a49c0ae]]
2021-03-11 21:17:52,275 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a49c0ae]
2021-03-11 21:17:52,392 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:17:52,528 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:52,649 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:17:52,651 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).lastIndexOf('樺', 1716417955, false)
2021-03-11 21:17:52,652 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3809f4ec]]
2021-03-11 21:17:52,652 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3809f4ec]
2021-03-11 21:17:52,768 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:52,771 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.and(1672915572)
2021-03-11 21:17:52,771 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5df8e5ab]]
2021-03-11 21:17:52,771 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:17:52,886 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:53,005 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:53,008 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5df8e5ab]
2021-03-11 21:17:53,126 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:17:53,243 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:53,360 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:17:53,362 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(2051599737, -437001764).indexOf('꽅', -1922036947, false)
2021-03-11 21:17:53,362 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dea145]]
2021-03-11 21:17:53,362 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:17:53,481 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:53,602 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:53,605 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dea145]
2021-03-11 21:17:53,721 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 21:17:53,863 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 21:17:53,867 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 21:17:53,986 [main:302] - generating value of type = Char true depth = 3
2021-03-11 21:17:53,988 [main:95] - GENERATED = charArrayOf('樾')
2021-03-11 21:17:54,102 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:54,220 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:17:54,222 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(928280870, 263043266).indexOfAny(charArrayOf('樾'), 1609691602, true)
2021-03-11 21:17:54,223 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@725bce77]]
2021-03-11 21:17:54,223 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@725bce77]
2021-03-11 21:17:54,337 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:54,339 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)
2021-03-11 21:17:54,339 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6415695]]
2021-03-11 21:17:54,339 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:17:54,455 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:54,458 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6415695]
2021-03-11 21:17:54,458 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(2043696072).digitToInt()
2021-03-11 21:17:54,458 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@443253eb]]
2021-03-11 21:17:54,458 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:17:54,459 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@443253eb]
2021-03-11 21:17:54,575 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:54,578 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).rotateRight(-348872039)
2021-03-11 21:17:54,578 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18333a25]]
2021-03-11 21:17:54,579 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:17:54,702 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:54,820 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:54,871 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18333a25]
2021-03-11 21:17:54,986 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:17:54,989 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:17:54,992 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(-1927097868, 1119822086).indexOfFirst({a: Char -> true})
2021-03-11 21:17:54,992 [main:114] - replacement of numberOfSuspensions of type Int is (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)
2021-03-11 21:17:55,110 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:17:55,111 [main:66] - Compilation checking started
2021-03-11 21:17:55,714 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:17:55,716 [main:107] - replacing (false, Boolean)
2021-03-11 21:17:55,716 [main:50] - replacing false Boolean
2021-03-11 21:17:55,716 [main:54] - Getting value of type Boolean
2021-03-11 21:17:55,841 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:17:55,844 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 21:17:55,844 [main:61] - GENERATED IS CALL =false
2021-03-11 21:17:55,985 [main:67] - randomType = Short
2021-03-11 21:17:56,110 [main:302] - generating value of type = Short true depth = 0
2021-03-11 21:17:56,149 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@cba01e2]
2021-03-11 21:17:56,149 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b4c7a5a]
2021-03-11 21:17:56,264 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:17:56,386 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:17:56,389 [main:78] - Generated call from random type = (-13169).toChar().equals('⳥', false)
2021-03-11 21:17:56,390 [main:106] - GETTING Boolean from String
2021-03-11 21:17:56,413 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@742e80b6]]
2021-03-11 21:17:56,413 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:17:56,529 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:17:56,532 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@742e80b6]
2021-03-11 21:17:56,649 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:17:56,649 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).compareTo("mapow").equals("onoea")
2021-03-11 21:17:56,649 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e3fdf4d]]
2021-03-11 21:17:56,649 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:17:56,769 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:56,771 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e3fdf4d]
2021-03-11 21:17:56,772 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(875510011).isHighSurrogate()
2021-03-11 21:17:56,772 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1cebd5fd], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14f5137e]]
2021-03-11 21:17:56,772 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1cebd5fd]
2021-03-11 21:17:56,887 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:17:56,887 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14f5137e]
2021-03-11 21:17:57,004 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:17:57,004 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")
2021-03-11 21:17:57,004 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a0c5919]]
2021-03-11 21:17:57,004 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:17:57,121 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:57,124 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a0c5919]
2021-03-11 21:17:57,124 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(58159550).isLetter()
2021-03-11 21:17:57,124 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b4c7a5a]]
2021-03-11 21:17:57,124 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:17:57,260 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:57,263 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b4c7a5a]
2021-03-11 21:17:57,381 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:17:57,502 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:17:57,505 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(-95628409).equals('랇', false)
2021-03-11 21:17:57,505 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@290b7de6]]
2021-03-11 21:17:57,505 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:17:57,621 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:57,624 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@290b7de6]
2021-03-11 21:17:57,624 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(1093184863).isLetterOrDigit()
2021-03-11 21:17:57,624 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b8a315c]]
2021-03-11 21:17:57,624 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:17:57,743 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:57,868 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:57,871 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b8a315c]
2021-03-11 21:17:57,871 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(-558490265, 1483919457).none()
2021-03-11 21:17:57,871 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21bfe604]]
2021-03-11 21:17:57,871 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:17:57,989 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:58,106 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:58,109 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21bfe604]
2021-03-11 21:17:58,109 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(-664942680, -1709014031).isNotBlank()
2021-03-11 21:17:58,109 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1896e36f]]
2021-03-11 21:17:58,109 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1896e36f]
2021-03-11 21:17:58,226 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:17:58,344 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:17:58,347 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).contains('圧', false)
2021-03-11 21:17:58,347 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbf9505]]
2021-03-11 21:17:58,347 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:17:58,464 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:58,584 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:17:58,586 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbf9505]
2021-03-11 21:17:58,737 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:17:58,740 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:17:58,743 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(1138552011, -776437725).all({a: Char -> false})
2021-03-11 21:17:58,743 [main:114] - replacement of false of type Boolean is (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")
2021-03-11 21:17:58,894 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:17:58,894 [main:66] - Compilation checking started
2021-03-11 21:17:59,473 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:17:59,476 [main:107] - replacing (prope4, Result<Any?>)
2021-03-11 21:17:59,476 [main:50] - replacing prope4 Result<Any?>
2021-03-11 21:17:59,477 [main:54] - Getting value of type Result<Any?>
2021-03-11 21:17:59,645 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 21:17:59,781 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 21:17:59,785 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 21:18:00,077 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 21:18:00,080 [main:95] - GENERATED = runCatching<Any?>({ null})
2021-03-11 21:18:00,080 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ null})
2021-03-11 21:18:00,080 [main:61] - GENERATED IS CALL =true
2021-03-11 21:18:00,827 [main:67] - randomType = Sequence<ArrayDeque<Set<Kla6>>?>
2021-03-11 21:18:00,829 [main:106] - GETTING Result<Any?> from String
2021-03-11 21:18:00,850 [main:114] - replacement of prope4 of type Result<Any?> is runCatching<Any?>({ null})
2021-03-11 21:18:00,966 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 21:18:00,966 [main:66] - Compilation checking started
2021-03-11 21:18:01,585 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:18:01,588 [main:107] - replacing (method, String)
2021-03-11 21:18:01,589 [main:50] - replacing method String
2021-03-11 21:18:01,589 [main:54] - Getting value of type String
2021-03-11 21:18:01,738 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:18:01,742 [main:58] - GENERATED VALUE OF TYPE String = "kcqet"
2021-03-11 21:18:01,742 [main:61] - GENERATED IS CALL =false
2021-03-11 21:18:01,752 [main:67] - randomType = Kla6
2021-03-11 21:18:01,888 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 21:18:01,891 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 21:18:01,901 [main:106] - GETTING String from String
2021-03-11 21:18:01,922 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f6c1c44]]
2021-03-11 21:18:01,923 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f6c1c44]
2021-03-11 21:18:02,047 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:02,176 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:02,310 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:18:02,316 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).replaceRange(-371086531, 695922597, "jqpme")
2021-03-11 21:18:02,316 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bac045f]]
2021-03-11 21:18:02,316 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bac045f]
2021-03-11 21:18:02,316 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).trim()
2021-03-11 21:18:02,316 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@567d021c]]
2021-03-11 21:18:02,316 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@567d021c]
2021-03-11 21:18:02,317 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).concat(test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:18:02,317 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f07bbf3]]
2021-03-11 21:18:02,317 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f07bbf3]
2021-03-11 21:18:02,317 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).trimIndent()
2021-03-11 21:18:02,317 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b0898b0]]
2021-03-11 21:18:02,317 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b0898b0]
2021-03-11 21:18:02,451 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:18:02,576 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 21:18:02,580 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 21:18:02,837 [main:302] - generating value of type = String true depth = 3
2021-03-11 21:18:02,840 [main:95] - GENERATED = StringBuilder("jqjrc")
2021-03-11 21:18:02,840 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).removePrefix(StringBuilder("jqjrc"))
2021-03-11 21:18:02,841 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46ca7916]]
2021-03-11 21:18:02,841 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46ca7916]
2021-03-11 21:18:02,963 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:18:02,966 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).substringBefore('趱', test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:18:02,966 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f4ad11]]
2021-03-11 21:18:02,966 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f4ad11]
2021-03-11 21:18:03,088 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 21:18:03,091 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:18:03,094 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).filterIndexed({a: Int, b: Char -> false})
2021-03-11 21:18:03,094 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9acb24e]]
2021-03-11 21:18:03,094 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9acb24e]
2021-03-11 21:18:03,212 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:03,214 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).takeLast(-2115762878)
2021-03-11 21:18:03,214 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@244fa9af]]
2021-03-11 21:18:03,214 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@244fa9af]
2021-03-11 21:18:03,333 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:18:03,451 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:18:03,454 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).substringAfter('ꏭ', "ssiub")
2021-03-11 21:18:03,454 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5460c665]]
2021-03-11 21:18:03,454 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:18:03,569 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:03,572 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5460c665]
2021-03-11 21:18:03,572 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()
2021-03-11 21:18:03,572 [main:114] - replacement of method of type String is (test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()
2021-03-11 21:18:03,687 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:18:03,687 [main:66] - Compilation checking started
2021-03-11 21:18:04,336 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:18:04,339 [main:107] - replacing (Kla5(), Kla5)
2021-03-11 21:18:04,339 [main:50] - replacing Kla5() Kla5
2021-03-11 21:18:04,339 [main:54] - Getting value of type Kla5
2021-03-11 21:18:04,473 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 21:18:04,477 [main:112] - generating klass Kla5 text = class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 21:18:04,477 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-11 21:18:04,477 [main:61] - GENERATED IS CALL =true
2021-03-11 21:18:04,623 [main:67] - randomType = Short
2021-03-11 21:18:04,744 [main:302] - generating value of type = Short true depth = 0
2021-03-11 21:18:04,800 [main:106] - GETTING Kla5 from String
2021-03-11 21:18:04,829 [main:114] - replacement of Kla5() of type Kla5 is Kla5()
2021-03-11 21:18:04,947 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 21:18:04,949 [main:107] - replacing (prope6, Int)
2021-03-11 21:18:04,949 [main:50] - replacing prope6 Int
2021-03-11 21:18:04,949 [main:54] - Getting value of type Int
2021-03-11 21:18:05,069 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:05,072 [main:58] - GENERATED VALUE OF TYPE Int = -348548831
2021-03-11 21:18:05,072 [main:61] - GENERATED IS CALL =false
2021-03-11 21:18:05,221 [main:67] - randomType = HashSet<String>
2021-03-11 21:18:05,350 [main:302] - generating value of type = HashSet<String> false depth = 0
2021-03-11 21:18:05,478 [main:43] - GENERATING CALL OF fun linkedStringSetOf(elements: String): HashSet<Strg> = TODO()
2021-03-11 21:18:05,482 [main:61] - WITHOUT TYPE PARAMS = fun linkedStringSetOf(elements: String): HashSet<Strg> = TODO()
2021-03-11 21:18:05,609 [main:302] - generating value of type = String true depth = 3
2021-03-11 21:18:05,613 [main:95] - GENERATED = linkedStringSetOf("yyyxb")
2021-03-11 21:18:05,754 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@725bce77]
2021-03-11 21:18:05,874 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:05,877 [main:78] - Generated call from random type = (linkedStringSetOf("yyyxb")).size.or(924815886)
2021-03-11 21:18:05,878 [main:106] - GETTING Int from String
2021-03-11 21:18:05,901 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4529cb82]]
2021-03-11 21:18:05,901 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4529cb82]
2021-03-11 21:18:05,902 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.countOneBits()
2021-03-11 21:18:05,902 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a49c0ae]]
2021-03-11 21:18:05,902 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:18:06,019 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:06,141 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:06,144 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a49c0ae]
2021-03-11 21:18:06,264 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:18:06,390 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:06,514 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:18:06,517 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(-564338326, -1942417748).lastIndexOf('⡰', -1597888468, false)
2021-03-11 21:18:06,517 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2cc70f6e]]
2021-03-11 21:18:06,517 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2cc70f6e]
2021-03-11 21:18:06,638 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:18:06,641 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.minus(-116)
2021-03-11 21:18:06,641 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@56211d6b]]
2021-03-11 21:18:06,641 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@56211d6b]
2021-03-11 21:18:06,641 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.countLeadingZeroBits()
2021-03-11 21:18:06,641 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@28fb1d54]]
2021-03-11 21:18:06,642 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:18:06,761 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:18:06,766 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).compareTo("kzeux").sign
2021-03-11 21:18:06,766 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@443253eb]]
2021-03-11 21:18:06,766 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@443253eb]
2021-03-11 21:18:06,895 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:06,898 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.rotateRight(-2081993864)
2021-03-11 21:18:06,899 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@561b5621]]
2021-03-11 21:18:06,899 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@561b5621]
2021-03-11 21:18:07,019 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 21:18:07,022 [main:302] - generating value of type = Int true depth = 1
2021-03-11 21:18:07,025 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).sumOf({a: Char -> -1339758429})
2021-03-11 21:18:07,026 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2c65a61e]]
2021-03-11 21:18:07,026 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:18:07,026 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2c65a61e]
2021-03-11 21:18:07,026 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).takeHighestOneBit()
2021-03-11 21:18:07,026 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62c3b8ca]]
2021-03-11 21:18:07,026 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62c3b8ca]
2021-03-11 21:18:07,026 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.unaryMinus()
2021-03-11 21:18:07,026 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@725bce77]]
2021-03-11 21:18:07,026 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@725bce77]
2021-03-11 21:18:07,147 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:07,150 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.or(-1470189637)
2021-03-11 21:18:07,150 [main:114] - replacement of prope6 of type Int is (test<Sequence<*>>(emptySequence<Any?>())).length.rotateRight(-2081993864)
2021-03-11 21:18:07,289 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:18:07,290 [main:66] - Compilation checking started
2021-03-11 21:18:07,900 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (test<Sequence<*>>(emptySequence<Any?>())).length.rotateRight(-2081993864))
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:18:07,903 [main:107] - replacing (prope3, Continuation<Unit>)
2021-03-11 21:18:07,903 [main:50] - replacing prope3 Continuation<Unit>
2021-03-11 21:18:07,903 [main:54] - Getting value of type Continuation<Unit>
2021-03-11 21:18:08,037 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 21:18:08,165 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 21:18:08,170 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 21:18:08,591 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 21:18:08,720 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:18:08,724 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:18:09,011 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 21:18:09,175 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:18:09,179 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:18:09,600 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 21:18:09,733 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:18:09,737 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:18:10,165 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-11 21:18:10,299 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:18:10,303 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:18:10,740 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:18:10,741 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:18:10,741 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:18:10,741 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:18:10,741 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 21:18:10,741 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 21:18:10,901 [main:67] - randomType = Short
2021-03-11 21:18:11,019 [main:302] - generating value of type = Short true depth = 0
2021-03-11 21:18:11,056 [main:106] - GETTING Continuation<Unit> from String
2021-03-11 21:18:11,072 [main:111] - Cant find and generate replacement for prope3 type Continuation<Unit>
2021-03-11 21:18:11,072 [main:107] - replacing ({ prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-11 21:18:11,072 [main:50] - replacing { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-11 21:18:11,072 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-11 21:18:11,193 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-11 21:18:11,196 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:18:11,319 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 21:18:11,324 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 21:18:11,734 [main:302] - generating value of type = Int true depth = 4
2021-03-11 21:18:11,737 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 21:18:11,740 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 21:18:11,867 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:18:11,871 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:18:12,291 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 21:18:12,294 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 21:18:12,297 [main:302] - generating value of type = Any false depth = 9
2021-03-11 21:18:12,297 [main:95] - GENERATED = require(false, { "sgsyn"})
2021-03-11 21:18:12,298 [main:95] - GENERATED = repeat(416567855, {a: Int -> require(false, { "sgsyn"})})
2021-03-11 21:18:12,298 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}
2021-03-11 21:18:12,298 [main:61] - GENERATED IS CALL =false
2021-03-11 21:18:12,304 [main:67] - randomType = Int
2021-03-11 21:18:12,429 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:12,465 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 21:18:12,482 [main:114] - replacement of { prope3 ->
        prope6++
        prope8 = { prope3.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}
2021-03-11 21:18:12,616 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 21:18:12,616 [main:66] - Compilation checking started
2021-03-11 21:18:13,203 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (test<Sequence<*>>(emptySequence<Any?>())).length.rotateRight(-2081993864))
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:18:13,205 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-11 21:18:13,205 [main:50] - replacing getOrThrow() Ty0
2021-03-11 21:18:13,205 [main:54] - Getting value of type Ty0
2021-03-11 21:18:13,334 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 21:18:13,340 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 21:18:13,480 [main:67] - randomType = UShort
2021-03-11 21:18:13,602 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 21:18:13,645 [main:106] - GETTING Ty0 from String
2021-03-11 21:18:13,664 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-11 21:18:13,664 [main:107] - replacing (prope3, Continuation<*>)
2021-03-11 21:18:13,664 [main:50] - replacing prope3 Continuation<*>
2021-03-11 21:18:13,664 [main:54] - Getting value of type Continuation<*>
2021-03-11 21:18:13,785 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 21:18:13,916 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 21:18:13,920 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 21:18:14,342 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 21:18:14,468 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:18:14,473 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:18:14,771 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 21:18:14,900 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:18:14,904 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:18:15,322 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:18:15,322 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:18:15,322 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 21:18:15,322 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 21:18:15,773 [main:67] - randomType = Function1<HashSet<Kla0>, Kla0>
2021-03-11 21:18:15,775 [main:106] - GETTING Continuation<*> from String
2021-03-11 21:18:15,804 [main:111] - Cant find and generate replacement for prope3 type Continuation<*>
2021-03-11 21:18:15,805 [main:107] - replacing ("\n", String)
2021-03-11 21:18:15,805 [main:50] - replacing "\n" String
2021-03-11 21:18:15,805 [main:54] - Getting value of type String
2021-03-11 21:18:15,938 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:18:15,941 [main:58] - GENERATED VALUE OF TYPE String = "oeask"
2021-03-11 21:18:15,941 [main:61] - GENERATED IS CALL =false
2021-03-11 21:18:16,090 [main:67] - randomType = UInt
2021-03-11 21:18:16,220 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 21:18:16,261 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@1125a796]
2021-03-11 21:18:16,261 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@acb0741]
2021-03-11 21:18:16,392 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:16,396 [main:78] - Generated call from random type = (1093338024.toUInt()).toShort().toString(1646477274)
2021-03-11 21:18:16,396 [main:114] - replacement of "\n" of type String is (1093338024.toUInt()).toShort().toString(1646477274)
2021-03-11 21:18:16,533 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:18:16,534 [main:66] - Compilation checking started
2021-03-11 21:18:17,159 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = (1093338024.toUInt()).toShort().toString(1646477274)))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (test<Sequence<*>>(emptySequence<Any?>())).length.rotateRight(-2081993864))
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:18:17,163 [main:107] - replacing (prope4, Result<Any?>)
2021-03-11 21:18:17,163 [main:50] - replacing prope4 Result<Any?>
2021-03-11 21:18:17,163 [main:54] - Getting value of type Result<Any?>
2021-03-11 21:18:17,309 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 21:18:17,435 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 21:18:17,439 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 21:18:17,706 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 21:18:17,709 [main:302] - generating value of type = Any false depth = 4
2021-03-11 21:18:17,709 [main:95] - GENERATED = runCatching<Any?>({ "clrvw"})
2021-03-11 21:18:17,709 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "clrvw"})
2021-03-11 21:18:17,709 [main:61] - GENERATED IS CALL =true
2021-03-11 21:18:18,619 [main:67] - randomType = Pair<MutableMap<Double, Boolean>, Function1<Kla1?, Kla6>>
2021-03-11 21:18:18,743 [main:302] - generating value of type = Pair<MutableMap<Double, Boolean>, Function1<Kla1?, Kla6>> false depth = 0
2021-03-11 21:18:18,871 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: MutableMap<Double, Boolean>, second: Function1<Kla1?, Kla6>): Pair<MutableMap<Double, Boolean>, Function1<Kla1?, Kla6>> = TODO()
2021-03-11 21:18:18,875 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: MutableMap<Double, Boolean>, second: Function1<Kla1?, Kla6>): Pair<MutableMap<Double, Boolean>, Function1<Kla1?, Kla6>> = TODO()
2021-03-11 21:18:19,004 [main:302] - generating value of type = MutableMap<Double, Boolean> false depth = 3
2021-03-11 21:18:19,130 [main:43] - GENERATING CALL OF fun <K, V> mutableMapOf(): MutableMap<Double, Boolean> = TODO()
2021-03-11 21:18:19,134 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mutableMapOf(): MutableMap<Double, Boolean> = TODO()
2021-03-11 21:18:19,259 [main:95] - GENERATED = mutableMapOf<Double, Boolean>()
2021-03-11 21:18:19,259 [main:302] - generating value of type = Function1<Kla1?, Kla6> false depth = 3
2021-03-11 21:18:19,262 [main:302] - generating value of type = Kla6 false depth = 4
2021-03-11 21:18:19,265 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (test<Sequence<*>>(emptySequence<Any?>())).length.rotateRight(-2081993864))
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 21:18:19,265 [main:95] - GENERATED = Pair<MutableMap<Double, Boolean>, Function1<Kla1?, Kla6>>(mutableMapOf<Double, Boolean>(), {a: Kla1? -> Kla6()})
2021-03-11 21:18:19,286 [main:106] - GETTING Result<Any?> from String
2021-03-11 21:18:19,302 [main:114] - replacement of prope4 of type Result<Any?> is runCatching<Any?>({ "clrvw"})
2021-03-11 21:18:19,421 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 21:18:19,422 [main:66] - Compilation checking started
2021-03-11 21:18:20,042 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = (1093338024.toUInt()).toShort().toString(1646477274)))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (test<Sequence<*>>(emptySequence<Any?>())).length.rotateRight(-2081993864))
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:18:20,044 [main:107] - replacing (1, Int)
2021-03-11 21:18:20,044 [main:50] - replacing 1 Int
2021-03-11 21:18:20,044 [main:54] - Getting value of type Int
2021-03-11 21:18:20,167 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:20,170 [main:58] - GENERATED VALUE OF TYPE Int = -178125764
2021-03-11 21:18:20,170 [main:61] - GENERATED IS CALL =false
2021-03-11 21:18:20,182 [main:67] - randomType = Kla6
2021-03-11 21:18:20,304 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 21:18:20,307 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (test<Sequence<*>>(emptySequence<Any?>())).length.rotateRight(-2081993864))
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 21:18:20,317 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77e1f2a2]
2021-03-11 21:18:20,440 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:18:20,443 [main:78] - Generated call from random type = (Kla6()).prope7.compareTo(true)
2021-03-11 21:18:20,444 [main:106] - GETTING Int from String
2021-03-11 21:18:20,468 [main:113] - Case = [public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5df8e5ab]]
2021-03-11 21:18:20,468 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5df8e5ab]
2021-03-11 21:18:20,608 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:18:20,738 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:20,866 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:18:20,869 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).indexOf('뛚', -2121281240, true)
2021-03-11 21:18:20,869 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@639aa001]]
2021-03-11 21:18:20,869 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:18:20,869 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@639aa001]
2021-03-11 21:18:20,995 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:18:20,999 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(-3)
2021-03-11 21:18:20,999 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7532c8a8]]
2021-03-11 21:18:20,999 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:18:20,999 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7532c8a8]
2021-03-11 21:18:21,127 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:21,131 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).xor(-1114980913)
2021-03-11 21:18:21,131 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@54531b67]]
2021-03-11 21:18:21,131 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@54531b67]
2021-03-11 21:18:21,252 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:18:21,255 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.compareTo(-113)
2021-03-11 21:18:21,255 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5df8e5ab]]
2021-03-11 21:18:21,255 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:18:21,374 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:21,497 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:21,500 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5df8e5ab]
2021-03-11 21:18:21,623 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:18:21,749 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:21,875 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:18:21,878 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(1191172792, -1226551934).indexOf('趈', 1637522008, true)
2021-03-11 21:18:21,879 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cbb9ba5]]
2021-03-11 21:18:21,879 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:18:22,002 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:22,127 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:22,131 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cbb9ba5]
2021-03-11 21:18:22,253 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 21:18:22,256 [main:302] - generating value of type = Int true depth = 1
2021-03-11 21:18:22,260 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(624527548, 1818386128).sumBy({a: Char -> -260946338})
2021-03-11 21:18:22,260 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7532c8a8]]
2021-03-11 21:18:22,260 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7532c8a8]
2021-03-11 21:18:22,406 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:22,409 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.xor(1945834610)
2021-03-11 21:18:22,409 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@69d5078d]]
2021-03-11 21:18:22,409 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@69d5078d]
2021-03-11 21:18:22,530 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:22,534 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.shr(-804434441)
2021-03-11 21:18:22,534 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2c65a61e]]
2021-03-11 21:18:22,534 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2c65a61e]
2021-03-11 21:18:22,534 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()
2021-03-11 21:18:22,534 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@754345b]]
2021-03-11 21:18:22,534 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@754345b]
2021-03-11 21:18:22,663 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:22,786 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:22,789 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.coerceIn(-436487267, -1261150614)
2021-03-11 21:18:22,789 [main:114] - replacement of 1 of type Int is (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()
2021-03-11 21:18:22,908 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:18:22,909 [main:66] - Compilation checking started
2021-03-11 21:18:23,506 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = (1093338024.toUInt()).toShort().toString(1646477274)))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (test<Sequence<*>>(emptySequence<Any?>())).length.rotateRight(-2081993864))
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:18:23,509 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (test<Sequence<*>>(emptySequence<Any?>())).length.rotateRight(-2081993864), String)
2021-03-11 21:18:23,510 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (test<Sequence<*>>(emptySequence<Any?>())).length.rotateRight(-2081993864) String
2021-03-11 21:18:23,510 [main:54] - Getting value of type String
2021-03-11 21:18:23,649 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:18:23,652 [main:58] - GENERATED VALUE OF TYPE String = "ifzlf"
2021-03-11 21:18:23,652 [main:61] - GENERATED IS CALL =false
2021-03-11 21:18:24,244 [main:67] - randomType = Kla4<LinkedHashSet<Kla1>>
2021-03-11 21:18:24,368 [main:302] - generating value of type = Kla4<LinkedHashSet<Kla1>> false depth = 0
2021-03-11 21:18:24,371 [main:112] - generating klass Kla4 text = abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 21:18:24,951 [main:302] - generating value of type = Kla7 false depth = 2
2021-03-11 21:18:24,954 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 21:18:24,975 [main:106] - GETTING String from String
2021-03-11 21:18:24,993 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@515550f]]
2021-03-11 21:18:24,993 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@515550f]
2021-03-11 21:18:25,115 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:18:25,118 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:18:25,122 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true})
2021-03-11 21:18:25,122 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77d79b1a]]
2021-03-11 21:18:25,122 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77d79b1a]
2021-03-11 21:18:25,248 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 21:18:25,251 [main:302] - generating value of type = Char true depth = 1
2021-03-11 21:18:25,255 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).replaceFirstChar({a: Char -> ''})
2021-03-11 21:18:25,255 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@567d021c]]
2021-03-11 21:18:25,255 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@567d021c]
2021-03-11 21:18:25,255 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).concat(test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:18:25,255 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bac045f]]
2021-03-11 21:18:25,255 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bac045f]
2021-03-11 21:18:25,255 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).trim()
2021-03-11 21:18:25,255 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7203bd2a]]
2021-03-11 21:18:25,255 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:18:25,380 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:25,383 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7203bd2a]
2021-03-11 21:18:25,383 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(1190896033).uppercase()
2021-03-11 21:18:25,383 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@364216f]]
2021-03-11 21:18:25,383 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:18:25,506 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:25,509 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@364216f]
2021-03-11 21:18:25,510 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(-1368913994).titlecase()
2021-03-11 21:18:25,510 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5792ac7b]]
2021-03-11 21:18:25,510 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5792ac7b]
2021-03-11 21:18:25,634 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:18:25,637 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:18:25,641 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).dropLastWhile({a: Char -> true})
2021-03-11 21:18:25,641 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35642396]]
2021-03-11 21:18:25,641 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35642396]
2021-03-11 21:18:25,764 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:25,768 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).dropLast(1420825570)
2021-03-11 21:18:25,768 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5460c665]]
2021-03-11 21:18:25,768 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:18:25,895 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:25,898 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5460c665]
2021-03-11 21:18:25,899 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(1072743318).lowercase()
2021-03-11 21:18:25,899 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ce95b9a]]
2021-03-11 21:18:25,899 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ce95b9a]
2021-03-11 21:18:26,023 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:18:26,152 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 21:18:26,156 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 21:18:26,434 [main:302] - generating value of type = Int true depth = 3
2021-03-11 21:18:26,437 [main:95] - GENERATED = StringBuilder(1403504316)
2021-03-11 21:18:26,437 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).removeSurrounding(StringBuilder(1403504316))
2021-03-11 21:18:26,437 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (test<Sequence<*>>(emptySequence<Any?>())).length.rotateRight(-2081993864) of type String is (test<Sequence<*>>(emptySequence<Any?>())).trim()
2021-03-11 21:18:26,580 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:18:26,580 [main:66] - Compilation checking started
2021-03-11 21:18:27,159 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = (1093338024.toUInt()).toShort().toString(1646477274)))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:18:27,163 [main:107] - replacing ("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = (1093338024.toUInt()).toShort().toString(1646477274)), String)
2021-03-11 21:18:27,163 [main:50] - replacing "tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = (1093338024.toUInt()).toShort().toString(1646477274)) String
2021-03-11 21:18:27,163 [main:54] - Getting value of type String
2021-03-11 21:18:27,305 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:18:27,308 [main:58] - GENERATED VALUE OF TYPE String = "evynw"
2021-03-11 21:18:27,308 [main:61] - GENERATED IS CALL =false
2021-03-11 21:18:27,316 [main:67] - randomType = UInt
2021-03-11 21:18:27,442 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 21:18:27,477 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3635cc7b]
2021-03-11 21:18:27,600 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:27,603 [main:78] - Generated call from random type = (1665662796.toUInt()).toString(1129622941)
2021-03-11 21:18:27,603 [main:106] - GETTING String from String
2021-03-11 21:18:27,621 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24796352]]
2021-03-11 21:18:27,621 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24796352]
2021-03-11 21:18:27,621 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).trimEnd()
2021-03-11 21:18:27,621 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d5062]]
2021-03-11 21:18:27,621 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d5062]
2021-03-11 21:18:27,741 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:27,744 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.toString(-2050858364)
2021-03-11 21:18:27,744 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bac045f]]
2021-03-11 21:18:27,744 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bac045f]
2021-03-11 21:18:27,745 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).trim()
2021-03-11 21:18:27,745 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@567d021c]]
2021-03-11 21:18:27,745 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@567d021c]
2021-03-11 21:18:27,745 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).concat(test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:18:27,745 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@301a9a06]]
2021-03-11 21:18:27,745 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@301a9a06]
2021-03-11 21:18:27,866 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:18:27,997 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 21:18:28,001 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 21:18:28,267 [main:302] - generating value of type = Int true depth = 3
2021-03-11 21:18:28,270 [main:95] - GENERATED = StringBuilder(1201657905)
2021-03-11 21:18:28,391 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:18:28,394 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).commonSuffixWith(StringBuilder(1201657905), false)
2021-03-11 21:18:28,394 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa166b9]]
2021-03-11 21:18:28,394 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa166b9]
2021-03-11 21:18:28,514 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:18:28,520 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb")
2021-03-11 21:18:28,520 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a26927]]
2021-03-11 21:18:28,520 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a26927]
2021-03-11 21:18:28,521 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).trimStart()
2021-03-11 21:18:28,521 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e0944ff]]
2021-03-11 21:18:28,521 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:18:28,643 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:28,789 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:28,792 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e0944ff]
2021-03-11 21:18:28,914 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:18:29,039 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:18:29,042 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(2016462650, -1788338252).commonPrefixWith("diwwn", true)
2021-03-11 21:18:29,042 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7745d391]]
2021-03-11 21:18:29,042 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7745d391]
2021-03-11 21:18:29,163 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:18:29,167 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).replaceBefore('歘', test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:18:29,167 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46ca7916]]
2021-03-11 21:18:29,167 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46ca7916]
2021-03-11 21:18:29,286 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:18:29,290 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).substringBefore('鮑', test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:18:29,290 [main:114] - replacement of "tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = (1093338024.toUInt()).toShort().toString(1646477274)) of type String is (test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb")
2021-03-11 21:18:29,410 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:18:29,410 [main:66] - Compilation checking started
2021-03-11 21:18:29,986 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == true } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:18:29,988 [main:107] - replacing (getOrThrow(), Any?)
2021-03-11 21:18:29,988 [main:50] - replacing getOrThrow() Any?
2021-03-11 21:18:29,988 [main:54] - Getting value of type Any?
2021-03-11 21:18:30,122 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:18:30,122 [main:58] - GENERATED VALUE OF TYPE Any? = "rxktm"
2021-03-11 21:18:30,122 [main:61] - GENERATED IS CALL =false
2021-03-11 21:18:30,404 [main:67] - randomType = UInt?
2021-03-11 21:18:30,522 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 21:18:30,556 [main:106] - GETTING Any? from String
2021-03-11 21:18:30,573 [main:114] - replacement of getOrThrow() of type Any? is "rxktm"
2021-03-11 21:18:30,689 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 21:18:30,690 [main:66] - Compilation checking started
2021-03-11 21:18:31,088 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = runCatching<Any?>({ "clrvw"})."rxktm"
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == true } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:18:31,090 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 21:18:31,090 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 21:18:31,090 [main:54] - Getting value of type Function0<Unit>
2021-03-11 21:18:31,213 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 21:18:31,216 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:18:31,341 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 21:18:31,345 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 21:18:31,612 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 21:18:31,615 [main:95] - GENERATED = check(false)
2021-03-11 21:18:31,615 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-11 21:18:31,615 [main:61] - GENERATED IS CALL =false
2021-03-11 21:18:31,777 [main:67] - randomType = Map<Kla0, Int>
2021-03-11 21:18:31,778 [main:106] - GETTING Function0<Unit> from String
2021-03-11 21:18:31,795 [main:114] - replacement of prope8 of type Function0<Unit> is { check(false)}
2021-03-11 21:18:31,913 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 21:18:31,914 [main:66] - Compilation checking started
2021-03-11 21:18:32,288 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == true } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        { check(false)} = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:18:32,290 [main:107] - replacing (true, Boolean)
2021-03-11 21:18:32,290 [main:50] - replacing true Boolean
2021-03-11 21:18:32,290 [main:54] - Getting value of type Boolean
2021-03-11 21:18:32,409 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:18:32,412 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 21:18:32,412 [main:61] - GENERATED IS CALL =false
2021-03-11 21:18:32,549 [main:67] - randomType = ULong
2021-03-11 21:18:32,669 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 21:18:32,700 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@d10e78f]
2021-03-11 21:18:32,819 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:18:32,819 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@195f7478]
2021-03-11 21:18:32,963 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:18:32,966 [main:78] - Generated call from random type = (4133270610685084129.toULong()).equals("kgzmo").or(false)
2021-03-11 21:18:32,967 [main:106] - GETTING Boolean from String
2021-03-11 21:18:32,985 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@36f413fc]]
2021-03-11 21:18:32,985 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:18:33,106 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:33,229 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:33,232 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@36f413fc]
2021-03-11 21:18:33,351 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:18:33,351 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(609481425, 481397586).equals("glejk")
2021-03-11 21:18:33,351 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c117f4f]]
2021-03-11 21:18:33,351 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:18:33,470 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:33,473 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c117f4f]
2021-03-11 21:18:33,474 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(65723523).isSurrogate()
2021-03-11 21:18:33,474 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1cebd5fd], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@61d3ee02]]
2021-03-11 21:18:33,474 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1cebd5fd]
2021-03-11 21:18:33,593 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:18:33,593 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@61d3ee02]
2021-03-11 21:18:33,594 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).equals("xmjqh").not()
2021-03-11 21:18:33,594 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbf9505]]
2021-03-11 21:18:33,594 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:18:33,713 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:33,833 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:33,836 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbf9505]
2021-03-11 21:18:33,955 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:18:33,958 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:18:33,961 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(996254809, 388923225).all({a: Char -> true})
2021-03-11 21:18:33,961 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7fc910]]
2021-03-11 21:18:33,961 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:18:34,079 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:34,201 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:34,204 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7fc910]
2021-03-11 21:18:34,324 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:18:34,446 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:18:34,450 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(900221575, -374810890).startsWith('뽕', false)
2021-03-11 21:18:34,450 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@742e80b6]]
2021-03-11 21:18:34,450 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:18:34,569 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:18:34,572 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@742e80b6]
2021-03-11 21:18:34,691 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:18:34,692 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).compareTo("ojwpn").equals("icpmu")
2021-03-11 21:18:34,692 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c2e8d5f]]
2021-03-11 21:18:34,692 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:18:34,841 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:34,844 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c2e8d5f]
2021-03-11 21:18:34,844 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(868628840).isTitleCase()
2021-03-11 21:18:34,844 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@672d969c]]
2021-03-11 21:18:34,844 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:18:34,963 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:34,966 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@672d969c]
2021-03-11 21:18:34,967 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl()
2021-03-11 21:18:34,967 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3053cc04]]
2021-03-11 21:18:34,967 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:18:35,085 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:35,088 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3053cc04]
2021-03-11 21:18:35,088 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(1881087602).isLowerCase()
2021-03-11 21:18:35,088 [main:113] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3aab0a10]]
2021-03-11 21:18:35,088 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3aab0a10]
2021-03-11 21:18:35,088 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).isBlank()
2021-03-11 21:18:35,088 [main:114] - replacement of true of type Boolean is (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl()
2021-03-11 21:18:35,208 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:18:35,208 [main:66] - Compilation checking started
2021-03-11 21:18:35,958 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:18:35,962 [main:107] - replacing (Kla2, Kla8)
2021-03-11 21:18:35,962 [main:50] - replacing Kla2 Kla8
2021-03-11 21:18:35,962 [main:54] - Getting value of type Kla8
2021-03-11 21:18:36,095 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 21:18:36,098 [main:112] - generating klass Kla8 text = companion object Kla8 : Kla2()
2021-03-11 21:18:36,098 [main:58] - GENERATED VALUE OF TYPE Kla8 = 
2021-03-11 21:18:36,249 [main:67] - randomType = Kla3?
2021-03-11 21:18:36,378 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 21:18:36,381 [main:112] - generating klass Kla3 text = class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-11 21:18:36,404 [main:106] - GETTING Kla8 from String
2021-03-11 21:18:36,423 [main:111] - Cant find and generate replacement for Kla2 type Kla8
2021-03-11 21:18:36,423 [main:107] - replacing (prope1.prope7, Boolean)
2021-03-11 21:18:36,423 [main:50] - replacing prope1.prope7 Boolean
2021-03-11 21:18:36,423 [main:54] - Getting value of type Boolean
2021-03-11 21:18:36,549 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:18:36,553 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 21:18:36,553 [main:61] - GENERATED IS CALL =false
2021-03-11 21:18:36,559 [main:67] - randomType = Boolean
2021-03-11 21:18:36,690 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:18:36,706 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4df7e8b]
2021-03-11 21:18:36,828 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:18:36,831 [main:78] - Generated call from random type = (false).xor(true)
2021-03-11 21:18:36,832 [main:106] - GETTING Boolean from String
2021-03-11 21:18:36,853 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9fecc9]]
2021-03-11 21:18:36,853 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9fecc9]
2021-03-11 21:18:36,853 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).isNotEmpty()
2021-03-11 21:18:36,853 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@290b7de6]]
2021-03-11 21:18:36,853 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:18:36,974 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:36,977 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@290b7de6]
2021-03-11 21:18:36,977 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(-916671934).isLetterOrDigit()
2021-03-11 21:18:36,977 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ae52880]]
2021-03-11 21:18:36,977 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:18:37,098 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:37,230 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:37,233 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ae52880]
2021-03-11 21:18:37,234 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(12477524, 1988662994).any()
2021-03-11 21:18:37,234 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3aab0a10]]
2021-03-11 21:18:37,234 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:18:37,373 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:37,496 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:37,499 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3aab0a10]
2021-03-11 21:18:37,500 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(2080737249, -1491920377).isBlank()
2021-03-11 21:18:37,500 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53eda1ba]]
2021-03-11 21:18:37,500 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:18:37,619 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:37,740 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:37,744 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53eda1ba]
2021-03-11 21:18:37,869 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:37,872 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(-992020673, -220838494).hasSurrogatePairAt(-774517769)
2021-03-11 21:18:37,872 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ae52880]]
2021-03-11 21:18:37,872 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ae52880]
2021-03-11 21:18:37,872 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).any()
2021-03-11 21:18:37,872 [main:113] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f42ba60]]
2021-03-11 21:18:37,872 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f42ba60]
2021-03-11 21:18:37,873 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).matches(test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:18:37,873 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c2e8d5f]]
2021-03-11 21:18:37,873 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:18:37,993 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:37,997 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c2e8d5f]
2021-03-11 21:18:37,997 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(1983765131).isTitleCase()
2021-03-11 21:18:37,997 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@742e80b6]]
2021-03-11 21:18:37,997 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@742e80b6]
2021-03-11 21:18:38,116 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:18:38,117 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.equals("qrowf")
2021-03-11 21:18:38,117 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@36f413fc]]
2021-03-11 21:18:38,117 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:18:38,236 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:38,357 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:38,360 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@36f413fc]
2021-03-11 21:18:38,478 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:18:38,478 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(538633133, -994429051).equals("ijojy")
2021-03-11 21:18:38,478 [main:114] - replacement of prope1.prope7 of type Boolean is (test<Sequence<*>>(emptySequence<Any?>())).get(1983765131).isTitleCase()
2021-03-11 21:18:38,598 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:18:38,598 [main:66] - Compilation checking started
2021-03-11 21:18:38,981 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            (test<Sequence<*>>(emptySequence<Any?>())).get(1983765131).isTitleCase() = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:18:38,983 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 21:18:38,983 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 21:18:38,983 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 21:18:39,104 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 21:18:39,110 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 21:18:40,057 [main:67] - randomType = Map<HashMap<Kla4<Kla0>, UByte>?, Kla1>
2021-03-11 21:18:40,058 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 21:18:40,076 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 21:18:40,076 [main:107] - replacing (prope4, Result<Ty0>)
2021-03-11 21:18:40,076 [main:50] - replacing prope4 Result<Ty0>
2021-03-11 21:18:40,076 [main:54] - Getting value of type Result<Ty0>
2021-03-11 21:18:40,199 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 21:18:40,332 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 21:18:40,337 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 21:18:40,605 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 21:18:40,609 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 21:18:41,046 [main:67] - randomType = Sequence<Kla4<UByte>>
2021-03-11 21:18:41,048 [main:106] - GETTING Result<Ty0> from String
2021-03-11 21:18:41,065 [main:111] - Cant find and generate replacement for prope4 type Result<Ty0>
2021-03-11 21:18:41,065 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 21:18:41,066 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 21:18:41,066 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 21:18:41,185 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 21:18:41,191 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 21:18:42,400 [main:67] - randomType = Map<UShort, Function1<UShort, Collection<HashSet<Sequence<Int>>>>>
2021-03-11 21:18:42,401 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 21:18:42,422 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 21:18:42,422 [main:107] - replacing (prope4.isSuccess, Boolean)
2021-03-11 21:18:42,422 [main:50] - replacing prope4.isSuccess Boolean
2021-03-11 21:18:42,422 [main:54] - Getting value of type Boolean
2021-03-11 21:18:42,543 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:18:42,546 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 21:18:42,546 [main:61] - GENERATED IS CALL =false
2021-03-11 21:18:42,688 [main:67] - randomType = Kla7
2021-03-11 21:18:42,807 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-11 21:18:42,810 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 21:18:42,829 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla7[DeserializedSimpleFunctionDescriptor@537085b4]
2021-03-11 21:18:42,947 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:18:42,947 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@195f7478]
2021-03-11 21:18:43,065 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:18:43,068 [main:78] - Generated call from random type = (Kla7).equals("xzvfc").or(true)
2021-03-11 21:18:43,068 [main:114] - replacement of prope4.isSuccess of type Boolean is (Kla7).equals("xzvfc").or(true)
2021-03-11 21:18:43,187 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:18:43,189 [main:107] - replacing (getOrThrow(), Any?)
2021-03-11 21:18:43,189 [main:50] - replacing getOrThrow() Any?
2021-03-11 21:18:43,189 [main:54] - Getting value of type Any?
2021-03-11 21:18:43,316 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:18:43,316 [main:58] - GENERATED VALUE OF TYPE Any? = "wtalv"
2021-03-11 21:18:43,316 [main:61] - GENERATED IS CALL =false
2021-03-11 21:18:45,737 [main:67] - randomType = Function1<MutableMap<Kla0, Function2<Kla7, List<Function2<UByte, Kla1, Array<Kla6>>>, Function2<Double?, Kla1?, Long>>>, Int?>
2021-03-11 21:18:45,738 [main:106] - GETTING Any? from String
2021-03-11 21:18:45,763 [main:114] - replacement of getOrThrow() of type Any? is "wtalv"
2021-03-11 21:18:45,881 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 21:18:45,882 [main:66] - Compilation checking started
2021-03-11 21:18:46,245 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = runCatching<Any?>({ "clrvw"})."wtalv"
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:18:46,247 [main:107] - replacing (false, Boolean)
2021-03-11 21:18:46,248 [main:50] - replacing false Boolean
2021-03-11 21:18:46,248 [main:54] - Getting value of type Boolean
2021-03-11 21:18:46,379 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:18:46,382 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 21:18:46,382 [main:61] - GENERATED IS CALL =false
2021-03-11 21:18:47,009 [main:67] - randomType = Pair<Kla6, Kla4<ULong>>?
2021-03-11 21:18:47,129 [main:302] - generating value of type = Pair<Kla6, Kla4<ULong>> false depth = 0
2021-03-11 21:18:47,254 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla6, second: Kla4<ULong>): Pair<Kla6, Kla4<ULong>> = TODO()
2021-03-11 21:18:47,258 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla6, second: Kla4<ULong>): Pair<Kla6, Kla4<ULong>> = TODO()
2021-03-11 21:18:47,383 [main:302] - generating value of type = Kla6 false depth = 3
2021-03-11 21:18:47,386 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 21:18:47,387 [main:302] - generating value of type = Kla4<ULong> false depth = 3
2021-03-11 21:18:47,389 [main:112] - generating klass Kla4 text = abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 21:18:47,796 [main:302] - generating value of type = Kla7 false depth = 5
2021-03-11 21:18:47,800 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 21:18:47,800 [main:95] - GENERATED = Pair<Kla6, Kla4<ULong>>(Kla6(), Kla7)
2021-03-11 21:18:47,820 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor@1a1372c8]
2021-03-11 21:18:47,950 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:18:47,951 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@61d3ee02]
2021-03-11 21:18:47,951 [main:78] - Generated call from random type = (Pair<Kla6, Kla4<ULong>>(Kla6(), Kla7))?.equals("jzuju").not()
2021-03-11 21:18:47,952 [main:106] - GETTING Boolean from String
2021-03-11 21:18:47,970 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c2e8d5f]]
2021-03-11 21:18:47,970 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:18:48,101 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:48,104 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c2e8d5f]
2021-03-11 21:18:48,104 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(231921550).isTitleCase()
2021-03-11 21:18:48,104 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e3fdf4d]]
2021-03-11 21:18:48,104 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:18:48,234 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:48,238 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e3fdf4d]
2021-03-11 21:18:48,238 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(124548491).isHighSurrogate()
2021-03-11 21:18:48,238 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b8a315c]]
2021-03-11 21:18:48,238 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b8a315c]
2021-03-11 21:18:48,239 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).none()
2021-03-11 21:18:48,239 [main:113] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f42ba60]]
2021-03-11 21:18:48,239 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f42ba60]
2021-03-11 21:18:48,239 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).matches(test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:18:48,239 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c117f4f]]
2021-03-11 21:18:48,239 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:18:48,367 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:48,370 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c117f4f]
2021-03-11 21:18:48,370 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(1129845643).isSurrogate()
2021-03-11 21:18:48,371 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3aab0a10]]
2021-03-11 21:18:48,371 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:18:48,502 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:48,636 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:48,639 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3aab0a10]
2021-03-11 21:18:48,639 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(-1491556377, 638346338).isBlank()
2021-03-11 21:18:48,639 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@672d969c]]
2021-03-11 21:18:48,639 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:18:48,770 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:48,773 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@672d969c]
2021-03-11 21:18:48,773 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(207140955).isISOControl()
2021-03-11 21:18:48,773 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@742e80b6]]
2021-03-11 21:18:48,773 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:18:48,773 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@742e80b6]
2021-03-11 21:18:48,924 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).equals(null)
2021-03-11 21:18:48,924 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ae52880]]
2021-03-11 21:18:48,924 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:18:49,043 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:49,165 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:49,168 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ae52880]
2021-03-11 21:18:49,168 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(-1950838302, 837312265).any()
2021-03-11 21:18:49,169 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3053cc04]]
2021-03-11 21:18:49,169 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:18:49,290 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:49,293 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3053cc04]
2021-03-11 21:18:49,293 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(1682507085).isLowerCase()
2021-03-11 21:18:49,293 [main:114] - replacement of false of type Boolean is (test<Sequence<*>>(emptySequence<Any?>())).none()
2021-03-11 21:18:49,420 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:18:49,421 [main:66] - Compilation checking started
2021-03-11 21:18:49,983 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:18:49,987 [main:107] - replacing ({
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }, Unit?)
2021-03-11 21:18:49,987 [main:50] - replacing {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    } Unit?
2021-03-11 21:18:49,987 [main:54] - Getting value of type Unit?
2021-03-11 21:18:50,127 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 21:18:50,258 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:18:50,262 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:18:50,675 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 21:18:50,678 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-11 21:18:50,681 [main:302] - generating value of type = Any false depth = 4
2021-03-11 21:18:50,682 [main:95] - GENERATED = check(false, { "uauef"})
2021-03-11 21:18:50,682 [main:58] - GENERATED VALUE OF TYPE Unit? = check(false, { "uauef"})
2021-03-11 21:18:50,682 [main:61] - GENERATED IS CALL =true
2021-03-11 21:18:51,140 [main:67] - randomType = Map<Kla4<Kla6>, Int>
2021-03-11 21:18:51,142 [main:106] - GETTING Unit? from String
2021-03-11 21:18:51,159 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144d6b6]]
2021-03-11 21:18:51,159 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144d6b6]
2021-03-11 21:18:51,283 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 21:18:51,286 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:18:51,443 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 21:18:51,448 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 21:18:51,875 [main:302] - generating value of type = Int true depth = 4
2021-03-11 21:18:51,878 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 21:18:51,882 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 21:18:52,013 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 21:18:52,017 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 21:18:52,294 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-11 21:18:52,297 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 21:18:52,426 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:18:52,431 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:18:52,701 [main:302] - generating value of type = Any false depth = 12
2021-03-11 21:18:52,702 [main:95] - GENERATED = println("hctqy")
2021-03-11 21:18:52,702 [main:95] - GENERATED = contract({ println("hctqy")})
2021-03-11 21:18:52,702 [main:95] - GENERATED = repeat(1669544732, {a: Int -> contract({ println("hctqy")})})
2021-03-11 21:18:52,702 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>()))?.forEachIndexed({a: Int, b: Char -> repeat(1669544732, {a: Int -> contract({ println("hctqy")})})})
2021-03-11 21:18:52,703 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144d6b6]]
2021-03-11 21:18:52,703 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:18:52,824 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:52,949 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:52,953 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144d6b6]
2021-03-11 21:18:53,075 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 21:18:53,078 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:18:53,084 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(1866761620, -616448371).forEachIndexed({a: Int, b: Char -> println()})
2021-03-11 21:18:53,084 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bc446be]]
2021-03-11 21:18:53,084 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bc446be]
2021-03-11 21:18:53,206 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 21:18:53,209 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:18:53,337 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:18:53,341 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:18:53,616 [main:302] - generating value of type = Any false depth = 4
2021-03-11 21:18:53,616 [main:95] - GENERATED = println("vjbaq")
2021-03-11 21:18:53,617 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>()))?.forEach({a: Char -> println("vjbaq")})
2021-03-11 21:18:53,617 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bc446be]]
2021-03-11 21:18:53,617 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:18:53,741 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:53,896 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:53,900 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bc446be]
2021-03-11 21:18:54,021 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 21:18:54,024 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:18:54,151 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 21:18:54,155 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 21:18:54,423 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 21:18:54,426 [main:95] - GENERATED = check(false)
2021-03-11 21:18:54,426 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(581733901, 821270147).forEach({a: Char -> check(false)})
2021-03-11 21:18:54,426 [main:114] - replacement of {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    } of type Unit? is (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(1866761620, -616448371).forEachIndexed({a: Int, b: Char -> println()})
2021-03-11 21:18:54,546 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:18:54,546 [main:66] - Compilation checking started
2021-03-11 21:18:54,553 [main:71] - Wrong syntax or breaks conditions
2021-03-11 21:18:54,553 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus("suspendLambdaAssertionsDisabled", false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(1866761620, -616448371).forEachIndexed({a: Int, b: Char -> println()})
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:18:54,556 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 21:18:54,557 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 21:18:54,557 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 21:18:54,679 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 21:18:54,684 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 21:18:54,832 [main:67] - randomType = String?
2021-03-11 21:18:54,952 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:18:54,976 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 21:18:54,992 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 21:18:54,993 [main:107] - replacing ("suspendLambdaAssertionsDisabled", String)
2021-03-11 21:18:54,993 [main:50] - replacing "suspendLambdaAssertionsDisabled" String
2021-03-11 21:18:54,993 [main:54] - Getting value of type String
2021-03-11 21:18:55,113 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:18:55,116 [main:58] - GENERATED VALUE OF TYPE String = "efasm"
2021-03-11 21:18:55,116 [main:61] - GENERATED IS CALL =false
2021-03-11 21:18:55,402 [main:67] - randomType = ArrayList<UShort>
2021-03-11 21:18:55,525 [main:302] - generating value of type = ArrayList<UShort> false depth = 0
2021-03-11 21:18:55,652 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<UShort> = TODO()
2021-03-11 21:18:55,656 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<UShort> = TODO()
2021-03-11 21:18:55,790 [main:95] - GENERATED = arrayListOf<UShort>()
2021-03-11 21:18:55,914 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5343347b]
2021-03-11 21:18:55,915 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62590e21]
2021-03-11 21:18:55,915 [main:78] - Generated call from random type = (arrayListOf<UShort>()).toArray().contentDeepToString()
2021-03-11 21:18:55,915 [main:106] - GETTING String from String
2021-03-11 21:18:55,931 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35642396]]
2021-03-11 21:18:55,932 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35642396]
2021-03-11 21:18:56,053 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:56,056 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).dropLast(24199870)
2021-03-11 21:18:56,056 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ce95b9a]]
2021-03-11 21:18:56,056 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ce95b9a]
2021-03-11 21:18:56,177 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:18:56,333 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 21:18:56,337 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 21:18:56,609 [main:302] - generating value of type = String true depth = 3
2021-03-11 21:18:56,612 [main:95] - GENERATED = StringBuilder("bcwke")
2021-03-11 21:18:56,612 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).removeSurrounding(StringBuilder("bcwke"))
2021-03-11 21:18:56,612 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f6c1c44]]
2021-03-11 21:18:56,612 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f6c1c44]
2021-03-11 21:18:56,733 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:56,858 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:56,983 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:18:56,989 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).replaceRange(1361697795, -316537858, "rjofl")
2021-03-11 21:18:56,989 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cb0314f]]
2021-03-11 21:18:56,989 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cb0314f]
2021-03-11 21:18:56,989 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).uppercase()
2021-03-11 21:18:56,989 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f4c801f]]
2021-03-11 21:18:56,989 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f4c801f]
2021-03-11 21:18:57,111 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:18:57,114 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:18:57,117 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).takeWhile({a: Char -> false})
2021-03-11 21:18:57,117 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a8e3284]]
2021-03-11 21:18:57,118 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a8e3284]
2021-03-11 21:18:57,240 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:18:57,244 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).substringBeforeLast('࣫', test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:18:57,244 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d5062]]
2021-03-11 21:18:57,244 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d5062]
2021-03-11 21:18:57,366 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:57,369 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1234179957)
2021-03-11 21:18:57,370 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6289cda]]
2021-03-11 21:18:57,370 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6289cda]
2021-03-11 21:18:57,370 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).capitalize()
2021-03-11 21:18:57,370 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6502ff2a]]
2021-03-11 21:18:57,370 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:18:57,491 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:57,494 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6502ff2a]
2021-03-11 21:18:57,494 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(-28706464).plus(test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:18:57,494 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7745d391]]
2021-03-11 21:18:57,495 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7745d391]
2021-03-11 21:18:57,616 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:18:57,619 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).replaceBefore('缂', test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:18:57,619 [main:114] - replacement of "suspendLambdaAssertionsDisabled" of type String is test<Sequence<*>>(emptySequence<Any?>())
2021-03-11 21:18:57,740 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(CALL_EXPRESSION)
2021-03-11 21:18:57,740 [main:66] - Compilation checking started
2021-03-11 21:18:58,306 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:18:58,308 [main:107] - replacing (true, Boolean)
2021-03-11 21:18:58,309 [main:50] - replacing true Boolean
2021-03-11 21:18:58,309 [main:54] - Getting value of type Boolean
2021-03-11 21:18:58,438 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:18:58,442 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 21:18:58,442 [main:61] - GENERATED IS CALL =false
2021-03-11 21:18:58,448 [main:67] - randomType = Int
2021-03-11 21:18:58,569 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:58,604 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e9ac53f]
2021-03-11 21:18:58,725 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:18:58,728 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@41a75e92]
2021-03-11 21:18:58,851 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:18:58,851 [main:78] - Generated call from random type = (872751356).rangeTo(58).equals("tvfbi")
2021-03-11 21:18:58,852 [main:106] - GETTING Boolean from String
2021-03-11 21:18:58,869 [main:113] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f42ba60]]
2021-03-11 21:18:58,870 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f42ba60]
2021-03-11 21:18:58,870 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).matches(test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:18:58,870 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49881b6a]]
2021-03-11 21:18:58,870 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49881b6a]
2021-03-11 21:18:59,013 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:18:59,017 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).startsWith(test<Sequence<*>>(emptySequence<Any?>()), false)
2021-03-11 21:18:59,017 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53eda1ba]]
2021-03-11 21:18:59,017 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53eda1ba]
2021-03-11 21:18:59,140 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:59,143 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).hasSurrogatePairAt(-810453382)
2021-03-11 21:18:59,144 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbf9505]]
2021-03-11 21:18:59,144 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:18:59,265 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:59,390 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:59,394 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbf9505]
2021-03-11 21:18:59,516 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:18:59,519 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:18:59,522 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(-114265893, -830601149).all({a: Char -> true})
2021-03-11 21:18:59,522 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c117f4f]]
2021-03-11 21:18:59,522 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:18:59,645 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:18:59,649 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c117f4f]
2021-03-11 21:18:59,649 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(-1709034722).isSurrogate()
2021-03-11 21:18:59,649 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1cebd5fd], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@195f7478]]
2021-03-11 21:18:59,649 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1cebd5fd]
2021-03-11 21:18:59,771 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:18:59,771 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@195f7478]
2021-03-11 21:18:59,893 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:18:59,896 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).equals("pmozu").or(true)
2021-03-11 21:18:59,897 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c2e8d5f]]
2021-03-11 21:18:59,897 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:19:00,019 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:19:00,023 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c2e8d5f]
2021-03-11 21:19:00,023 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).get(61547110).isTitleCase()
2021-03-11 21:19:00,023 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1cebd5fd], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2e220c0c]]
2021-03-11 21:19:00,023 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1cebd5fd]
2021-03-11 21:19:00,145 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:19:00,145 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2e220c0c]
2021-03-11 21:19:00,266 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:19:00,270 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).equals("rhkcu").and(true)
2021-03-11 21:19:00,270 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21bfe604]]
2021-03-11 21:19:00,270 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:19:00,391 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:19:00,516 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:19:00,519 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21bfe604]
2021-03-11 21:19:00,520 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(1730870785, 747349724).isNotBlank()
2021-03-11 21:19:00,520 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@742e80b6]]
2021-03-11 21:19:00,520 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:19:00,644 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:19:00,648 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@742e80b6]
2021-03-11 21:19:00,778 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:19:00,779 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).compareTo("tdqjy").equals("beywi")
2021-03-11 21:19:00,779 [main:114] - replacement of true of type Boolean is (test<Sequence<*>>(emptySequence<Any?>())).matches(test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:19:00,902 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:19:00,902 [main:66] - Compilation checking started
2021-03-11 21:19:01,301 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = (test<Sequence<*>>(emptySequence<Any?>())).matches(test<Sequence<*>>(emptySequence<Any?>()))) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:01,303 [main:107] - replacing (prope3, Continuation<*>)
2021-03-11 21:19:01,304 [main:50] - replacing prope3 Continuation<*>
2021-03-11 21:19:01,304 [main:54] - Getting value of type Continuation<*>
2021-03-11 21:19:01,431 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 21:19:01,559 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 21:19:01,564 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 21:19:02,018 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 21:19:02,144 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:19:02,148 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:19:02,425 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 21:19:02,557 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:19:02,561 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:19:02,993 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 21:19:03,126 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:19:03,130 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:19:03,559 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-11 21:19:03,694 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:19:03,698 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:19:04,124 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:19:04,124 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:19:04,124 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:19:04,124 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:19:04,124 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 21:19:04,124 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 21:19:04,456 [main:67] - randomType = Collection<Kla2?>
2021-03-11 21:19:04,457 [main:106] - GETTING Continuation<*> from String
2021-03-11 21:19:04,483 [main:111] - Cant find and generate replacement for prope3 type Continuation<*>
2021-03-11 21:19:04,483 [main:107] - replacing (prope4, Result<Ty0>)
2021-03-11 21:19:04,483 [main:50] - replacing prope4 Result<Ty0>
2021-03-11 21:19:04,484 [main:54] - Getting value of type Result<Ty0>
2021-03-11 21:19:04,608 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 21:19:04,739 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 21:19:04,743 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 21:19:05,020 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 21:19:05,020 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 21:19:06,379 [main:67] - randomType = Function2<Kla6, Function1<ArrayDeque<Kla4<UByte?>?>, Double>, Set<Kla6>>
2021-03-11 21:19:06,380 [main:106] - GETTING Result<Ty0> from String
2021-03-11 21:19:06,400 [main:111] - Cant find and generate replacement for prope4 type Result<Ty0>
2021-03-11 21:19:06,400 [main:107] - replacing (getOrThrow(), Any?)
2021-03-11 21:19:06,400 [main:50] - replacing getOrThrow() Any?
2021-03-11 21:19:06,400 [main:54] - Getting value of type Any?
2021-03-11 21:19:06,523 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:19:06,523 [main:58] - GENERATED VALUE OF TYPE Any? = "pyant"
2021-03-11 21:19:06,523 [main:61] - GENERATED IS CALL =false
2021-03-11 21:19:07,126 [main:67] - randomType = HashMap<ArrayList<Kla3?>, Kla1>
2021-03-11 21:19:07,286 [main:302] - generating value of type = HashMap<ArrayList<Kla3?>, Kla1> false depth = 0
2021-03-11 21:19:07,419 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<ArrayList<Kla3?>, Kla1> = TODO()
2021-03-11 21:19:07,424 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<ArrayList<Kla3?>, Kla1> = TODO()
2021-03-11 21:19:07,553 [main:95] - GENERATED = hashMapOf<ArrayList<Kla3?>, Kla1>()
2021-03-11 21:19:07,680 [main:106] - GETTING Any? from String
2021-03-11 21:19:07,698 [main:114] - replacement of getOrThrow() of type Any? is "pyant"
2021-03-11 21:19:07,819 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 21:19:07,819 [main:66] - Compilation checking started
2021-03-11 21:19:08,202 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null})."pyant"
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:08,205 [main:107] - replacing (prope3 !is CoroutineStackFrame, Boolean)
2021-03-11 21:19:08,205 [main:50] - replacing prope3 !is CoroutineStackFrame Boolean
2021-03-11 21:19:08,205 [main:54] - Getting value of type Boolean
2021-03-11 21:19:08,331 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:19:08,334 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 21:19:08,334 [main:61] - GENERATED IS CALL =false
2021-03-11 21:19:09,065 [main:67] - randomType = HashSet<Function1<Int, HashSet<UShort?>>>
2021-03-11 21:19:09,188 [main:302] - generating value of type = HashSet<Function1<Int, HashSet<UShort?>>> false depth = 0
2021-03-11 21:19:09,317 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Function1<Int, HashSet<UShort?>>): HashSet<Function1<Int, HashSet<UShort?>>> = TODO()
2021-03-11 21:19:09,321 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Function1<Int, HashSet<UShort?>>): HashSet<Function1<Int, HashSet<UShort?>>> = TODO()
2021-03-11 21:19:09,448 [main:302] - generating value of type = Function1<Int, HashSet<UShort?>> false depth = 3
2021-03-11 21:19:09,452 [main:302] - generating value of type = HashSet<UShort?> false depth = 4
2021-03-11 21:19:09,580 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<UShort?> = TODO()
2021-03-11 21:19:09,584 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<UShort?> = TODO()
2021-03-11 21:19:09,714 [main:95] - GENERATED = linkedSetOf<UShort?>()
2021-03-11 21:19:09,714 [main:95] - GENERATED = linkedSetOf<Function1<Int, HashSet<UShort?>>>({a: Int -> linkedSetOf<UShort?>()})
2021-03-11 21:19:09,882 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@c7784e4]
2021-03-11 21:19:09,882 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5fc38804]
2021-03-11 21:19:09,882 [main:78] - Generated call from random type = (linkedSetOf<Function1<Int, HashSet<UShort?>>>({a: Int -> linkedSetOf<UShort?>()})).toArray().any()
2021-03-11 21:19:09,883 [main:114] - replacement of prope3 !is CoroutineStackFrame of type Boolean is (linkedSetOf<Function1<Int, HashSet<UShort?>>>({a: Int -> linkedSetOf<UShort?>()})).toArray().any()
2021-03-11 21:19:10,006 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:19:10,007 [main:66] - Compilation checking started
2021-03-11 21:19:10,558 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if ((linkedSetOf<Function1<Int, HashSet<UShort?>>>({a: Int -> linkedSetOf<UShort?>()})).toArray().any()) error((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:10,562 [main:107] - replacing (Kla2, Kla8)
2021-03-11 21:19:10,562 [main:50] - replacing Kla2 Kla8
2021-03-11 21:19:10,562 [main:54] - Getting value of type Kla8
2021-03-11 21:19:10,735 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 21:19:10,739 [main:112] - generating klass Kla8 text = companion object Kla8 : Kla2()
2021-03-11 21:19:10,739 [main:58] - GENERATED VALUE OF TYPE Kla8 = 
2021-03-11 21:19:11,194 [main:67] - randomType = Set<UByte?>
2021-03-11 21:19:11,195 [main:106] - GETTING Kla8 from String
2021-03-11 21:19:11,219 [main:111] - Cant find and generate replacement for Kla2 type Kla8
2021-03-11 21:19:11,219 [main:107] - replacing ((test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame", String)
2021-03-11 21:19:11,219 [main:50] - replacing (test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame" String
2021-03-11 21:19:11,219 [main:54] - Getting value of type String
2021-03-11 21:19:11,346 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:19:11,350 [main:58] - GENERATED VALUE OF TYPE String = "tydtu"
2021-03-11 21:19:11,350 [main:61] - GENERATED IS CALL =false
2021-03-11 21:19:11,362 [main:67] - randomType = Kla6
2021-03-11 21:19:11,488 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 21:19:11,491 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 21:19:11,501 [main:106] - GETTING String from String
2021-03-11 21:19:11,517 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@567d021c]]
2021-03-11 21:19:11,517 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@567d021c]
2021-03-11 21:19:11,518 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).concat(test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:19:11,518 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e0944ff]]
2021-03-11 21:19:11,518 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:19:11,643 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:19:11,772 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:19:11,775 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e0944ff]
2021-03-11 21:19:11,908 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:19:12,040 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 21:19:12,045 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 21:19:12,321 [main:302] - generating value of type = Int true depth = 3
2021-03-11 21:19:12,324 [main:95] - GENERATED = StringBuilder(1577683033)
2021-03-11 21:19:12,448 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:19:12,451 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).subSequence(-1213515629, -659478702).commonPrefixWith(StringBuilder(1577683033), false)
2021-03-11 21:19:12,451 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61da5693]]
2021-03-11 21:19:12,451 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61da5693]
2021-03-11 21:19:12,451 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).reversed()
2021-03-11 21:19:12,451 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77d79b1a]]
2021-03-11 21:19:12,451 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77d79b1a]
2021-03-11 21:19:12,575 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 21:19:12,578 [main:302] - generating value of type = Char true depth = 1
2021-03-11 21:19:12,581 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).replaceFirstChar({a: Char -> '뵞'})
2021-03-11 21:19:12,581 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45e22a0b]]
2021-03-11 21:19:12,581 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45e22a0b]
2021-03-11 21:19:12,704 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:19:12,707 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).take(-1336665952)
2021-03-11 21:19:12,707 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33a5afe8]]
2021-03-11 21:19:12,708 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33a5afe8]
2021-03-11 21:19:12,840 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:19:12,986 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:19:12,989 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).removeRange(-217797164, 1649609300)
2021-03-11 21:19:12,989 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@490e462b]]
2021-03-11 21:19:12,989 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@490e462b]
2021-03-11 21:19:12,990 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).replaceIndent(test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:19:12,990 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@360ff104]]
2021-03-11 21:19:12,990 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@360ff104]
2021-03-11 21:19:13,130 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:19:13,134 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).substringAfterLast('袠', test<Sequence<*>>(emptySequence<Any?>()))
2021-03-11 21:19:13,135 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12972847]]
2021-03-11 21:19:13,135 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12972847]
2021-03-11 21:19:13,307 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:19:13,311 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).substring(893588392)
2021-03-11 21:19:13,311 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bac045f]]
2021-03-11 21:19:13,311 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bac045f]
2021-03-11 21:19:13,311 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).trim()
2021-03-11 21:19:13,311 [main:114] - replacement of (test<Sequence<*>>(emptySequence<Any?>())).length.toString(-1491584692) + " is not subtype of CoroutineStackFrame" of type String is "tydtu"
2021-03-11 21:19:13,437 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 21:19:13,437 [main:66] - Compilation checking started
2021-03-11 21:19:14,066 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:14,068 [main:107] - replacing (Kla6(), Kla6)
2021-03-11 21:19:14,068 [main:50] - replacing Kla6() Kla6
2021-03-11 21:19:14,068 [main:54] - Getting value of type Kla6
2021-03-11 21:19:14,190 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 21:19:14,193 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 21:19:14,193 [main:58] - GENERATED VALUE OF TYPE Kla6 = Kla6()
2021-03-11 21:19:14,193 [main:61] - GENERATED IS CALL =true
2021-03-11 21:19:14,205 [main:67] - randomType = Kla2
2021-03-11 21:19:14,326 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 21:19:14,329 [main:112] - generating klass Kla2 text = open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}
2021-03-11 21:19:14,450 [main:194] - Type params = []
2021-03-11 21:19:14,572 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 21:19:14,699 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:19:14,703 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:19:14,983 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 21:19:15,116 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:19:15,120 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:19:15,546 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:19:15,546 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:19:15,566 [main:106] - GETTING Kla6 from String
2021-03-11 21:19:15,595 [main:114] - replacement of Kla6() of type Kla6 is Kla6()
2021-03-11 21:19:15,723 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 21:19:15,726 [main:107] - replacing (!(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true), Boolean)
2021-03-11 21:19:15,726 [main:50] - replacing !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true) Boolean
2021-03-11 21:19:15,726 [main:54] - Getting value of type Boolean
2021-03-11 21:19:15,852 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:19:15,855 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 21:19:15,856 [main:61] - GENERATED IS CALL =false
2021-03-11 21:19:16,017 [main:67] - randomType = Char?
2021-03-11 21:19:16,141 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:19:16,174 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Char defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@77045c4]
2021-03-11 21:19:16,174 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c117f4f]
2021-03-11 21:19:16,174 [main:78] - Generated call from random type = ('')?.dec().isSurrogate()
2021-03-11 21:19:16,174 [main:114] - replacement of !(test<Sequence<*>>(emptySequence<Any?>())).equals("veoxw").and(true) of type Boolean is ('')?.dec().isSurrogate()
2021-03-11 21:19:16,297 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:19:16,298 [main:66] - Compilation checking started
2021-03-11 21:19:16,890 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:16,892 [main:107] - replacing (this, Kla3)
2021-03-11 21:19:16,892 [main:50] - replacing this Kla3
2021-03-11 21:19:16,892 [main:54] - Getting value of type Kla3
2021-03-11 21:19:17,018 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 21:19:17,022 [main:112] - generating klass Kla3 text = class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-11 21:19:17,022 [main:58] - GENERATED VALUE OF TYPE Kla3 = Kla3()
2021-03-11 21:19:17,022 [main:61] - GENERATED IS CALL =true
2021-03-11 21:19:17,165 [main:67] - randomType = ULong
2021-03-11 21:19:17,287 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 21:19:17,329 [main:106] - GETTING Kla3 from String
2021-03-11 21:19:17,349 [main:114] - replacement of this of type Kla3 is Kla3()
2021-03-11 21:19:17,475 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 21:19:17,476 [main:66] - Compilation checking started
2021-03-11 21:19:18,052 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:18,055 [main:107] - replacing ({
            prope1.prope7 = true
        }, Function0<Unit>)
2021-03-11 21:19:18,055 [main:50] - replacing {
            prope1.prope7 = true
        } Function0<Unit>
2021-03-11 21:19:18,055 [main:54] - Getting value of type Function0<Unit>
2021-03-11 21:19:18,186 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 21:19:18,189 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:19:18,315 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 21:19:18,319 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 21:19:18,726 [main:302] - generating value of type = Int true depth = 4
2021-03-11 21:19:18,729 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 21:19:18,732 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 21:19:18,858 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 21:19:18,862 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 21:19:19,127 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 21:19:19,131 [main:95] - GENERATED = require(false)
2021-03-11 21:19:19,131 [main:95] - GENERATED = repeat(667998297, {a: Int -> require(false)})
2021-03-11 21:19:19,131 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(667998297, {a: Int -> require(false)})}
2021-03-11 21:19:19,131 [main:61] - GENERATED IS CALL =false
2021-03-11 21:19:19,274 [main:67] - randomType = Kla7
2021-03-11 21:19:19,394 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-11 21:19:19,397 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 21:19:19,416 [main:106] - GETTING Function0<Unit> from String
2021-03-11 21:19:19,433 [main:114] - replacement of {
            prope1.prope7 = true
        } of type Function0<Unit> is { repeat(667998297, {a: Int -> require(false)})}
2021-03-11 21:19:19,577 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 21:19:19,577 [main:66] - Compilation checking started
2021-03-11 21:19:20,127 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = 0
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = { repeat(667998297, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:20,129 [main:107] - replacing (0, Int)
2021-03-11 21:19:20,129 [main:50] - replacing 0 Int
2021-03-11 21:19:20,129 [main:54] - Getting value of type Int
2021-03-11 21:19:20,251 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:19:20,254 [main:58] - GENERATED VALUE OF TYPE Int = 1432132426
2021-03-11 21:19:20,254 [main:61] - GENERATED IS CALL =false
2021-03-11 21:19:20,399 [main:67] - randomType = Kla7
2021-03-11 21:19:20,519 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-11 21:19:20,522 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = { repeat(667998297, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 21:19:20,541 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla7[DeserializedSimpleFunctionDescriptor@418be946]
2021-03-11 21:19:20,662 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:19:20,662 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77e1f2a2]
2021-03-11 21:19:20,783 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:19:20,786 [main:78] - Generated call from random type = (Kla7).equals("pwxkp").compareTo(false)
2021-03-11 21:19:20,787 [main:106] - GETTING Int from String
2021-03-11 21:19:20,807 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2d7a1ef6]]
2021-03-11 21:19:20,807 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.absoluteValue
2021-03-11 21:19:20,808 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2c65a61e]]
2021-03-11 21:19:20,808 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:19:20,928 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:19:20,931 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2c65a61e]
2021-03-11 21:19:20,931 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).compareTo("neiyo").takeHighestOneBit()
2021-03-11 21:19:20,931 [main:113] - Case = [public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18333a25]]
2021-03-11 21:19:20,931 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18333a25]
2021-03-11 21:19:21,051 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:19:21,054 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:19:21,058 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).indexOfFirst({a: Char -> false})
2021-03-11 21:19:21,058 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@69d5078d]]
2021-03-11 21:19:21,058 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@69d5078d]
2021-03-11 21:19:21,180 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:19:21,183 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.shr(1886528389)
2021-03-11 21:19:21,183 [main:113] - Case = [public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10b01c3e]]
2021-03-11 21:19:21,183 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10b01c3e]
2021-03-11 21:19:21,184 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).toInt()
2021-03-11 21:19:21,184 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4529cb82]]
2021-03-11 21:19:21,184 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4529cb82]
2021-03-11 21:19:21,184 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.countOneBits()
2021-03-11 21:19:21,184 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26ff428]]
2021-03-11 21:19:21,184 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:19:21,184 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26ff428]
2021-03-11 21:19:21,184 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
2021-03-11 21:19:21,184 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5c706708]]
2021-03-11 21:19:21,184 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5c706708]
2021-03-11 21:19:21,307 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:19:21,311 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.times(-126)
2021-03-11 21:19:21,311 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26ff428]]
2021-03-11 21:19:21,311 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26ff428]
2021-03-11 21:19:21,311 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.toInt()
2021-03-11 21:19:21,311 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@24d2587e]]
2021-03-11 21:19:21,311 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:19:21,311 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@24d2587e]
2021-03-11 21:19:21,431 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:19:21,435 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).coerceAtMost(-1995883621)
2021-03-11 21:19:21,435 [main:114] - replacement of 0 of type Int is (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
2021-03-11 21:19:21,554 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:19:21,554 [main:66] - Compilation checking started
2021-03-11 21:19:22,137 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = { repeat(667998297, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:22,139 [main:107] - replacing (prope1, Kla6)
2021-03-11 21:19:22,139 [main:50] - replacing prope1 Kla6
2021-03-11 21:19:22,139 [main:54] - Getting value of type Kla6
2021-03-11 21:19:22,291 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 21:19:22,294 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 21:19:22,294 [main:58] - GENERATED VALUE OF TYPE Kla6 = Kla6()
2021-03-11 21:19:22,294 [main:61] - GENERATED IS CALL =true
2021-03-11 21:19:22,604 [main:67] - randomType = UByte?
2021-03-11 21:19:22,765 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 21:19:22,813 [main:106] - GETTING Kla6 from String
2021-03-11 21:19:22,832 [main:114] - replacement of prope1 of type Kla6 is Kla6()
2021-03-11 21:19:22,953 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 21:19:22,953 [main:66] - Compilation checking started
2021-03-11 21:19:23,512 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if (prope7) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:23,514 [main:107] - replacing (prope4, Result<Ty0>)
2021-03-11 21:19:23,514 [main:50] - replacing prope4 Result<Ty0>
2021-03-11 21:19:23,514 [main:54] - Getting value of type Result<Ty0>
2021-03-11 21:19:23,637 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 21:19:23,766 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 21:19:23,770 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 21:19:24,045 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 21:19:24,046 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 21:19:24,332 [main:67] - randomType = Byte?
2021-03-11 21:19:24,454 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:19:24,491 [main:106] - GETTING Result<Ty0> from String
2021-03-11 21:19:24,509 [main:111] - Cant find and generate replacement for prope4 type Result<Ty0>
2021-03-11 21:19:24,509 [main:107] - replacing (prope7, Boolean)
2021-03-11 21:19:24,509 [main:50] - replacing prope7 Boolean
2021-03-11 21:19:24,509 [main:54] - Getting value of type Boolean
2021-03-11 21:19:24,631 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:19:24,634 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 21:19:24,634 [main:61] - GENERATED IS CALL =false
2021-03-11 21:19:24,937 [main:67] - randomType = Pair<Long, Kla2>
2021-03-11 21:19:25,061 [main:302] - generating value of type = Pair<Long, Kla2> false depth = 0
2021-03-11 21:19:25,191 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Long, second: Kla2): Pair<Long, Kla2> = TODO()
2021-03-11 21:19:25,195 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Long, second: Kla2): Pair<Long, Kla2> = TODO()
2021-03-11 21:19:25,327 [main:302] - generating value of type = Long true depth = 3
2021-03-11 21:19:25,331 [main:302] - generating value of type = Kla2 false depth = 3
2021-03-11 21:19:25,334 [main:112] - generating klass Kla2 text = open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}
2021-03-11 21:19:25,456 [main:194] - Type params = []
2021-03-11 21:19:25,577 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-11 21:19:25,738 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:19:25,742 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:19:26,020 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-11 21:19:26,151 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:19:26,155 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:19:26,577 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:19:26,577 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:19:26,577 [main:95] - GENERATED = Pair<Long, Kla2>(7875962512436594265, Kla2())
2021-03-11 21:19:26,589 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor@1159df2e]
2021-03-11 21:19:26,710 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:19:26,710 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2e220c0c]
2021-03-11 21:19:26,831 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:19:26,834 [main:78] - Generated call from random type = (Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(true)
2021-03-11 21:19:26,834 [main:114] - replacement of prope7 of type Boolean is (Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(true)
2021-03-11 21:19:26,956 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:19:26,957 [main:66] - Compilation checking started
2021-03-11 21:19:27,507 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(true)) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:27,509 [main:107] - replacing (prope3, Continuation<*>)
2021-03-11 21:19:27,509 [main:50] - replacing prope3 Continuation<*>
2021-03-11 21:19:27,509 [main:54] - Getting value of type Continuation<*>
2021-03-11 21:19:27,649 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 21:19:27,791 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 21:19:27,796 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 21:19:28,260 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 21:19:28,404 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:19:28,410 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:19:28,711 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 21:19:28,892 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:19:28,896 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:19:29,326 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 21:19:29,459 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:19:29,464 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:19:29,897 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 12
2021-03-11 21:19:30,032 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 21:19:30,036 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 21:19:30,470 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 21:19:30,470 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 21:19:30,471 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:19:30,471 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:19:30,471 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 21:19:30,471 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 21:19:30,759 [main:67] - randomType = UShort?
2021-03-11 21:19:30,882 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 21:19:30,916 [main:106] - GETTING Continuation<*> from String
2021-03-11 21:19:30,932 [main:111] - Cant find and generate replacement for prope3 type Continuation<*>
2021-03-11 21:19:30,932 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-11 21:19:30,933 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-11 21:19:30,933 [main:54] - Getting value of type String
2021-03-11 21:19:31,058 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:19:31,061 [main:58] - GENERATED VALUE OF TYPE String = "rifzx"
2021-03-11 21:19:31,061 [main:61] - GENERATED IS CALL =false
2021-03-11 21:19:31,348 [main:67] - randomType = LinkedHashSet<ULong>
2021-03-11 21:19:31,469 [main:302] - generating value of type = LinkedHashSet<ULong> false depth = 0
2021-03-11 21:19:31,598 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: ULong): LkedHashSet<ULong> = TODO()
2021-03-11 21:19:31,602 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: ULong): LkedHashSet<ULong> = TODO()
2021-03-11 21:19:31,732 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 21:19:31,775 [main:95] - GENERATED = linkedSetOf<ULong>(8426196768384789237.toULong())
2021-03-11 21:19:31,898 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2556003d]
2021-03-11 21:19:32,020 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:19:32,148 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:19:32,277 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:19:32,407 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:19:32,533 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:19:32,662 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 21:19:32,666 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 21:19:32,672 [main:78] - Generated call from random type = (linkedSetOf<ULong>(8426196768384789237.toULong())).joinToString("kqbkw", "vozzw", "rubtz", -838046701, StringBuilder(), {a: T -> "xwltx"})
2021-03-11 21:19:32,672 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is (linkedSetOf<ULong>(8426196768384789237.toULong())).joinToString("kqbkw", "vozzw", "rubtz", -838046701, StringBuilder(), {a: T -> "xwltx"})
2021-03-11 21:19:32,795 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:19:32,795 [main:66] - Compilation checking started
2021-03-11 21:19:33,202 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != i) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(true)) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error((linkedSetOf<ULong>(8426196768384789237.toULong())).joinToString("kqbkw", "vozzw", "rubtz", -838046701, StringBuilder(), {a: T -> "xwltx"}))
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:33,204 [main:107] - replacing (i, Int)
2021-03-11 21:19:33,205 [main:50] - replacing i Int
2021-03-11 21:19:33,205 [main:54] - Getting value of type Int
2021-03-11 21:19:33,336 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:19:33,339 [main:58] - GENERATED VALUE OF TYPE Int = -1608615999
2021-03-11 21:19:33,339 [main:61] - GENERATED IS CALL =false
2021-03-11 21:19:33,503 [main:67] - randomType = ArrayDeque<Kla0>
2021-03-11 21:19:33,631 [main:302] - generating value of type = ArrayDeque<Kla0> false depth = 0
2021-03-11 21:19:33,762 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Kla0> = TODO()
2021-03-11 21:19:33,766 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Kla0> = TODO()
2021-03-11 21:19:34,040 [main:302] - generating value of type = Int true depth = 3
2021-03-11 21:19:34,044 [main:95] - GENERATED = ArrayDeque<Kla0>(-664689926)
2021-03-11 21:19:34,169 [main:149] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<Kla0> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@6a1a8c1e]
2021-03-11 21:19:34,294 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:19:34,425 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:19:34,429 [main:78] - Generated call from random type = (ArrayDeque<Kla0>(-664689926)).subList(-2031388525, -1525842827).size
2021-03-11 21:19:34,430 [main:106] - GETTING Int from String
2021-03-11 21:19:34,451 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@393d5b3f]]
2021-03-11 21:19:34,452 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:19:34,574 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:19:34,578 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@393d5b3f]
2021-03-11 21:19:34,702 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:19:34,705 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).compareTo("ljrdg").rotateLeft(1237737052)
2021-03-11 21:19:34,706 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@639aa001]]
2021-03-11 21:19:34,706 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:19:34,706 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@639aa001]
2021-03-11 21:19:34,859 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:19:34,862 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(78)
2021-03-11 21:19:34,863 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c3d4bc1]]
2021-03-11 21:19:34,863 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c3d4bc1]
2021-03-11 21:19:34,863 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.dec()
2021-03-11 21:19:34,863 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7532c8a8]]
2021-03-11 21:19:34,863 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:19:34,987 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:19:34,990 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7532c8a8]
2021-03-11 21:19:35,112 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:19:35,115 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).compareTo("yvoil").xor(586740189)
2021-03-11 21:19:35,115 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@30e6a3f5]]
2021-03-11 21:19:35,115 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@30e6a3f5]
2021-03-11 21:19:35,116 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.takeLowestOneBit()
2021-03-11 21:19:35,116 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5c706708]]
2021-03-11 21:19:35,116 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:19:35,116 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5c706708]
2021-03-11 21:19:35,238 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:19:35,241 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).times(113)
2021-03-11 21:19:35,242 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@4c954ace], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26ff428]]
2021-03-11 21:19:35,242 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26ff428]
2021-03-11 21:19:35,242 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).length.toInt()
2021-03-11 21:19:35,242 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c6c0165]]
2021-03-11 21:19:35,242 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:19:35,242 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c6c0165]
2021-03-11 21:19:35,242 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).inv()
2021-03-11 21:19:35,242 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6a38c91e]]
2021-03-11 21:19:35,242 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3378af4e]
2021-03-11 21:19:35,242 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6a38c91e]
2021-03-11 21:19:35,364 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:19:35,368 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).coerceAtLeast(63318174)
2021-03-11 21:19:35,368 [main:113] - Case = [public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10b01c3e]]
2021-03-11 21:19:35,368 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10b01c3e]
2021-03-11 21:19:35,368 [main:117] - GENERATED CALL = (test<Sequence<*>>(emptySequence<Any?>())).toInt()
2021-03-11 21:19:35,368 [main:114] - replacement of i of type Int is (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(78)
2021-03-11 21:19:35,490 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:19:35,490 [main:66] - Compilation checking started
2021-03-11 21:19:36,075 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(78)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(true)) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:36,077 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 21:19:36,077 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 21:19:36,078 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 21:19:36,203 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 21:19:36,209 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 21:19:36,221 [main:67] - randomType = Kla5
2021-03-11 21:19:36,346 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 21:19:36,349 [main:112] - generating klass Kla5 text = class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}
2021-03-11 21:19:36,356 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 21:19:36,373 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 21:19:36,373 [main:107] - replacing (prope7, Boolean)
2021-03-11 21:19:36,373 [main:50] - replacing prope7 Boolean
2021-03-11 21:19:36,373 [main:54] - Getting value of type Boolean
2021-03-11 21:19:36,498 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:19:36,501 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 21:19:36,501 [main:61] - GENERATED IS CALL =false
2021-03-11 21:19:36,514 [main:67] - randomType = Kla0
2021-03-11 21:19:36,641 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 21:19:36,644 [main:112] - generating klass Kla0 text = class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}
2021-03-11 21:19:36,651 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@812730]
2021-03-11 21:19:36,792 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:19:36,792 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2e220c0c]
2021-03-11 21:19:36,915 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:19:36,919 [main:78] - Generated call from random type = (Kla0()).equals("agmin").and(true)
2021-03-11 21:19:36,919 [main:114] - replacement of prope7 of type Boolean is (Kla0()).equals("agmin").and(true)
2021-03-11 21:19:37,043 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:19:37,043 [main:66] - Compilation checking started
2021-03-11 21:19:37,463 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        (Kla0()).equals("agmin").and(true) = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(78)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(true)) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:37,465 [main:107] - replacing (prope3, SuspendFunction0<Unit>)
2021-03-11 21:19:37,466 [main:50] - replacing prope3 SuspendFunction0<Unit>
2021-03-11 21:19:37,466 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-11 21:19:37,600 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 21:19:37,604 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:19:37,737 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:19:37,742 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:19:38,058 [main:302] - generating value of type = Any false depth = 4
2021-03-11 21:19:38,058 [main:95] - GENERATED = println("zkjnr")
2021-03-11 21:19:38,058 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { println("zkjnr")}
2021-03-11 21:19:38,058 [main:61] - GENERATED IS CALL =false
2021-03-11 21:19:38,350 [main:67] - randomType = Byte?
2021-03-11 21:19:38,477 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 21:19:38,524 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 21:19:38,542 [main:114] - replacement of prope3 of type SuspendFunction0<Unit> is { println("zkjnr")}
2021-03-11 21:19:38,667 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 21:19:38,668 [main:66] - Compilation checking started
2021-03-11 21:19:39,102 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    { println("zkjnr")}.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(78)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(true)) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:39,104 [main:107] - replacing (Kla3().prope4, Any?)
2021-03-11 21:19:39,104 [main:50] - replacing Kla3().prope4 Any?
2021-03-11 21:19:39,104 [main:54] - Getting value of type Any?
2021-03-11 21:19:39,229 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:19:39,230 [main:58] - GENERATED VALUE OF TYPE Any? = "uzybz"
2021-03-11 21:19:39,230 [main:61] - GENERATED IS CALL =false
2021-03-11 21:19:39,236 [main:67] - randomType = String
2021-03-11 21:19:39,360 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:19:39,382 [main:106] - GETTING Any? from String
2021-03-11 21:19:39,399 [main:114] - replacement of Kla3().prope4 of type Any? is "uzybz"
2021-03-11 21:19:39,523 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 21:19:39,523 [main:66] - Compilation checking started
2021-03-11 21:19:39,926 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        "uzybz" = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(78)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(true)) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:39,929 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 21:19:39,929 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 21:19:39,929 [main:54] - Getting value of type Function0<Unit>
2021-03-11 21:19:40,053 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 21:19:40,056 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 21:19:40,186 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:19:40,190 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:19:40,463 [main:302] - generating value of type = Any false depth = 4
2021-03-11 21:19:40,463 [main:95] - GENERATED = println("tmbul")
2021-03-11 21:19:40,463 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("tmbul")}
2021-03-11 21:19:40,463 [main:61] - GENERATED IS CALL =false
2021-03-11 21:19:40,772 [main:67] - randomType = Kla4<Kla2?>
2021-03-11 21:19:40,897 [main:302] - generating value of type = Kla4<Kla2?> false depth = 0
2021-03-11 21:19:40,901 [main:112] - generating klass Kla4 text = abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 21:19:41,510 [main:302] - generating value of type = Kla7 false depth = 2
2021-03-11 21:19:41,513 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 21:19:41,528 [main:106] - GETTING Function0<Unit> from String
2021-03-11 21:19:41,546 [main:114] - replacement of prope8 of type Function0<Unit> is { println("tmbul")}
2021-03-11 21:19:41,671 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 21:19:41,671 [main:66] - Compilation checking started
2021-03-11 21:19:42,079 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        { println("tmbul")} = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(78)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(true)) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:42,218 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-11 21:19:42,342 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 21:19:42,343 [main:66] - Compilation checking started
2021-03-11 21:19:42,766 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(none(), { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(78)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(true)) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:42,766 [main:141] - TRYING TO REPLACE CONSTANT '봣'
2021-03-11 21:19:42,891 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 21:19:42,892 [main:66] - Compilation checking started
2021-03-11 21:19:43,335 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(78)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(true)) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter(get(508289827), "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:43,336 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-11 21:19:43,466 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 21:19:43,466 [main:66] - Compilation checking started
2021-03-11 21:19:43,852 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(-2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { isSurrogate()}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(78)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(true)) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:43,853 [main:141] - TRYING TO REPLACE CONSTANT 2070291854
2021-03-11 21:19:43,979 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 21:19:43,980 [main:66] - Compilation checking started
2021-03-11 21:19:44,592 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, -1163315228).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(78)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(true)) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:44,592 [main:141] - TRYING TO REPLACE CONSTANT 1163315228
2021-03-11 21:19:44,731 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:19:44,731 [main:66] - Compilation checking started
2021-03-11 21:19:45,317 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(78)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(true)) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:45,318 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-11 21:19:45,456 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 21:19:45,456 [main:66] - Compilation checking started
2021-03-11 21:19:45,857 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> true}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(isISOControl(), { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(78)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(true)) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:45,857 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-11 21:19:45,984 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 21:19:45,985 [main:66] - Compilation checking started
2021-03-11 21:19:46,555 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(78)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(true)) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:46,555 [main:141] - TRYING TO REPLACE CONSTANT 1135707467
2021-03-11 21:19:46,682 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-11 21:19:46,682 [main:66] - Compilation checking started
2021-03-11 21:19:47,229 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get(1763719165).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(78)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(true)) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:47,229 [main:141] - TRYING TO REPLACE CONSTANT null
2021-03-11 21:19:47,359 [main:33] - Trying to replace Element(NULL) on Element(NULL)
2021-03-11 21:19:47,359 [main:66] - Compilation checking started
2021-03-11 21:19:47,933 [main:141] - TRYING TO REPLACE CONSTANT 1763719165
2021-03-11 21:19:48,099 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:19:48,100 [main:66] - Compilation checking started
2021-03-11 21:19:48,684 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(416567855, {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(78)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(true)) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:48,685 [main:141] - TRYING TO REPLACE CONSTANT 416567855
2021-03-11 21:19:48,813 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:19:48,814 [main:66] - Compilation checking started
2021-03-11 21:19:49,375 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get(508289827).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(78)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(true)) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:49,375 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-11 21:19:49,516 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 21:19:49,516 [main:141] - TRYING TO REPLACE CONSTANT 508289827
2021-03-11 21:19:49,654 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:19:49,654 [main:66] - Compilation checking started
2021-03-11 21:19:50,240 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(78)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(true)) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:50,241 [main:141] - TRYING TO REPLACE CONSTANT ''
2021-03-11 21:19:50,378 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-11 21:19:50,378 [main:66] - Compilation checking started
2021-03-11 21:19:50,939 [main:141] - TRYING TO REPLACE CONSTANT 667998297
2021-03-11 21:19:51,072 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 21:19:51,073 [main:66] - Compilation checking started
2021-03-11 21:19:51,509 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(78)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(true)) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(length, {a: Int -> require(false)})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:51,510 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-11 21:19:51,639 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:19:51,639 [main:66] - Compilation checking started
2021-03-11 21:19:52,201 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(78)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(true)) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:52,202 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-11 21:19:52,333 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-11 21:19:52,333 [main:66] - Compilation checking started
2021-03-11 21:19:52,905 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(78)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:52,905 [main:141] - TRYING TO REPLACE CONSTANT 7875962512436594265
2021-03-11 21:19:53,038 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 21:19:53,038 [main:66] - Compilation checking started
2021-03-11 21:19:53,591 [main:141] - TRYING TO REPLACE CONSTANT 78
2021-03-11 21:19:53,721 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 21:19:53,722 [main:66] - Compilation checking started
2021-03-11 21:19:54,302 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:54,302 [main:41] - AFTER TRY 1 res = 
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 21:19:54,566 [main:112] - generating klass Kla0 text = class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}
2021-03-11 21:19:54,566 [main:112] - generating klass Kla1 text = class Kla1
2021-03-11 21:19:54,566 [main:112] - generating klass Kla2 text = open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}
2021-03-11 21:19:54,695 [main:194] - Type params = []
2021-03-11 21:19:54,823 [main:302] - generating value of type = CoroutineContext false depth = 1
2021-03-11 21:19:54,988 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:19:54,993 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:19:55,294 [main:302] - generating value of type = Key<*> false depth = 4
2021-03-11 21:19:55,439 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:19:55,444 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:19:55,923 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 7
2021-03-11 21:19:56,066 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 21:19:56,071 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 21:19:56,541 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 21:19:56,541 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:19:56,541 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:19:56,541 [main:112] - generating klass Kla3 text = class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-11 21:19:56,542 [main:112] - generating klass Kla4 text = abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 21:19:57,524 [main:302] - generating value of type = Kla7 false depth = 1
2021-03-11 21:19:57,528 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 21:19:57,529 [main:112] - generating klass Kla5 text = class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}
2021-03-11 21:19:57,529 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 21:19:57,529 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 21:19:57,529 [main:112] - generating klass null text = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}
2021-03-11 21:19:57,529 [main:112] - generating klass null text = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}
2021-03-11 21:19:57,530 [main:112] - generating klass Kla8 text = companion object Kla8 : Kla2()
2021-03-11 21:19:57,828 [main:43] - GENERATING CALL OF fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}
2021-03-11 21:19:57,838 [main:61] - WITHOUT TYPE PARAMS = fun <T : Sequence<*>> test(sequence: Sequence<*>): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}
2021-03-11 21:19:57,986 [main:302] - generating value of type = Sequence<*> false depth = 1
2021-03-11 21:19:58,137 [main:43] - GENERATING CALL OF fun <T> sequenceOf(elements: Any?): Sequence<*> = TODO()
2021-03-11 21:19:58,143 [main:61] - WITHOUT TYPE PARAMS = fun <T> sequenceOf(elements: Any?): Sequence<*> = TODO()
2021-03-11 21:19:58,337 [main:302] - generating value of type = Any false depth = 4
2021-03-11 21:19:58,337 [main:95] - GENERATED = sequenceOf<Any?>("cdrrl")
2021-03-11 21:19:58,337 [main:95] - GENERATED = test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))
2021-03-11 21:19:58,471 [main:43] - GENERATING CALL OF fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}
2021-03-11 21:19:58,475 [main:61] - WITHOUT TYPE PARAMS = fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}
2021-03-11 21:19:58,773 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 1
2021-03-11 21:19:58,778 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 21:19:58,919 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 21:19:58,924 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 21:19:59,224 [main:302] - generating value of type = Boolean true depth = 5
2021-03-11 21:19:59,228 [main:95] - GENERATED = check(true)
2021-03-11 21:19:59,228 [main:95] - GENERATED = fu1({ check(true)})
2021-03-11 21:19:59,363 [main:43] - GENERATING CALL OF fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}
2021-03-11 21:19:59,375 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu2(x: (String) -> Unit): Continuation<String> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}
2021-03-11 21:19:59,671 [main:302] - generating value of type = Function1<String, Unit> false depth = 1
2021-03-11 21:19:59,675 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 21:19:59,813 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:19:59,818 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 21:20:00,269 [main:302] - generating value of type = Boolean true depth = 5
2021-03-11 21:20:00,273 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-11 21:20:00,277 [main:302] - generating value of type = Any false depth = 6
2021-03-11 21:20:00,278 [main:95] - GENERATED = check(true, { "bzpad"})
2021-03-11 21:20:00,278 [main:95] - GENERATED = fu2<String>({a: String -> check(true, { "bzpad"})})
2021-03-11 21:20:00,411 [main:43] - GENERATING CALL OF fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}
2021-03-11 21:20:00,415 [main:61] - WITHOUT TYPE PARAMS = fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}
2021-03-11 21:20:00,711 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 1
2021-03-11 21:20:00,715 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 21:20:00,852 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 21:20:00,858 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 21:20:01,316 [main:302] - generating value of type = Int true depth = 5
2021-03-11 21:20:01,320 [main:302] - generating value of type = Function1<Int, Unit> false depth = 5
2021-03-11 21:20:01,324 [main:302] - generating value of type = Unit false depth = 6
2021-03-11 21:20:01,460 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:20:01,465 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:20:01,809 [main:302] - generating value of type = Any false depth = 9
2021-03-11 21:20:01,809 [main:95] - GENERATED = print("mjqhn")
2021-03-11 21:20:01,809 [main:95] - GENERATED = repeat(1333577160, {a: Int -> print("mjqhn")})
2021-03-11 21:20:01,809 [main:95] - GENERATED = fu3({a: Throwable -> repeat(1333577160, {a: Int -> print("mjqhn")})})
2021-03-11 21:20:01,970 [main:43] - Try №1
2021-03-11 21:20:04,761 [main:48] - Already checked
2021-03-11 21:20:04,885 [main:48] - Already checked
2021-03-11 21:20:05,034 [main:69] - Trying to insert infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) selector(iterator.next()) else null }
            }
        }
2021-03-11 21:20:05,252 [main:66] - Compilation checking started
2021-03-11 21:20:06,344 [main:103] - Trying to change 90 nodes
2021-03-11 21:20:06,345 [main:107] - replacing (iterator, Iterator<Ty2>)
2021-03-11 21:20:06,346 [main:50] - replacing iterator Iterator<Ty2>
2021-03-11 21:20:06,346 [main:54] - Getting value of type Iterator<Ty2>
2021-03-11 21:20:06,509 [main:302] - generating value of type = Iterator<Ty2> false depth = 0
2021-03-11 21:20:06,684 [main:43] - GENERATING CALL OF fun <T> iterator(block: suspend kotlin.sequences.SequenceScope<Ty2>.()->kotlin.Unit): Iterator<Ty2> = TODO()
2021-03-11 21:20:06,690 [main:61] - WITHOUT TYPE PARAMS = fun <T> iterator(block: suspend kotlin.sequences.SequenceScope<Ty2>.()->kotlin.Unit): Iterator<Ty2> = TODO()
2021-03-11 21:20:07,076 [main:385] - Cant generate call of fun <T> iterator(block: suspend kotlin.sequences.SequenceScope<Ty2>.()->kotlin.Unit): Iterator<Ty2> = TODO()
2021-03-11 21:20:07,076 [main:58] - GENERATED VALUE OF TYPE Iterator<Ty2> = 
2021-03-11 21:20:07,852 [main:67] - randomType = List<Kla10<UInt?>>
2021-03-11 21:20:07,914 [main:106] - GETTING Iterator<Ty2> from Any?
2021-03-11 21:20:07,923 [main:106] - GETTING Iterator<Ty2> from Continuation<Any?>
2021-03-11 21:20:07,936 [main:106] - GETTING Iterator<Ty2> from CoroutineContext
2021-03-11 21:20:07,946 [main:106] - GETTING Iterator<Ty2> from Continuation<String>
2021-03-11 21:20:07,957 [main:106] - GETTING Iterator<Ty2> from Boolean
2021-03-11 21:20:07,971 [main:106] - GETTING Iterator<Ty2> from CoroutineContext
2021-03-11 21:20:07,974 [main:106] - GETTING Iterator<Ty2> from Function0<Unit>
2021-03-11 21:20:07,987 [main:106] - GETTING Iterator<Ty2> from Kla0
2021-03-11 21:20:07,996 [main:106] - GETTING Iterator<Ty2> from CoroutineContext
2021-03-11 21:20:07,998 [main:106] - GETTING Iterator<Ty2> from EmptyCoroutineContext
2021-03-11 21:20:08,017 [main:106] - GETTING Iterator<Ty2> from String
2021-03-11 21:20:08,034 [main:111] - Cant find and generate replacement for iterator type Iterator<Ty2>
2021-03-11 21:20:08,034 [main:107] - replacing (next(), Ty2)
2021-03-11 21:20:08,035 [main:50] - replacing next() Ty2
2021-03-11 21:20:08,035 [main:54] - Getting value of type Ty2
2021-03-11 21:20:08,189 [main:302] - generating value of type = Ty2 false depth = 0
2021-03-11 21:20:08,196 [main:58] - GENERATED VALUE OF TYPE Ty2 = 
2021-03-11 21:20:08,402 [main:67] - randomType = HashSet<Kla3>
2021-03-11 21:20:08,560 [main:302] - generating value of type = HashSet<Kla3> false depth = 0
2021-03-11 21:20:08,724 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<Kla3> = TODO()
2021-03-11 21:20:08,733 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<Kla3> = TODO()
2021-03-11 21:20:08,902 [main:95] - GENERATED = linkedSetOf<Kla3>()
2021-03-11 21:20:09,074 [main:106] - GETTING Ty2 from Continuation<Any?>
2021-03-11 21:20:09,083 [main:106] - GETTING Ty2 from Continuation<String>
2021-03-11 21:20:09,090 [main:106] - GETTING Ty2 from Boolean
2021-03-11 21:20:09,099 [main:106] - GETTING Ty2 from Any?
2021-03-11 21:20:09,103 [main:106] - GETTING Ty2 from Function0<Unit>
2021-03-11 21:20:09,112 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-11 21:20:09,122 [main:106] - GETTING Ty2 from EmptyCoroutineContext
2021-03-11 21:20:09,140 [main:106] - GETTING Ty2 from Kla0
2021-03-11 21:20:09,145 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-11 21:20:09,146 [main:106] - GETTING Ty2 from String
2021-03-11 21:20:09,167 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-11 21:20:09,167 [main:111] - Cant find and generate replacement for next() type Ty2
2021-03-11 21:20:09,167 [main:107] - replacing (it % 2, Int)
2021-03-11 21:20:09,168 [main:50] - replacing it % 2 Int
2021-03-11 21:20:09,168 [main:54] - Getting value of type Int
2021-03-11 21:20:09,327 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:20:09,332 [main:58] - GENERATED VALUE OF TYPE Int = -963130614
2021-03-11 21:20:09,332 [main:61] - GENERATED IS CALL =false
2021-03-11 21:20:09,942 [main:67] - randomType = Array<UInt?>
2021-03-11 21:20:10,104 [main:302] - generating value of type = Array<UInt?> false depth = 0
2021-03-11 21:20:10,274 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->UInt?): Array<UInt?> = TODO()
2021-03-11 21:20:10,281 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->UInt?): Array<UInt?> = TODO()
2021-03-11 21:20:10,852 [main:302] - generating value of type = Int true depth = 3
2021-03-11 21:20:10,859 [main:302] - generating value of type = Function1<Int, UInt?> false depth = 3
2021-03-11 21:20:10,864 [main:302] - generating value of type = UInt true depth = 4
2021-03-11 21:20:10,870 [main:95] - GENERATED = Array<UInt?>(120831404, {a: Int -> 1148687688.toUInt()})
2021-03-11 21:20:10,885 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@979ca7c]
2021-03-11 21:20:10,885 [main:78] - Generated call from random type = (Array<UInt?>(120831404, {a: Int -> 1148687688.toUInt()})).contentHashCode()
2021-03-11 21:20:10,886 [main:106] - GETTING Int from CoroutineContext
2021-03-11 21:20:10,891 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4a9863f6], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77e1f2a2]]
2021-03-11 21:20:10,891 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4a9863f6]
2021-03-11 21:20:11,053 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:20:11,054 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77e1f2a2]
2021-03-11 21:20:11,054 [main:117] - GENERATED CALL = (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7)
2021-03-11 21:20:11,054 [main:114] - replacement of it % 2 of type Int is (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7)
2021-03-11 21:20:11,214 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:20:11,214 [main:66] - Compilation checking started
2021-03-11 21:20:11,910 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = yieldingFunction()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            }
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 {
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) selector(iterator.next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..100
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = prope11 fu14 { it * 2 }
    var prope14 = 0
    for (prope11 in prope13)
        prope14 += prope11
    return if (prope14 == 10100) "OK" else "fail"
}


2021-03-11 21:20:11,910 [main:107] - replacing (100, Int)
2021-03-11 21:20:11,911 [main:50] - replacing 100 Int
2021-03-11 21:20:11,911 [main:54] - Getting value of type Int
2021-03-11 21:20:12,067 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:20:12,072 [main:58] - GENERATED VALUE OF TYPE Int = 1648533199
2021-03-11 21:20:12,073 [main:61] - GENERATED IS CALL =false
2021-03-11 21:20:12,460 [main:67] - randomType = Kla4<UShort>
2021-03-11 21:20:12,611 [main:302] - generating value of type = Kla4<UShort> false depth = 0
2021-03-11 21:20:12,617 [main:112] - generating klass Kla4 text = abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 21:20:13,421 [main:302] - generating value of type = Kla7 false depth = 2
2021-03-11 21:20:13,427 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 21:20:13,441 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@2b2f158]
2021-03-11 21:20:13,441 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77e1f2a2]
2021-03-11 21:20:13,441 [main:78] - Generated call from random type = (Kla7).equals(Kla3().prope4).compareTo(Kla6().prope7)
2021-03-11 21:20:13,442 [main:106] - GETTING Int from EmptyCoroutineContext
2021-03-11 21:20:13,460 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@409c2a53], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77e1f2a2]]
2021-03-11 21:20:13,460 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@409c2a53]
2021-03-11 21:20:13,460 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77e1f2a2]
2021-03-11 21:20:13,615 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:20:13,621 [main:117] - GENERATED CALL = (Kla3().context).equals(Kla3().prope4).compareTo(false)
2021-03-11 21:20:13,621 [main:114] - replacement of 100 of type Int is (Kla3().context).equals(Kla3().prope4).compareTo(false)
2021-03-11 21:20:13,778 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:20:13,778 [main:66] - Compilation checking started
2021-03-11 21:20:14,425 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = yieldingFunction()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            }
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 {
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) selector(iterator.next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..(Kla3().context).equals(Kla3().prope4).compareTo(false)
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = prope11 fu14 { it * 2 }
    var prope14 = 0
    for (prope11 in prope13)
        prope14 += prope11
    return if (prope14 == 10100) "OK" else "fail"
}


2021-03-11 21:20:14,426 [main:107] - replacing (it, Int)
2021-03-11 21:20:14,426 [main:50] - replacing it Int
2021-03-11 21:20:14,426 [main:54] - Getting value of type Int
2021-03-11 21:20:14,592 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:20:14,597 [main:58] - GENERATED VALUE OF TYPE Int = -467648266
2021-03-11 21:20:14,597 [main:61] - GENERATED IS CALL =false
2021-03-11 21:20:14,619 [main:67] - randomType = Kla0
2021-03-11 21:20:14,776 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 21:20:14,781 [main:112] - generating klass Kla0 text = class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}
2021-03-11 21:20:14,786 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@613bbe22]
2021-03-11 21:20:14,786 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77e1f2a2]
2021-03-11 21:20:14,786 [main:78] - Generated call from random type = (Kla0()).equals(Kla3().prope4).compareTo(Kla6().prope7)
2021-03-11 21:20:14,787 [main:106] - GETTING Int from Function0<Unit>
2021-03-11 21:20:14,796 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@54f9434e], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77e1f2a2]]
2021-03-11 21:20:14,796 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@54f9434e]
2021-03-11 21:20:14,796 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77e1f2a2]
2021-03-11 21:20:14,796 [main:117] - GENERATED CALL = (Kla6().prope8).equals(Kla3().prope4).compareTo(Kla6().prope7)
2021-03-11 21:20:14,796 [main:114] - replacement of it of type Int is -467648266
2021-03-11 21:20:14,945 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 21:20:14,946 [main:66] - Compilation checking started
2021-03-11 21:20:15,595 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = yieldingFunction()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            }
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 {
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) selector(iterator.next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..(Kla3().context).equals(Kla3().prope4).compareTo(false)
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = prope11 fu14 { -467648266 * 2 }
    var prope14 = 0
    for (prope11 in prope13)
        prope14 += prope11
    return if (prope14 == 10100) "OK" else "fail"
}


2021-03-11 21:20:15,596 [main:107] - replacing (prope13, Iterable<Int>)
2021-03-11 21:20:15,596 [main:50] - replacing prope13 Iterable<Int>
2021-03-11 21:20:15,596 [main:54] - Getting value of type Iterable<Int>
2021-03-11 21:20:15,752 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 21:20:15,912 [main:43] - GENERATING CALL OF fun <E> buildSet(capacity: kotlin.Int, builderAction: kotlin.collections.MutableSet<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-11 21:20:15,919 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildSet(capacity: kotlin.Int, builderAction: kotlin.collections.MutableSet<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-11 21:20:16,485 [main:302] - generating value of type = Int true depth = 3
2021-03-11 21:20:16,491 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<Int>, Unit> false depth = 3
2021-03-11 21:20:16,496 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 21:20:16,656 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 21:20:16,663 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 21:20:17,062 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 7
2021-03-11 21:20:17,068 [main:302] - generating value of type = Unit false depth = 8
2021-03-11 21:20:17,230 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 21:20:17,237 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 21:20:17,593 [main:302] - generating value of type = Boolean true depth = 11
2021-03-11 21:20:17,599 [main:95] - GENERATED = check(true)
2021-03-11 21:20:17,599 [main:95] - GENERATED = contract({ check(true)})
2021-03-11 21:20:17,599 [main:95] - GENERATED = buildSet<Int>(415567515, { contract({ check(true)})})
2021-03-11 21:20:17,599 [main:58] - GENERATED VALUE OF TYPE Iterable<Int> = buildSet<Int>(415567515, { contract({ check(true)})})
2021-03-11 21:20:17,599 [main:61] - GENERATED IS CALL =true
2021-03-11 21:20:17,782 [main:67] - randomType = UInt
2021-03-11 21:20:17,931 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 21:20:17,967 [main:106] - GETTING Iterable<Int> from String
2021-03-11 21:20:17,988 [main:106] - GETTING Iterable<Int> from Continuation<String>
2021-03-11 21:20:17,997 [main:106] - GETTING Iterable<Int> from Kla0
2021-03-11 21:20:18,004 [main:106] - GETTING Iterable<Int> from Any?
2021-03-11 21:20:18,011 [main:106] - GETTING Iterable<Int> from EmptyCoroutineContext
2021-03-11 21:20:18,028 [main:106] - GETTING Iterable<Int> from CoroutineContext
2021-03-11 21:20:18,037 [main:106] - GETTING Iterable<Int> from Boolean
2021-03-11 21:20:18,049 [main:106] - GETTING Iterable<Int> from CoroutineContext
2021-03-11 21:20:18,052 [main:106] - GETTING Iterable<Int> from Continuation<Any?>
2021-03-11 21:20:18,063 [main:106] - GETTING Iterable<Int> from Function0<Unit>
2021-03-11 21:20:18,074 [main:106] - GETTING Iterable<Int> from CoroutineContext
2021-03-11 21:20:18,074 [main:114] - replacement of prope13 of type Iterable<Int> is buildSet<Int>(415567515, { contract({ check(true)})})
2021-03-11 21:20:18,232 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 21:20:18,233 [main:66] - Compilation checking started
2021-03-11 21:20:18,715 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = yieldingFunction()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            }
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 {
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) selector(iterator.next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..(Kla3().context).equals(Kla3().prope4).compareTo(false)
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = prope11 fu14 { -467648266 * 2 }
    var prope14 = 0
    for (prope11 in buildSet<Int>(415567515, { contract({ check(true)})}))
        prope14 += prope11
    return if (prope14 == 10100) "OK" else "fail"
}


2021-03-11 21:20:18,716 [main:107] - replacing (iterator(), Iterator<Ty2>)
2021-03-11 21:20:18,716 [main:50] - replacing iterator() Iterator<Ty2>
2021-03-11 21:20:18,716 [main:54] - Getting value of type Iterator<Ty2>
2021-03-11 21:20:18,873 [main:302] - generating value of type = Iterator<Ty2> false depth = 0
2021-03-11 21:20:18,882 [main:58] - GENERATED VALUE OF TYPE Iterator<Ty2> = CharIterator()
2021-03-11 21:20:18,882 [main:61] - GENERATED IS CALL =true
2021-03-11 21:20:18,903 [main:67] - randomType = Kla2
2021-03-11 21:20:19,055 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 21:20:19,061 [main:112] - generating klass Kla2 text = open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}
2021-03-11 21:20:19,216 [main:194] - Type params = []
2021-03-11 21:20:19,372 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 21:20:19,533 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:20:19,540 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:20:19,922 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 21:20:20,088 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:20:20,095 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:20:20,725 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:20:20,725 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:20:20,747 [main:106] - GETTING Iterator<Ty2> from EmptyCoroutineContext
2021-03-11 21:20:20,766 [main:106] - GETTING Iterator<Ty2> from Any?
2021-03-11 21:20:20,773 [main:106] - GETTING Iterator<Ty2> from Function0<Unit>
2021-03-11 21:20:20,784 [main:106] - GETTING Iterator<Ty2> from CoroutineContext
2021-03-11 21:20:20,792 [main:106] - GETTING Iterator<Ty2> from Continuation<Any?>
2021-03-11 21:20:20,802 [main:106] - GETTING Iterator<Ty2> from Boolean
2021-03-11 21:20:20,813 [main:106] - GETTING Iterator<Ty2> from Continuation<String>
2021-03-11 21:20:20,824 [main:106] - GETTING Iterator<Ty2> from CoroutineContext
2021-03-11 21:20:20,827 [main:106] - GETTING Iterator<Ty2> from String
2021-03-11 21:20:20,855 [main:106] - GETTING Iterator<Ty2> from CoroutineContext
2021-03-11 21:20:20,859 [main:106] - GETTING Iterator<Ty2> from Kla0
2021-03-11 21:20:20,865 [main:114] - replacement of iterator() of type Iterator<Ty2> is CharIterator()
2021-03-11 21:20:21,027 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 21:20:21,027 [main:66] - Compilation checking started
2021-03-11 21:20:21,525 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = yieldingFunction()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.CharIterator();
                { if (iterator.hasNext()) iterator.next() else null }
            }
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 {
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) selector(iterator.next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..(Kla3().context).equals(Kla3().prope4).compareTo(false)
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = prope11 fu14 { -467648266 * 2 }
    var prope14 = 0
    for (prope11 in prope13)
        prope14 += prope11
    return if (prope14 == 10100) "OK" else "fail"
}


2021-03-11 21:20:21,526 [main:107] - replacing (Kla10 {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            }, Kla10<Ty2>)
2021-03-11 21:20:21,526 [main:50] - replacing Kla10 {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            } Kla10<Ty2>
2021-03-11 21:20:21,526 [main:54] - Getting value of type Kla10<Ty2>
2021-03-11 21:20:21,684 [main:302] - generating value of type = Kla10<Ty2> false depth = 0
2021-03-11 21:20:21,689 [main:112] - generating klass Kla10 text = class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}
2021-03-11 21:20:22,059 [main:194] - Type params = [String]
2021-03-11 21:20:22,402 [main:302] - generating value of type = Function0<Function0<String?>> false depth = 2
2021-03-11 21:20:22,407 [main:302] - generating value of type = Function0<String?> false depth = 3
2021-03-11 21:20:22,413 [main:302] - generating value of type = String true depth = 4
2021-03-11 21:20:22,419 [main:58] - GENERATED VALUE OF TYPE Kla10<Ty2> = Kla10<String>({ { "igjys"}})
2021-03-11 21:20:22,419 [main:61] - GENERATED IS CALL =true
2021-03-11 21:20:22,430 [main:67] - randomType = String
2021-03-11 21:20:22,590 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:20:22,622 [main:106] - GETTING Kla10<Ty2> from String
2021-03-11 21:20:22,639 [main:106] - GETTING Kla10<Ty2> from Any?
2021-03-11 21:20:22,643 [main:106] - GETTING Kla10<Ty2> from Function0<Unit>
2021-03-11 21:20:22,652 [main:106] - GETTING Kla10<Ty2> from Boolean
2021-03-11 21:20:22,661 [main:106] - GETTING Kla10<Ty2> from Continuation<Any?>
2021-03-11 21:20:22,669 [main:106] - GETTING Kla10<Ty2> from CoroutineContext
2021-03-11 21:20:22,674 [main:106] - GETTING Kla10<Ty2> from CoroutineContext
2021-03-11 21:20:22,675 [main:106] - GETTING Kla10<Ty2> from Kla0
2021-03-11 21:20:22,681 [main:106] - GETTING Kla10<Ty2> from EmptyCoroutineContext
2021-03-11 21:20:22,695 [main:106] - GETTING Kla10<Ty2> from Continuation<String>
2021-03-11 21:20:22,703 [main:106] - GETTING Kla10<Ty2> from CoroutineContext
2021-03-11 21:20:22,703 [main:114] - replacement of Kla10 {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            } of type Kla10<Ty2> is Kla10<String>({ { "igjys"}})
2021-03-11 21:20:22,854 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 21:20:22,854 [main:66] - Compilation checking started
2021-03-11 21:20:23,302 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = yieldingFunction()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10<String>({ { "igjys"}})
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 {
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) selector(iterator.next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..(Kla3().context).equals(Kla3().prope4).compareTo(false)
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = prope11 fu14 { -467648266 * 2 }
    var prope14 = 0
    for (prope11 in prope13)
        prope14 += prope11
    return if (prope14 == 10100) "OK" else "fail"
}


2021-03-11 21:20:23,303 [main:107] - replacing (iterator(), Iterator<Ty2>)
2021-03-11 21:20:23,303 [main:50] - replacing iterator() Iterator<Ty2>
2021-03-11 21:20:23,303 [main:54] - Getting value of type Iterator<Ty2>
2021-03-11 21:20:23,471 [main:302] - generating value of type = Iterator<Ty2> false depth = 0
2021-03-11 21:20:23,635 [main:43] - GENERATING CALL OF fun <T> iterator(block: suspend kotlin.sequences.SequenceScope<Ty2>.()->kotlin.Unit): Iterator<Ty2> = TODO()
2021-03-11 21:20:23,642 [main:61] - WITHOUT TYPE PARAMS = fun <T> iterator(block: suspend kotlin.sequences.SequenceScope<Ty2>.()->kotlin.Unit): Iterator<Ty2> = TODO()
2021-03-11 21:20:24,015 [main:385] - Cant generate call of fun <T> iterator(block: suspend kotlin.sequences.SequenceScope<Ty2>.()->kotlin.Unit): Iterator<Ty2> = TODO()
2021-03-11 21:20:24,015 [main:58] - GENERATED VALUE OF TYPE Iterator<Ty2> = 
2021-03-11 21:20:25,068 [main:67] - randomType = LinkedHashSet<Function1<Kla5, Set<Kla7?>>>?
2021-03-11 21:20:25,220 [main:302] - generating value of type = LinkedHashSet<Function1<Kla5, Set<Kla7?>>> false depth = 0
2021-03-11 21:20:25,381 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Function1<Kla5, Set<Kla7?>>): LkedHashSet<Function1<Kla5, Set<Kla7?>>> = TODO()
2021-03-11 21:20:25,387 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Function1<Kla5, Set<Kla7?>>): LkedHashSet<Function1<Kla5, Set<Kla7?>>> = TODO()
2021-03-11 21:20:25,549 [main:302] - generating value of type = Function1<Kla5, Set<Kla7?>> false depth = 3
2021-03-11 21:20:25,555 [main:302] - generating value of type = Set<Kla7?> false depth = 4
2021-03-11 21:20:25,715 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(element: Kla7?): Set<Kla7?> = TODO()
2021-03-11 21:20:25,721 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(element: Kla7?): Set<Kla7?> = TODO()
2021-03-11 21:20:25,886 [main:302] - generating value of type = Kla7 false depth = 7
2021-03-11 21:20:25,892 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 21:20:25,892 [main:95] - GENERATED = setOfNotNull<Kla7?>(Kla7)
2021-03-11 21:20:25,892 [main:95] - GENERATED = linkedSetOf<Function1<Kla5, Set<Kla7?>>>({a: Kla5 -> setOfNotNull<Kla7?>(Kla7)})
2021-03-11 21:20:26,100 [main:106] - GETTING Iterator<Ty2> from CoroutineContext
2021-03-11 21:20:26,112 [main:106] - GETTING Iterator<Ty2> from CoroutineContext
2021-03-11 21:20:26,115 [main:106] - GETTING Iterator<Ty2> from EmptyCoroutineContext
2021-03-11 21:20:26,143 [main:106] - GETTING Iterator<Ty2> from String
2021-03-11 21:20:26,174 [main:106] - GETTING Iterator<Ty2> from Continuation<Any?>
2021-03-11 21:20:26,188 [main:106] - GETTING Iterator<Ty2> from Boolean
2021-03-11 21:20:26,205 [main:106] - GETTING Iterator<Ty2> from Any?
2021-03-11 21:20:26,213 [main:106] - GETTING Iterator<Ty2> from CoroutineContext
2021-03-11 21:20:26,216 [main:106] - GETTING Iterator<Ty2> from Function0<Unit>
2021-03-11 21:20:26,233 [main:106] - GETTING Iterator<Ty2> from Kla0
2021-03-11 21:20:26,244 [main:106] - GETTING Iterator<Ty2> from Continuation<String>
2021-03-11 21:20:26,254 [main:111] - Cant find and generate replacement for iterator() type Iterator<Ty2>
2021-03-11 21:20:26,254 [main:107] - replacing (10100, Int)
2021-03-11 21:20:26,254 [main:50] - replacing 10100 Int
2021-03-11 21:20:26,254 [main:54] - Getting value of type Int
2021-03-11 21:20:26,406 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:20:26,412 [main:58] - GENERATED VALUE OF TYPE Int = -2110269706
2021-03-11 21:20:26,412 [main:61] - GENERATED IS CALL =false
2021-03-11 21:20:27,183 [main:67] - randomType = MutableMap<Short, Kla10<Short>>
2021-03-11 21:20:27,184 [main:106] - GETTING Int from Continuation<String>
2021-03-11 21:20:27,190 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3ea53d8], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77e1f2a2]]
2021-03-11 21:20:27,191 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3ea53d8]
2021-03-11 21:20:27,191 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77e1f2a2]
2021-03-11 21:20:27,191 [main:117] - GENERATED CALL = (fu2<String>({a: String -> check(true, { "bzpad"})})).equals(Kla3().prope4).compareTo(Kla6().prope7)
2021-03-11 21:20:27,191 [main:114] - replacement of 10100 of type Int is -2110269706
2021-03-11 21:20:27,346 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-11 21:20:27,347 [main:66] - Compilation checking started
2021-03-11 21:20:28,048 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = yieldingFunction()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            }
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 {
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) selector(iterator.next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..(Kla3().context).equals(Kla3().prope4).compareTo(false)
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = prope11 fu14 { -467648266 * 2 }
    var prope14 = 0
    for (prope11 in prope13)
        prope14 += prope11
    return if (prope14 == -2110269706) "OK" else "fail"
}


2021-03-11 21:20:28,049 [main:107] - replacing (prope10, Ty1?)
2021-03-11 21:20:28,049 [main:50] - replacing prope10 Ty1?
2021-03-11 21:20:28,049 [main:54] - Getting value of type Ty1?
2021-03-11 21:20:28,228 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-11 21:20:28,237 [main:58] - GENERATED VALUE OF TYPE Ty1? = 
2021-03-11 21:20:28,667 [main:67] - randomType = Sequence<List<Kla6>>
2021-03-11 21:20:28,668 [main:106] - GETTING Ty1? from String
2021-03-11 21:20:28,688 [main:106] - GETTING Ty1? from Continuation<Any?>
2021-03-11 21:20:28,696 [main:106] - GETTING Ty1? from CoroutineContext
2021-03-11 21:20:28,702 [main:106] - GETTING Ty1? from Kla0
2021-03-11 21:20:28,708 [main:106] - GETTING Ty1? from Continuation<String>
2021-03-11 21:20:28,717 [main:106] - GETTING Ty1? from Any?
2021-03-11 21:20:28,723 [main:106] - GETTING Ty1? from Boolean
2021-03-11 21:20:28,734 [main:106] - GETTING Ty1? from EmptyCoroutineContext
2021-03-11 21:20:28,755 [main:106] - GETTING Ty1? from CoroutineContext
2021-03-11 21:20:28,756 [main:106] - GETTING Ty1? from Function0<Unit>
2021-03-11 21:20:28,769 [main:106] - GETTING Ty1? from CoroutineContext
2021-03-11 21:20:28,770 [main:111] - Cant find and generate replacement for prope10 type Ty1?
2021-03-11 21:20:28,770 [main:107] - replacing (hasNext(), Boolean)
2021-03-11 21:20:28,770 [main:50] - replacing hasNext() Boolean
2021-03-11 21:20:28,770 [main:54] - Getting value of type Boolean
2021-03-11 21:20:28,933 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:20:28,939 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 21:20:28,939 [main:61] - GENERATED IS CALL =false
2021-03-11 21:20:28,951 [main:67] - randomType = Int
2021-03-11 21:20:29,114 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:20:29,155 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2fe9bb49]
2021-03-11 21:20:29,155 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c2e8d5f]
2021-03-11 21:20:29,155 [main:78] - Generated call from random type = (-832049278).toChar().isTitleCase()
2021-03-11 21:20:29,156 [main:106] - GETTING Boolean from String
2021-03-11 21:20:29,174 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ae52880]]
2021-03-11 21:20:29,174 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:20:29,336 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:20:29,500 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:20:29,505 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ae52880]
2021-03-11 21:20:29,505 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).subSequence(-423071274, 2125800347).any()
2021-03-11 21:20:29,505 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b8a315c]]
2021-03-11 21:20:29,505 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b8a315c]
2021-03-11 21:20:29,506 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).none()
2021-03-11 21:20:29,506 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ae52880]]
2021-03-11 21:20:29,506 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ae52880]
2021-03-11 21:20:29,506 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).any()
2021-03-11 21:20:29,506 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c2e8d5f]]
2021-03-11 21:20:29,506 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:20:29,655 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:20:29,660 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c2e8d5f]
2021-03-11 21:20:29,661 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).get(-324840575).isTitleCase()
2021-03-11 21:20:29,661 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1cebd5fd], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4df7e8b]]
2021-03-11 21:20:29,661 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1cebd5fd]
2021-03-11 21:20:29,661 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4df7e8b]
2021-03-11 21:20:29,661 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).equals(Kla3().prope4).xor(Kla6().prope7)
2021-03-11 21:20:29,661 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38e835db]]
2021-03-11 21:20:29,661 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:20:29,813 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:20:29,973 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:20:29,979 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38e835db]
2021-03-11 21:20:29,979 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).subSequence(1748733550, 1099482941).isEmpty()
2021-03-11 21:20:29,979 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@672d969c]]
2021-03-11 21:20:29,979 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:20:30,132 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:20:30,137 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@672d969c]
2021-03-11 21:20:30,137 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).get(-1055965229).isISOControl()
2021-03-11 21:20:30,137 [main:113] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3aab0a10]]
2021-03-11 21:20:30,138 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3aab0a10]
2021-03-11 21:20:30,138 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).isBlank()
2021-03-11 21:20:30,138 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbf9505]]
2021-03-11 21:20:30,138 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0001bd]
2021-03-11 21:20:30,292 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:20:30,447 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:20:30,453 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbf9505]
2021-03-11 21:20:30,603 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:20:30,609 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:20:30,615 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).subSequence(-2029101014, 510332275).all({a: Char -> true})
2021-03-11 21:20:30,615 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e3fdf4d]]
2021-03-11 21:20:30,615 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@170df1ed]
2021-03-11 21:20:30,766 [main:302] - generating value of type = Int true depth = 0
2021-03-11 21:20:30,772 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e3fdf4d]
2021-03-11 21:20:30,772 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).get(1341412637).isHighSurrogate()
2021-03-11 21:20:30,772 [main:114] - replacement of hasNext() of type Boolean is (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).any()
2021-03-11 21:20:30,928 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:20:30,928 [main:66] - Compilation checking started
2021-03-11 21:20:31,401 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = yieldingFunction()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            }
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 {
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.(test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).any()) selector(iterator.next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..(Kla3().context).equals(Kla3().prope4).compareTo(false)
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = prope11 fu14 { -467648266 * 2 }
    var prope14 = 0
    for (prope11 in prope13)
        prope14 += prope11
    return if (prope14 == -2110269706) "OK" else "fail"
}


2021-03-11 21:20:31,402 [main:107] - replacing (Kla10 {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            }, Kla10<Ty2>)
2021-03-11 21:20:31,402 [main:50] - replacing Kla10 {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            } Kla10<Ty2>
2021-03-11 21:20:31,402 [main:54] - Getting value of type Kla10<Ty2>
2021-03-11 21:20:31,554 [main:302] - generating value of type = Kla10<Ty2> false depth = 0
2021-03-11 21:20:31,559 [main:112] - generating klass Kla10 text = class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}
2021-03-11 21:20:31,947 [main:194] - Type params = [Char]
2021-03-11 21:20:32,292 [main:302] - generating value of type = Function0<Function0<Char?>> false depth = 2
2021-03-11 21:20:32,297 [main:302] - generating value of type = Function0<Char?> false depth = 3
2021-03-11 21:20:32,303 [main:302] - generating value of type = Char true depth = 4
2021-03-11 21:20:32,309 [main:58] - GENERATED VALUE OF TYPE Kla10<Ty2> = Kla10<Char>({ { 'ꋜ'}})
2021-03-11 21:20:32,309 [main:61] - GENERATED IS CALL =true
2021-03-11 21:20:32,516 [main:67] - randomType = Kla0?
2021-03-11 21:20:32,670 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 21:20:32,675 [main:112] - generating klass Kla0 text = class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}
2021-03-11 21:20:32,683 [main:106] - GETTING Kla10<Ty2> from Boolean
2021-03-11 21:20:32,696 [main:106] - GETTING Kla10<Ty2> from CoroutineContext
2021-03-11 21:20:32,705 [main:106] - GETTING Kla10<Ty2> from CoroutineContext
2021-03-11 21:20:32,706 [main:106] - GETTING Kla10<Ty2> from CoroutineContext
2021-03-11 21:20:32,707 [main:106] - GETTING Kla10<Ty2> from Continuation<Any?>
2021-03-11 21:20:32,717 [main:106] - GETTING Kla10<Ty2> from Continuation<String>
2021-03-11 21:20:32,727 [main:106] - GETTING Kla10<Ty2> from EmptyCoroutineContext
2021-03-11 21:20:32,748 [main:106] - GETTING Kla10<Ty2> from Kla0
2021-03-11 21:20:32,754 [main:106] - GETTING Kla10<Ty2> from Function0<Unit>
2021-03-11 21:20:32,766 [main:106] - GETTING Kla10<Ty2> from Any?
2021-03-11 21:20:32,770 [main:106] - GETTING Kla10<Ty2> from String
2021-03-11 21:20:32,792 [main:114] - replacement of Kla10 {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            } of type Kla10<Ty2> is Kla10<Char>({ { 'ꋜ'}})
2021-03-11 21:20:32,945 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 21:20:32,945 [main:66] - Compilation checking started
2021-03-11 21:20:33,411 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = yieldingFunction()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10<Char>({ { 'ꋜ'}})
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 {
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) selector(iterator.next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..(Kla3().context).equals(Kla3().prope4).compareTo(false)
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = prope11 fu14 { -467648266 * 2 }
    var prope14 = 0
    for (prope11 in prope13)
        prope14 += prope11
    return if (prope14 == -2110269706) "OK" else "fail"
}


2021-03-11 21:20:33,412 [main:107] - replacing ({ if (iterator.hasNext()) iterator.next() else null }, Function0<Ty2?>)
2021-03-11 21:20:33,412 [main:50] - replacing { if (iterator.hasNext()) iterator.next() else null } Function0<Ty2?>
2021-03-11 21:20:33,412 [main:54] - Getting value of type Function0<Ty2?>
2021-03-11 21:20:33,574 [main:302] - generating value of type = Function0<Ty2?> false depth = 0
2021-03-11 21:20:33,581 [main:302] - generating value of type = Ty2 false depth = 1
2021-03-11 21:20:33,589 [main:58] - GENERATED VALUE OF TYPE Function0<Ty2?> = { }
2021-03-11 21:20:33,589 [main:61] - GENERATED IS CALL =false
2021-03-11 21:20:33,613 [main:67] - randomType = Kla2
2021-03-11 21:20:33,782 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 21:20:33,789 [main:112] - generating klass Kla2 text = open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}
2021-03-11 21:20:33,951 [main:194] - Type params = []
2021-03-11 21:20:34,113 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 21:20:34,273 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:20:34,280 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:20:34,638 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 21:20:34,805 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:20:34,812 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:20:35,367 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:20:35,367 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:20:35,384 [main:106] - GETTING Function0<Ty2?> from Continuation<String>
2021-03-11 21:20:35,391 [main:106] - GETTING Function0<Ty2?> from Function0<Unit>
2021-03-11 21:20:35,401 [main:106] - GETTING Function0<Ty2?> from Boolean
2021-03-11 21:20:35,411 [main:106] - GETTING Function0<Ty2?> from Continuation<Any?>
2021-03-11 21:20:35,419 [main:106] - GETTING Function0<Ty2?> from CoroutineContext
2021-03-11 21:20:35,425 [main:106] - GETTING Function0<Ty2?> from CoroutineContext
2021-03-11 21:20:35,426 [main:106] - GETTING Function0<Ty2?> from CoroutineContext
2021-03-11 21:20:35,427 [main:106] - GETTING Function0<Ty2?> from EmptyCoroutineContext
2021-03-11 21:20:35,441 [main:106] - GETTING Function0<Ty2?> from Kla0
2021-03-11 21:20:35,446 [main:106] - GETTING Function0<Ty2?> from Any?
2021-03-11 21:20:35,450 [main:106] - GETTING Function0<Ty2?> from String
2021-03-11 21:20:35,467 [main:114] - replacement of { if (iterator.hasNext()) iterator.next() else null } of type Function0<Ty2?> is { }
2021-03-11 21:20:35,642 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 21:20:35,642 [main:66] - Compilation checking started
2021-03-11 21:20:36,103 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = yieldingFunction()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { }
            }
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 {
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) selector(iterator.next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..(Kla3().context).equals(Kla3().prope4).compareTo(false)
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = prope11 fu14 { -467648266 * 2 }
    var prope14 = 0
    for (prope11 in prope13)
        prope14 += prope11
    return if (prope14 == -2110269706) "OK" else "fail"
}


2021-03-11 21:20:36,104 [main:107] - replacing ({
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            }, Function0<Function0<Ty2?>>)
2021-03-11 21:20:36,104 [main:50] - replacing {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            } Function0<Function0<Ty2?>>
2021-03-11 21:20:36,104 [main:54] - Getting value of type Function0<Function0<Ty2?>>
2021-03-11 21:20:36,254 [main:302] - generating value of type = Function0<Function0<Ty2?>> false depth = 0
2021-03-11 21:20:36,260 [main:302] - generating value of type = Function0<Ty2?> false depth = 1
2021-03-11 21:20:36,265 [main:302] - generating value of type = Ty2 false depth = 2
2021-03-11 21:20:36,273 [main:58] - GENERATED VALUE OF TYPE Function0<Function0<Ty2?>> = { { }}
2021-03-11 21:20:36,273 [main:61] - GENERATED IS CALL =false
2021-03-11 21:20:36,284 [main:67] - randomType = String
2021-03-11 21:20:36,433 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:20:36,458 [main:106] - GETTING Function0<Function0<Ty2?>> from Continuation<String>
2021-03-11 21:20:36,466 [main:106] - GETTING Function0<Function0<Ty2?>> from Continuation<Any?>
2021-03-11 21:20:36,474 [main:106] - GETTING Function0<Function0<Ty2?>> from Function0<Unit>
2021-03-11 21:20:36,484 [main:106] - GETTING Function0<Function0<Ty2?>> from EmptyCoroutineContext
2021-03-11 21:20:36,499 [main:106] - GETTING Function0<Function0<Ty2?>> from Kla0
2021-03-11 21:20:36,504 [main:106] - GETTING Function0<Function0<Ty2?>> from Any?
2021-03-11 21:20:36,509 [main:106] - GETTING Function0<Function0<Ty2?>> from String
2021-03-11 21:20:36,527 [main:106] - GETTING Function0<Function0<Ty2?>> from CoroutineContext
2021-03-11 21:20:36,534 [main:106] - GETTING Function0<Function0<Ty2?>> from CoroutineContext
2021-03-11 21:20:36,536 [main:106] - GETTING Function0<Function0<Ty2?>> from Boolean
2021-03-11 21:20:36,545 [main:106] - GETTING Function0<Function0<Ty2?>> from CoroutineContext
2021-03-11 21:20:36,546 [main:114] - replacement of {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            } of type Function0<Function0<Ty2?>> is { { }}
2021-03-11 21:20:36,695 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 21:20:36,696 [main:66] - Compilation checking started
2021-03-11 21:20:37,140 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = yieldingFunction()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 { { }}
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 {
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) selector(iterator.next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..(Kla3().context).equals(Kla3().prope4).compareTo(false)
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = prope11 fu14 { -467648266 * 2 }
    var prope14 = 0
    for (prope11 in prope13)
        prope14 += prope11
    return if (prope14 == -2110269706) "OK" else "fail"
}


2021-03-11 21:20:37,141 [main:107] - replacing (iterator.next(), Ty2)
2021-03-11 21:20:37,142 [main:50] - replacing iterator.next() Ty2
2021-03-11 21:20:37,143 [main:54] - Getting value of type Ty2
2021-03-11 21:20:37,315 [main:302] - generating value of type = Ty2 false depth = 0
2021-03-11 21:20:37,323 [main:58] - GENERATED VALUE OF TYPE Ty2 = 
2021-03-11 21:20:37,699 [main:67] - randomType = ArrayList<ULong>
2021-03-11 21:20:37,853 [main:302] - generating value of type = ArrayList<ULong> false depth = 0
2021-03-11 21:20:38,012 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: ULong): ArrayList<ULong> = TODO()
2021-03-11 21:20:38,019 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: ULong): ArrayList<ULong> = TODO()
2021-03-11 21:20:38,183 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 21:20:38,188 [main:95] - GENERATED = arrayListOf<ULong>(6772110087820547356.toULong())
2021-03-11 21:20:38,339 [main:106] - GETTING Ty2 from EmptyCoroutineContext
2021-03-11 21:20:38,356 [main:106] - GETTING Ty2 from String
2021-03-11 21:20:38,378 [main:106] - GETTING Ty2 from Function0<Unit>
2021-03-11 21:20:38,389 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-11 21:20:38,395 [main:106] - GETTING Ty2 from Any?
2021-03-11 21:20:38,400 [main:106] - GETTING Ty2 from Kla0
2021-03-11 21:20:38,406 [main:106] - GETTING Ty2 from Continuation<Any?>
2021-03-11 21:20:38,416 [main:106] - GETTING Ty2 from Continuation<String>
2021-03-11 21:20:38,423 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-11 21:20:38,423 [main:106] - GETTING Ty2 from Boolean
2021-03-11 21:20:38,435 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-11 21:20:38,436 [main:111] - Cant find and generate replacement for iterator.next() type Ty2
2021-03-11 21:20:38,436 [main:107] - replacing (prope14 == -2110269706, Boolean)
2021-03-11 21:20:38,436 [main:50] - replacing prope14 == -2110269706 Boolean
2021-03-11 21:20:38,436 [main:54] - Getting value of type Boolean
2021-03-11 21:20:38,588 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:20:38,594 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 21:20:38,594 [main:61] - GENERATED IS CALL =false
2021-03-11 21:20:38,987 [main:67] - randomType = Kla4<Byte>
2021-03-11 21:20:39,141 [main:302] - generating value of type = Kla4<Byte> false depth = 0
2021-03-11 21:20:39,147 [main:112] - generating klass Kla4 text = abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 21:20:39,905 [main:302] - generating value of type = Kla7 false depth = 2
2021-03-11 21:20:39,911 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 21:20:39,930 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@60a09e58]
2021-03-11 21:20:40,083 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2e220c0c]
2021-03-11 21:20:40,235 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:20:40,241 [main:78] - Generated call from random type = (Kla7).equals(null).and(true)
2021-03-11 21:20:40,241 [main:114] - replacement of prope14 == -2110269706 of type Boolean is (Kla7).equals(null).and(true)
2021-03-11 21:20:40,392 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:20:40,392 [main:66] - Compilation checking started
2021-03-11 21:20:41,034 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = yieldingFunction()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            }
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 {
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) selector(iterator.next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..(Kla3().context).equals(Kla3().prope4).compareTo(false)
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = prope11 fu14 { -467648266 * 2 }
    var prope14 = 0
    for (prope11 in prope13)
        prope14 += prope11
    return if ((Kla7).equals(null).and(true)) "OK" else "fail"
}


2021-03-11 21:20:41,035 [main:107] - replacing (this, Iterable<Ty2>)
2021-03-11 21:20:41,035 [main:50] - replacing this Iterable<Ty2>
2021-03-11 21:20:41,035 [main:54] - Getting value of type Iterable<Ty2>
2021-03-11 21:20:41,186 [main:302] - generating value of type = Iterable<Ty2> false depth = 0
2021-03-11 21:20:41,545 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<String?>): Iterable<Ty2> = TODO()
2021-03-11 21:20:41,552 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<String?>): Iterable<Ty2> = TODO()
2021-03-11 21:20:41,916 [main:302] - generating value of type = Collection<String?> false depth = 3
2021-03-11 21:20:42,083 [main:43] - GENERATING CALL OF fun <E> buildSet(builderAction: kotlin.collections.MutableSet<String?>.()->kotlin.Unit): Collection<Strg?> = TODO()
2021-03-11 21:20:42,090 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildSet(builderAction: kotlin.collections.MutableSet<String?>.()->kotlin.Unit): Collection<Strg?> = TODO()
2021-03-11 21:20:42,463 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<String?>, Unit> false depth = 6
2021-03-11 21:20:42,468 [main:302] - generating value of type = Unit false depth = 7
2021-03-11 21:20:42,631 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:20:42,638 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 21:20:42,981 [main:302] - generating value of type = Any false depth = 10
2021-03-11 21:20:42,982 [main:95] - GENERATED = println("dinny")
2021-03-11 21:20:42,982 [main:95] - GENERATED = buildSet<String?>({ println("dinny")})
2021-03-11 21:20:42,982 [main:95] - GENERATED = ArrayDeque<String?>(buildSet<String?>({ println("dinny")}))
2021-03-11 21:20:42,982 [main:58] - GENERATED VALUE OF TYPE Iterable<Ty2> = ArrayDeque<String?>(buildSet<String?>({ println("dinny")}))
2021-03-11 21:20:42,982 [main:61] - GENERATED IS CALL =true
2021-03-11 21:20:44,382 [main:67] - randomType = Pair<LinkedHashMap<Float?, Int>?, List<UByte>>
2021-03-11 21:20:44,535 [main:302] - generating value of type = Pair<LinkedHashMap<Float?, Int>?, List<UByte>> false depth = 0
2021-03-11 21:20:44,697 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: LinkedHashMap<Float?, Int>?, second: List<UByte>): Pair<LinkedHashMap<Float?, Int>?, List<UByte>> = TODO()
2021-03-11 21:20:44,704 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: LinkedHashMap<Float?, Int>?, second: List<UByte>): Pair<LinkedHashMap<Float?, Int>?, List<UByte>> = TODO()
2021-03-11 21:20:44,868 [main:302] - generating value of type = LinkedHashMap<Float?, Int> false depth = 3
2021-03-11 21:20:45,029 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Float?, Int> = TODO()
2021-03-11 21:20:45,036 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Float?, Int> = TODO()
2021-03-11 21:20:45,198 [main:95] - GENERATED = linkedMapOf<Float?, Int>()
2021-03-11 21:20:45,198 [main:302] - generating value of type = List<UByte> false depth = 3
2021-03-11 21:20:45,359 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): List<UByte> = TODO()
2021-03-11 21:20:45,366 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): List<UByte> = TODO()
2021-03-11 21:20:45,716 [main:302] - generating value of type = Int true depth = 6
2021-03-11 21:20:45,722 [main:95] - GENERATED = ArrayDeque<UByte>(-1599210984)
2021-03-11 21:20:45,722 [main:95] - GENERATED = Pair<LinkedHashMap<Float?, Int>?, List<UByte>>(linkedMapOf<Float?, Int>(), ArrayDeque<UByte>(-1599210984))
2021-03-11 21:20:45,752 [main:106] - GETTING Iterable<Ty2> from Continuation<Any?>
2021-03-11 21:20:45,764 [main:106] - GETTING Iterable<Ty2> from String
2021-03-11 21:20:45,791 [main:106] - GETTING Iterable<Ty2> from Function0<Unit>
2021-03-11 21:20:45,804 [main:106] - GETTING Iterable<Ty2> from Boolean
2021-03-11 21:20:45,816 [main:106] - GETTING Iterable<Ty2> from CoroutineContext
2021-03-11 21:20:45,824 [main:106] - GETTING Iterable<Ty2> from EmptyCoroutineContext
2021-03-11 21:20:45,841 [main:106] - GETTING Iterable<Ty2> from CoroutineContext
2021-03-11 21:20:45,843 [main:106] - GETTING Iterable<Ty2> from Kla0
2021-03-11 21:20:45,851 [main:106] - GETTING Iterable<Ty2> from Continuation<String>
2021-03-11 21:20:45,860 [main:106] - GETTING Iterable<Ty2> from Any?
2021-03-11 21:20:45,866 [main:106] - GETTING Iterable<Ty2> from CoroutineContext
2021-03-11 21:20:45,866 [main:114] - replacement of this of type Iterable<Ty2> is ArrayDeque<String?>(buildSet<String?>({ println("dinny")}))
2021-03-11 21:20:46,017 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 21:20:46,018 [main:66] - Compilation checking started
2021-03-11 21:20:46,500 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = yieldingFunction()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            }
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 {
                val iterator = ArrayDeque<String?>(buildSet<String?>({ println("dinny")})).iterator()
                fun fu15() : Ty2? {
                    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) selector(iterator.next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..(Kla3().context).equals(Kla3().prope4).compareTo(false)
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = prope11 fu14 { -467648266 * 2 }
    var prope14 = 0
    for (prope11 in prope13)
        prope14 += prope11
    return if ((Kla7).equals(null).and(true)) "OK" else "fail"
}


2021-03-11 21:20:46,502 [main:107] - replacing ("OK", String)
2021-03-11 21:20:46,502 [main:50] - replacing "OK" String
2021-03-11 21:20:46,502 [main:54] - Getting value of type String
2021-03-11 21:20:46,671 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:20:46,676 [main:58] - GENERATED VALUE OF TYPE String = "ruebx"
2021-03-11 21:20:46,676 [main:61] - GENERATED IS CALL =false
2021-03-11 21:20:46,700 [main:67] - randomType = Kla0
2021-03-11 21:20:46,888 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 21:20:46,893 [main:112] - generating klass Kla0 text = class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}
2021-03-11 21:20:46,901 [main:106] - GETTING String from CoroutineContext
2021-03-11 21:20:46,911 [main:106] - GETTING String from CoroutineContext
2021-03-11 21:20:46,912 [main:106] - GETTING String from Function0<Unit>
2021-03-11 21:20:46,925 [main:106] - GETTING String from Continuation<String>
2021-03-11 21:20:46,936 [main:106] - GETTING String from EmptyCoroutineContext
2021-03-11 21:20:46,961 [main:106] - GETTING String from String
2021-03-11 21:20:46,988 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46ca7916]]
2021-03-11 21:20:46,988 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46ca7916]
2021-03-11 21:20:47,146 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:20:47,152 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).substringBefore('薃', test<Sequence<*>>(sequenceOf<Any?>("cdrrl")))
2021-03-11 21:20:47,152 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7521e6f1]]
2021-03-11 21:20:47,152 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7521e6f1]
2021-03-11 21:20:47,152 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).decapitalize()
2021-03-11 21:20:47,152 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@326e7108]]
2021-03-11 21:20:47,152 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@326e7108]
2021-03-11 21:20:47,306 [main:302] - generating value of type = Char true depth = 0
2021-03-11 21:20:47,465 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:20:47,471 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).replaceBeforeLast('譣', test<Sequence<*>>(sequenceOf<Any?>("cdrrl")), "xpkft")
2021-03-11 21:20:47,471 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e0944ff]]
2021-03-11 21:20:47,471 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e0944ff]
2021-03-11 21:20:47,624 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 21:20:47,633 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).commonPrefixWith("efvyl", Kla6().prope7)
2021-03-11 21:20:47,633 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cb0314f]]
2021-03-11 21:20:47,633 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cb0314f]
2021-03-11 21:20:47,633 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).uppercase()
2021-03-11 21:20:47,633 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6289cda]]
2021-03-11 21:20:47,634 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6289cda]
2021-03-11 21:20:47,634 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).capitalize()
2021-03-11 21:20:47,634 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a3cd8f4]]
2021-03-11 21:20:47,634 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a3cd8f4]
2021-03-11 21:20:47,788 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 21:20:47,794 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 21:20:47,799 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).filterNot({a: Char -> true})
2021-03-11 21:20:47,800 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77d79b1a]]
2021-03-11 21:20:47,800 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77d79b1a]
2021-03-11 21:20:47,953 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 21:20:47,958 [main:302] - generating value of type = Char true depth = 1
2021-03-11 21:20:47,964 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).replaceFirstChar({a: Char -> '瑩'})
2021-03-11 21:20:47,964 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a26927]]
2021-03-11 21:20:47,964 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a26927]
2021-03-11 21:20:47,965 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).trimStart()
2021-03-11 21:20:47,965 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24796352]]
2021-03-11 21:20:47,965 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24796352]
2021-03-11 21:20:47,965 [main:117] - GENERATED CALL = (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).trimEnd()
2021-03-11 21:20:47,965 [main:114] - replacement of "OK" of type String is (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).substringBefore('薃', test<Sequence<*>>(sequenceOf<Any?>("cdrrl")))
2021-03-11 21:20:48,116 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:20:48,117 [main:66] - Compilation checking started
2021-03-11 21:20:48,844 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = yieldingFunction()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            }
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 {
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) selector(iterator.next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..(Kla3().context).equals(Kla3().prope4).compareTo(false)
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = prope11 fu14 { -467648266 * 2 }
    var prope14 = 0
    for (prope11 in prope13)
        prope14 += prope11
    return if ((Kla7).equals(null).and(true)) (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).substringBefore('薃', test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))) else "fail"
}


2021-03-11 21:20:48,845 [main:107] - replacing ("fail", String)
2021-03-11 21:20:48,846 [main:50] - replacing "fail" String
2021-03-11 21:20:48,846 [main:54] - Getting value of type String
2021-03-11 21:20:49,002 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:20:49,008 [main:58] - GENERATED VALUE OF TYPE String = "xlgwx"
2021-03-11 21:20:49,008 [main:61] - GENERATED IS CALL =false
2021-03-11 21:20:49,192 [main:67] - randomType = Double
2021-03-11 21:20:49,343 [main:302] - generating value of type = Double true depth = 0
2021-03-11 21:20:49,378 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5cf95d65]
2021-03-11 21:20:49,378 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6502ff2a]
2021-03-11 21:20:49,379 [main:78] - Generated call from random type = (0.8879969265206952).toChar().plus(test<Sequence<*>>(sequenceOf<Any?>("cdrrl")))
2021-03-11 21:20:49,379 [main:114] - replacement of "fail" of type String is (0.8879969265206952).toChar().plus(test<Sequence<*>>(sequenceOf<Any?>("cdrrl")))
2021-03-11 21:20:49,532 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:20:49,532 [main:66] - Compilation checking started
2021-03-11 21:20:50,249 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = yieldingFunction()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            }
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 {
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) selector(iterator.next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..(Kla3().context).equals(Kla3().prope4).compareTo(false)
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = prope11 fu14 { -467648266 * 2 }
    var prope14 = 0
    for (prope11 in prope13)
        prope14 += prope11
    return if ((Kla7).equals(null).and(true)) (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).substringBefore('薃', test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))) else (0.8879969265206952).toChar().plus(test<Sequence<*>>(sequenceOf<Any?>("cdrrl")))
}


2021-03-11 21:20:50,250 [main:107] - replacing (prope11 fu14 { -467648266 * 2 }, Iterable<Int>)
2021-03-11 21:20:50,250 [main:50] - replacing prope11 fu14 { -467648266 * 2 } Iterable<Int>
2021-03-11 21:20:50,250 [main:54] - Getting value of type Iterable<Int>
2021-03-11 21:20:50,414 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 21:20:50,585 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(elements: Int): Iterable<Int> = TODO()
2021-03-11 21:20:50,592 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(elements: Int): Iterable<Int> = TODO()
2021-03-11 21:20:50,759 [main:302] - generating value of type = Int true depth = 3
2021-03-11 21:20:50,765 [main:95] - GENERATED = listOfNotNull<Int>(-1948448589)
2021-03-11 21:20:50,765 [main:58] - GENERATED VALUE OF TYPE Iterable<Int> = listOfNotNull<Int>(-1948448589)
2021-03-11 21:20:50,765 [main:61] - GENERATED IS CALL =true
2021-03-11 21:20:50,788 [main:67] - randomType = Kla3
2021-03-11 21:20:50,984 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 21:20:50,990 [main:112] - generating klass Kla3 text = class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-11 21:20:51,008 [main:106] - GETTING Iterable<Int> from String
2021-03-11 21:20:51,028 [main:106] - GETTING Iterable<Int> from Function0<Unit>
2021-03-11 21:20:51,039 [main:106] - GETTING Iterable<Int> from CoroutineContext
2021-03-11 21:20:51,048 [main:106] - GETTING Iterable<Int> from Continuation<Any?>
2021-03-11 21:20:51,058 [main:106] - GETTING Iterable<Int> from CoroutineContext
2021-03-11 21:20:51,060 [main:106] - GETTING Iterable<Int> from Any?
2021-03-11 21:20:51,066 [main:106] - GETTING Iterable<Int> from CoroutineContext
2021-03-11 21:20:51,069 [main:106] - GETTING Iterable<Int> from Boolean
2021-03-11 21:20:51,080 [main:106] - GETTING Iterable<Int> from EmptyCoroutineContext
2021-03-11 21:20:51,097 [main:106] - GETTING Iterable<Int> from Continuation<String>
2021-03-11 21:20:51,107 [main:106] - GETTING Iterable<Int> from Kla0
2021-03-11 21:20:51,111 [main:114] - replacement of prope11 fu14 { -467648266 * 2 } of type Iterable<Int> is listOfNotNull<Int>(-1948448589)
2021-03-11 21:20:51,267 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 21:20:51,267 [main:66] - Compilation checking started
2021-03-11 21:20:51,981 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = yieldingFunction()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            }
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 {
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) selector(iterator.next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..(Kla3().context).equals(Kla3().prope4).compareTo(false)
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = listOfNotNull<Int>(-1948448589)
    var prope14 = 0
    for (prope11 in prope13)
        prope14 += prope11
    return if ((Kla7).equals(null).and(true)) (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).substringBefore('薃', test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))) else (0.8879969265206952).toChar().plus(test<Sequence<*>>(sequenceOf<Any?>("cdrrl")))
}


2021-03-11 21:20:51,982 [main:107] - replacing ({
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }, Function0<Function0<Ty2?>>)
2021-03-11 21:20:51,982 [main:50] - replacing {
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            } Function0<Function0<Ty2?>>
2021-03-11 21:20:51,982 [main:54] - Getting value of type Function0<Function0<Ty2?>>
2021-03-11 21:20:52,159 [main:302] - generating value of type = Function0<Function0<Ty2?>> false depth = 0
2021-03-11 21:20:52,165 [main:302] - generating value of type = Function0<Ty2?> false depth = 1
2021-03-11 21:20:52,172 [main:302] - generating value of type = Ty2 false depth = 2
2021-03-11 21:20:52,180 [main:58] - GENERATED VALUE OF TYPE Function0<Function0<Ty2?>> = { { }}
2021-03-11 21:20:52,180 [main:61] - GENERATED IS CALL =false
2021-03-11 21:20:52,205 [main:67] - randomType = Kla2
2021-03-11 21:20:52,374 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 21:20:52,381 [main:112] - generating klass Kla2 text = open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}
2021-03-11 21:20:52,549 [main:194] - Type params = []
2021-03-11 21:20:52,710 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 21:20:52,875 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:20:52,882 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:20:53,255 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 21:20:53,430 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:20:53,437 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:20:54,018 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:20:54,018 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:20:54,038 [main:106] - GETTING Function0<Function0<Ty2?>> from String
2021-03-11 21:20:54,059 [main:106] - GETTING Function0<Function0<Ty2?>> from CoroutineContext
2021-03-11 21:20:54,066 [main:106] - GETTING Function0<Function0<Ty2?>> from Function0<Unit>
2021-03-11 21:20:54,075 [main:106] - GETTING Function0<Function0<Ty2?>> from Boolean
2021-03-11 21:20:54,085 [main:106] - GETTING Function0<Function0<Ty2?>> from EmptyCoroutineContext
2021-03-11 21:20:54,100 [main:106] - GETTING Function0<Function0<Ty2?>> from Continuation<String>
2021-03-11 21:20:54,108 [main:106] - GETTING Function0<Function0<Ty2?>> from Continuation<Any?>
2021-03-11 21:20:54,116 [main:106] - GETTING Function0<Function0<Ty2?>> from CoroutineContext
2021-03-11 21:20:54,117 [main:106] - GETTING Function0<Function0<Ty2?>> from Kla0
2021-03-11 21:20:54,122 [main:106] - GETTING Function0<Function0<Ty2?>> from Any?
2021-03-11 21:20:54,126 [main:106] - GETTING Function0<Function0<Ty2?>> from CoroutineContext
2021-03-11 21:20:54,126 [main:114] - replacement of {
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            } of type Function0<Function0<Ty2?>> is { { }}
2021-03-11 21:20:54,284 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 21:20:54,284 [main:66] - Compilation checking started
2021-03-11 21:20:54,784 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = yieldingFunction()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            }
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 { { }}
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) selector(iterator.next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..(Kla3().context).equals(Kla3().prope4).compareTo(false)
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = listOfNotNull<Int>(-1948448589)
    var prope14 = 0
    for (prope11 in prope13)
        prope14 += prope11
    return if ((Kla7).equals(null).and(true)) (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).substringBefore('薃', test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))) else (0.8879969265206952).toChar().plus(test<Sequence<*>>(sequenceOf<Any?>("cdrrl")))
}


2021-03-11 21:20:54,785 [main:107] - replacing (iterator, Iterator<Ty2>)
2021-03-11 21:20:54,786 [main:50] - replacing iterator Iterator<Ty2>
2021-03-11 21:20:54,786 [main:54] - Getting value of type Iterator<Ty2>
2021-03-11 21:20:54,942 [main:302] - generating value of type = Iterator<Ty2> false depth = 0
2021-03-11 21:20:54,952 [main:58] - GENERATED VALUE OF TYPE Iterator<Ty2> = ShortIterator()
2021-03-11 21:20:54,952 [main:61] - GENERATED IS CALL =true
2021-03-11 21:20:55,154 [main:67] - randomType = String?
2021-03-11 21:20:55,310 [main:302] - generating value of type = String true depth = 0
2021-03-11 21:20:55,344 [main:106] - GETTING Iterator<Ty2> from CoroutineContext
2021-03-11 21:20:55,353 [main:106] - GETTING Iterator<Ty2> from Continuation<String>
2021-03-11 21:20:55,362 [main:106] - GETTING Iterator<Ty2> from String
2021-03-11 21:20:55,382 [main:106] - GETTING Iterator<Ty2> from Kla0
2021-03-11 21:20:55,389 [main:106] - GETTING Iterator<Ty2> from CoroutineContext
2021-03-11 21:20:55,392 [main:106] - GETTING Iterator<Ty2> from Function0<Unit>
2021-03-11 21:20:55,404 [main:106] - GETTING Iterator<Ty2> from Continuation<Any?>
2021-03-11 21:20:55,414 [main:106] - GETTING Iterator<Ty2> from EmptyCoroutineContext
2021-03-11 21:20:55,431 [main:106] - GETTING Iterator<Ty2> from Boolean
2021-03-11 21:20:55,442 [main:106] - GETTING Iterator<Ty2> from CoroutineContext
2021-03-11 21:20:55,444 [main:106] - GETTING Iterator<Ty2> from Any?
2021-03-11 21:20:55,448 [main:114] - replacement of iterator of type Iterator<Ty2> is ShortIterator()
2021-03-11 21:20:55,603 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 21:20:55,604 [main:66] - Compilation checking started
2021-03-11 21:20:56,098 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = yieldingFunction()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            }
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 {
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) selector(ShortIterator().next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..(Kla3().context).equals(Kla3().prope4).compareTo(false)
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = listOfNotNull<Int>(-1948448589)
    var prope14 = 0
    for (prope11 in prope13)
        prope14 += prope11
    return if ((Kla7).equals(null).and(true)) (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).substringBefore('薃', test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))) else (0.8879969265206952).toChar().plus(test<Sequence<*>>(sequenceOf<Any?>("cdrrl")))
}


2021-03-11 21:20:56,099 [main:107] - replacing (selector, Function1<Ty2, Ty3>)
2021-03-11 21:20:56,100 [main:50] - replacing selector Function1<Ty2, Ty3>
2021-03-11 21:20:56,100 [main:54] - Getting value of type Function1<Ty2, Ty3>
2021-03-11 21:20:56,258 [main:302] - generating value of type = Function1<Ty2, Ty3> false depth = 0
2021-03-11 21:20:56,264 [main:302] - generating value of type = Ty3 false depth = 1
2021-03-11 21:20:56,272 [main:58] - GENERATED VALUE OF TYPE Function1<Ty2, Ty3> = {a: Ty2 -> }
2021-03-11 21:20:56,272 [main:61] - GENERATED IS CALL =false
2021-03-11 21:20:56,503 [main:67] - randomType = MutableMap<Char, Int>
2021-03-11 21:20:56,505 [main:106] - GETTING Function1<Ty2, Ty3> from EmptyCoroutineContext
2021-03-11 21:20:56,522 [main:106] - GETTING Function1<Ty2, Ty3> from Any?
2021-03-11 21:20:56,527 [main:106] - GETTING Function1<Ty2, Ty3> from Boolean
2021-03-11 21:20:56,536 [main:106] - GETTING Function1<Ty2, Ty3> from CoroutineContext
2021-03-11 21:20:56,542 [main:106] - GETTING Function1<Ty2, Ty3> from CoroutineContext
2021-03-11 21:20:56,543 [main:106] - GETTING Function1<Ty2, Ty3> from Continuation<String>
2021-03-11 21:20:56,551 [main:106] - GETTING Function1<Ty2, Ty3> from Kla0
2021-03-11 21:20:56,556 [main:106] - GETTING Function1<Ty2, Ty3> from Continuation<Any?>
2021-03-11 21:20:56,564 [main:106] - GETTING Function1<Ty2, Ty3> from String
2021-03-11 21:20:56,581 [main:106] - GETTING Function1<Ty2, Ty3> from CoroutineContext
2021-03-11 21:20:56,582 [main:106] - GETTING Function1<Ty2, Ty3> from Function0<Unit>
2021-03-11 21:20:56,591 [main:114] - replacement of selector of type Function1<Ty2, Ty3> is {a: Ty2 -> }
2021-03-11 21:20:56,748 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 21:20:56,749 [main:66] - Compilation checking started
2021-03-11 21:20:56,758 [main:71] - Wrong syntax or breaks conditions
2021-03-11 21:20:56,758 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = yieldingFunction()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            }
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 {
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) {a: Ty2 -> }(iterator.next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..(Kla3().context).equals(Kla3().prope4).compareTo(false)
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = listOfNotNull<Int>(-1948448589)
    var prope14 = 0
    for (prope11 in prope13)
        prope14 += prope11
    return if ((Kla7).equals(null).and(true)) (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).substringBefore('薃', test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))) else (0.8879969265206952).toChar().plus(test<Sequence<*>>(sequenceOf<Any?>("cdrrl")))
}


2021-03-11 21:20:56,759 [main:107] - replacing (yieldingFunction, Function0<Ty1?>)
2021-03-11 21:20:56,759 [main:50] - replacing yieldingFunction Function0<Ty1?>
2021-03-11 21:20:56,760 [main:54] - Getting value of type Function0<Ty1?>
2021-03-11 21:20:56,917 [main:302] - generating value of type = Function0<Ty1?> false depth = 0
2021-03-11 21:20:56,923 [main:302] - generating value of type = Ty1 false depth = 1
2021-03-11 21:20:56,931 [main:58] - GENERATED VALUE OF TYPE Function0<Ty1?> = { }
2021-03-11 21:20:56,932 [main:61] - GENERATED IS CALL =false
2021-03-11 21:20:57,126 [main:67] - randomType = UByte
2021-03-11 21:20:57,285 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 21:20:57,330 [main:106] - GETTING Function0<Ty1?> from Boolean
2021-03-11 21:20:57,340 [main:106] - GETTING Function0<Ty1?> from Any?
2021-03-11 21:20:57,345 [main:106] - GETTING Function0<Ty1?> from Kla0
2021-03-11 21:20:57,351 [main:106] - GETTING Function0<Ty1?> from CoroutineContext
2021-03-11 21:20:57,357 [main:106] - GETTING Function0<Ty1?> from String
2021-03-11 21:20:57,375 [main:106] - GETTING Function0<Ty1?> from Continuation<Any?>
2021-03-11 21:20:57,383 [main:106] - GETTING Function0<Ty1?> from EmptyCoroutineContext
2021-03-11 21:20:57,397 [main:106] - GETTING Function0<Ty1?> from Function0<Unit>
2021-03-11 21:20:57,406 [main:106] - GETTING Function0<Ty1?> from Continuation<String>
2021-03-11 21:20:57,413 [main:106] - GETTING Function0<Ty1?> from CoroutineContext
2021-03-11 21:20:57,414 [main:106] - GETTING Function0<Ty1?> from CoroutineContext
2021-03-11 21:20:57,414 [main:114] - replacement of yieldingFunction of type Function0<Ty1?> is { }
2021-03-11 21:20:57,571 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 21:20:57,571 [main:66] - Compilation checking started
2021-03-11 21:20:58,081 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = { }()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            }
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 {
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) selector(iterator.next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..(Kla3().context).equals(Kla3().prope4).compareTo(false)
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = listOfNotNull<Int>(-1948448589)
    var prope14 = 0
    for (prope11 in prope13)
        prope14 += prope11
    return if ((Kla7).equals(null).and(true)) (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).substringBefore('薃', test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))) else (0.8879969265206952).toChar().plus(test<Sequence<*>>(sequenceOf<Any?>("cdrrl")))
}


2021-03-11 21:20:58,083 [main:107] - replacing ({
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            }, Function0<Function0<Ty2?>>)
2021-03-11 21:20:58,083 [main:50] - replacing {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            } Function0<Function0<Ty2?>>
2021-03-11 21:20:58,083 [main:54] - Getting value of type Function0<Function0<Ty2?>>
2021-03-11 21:20:58,262 [main:302] - generating value of type = Function0<Function0<Ty2?>> false depth = 0
2021-03-11 21:20:58,268 [main:302] - generating value of type = Function0<Ty2?> false depth = 1
2021-03-11 21:20:58,273 [main:302] - generating value of type = Ty2 false depth = 2
2021-03-11 21:20:58,282 [main:58] - GENERATED VALUE OF TYPE Function0<Function0<Ty2?>> = { { }}
2021-03-11 21:20:58,282 [main:61] - GENERATED IS CALL =false
2021-03-11 21:20:58,700 [main:67] - randomType = UShort?
2021-03-11 21:20:58,861 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 21:20:58,908 [main:106] - GETTING Function0<Function0<Ty2?>> from Any?
2021-03-11 21:20:58,913 [main:106] - GETTING Function0<Function0<Ty2?>> from CoroutineContext
2021-03-11 21:20:58,920 [main:106] - GETTING Function0<Function0<Ty2?>> from Boolean
2021-03-11 21:20:58,929 [main:106] - GETTING Function0<Function0<Ty2?>> from Kla0
2021-03-11 21:20:58,935 [main:106] - GETTING Function0<Function0<Ty2?>> from Continuation<Any?>
2021-03-11 21:20:58,942 [main:106] - GETTING Function0<Function0<Ty2?>> from CoroutineContext
2021-03-11 21:20:58,944 [main:106] - GETTING Function0<Function0<Ty2?>> from CoroutineContext
2021-03-11 21:20:58,945 [main:106] - GETTING Function0<Function0<Ty2?>> from Continuation<String>
2021-03-11 21:20:58,952 [main:106] - GETTING Function0<Function0<Ty2?>> from String
2021-03-11 21:20:58,971 [main:106] - GETTING Function0<Function0<Ty2?>> from EmptyCoroutineContext
2021-03-11 21:20:58,985 [main:106] - GETTING Function0<Function0<Ty2?>> from Function0<Unit>
2021-03-11 21:20:58,994 [main:114] - replacement of {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            } of type Function0<Function0<Ty2?>> is { { }}
2021-03-11 21:20:59,153 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 21:20:59,153 [main:66] - Compilation checking started
2021-03-11 21:20:59,635 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = yieldingFunction()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 { { }}
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 {
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) selector(iterator.next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..(Kla3().context).equals(Kla3().prope4).compareTo(false)
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = listOfNotNull<Int>(-1948448589)
    var prope14 = 0
    for (prope11 in prope13)
        prope14 += prope11
    return if ((Kla7).equals(null).and(true)) (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).substringBefore('薃', test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))) else (0.8879969265206952).toChar().plus(test<Sequence<*>>(sequenceOf<Any?>("cdrrl")))
}


2021-03-11 21:20:59,636 [main:107] - replacing (this, Iterable<Ty2>)
2021-03-11 21:20:59,637 [main:50] - replacing this Iterable<Ty2>
2021-03-11 21:20:59,637 [main:54] - Getting value of type Iterable<Ty2>
2021-03-11 21:20:59,798 [main:302] - generating value of type = Iterable<Ty2> false depth = 0
2021-03-11 21:20:59,967 [main:43] - GENERATING CALL OF fun <T> mutableListOf(elements: Ty2): Iterable<Ty2> = TODO()
2021-03-11 21:20:59,974 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(elements: Ty2): Iterable<Ty2> = TODO()
2021-03-11 21:21:00,176 [main:302] - generating value of type = Ty2 false depth = 3
2021-03-11 21:21:00,185 [main:385] - Cant generate call of fun <T> mutableListOf(elements: Ty2): Iterable<Ty2> = TODO()
2021-03-11 21:21:00,185 [main:58] - GENERATED VALUE OF TYPE Iterable<Ty2> = 
2021-03-11 21:21:00,395 [main:67] - randomType = Short
2021-03-11 21:21:00,561 [main:302] - generating value of type = Short true depth = 0
2021-03-11 21:21:00,618 [main:106] - GETTING Iterable<Ty2> from Continuation<Any?>
2021-03-11 21:21:00,631 [main:106] - GETTING Iterable<Ty2> from EmptyCoroutineContext
2021-03-11 21:21:00,654 [main:106] - GETTING Iterable<Ty2> from CoroutineContext
2021-03-11 21:21:00,663 [main:106] - GETTING Iterable<Ty2> from Function0<Unit>
2021-03-11 21:21:00,676 [main:106] - GETTING Iterable<Ty2> from CoroutineContext
2021-03-11 21:21:00,679 [main:106] - GETTING Iterable<Ty2> from Continuation<String>
2021-03-11 21:21:00,688 [main:106] - GETTING Iterable<Ty2> from Kla0
2021-03-11 21:21:00,696 [main:106] - GETTING Iterable<Ty2> from CoroutineContext
2021-03-11 21:21:00,698 [main:106] - GETTING Iterable<Ty2> from String
2021-03-11 21:21:00,720 [main:106] - GETTING Iterable<Ty2> from Any?
2021-03-11 21:21:00,726 [main:106] - GETTING Iterable<Ty2> from Boolean
2021-03-11 21:21:00,734 [main:111] - Cant find and generate replacement for this type Iterable<Ty2>
2021-03-11 21:21:00,734 [main:107] - replacing (iterator.next(), Ty2)
2021-03-11 21:21:00,735 [main:50] - replacing iterator.next() Ty2
2021-03-11 21:21:00,735 [main:54] - Getting value of type Ty2
2021-03-11 21:21:00,891 [main:302] - generating value of type = Ty2 false depth = 0
2021-03-11 21:21:00,899 [main:58] - GENERATED VALUE OF TYPE Ty2 = 
2021-03-11 21:21:01,503 [main:67] - randomType = Map<Kla1, UInt>
2021-03-11 21:21:01,504 [main:106] - GETTING Ty2 from Continuation<String>
2021-03-11 21:21:01,515 [main:106] - GETTING Ty2 from String
2021-03-11 21:21:01,538 [main:106] - GETTING Ty2 from Boolean
2021-03-11 21:21:01,546 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-11 21:21:01,552 [main:106] - GETTING Ty2 from EmptyCoroutineContext
2021-03-11 21:21:01,565 [main:106] - GETTING Ty2 from Continuation<Any?>
2021-03-11 21:21:01,572 [main:106] - GETTING Ty2 from Function0<Unit>
2021-03-11 21:21:01,581 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-11 21:21:01,581 [main:106] - GETTING Ty2 from Kla0
2021-03-11 21:21:01,586 [main:106] - GETTING Ty2 from Any?
2021-03-11 21:21:01,590 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-11 21:21:01,590 [main:111] - Cant find and generate replacement for iterator.next() type Ty2
2021-03-11 21:21:01,590 [main:107] - replacing (hasNext(), Boolean)
2021-03-11 21:21:01,590 [main:50] - replacing hasNext() Boolean
2021-03-11 21:21:01,590 [main:54] - Getting value of type Boolean
2021-03-11 21:21:01,746 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:21:01,752 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 21:21:01,752 [main:61] - GENERATED IS CALL =false
2021-03-11 21:21:04,056 [main:67] - randomType = MutableMap<Long?, Function2<ArrayDeque<Kla7?>?, MutableMap<Kla5?, UInt?>, Float>>
2021-03-11 21:21:04,057 [main:106] - GETTING Boolean from CoroutineContext
2021-03-11 21:21:04,065 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4a9863f6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@195f7478]]
2021-03-11 21:21:04,066 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4a9863f6]
2021-03-11 21:21:04,066 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@195f7478]
2021-03-11 21:21:04,066 [main:117] - GENERATED CALL = (Kla7.context).equals(Kla3().prope4).or(Kla6().prope7)
2021-03-11 21:21:04,066 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4a9863f6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14f5137e]]
2021-03-11 21:21:04,066 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4a9863f6]
2021-03-11 21:21:04,226 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:21:04,226 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14f5137e]
2021-03-11 21:21:04,381 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:21:04,382 [main:117] - GENERATED CALL = (Kla7.context).equals("totrj").equals("wqjhx")
2021-03-11 21:21:04,382 [main:113] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@140ba62c], public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@54ccb107]]
2021-03-11 21:21:04,382 [main:149] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@140ba62c]
2021-03-11 21:21:04,537 [main:302] - generating value of type = R false depth = 0
2021-03-11 21:21:05,106 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: ArrayList<Kla0>, block: T.()->Byte): R = TODO()
2021-03-11 21:21:05,113 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: ArrayList<Kla0>, block: T.()->Byte): R = TODO()
2021-03-11 21:21:05,476 [main:302] - generating value of type = ArrayList<Kla0> false depth = 3
2021-03-11 21:21:05,640 [main:43] - GENERATING CALL OF fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<Kla0> = TODO()
2021-03-11 21:21:05,647 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<Kla0> = TODO()
2021-03-11 21:21:06,054 [main:302] - generating value of type = Int true depth = 6
2021-03-11 21:21:06,060 [main:95] - GENERATED = ArrayList<Kla0>(-911704540)
2021-03-11 21:21:06,060 [main:385] - Cant generate call of fun <T, R> with(receiver: ArrayList<Kla0>, block: T.()->Byte): R = TODO()
2021-03-11 21:21:06,217 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-11 21:21:06,223 [main:302] - generating value of type = R false depth = 1
2021-03-11 21:21:07,056 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->Triple<UInt, Function1<String, Kla7>, Kla2>): R = TODO()
2021-03-11 21:21:07,064 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->Triple<UInt, Function1<String, Kla7>, Kla2>): R = TODO()
2021-03-11 21:21:07,647 [main:302] - generating value of type = Any false depth = 4
2021-03-11 21:21:07,648 [main:302] - generating value of type = Function0<Triple<UInt, Function1<String, Kla7>, Kla2>> false depth = 4
2021-03-11 21:21:07,655 [main:302] - generating value of type = Triple<UInt, Function1<String, Kla7>, Kla2> false depth = 5
2021-03-11 21:21:07,836 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: UInt, second: Function1<String, Kla7>, third: Kla2): Triple<UInt, Function1<String, Kla7>, Kla2> = TODO()
2021-03-11 21:21:07,844 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: UInt, second: Function1<String, Kla7>, third: Kla2): Triple<UInt, Function1<String, Kla7>, Kla2> = TODO()
2021-03-11 21:21:08,026 [main:302] - generating value of type = UInt true depth = 8
2021-03-11 21:21:08,033 [main:302] - generating value of type = Function1<String, Kla7> false depth = 8
2021-03-11 21:21:08,038 [main:302] - generating value of type = Kla7 false depth = 9
2021-03-11 21:21:08,045 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 21:21:08,046 [main:302] - generating value of type = Kla2 false depth = 8
2021-03-11 21:21:08,051 [main:112] - generating klass Kla2 text = open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}
2021-03-11 21:21:08,223 [main:194] - Type params = []
2021-03-11 21:21:08,390 [main:302] - generating value of type = CoroutineContext false depth = 10
2021-03-11 21:21:08,566 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:21:08,575 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:21:08,981 [main:302] - generating value of type = Key<*> false depth = 13
2021-03-11 21:21:09,154 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:21:09,161 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:21:09,818 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 16
2021-03-11 21:21:09,818 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:21:09,818 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:21:09,818 [main:95] - GENERATED = Triple<UInt, Function1<String, Kla7>, Kla2>(1463675203.toUInt(), {a: String -> Kla7}, Kla2())
2021-03-11 21:21:09,818 [main:95] - GENERATED = synchronized<Triple<UInt, Function1<String, Kla7>, Kla2>>("inlqj", { Triple<UInt, Function1<String, Kla7>, Kla2>(1463675203.toUInt(), {a: String -> Kla7}, Kla2())})
2021-03-11 21:21:09,819 [main:158] - CANT GENERATE PARAMS FOR public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@140ba62c]
2021-03-11 21:21:09,819 [main:113] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@140ba62c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@75304b3b]]
2021-03-11 21:21:09,819 [main:149] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@140ba62c]
2021-03-11 21:21:09,980 [main:302] - generating value of type = R false depth = 0
2021-03-11 21:21:10,978 [main:43] - GENERATING CALL OF fun <R> run(block: ()->LinkedHashMap<Map<Kla4<Long>, Double>, Short>): R = TODO()
2021-03-11 21:21:10,985 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->LinkedHashMap<Map<Kla4<Long>, Double>, Short>): R = TODO()
2021-03-11 21:21:11,366 [main:302] - generating value of type = Function0<LinkedHashMap<Map<Kla4<Long>, Double>, Short>> false depth = 3
2021-03-11 21:21:11,372 [main:302] - generating value of type = LinkedHashMap<Map<Kla4<Long>, Double>, Short> false depth = 4
2021-03-11 21:21:11,537 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Map<Kla4<Long>, Double>, Short> = TODO()
2021-03-11 21:21:11,544 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Map<Kla4<Long>, Double>, Short> = TODO()
2021-03-11 21:21:11,708 [main:95] - GENERATED = linkedMapOf<Map<Kla4<Long>, Double>, Short>()
2021-03-11 21:21:11,708 [main:95] - GENERATED = run<LinkedHashMap<Map<Kla4<Long>, Double>, Short>>({ linkedMapOf<Map<Kla4<Long>, Double>, Short>()})
2021-03-11 21:21:11,866 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-11 21:21:11,872 [main:302] - generating value of type = R false depth = 1
2021-03-11 21:21:13,024 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Kla0, block: T.()->ArrayDeque<Function1<Float, ULong?>>): R = TODO()
2021-03-11 21:21:13,031 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Kla0, block: T.()->ArrayDeque<Function1<Float, ULong?>>): R = TODO()
2021-03-11 21:21:13,409 [main:302] - generating value of type = Kla0 false depth = 4
2021-03-11 21:21:13,414 [main:112] - generating klass Kla0 text = class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}
2021-03-11 21:21:13,415 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<T, ArrayDeque<Function1<Float, ULong?>>> false depth = 4
2021-03-11 21:21:13,420 [main:302] - generating value of type = ArrayDeque<Function1<Float, ULong?>> false depth = 5
2021-03-11 21:21:13,584 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Function1<Float, ULong?>> = TODO()
2021-03-11 21:21:13,632 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Function1<Float, ULong?>> = TODO()
2021-03-11 21:21:13,988 [main:302] - generating value of type = Int true depth = 8
2021-03-11 21:21:13,994 [main:95] - GENERATED = ArrayDeque<Function1<Float, ULong?>>(653034580)
2021-03-11 21:21:13,995 [main:95] - GENERATED = with<Kla0, ArrayDeque<Function1<Float, ULong?>>>(Kla0(), { ArrayDeque<Function1<Float, ULong?>>(653034580)})
2021-03-11 21:21:13,995 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@75304b3b]
2021-03-11 21:21:14,149 [main:302] - generating value of type = T false depth = 0
2021-03-11 21:21:14,499 [main:43] - GENERATING CALL OF fun <T> checkNotNull(value: ULong, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 21:21:14,506 [main:61] - WITHOUT TYPE PARAMS = fun <T> checkNotNull(value: ULong, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 21:21:14,863 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 21:21:14,869 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-11 21:21:14,875 [main:302] - generating value of type = Any false depth = 4
2021-03-11 21:21:14,875 [main:95] - GENERATED = checkNotNull<ULong>(1117086028129394792.toULong(), { "gcqlg"})
2021-03-11 21:21:14,876 [main:117] - GENERATED CALL = (Kla7.context).fold(run<LinkedHashMap<Map<Kla4<Long>, Double>, Short>>({ linkedMapOf<Map<Kla4<Long>, Double>, Short>()}), {a: R, b: Element -> with<Kla0, ArrayDeque<Function1<Float, ULong?>>>(Kla0(), { ArrayDeque<Function1<Float, ULong?>>(653034580)})})?.contains(checkNotNull<ULong>(1117086028129394792.toULong(), { "gcqlg"}))
2021-03-11 21:21:14,876 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4a9863f6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4df7e8b]]
2021-03-11 21:21:14,876 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4a9863f6]
2021-03-11 21:21:14,876 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4df7e8b]
2021-03-11 21:21:15,031 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 21:21:15,037 [main:117] - GENERATED CALL = (Kla7.context).equals(Kla3().prope4).xor(false)
2021-03-11 21:21:15,037 [main:113] - Case = [public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@6ac9fc87], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext.Element[DeserializedSimpleFunctionDescriptor@7ceacf6a]]
2021-03-11 21:21:15,037 [main:149] - GENERATING call of type public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@6ac9fc87]
2021-03-11 21:21:15,191 [main:302] - generating value of type = Key<E> false depth = 0
2021-03-11 21:21:15,361 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-11 21:21:15,368 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-11 21:21:15,936 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-11 21:21:15,936 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@6ac9fc87]
2021-03-11 21:21:15,936 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4a9863f6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2e220c0c]]
2021-03-11 21:21:15,936 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4a9863f6]
2021-03-11 21:21:16,090 [main:302] - generating value of type = Any false depth = 0
2021-03-11 21:21:16,091 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2e220c0c]
2021-03-11 21:21:16,092 [main:117] - GENERATED CALL = (Kla7.context).equals("iajui").and(Kla6().prope7)
2021-03-11 21:21:16,092 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4a9863f6]]
2021-03-11 21:21:16,092 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4a9863f6]
2021-03-11 21:21:16,092 [main:117] - GENERATED CALL = (Kla7.context).equals(Kla3().prope4)
2021-03-11 21:21:16,092 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4a9863f6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@61d3ee02]]
2021-03-11 21:21:16,092 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4a9863f6]
2021-03-11 21:21:16,092 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@61d3ee02]
2021-03-11 21:21:16,093 [main:117] - GENERATED CALL = (Kla7.context).equals(Kla3().prope4).not()
2021-03-11 21:21:16,093 [main:114] - replacement of hasNext() of type Boolean is (Kla7.context).equals("totrj").equals("wqjhx")
2021-03-11 21:21:16,246 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 21:21:16,247 [main:66] - Compilation checking started
2021-03-11 21:21:16,734 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = yieldingFunction()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if (iterator.(Kla7.context).equals("totrj").equals("wqjhx")) iterator.next() else null }
            }
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 {
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) selector(iterator.next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..(Kla3().context).equals(Kla3().prope4).compareTo(false)
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = listOfNotNull<Int>(-1948448589)
    var prope14 = 0
    for (prope11 in prope13)
        prope14 += prope11
    return if ((Kla7).equals(null).and(true)) (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).substringBefore('薃', test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))) else (0.8879969265206952).toChar().plus(test<Sequence<*>>(sequenceOf<Any?>("cdrrl")))
}


2021-03-11 21:21:16,735 [main:107] - replacing (next, Ty2)
2021-03-11 21:21:16,735 [main:50] - replacing next Ty2
2021-03-11 21:21:16,735 [main:54] - Getting value of type Ty2
2021-03-11 21:21:16,892 [main:302] - generating value of type = Ty2 false depth = 0
2021-03-11 21:21:16,900 [main:58] - GENERATED VALUE OF TYPE Ty2 = 
2021-03-11 21:21:16,923 [main:67] - randomType = Kla6
2021-03-11 21:21:17,078 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 21:21:17,084 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 21:21:17,091 [main:106] - GETTING Ty2 from Continuation<Any?>
2021-03-11 21:21:17,099 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-11 21:21:17,105 [main:106] - GETTING Ty2 from String
2021-03-11 21:21:17,123 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-11 21:21:17,124 [main:106] - GETTING Ty2 from Function0<Unit>
2021-03-11 21:21:17,133 [main:106] - GETTING Ty2 from Any?
2021-03-11 21:21:17,136 [main:106] - GETTING Ty2 from Boolean
2021-03-11 21:21:17,145 [main:106] - GETTING Ty2 from EmptyCoroutineContext
2021-03-11 21:21:17,159 [main:106] - GETTING Ty2 from Kla0
2021-03-11 21:21:17,163 [main:106] - GETTING Ty2 from Continuation<String>
2021-03-11 21:21:17,170 [main:106] - GETTING Ty2 from CoroutineContext
2021-03-11 21:21:17,170 [main:111] - Cant find and generate replacement for next type Ty2
2021-03-11 21:21:17,170 [main:107] - replacing (yielderFactory, Function0<Function0<Ty1?>>)
2021-03-11 21:21:17,170 [main:50] - replacing yielderFactory Function0<Function0<Ty1?>>
2021-03-11 21:21:17,170 [main:54] - Getting value of type Function0<Function0<Ty1?>>
2021-03-11 21:21:17,324 [main:302] - generating value of type = Function0<Function0<Ty1?>> false depth = 0
2021-03-11 21:21:17,330 [main:302] - generating value of type = Function0<Ty1?> false depth = 1
2021-03-11 21:21:17,335 [main:302] - generating value of type = Ty1 false depth = 2
2021-03-11 21:21:17,344 [main:58] - GENERATED VALUE OF TYPE Function0<Function0<Ty1?>> = { { }}
2021-03-11 21:21:17,344 [main:61] - GENERATED IS CALL =false
2021-03-11 21:21:17,746 [main:67] - randomType = UInt?
2021-03-11 21:21:17,913 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 21:21:17,953 [main:106] - GETTING Function0<Function0<Ty1?>> from Any?
2021-03-11 21:21:17,957 [main:106] - GETTING Function0<Function0<Ty1?>> from Function0<Unit>
2021-03-11 21:21:17,968 [main:106] - GETTING Function0<Function0<Ty1?>> from Kla0
2021-03-11 21:21:17,973 [main:106] - GETTING Function0<Function0<Ty1?>> from Continuation<String>
2021-03-11 21:21:17,982 [main:106] - GETTING Function0<Function0<Ty1?>> from CoroutineContext
2021-03-11 21:21:17,988 [main:106] - GETTING Function0<Function0<Ty1?>> from CoroutineContext
2021-03-11 21:21:17,990 [main:106] - GETTING Function0<Function0<Ty1?>> from CoroutineContext
2021-03-11 21:21:17,992 [main:106] - GETTING Function0<Function0<Ty1?>> from Continuation<Any?>
2021-03-11 21:21:18,000 [main:106] - GETTING Function0<Function0<Ty1?>> from String
2021-03-11 21:21:18,021 [main:106] - GETTING Function0<Function0<Ty1?>> from Boolean
2021-03-11 21:21:18,030 [main:106] - GETTING Function0<Function0<Ty1?>> from EmptyCoroutineContext
2021-03-11 21:21:18,045 [main:114] - replacement of yielderFactory of type Function0<Function0<Ty1?>> is { { }}
2021-03-11 21:21:18,199 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 21:21:18,200 [main:66] - Compilation checking started
2021-03-11 21:21:18,718 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = yieldingFunction()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9({ { }}())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            }
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 {
                val iterator = this.iterator()
                fun fu15() : Ty2? {
                    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) selector(iterator.next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..(Kla3().context).equals(Kla3().prope4).compareTo(false)
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = listOfNotNull<Int>(-1948448589)
    var prope14 = 0
    for (prope11 in prope13)
        prope14 += prope11
    return if ((Kla7).equals(null).and(true)) (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).substringBefore('薃', test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))) else (0.8879969265206952).toChar().plus(test<Sequence<*>>(sequenceOf<Any?>("cdrrl")))
}


2021-03-11 21:21:18,720 [main:107] - replacing (this, Iterable<Ty2>)
2021-03-11 21:21:18,720 [main:50] - replacing this Iterable<Ty2>
2021-03-11 21:21:18,720 [main:54] - Getting value of type Iterable<Ty2>
2021-03-11 21:21:18,880 [main:302] - generating value of type = Iterable<Ty2> false depth = 0
2021-03-11 21:21:19,046 [main:43] - GENERATING CALL OF fun <T> setOf(): Iterable<Ty2> = TODO()
2021-03-11 21:21:19,053 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(): Iterable<Ty2> = TODO()
2021-03-11 21:21:19,220 [main:95] - GENERATED = setOf<Ty2>()
2021-03-11 21:21:19,220 [main:58] - GENERATED VALUE OF TYPE Iterable<Ty2> = setOf<Ty2>()
2021-03-11 21:21:19,220 [main:61] - GENERATED IS CALL =true
2021-03-11 21:21:19,621 [main:67] - randomType = Array<Kla2>
2021-03-11 21:21:19,777 [main:302] - generating value of type = Array<Kla2> false depth = 0
2021-03-11 21:21:19,941 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Kla2): Array<Kla2> = TODO()
2021-03-11 21:21:19,949 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Kla2): Array<Kla2> = TODO()
2021-03-11 21:21:20,115 [main:302] - generating value of type = Kla2 false depth = 3
2021-03-11 21:21:20,121 [main:112] - generating klass Kla2 text = open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}
2021-03-11 21:21:20,275 [main:194] - Type params = []
2021-03-11 21:21:20,430 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-11 21:21:20,595 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:21:20,602 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:21:20,973 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-11 21:21:21,142 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:21:21,149 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:21:21,772 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 21:21:21,773 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 21:21:21,773 [main:95] - GENERATED = arrayOf<Kla2>(Kla2())
2021-03-11 21:21:21,791 [main:106] - GETTING Iterable<Ty2> from CoroutineContext
2021-03-11 21:21:21,803 [main:106] - GETTING Iterable<Ty2> from Kla0
2021-03-11 21:21:21,812 [main:106] - GETTING Iterable<Ty2> from Any?
2021-03-11 21:21:21,819 [main:106] - GETTING Iterable<Ty2> from String
2021-03-11 21:21:21,840 [main:106] - GETTING Iterable<Ty2> from EmptyCoroutineContext
2021-03-11 21:21:21,857 [main:106] - GETTING Iterable<Ty2> from Function0<Unit>
2021-03-11 21:21:21,868 [main:106] - GETTING Iterable<Ty2> from CoroutineContext
2021-03-11 21:21:21,871 [main:106] - GETTING Iterable<Ty2> from Continuation<String>
2021-03-11 21:21:21,880 [main:106] - GETTING Iterable<Ty2> from Boolean
2021-03-11 21:21:21,891 [main:106] - GETTING Iterable<Ty2> from Continuation<Any?>
2021-03-11 21:21:21,901 [main:106] - GETTING Iterable<Ty2> from CoroutineContext
2021-03-11 21:21:21,901 [main:114] - replacement of this of type Iterable<Ty2> is setOf<Ty2>()
2021-03-11 21:21:22,063 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 21:21:22,063 [main:66] - Compilation checking started
2021-03-11 21:21:22,739 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun <T : Sequence<*>> test(sequence: T): String {
    val s = StringBuilder()

    for ((index, x) in sequence.withIndex()) {
        s.append("$index:$x;")
    }

    return s.toString()
}

class Kla0 {
    fun fu4() {
        fu1 { assert(false) }
    }
}

class Kla1

fun fu0(): Kla0 {
    val prope2 = Kla1::class.java.classLoader
    prope2.setPackageAssertionStatus(test<Sequence<*>>(emptySequence<Any?>()), false)
    val prope3 = prope2.loadClass((test<Sequence<*>>(emptySequence<Any?>())).replaceIndentByMargin(test<Sequence<*>>(emptySequence<Any?>()), test<Sequence<*>>(emptySequence<Any?>())))
    return prope3.newInstance() as Kla0
}

fun fu1(prope3: suspend () -> Unit) {
    prope3.startCoroutine(Kla2)
}

fun box462(): String {
    var prope3 = Kla0()
    Kla0().fu4()

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        (test<Sequence<*>>(emptySequence<Any?>()))?.subSequence(2070291854, (test<Sequence<*>>(emptySequence<Any?>())).length.or(1135707467)).forEachIndexed({a: Int, b: Char -> print("dvxfx")})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope4: Result<Any?>) {
        runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        Kla3().prope4 = runCatching<Any?>({ "clrvw"}).getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu5(UninitializedPropertyAccessException())
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false, { "ljoze"})}

    fun fu7(prope3: Continuation<*>) {
        if (prope3 !is CoroutineStackFrame) error("tydtu")
        prope5.clear()
        var prope9: CoroutineStackFrame? = prope3
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu8(method: String) {
        prope5.find { false}?.let { error((test<Sequence<*>>(emptySequence<Any?>())).takeLastWhile({a: Char -> false}) +
                prope5.joinToString(separator = "tjfnf")) }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith((test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)).lowercase()) == (test<Sequence<*>>(emptySequence<Any?>())).get((test<Sequence<*>>(emptySequence<Any?>())).length).isISOControl() } ?: error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix("icvrb"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope6 = 0
    var prope7 = (test<Sequence<*>>(emptySequence<Any?>())).equals("bumri").equals("ehfbb")

    var prope8: () -> Unit = { check(false, { "pwfef"})}

    fun fu10() {
        prope6 = (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).toInt()
        prope7 = (test<Sequence<*>>(emptySequence<Any?>())).none()
        prope8 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat((test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())), {a: Int -> require(false, { "sgsyn"})})}

    fun fu4(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (test<Sequence<*>>(emptySequence<Any?>())).length.takeHighestOneBit()..(test<Sequence<*>>(emptySequence<Any?>())).length.or(-1163315228)) {
            if (prope6 != (test<Sequence<*>>(emptySequence<Any?>())).compareTo(test<Sequence<*>>(emptySequence<Any?>())).plus(0)) error((test<Sequence<*>>(emptySequence<Any?>())).trim())
            prope8()
        }
        if ((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))
            error((test<Sequence<*>>(emptySequence<Any?>())).removeSuffix(StringBuilder(StringBuilder("yvygk"))))
        if ((Pair<Long, Kla2>(7875962512436594265, Kla2())).equals("mjiyi").and(checkFinished && ('')?.dec().isSurrogate())) error((test<Sequence<*>>(emptySequence<Any?>())).replaceAfter('봣', "bzctt", test<Sequence<*>>(emptySequence<Any?>())))
        prope8()
        if (checkFinished && ('')?.dec().isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla6().prope8 = { repeat(667998297, {a: Int -> require((test<Sequence<*>>(emptySequence<Any?>())).length.equals("kiult"))})}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

class Kla9<Ty1>(val yieldingFunction : ()->Ty1?) : Iterator<Ty1>
{
    var prope10 : Ty1? = yieldingFunction()
    override fun next(): Ty1 {
        val next = prope10;
        if (next != null)
        {
            prope10 = yieldingFunction()
            return next
        }
        else throw IndexOutOfBoundsException()
    }
    override fun hasNext(): Boolean = prope10 != null
}

class Kla10<Ty1>(val yielderFactory : ()->(()->Ty1?)) : Iterable<Ty1>
{
    override fun iterator(): Iterator<Ty1> = Kla9(yielderFactory())
}

public fun<Ty2> Iterable<Ty2>.fu12() : Iterable<Ty2>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if (iterator.hasNext()) iterator.next() else null }
            }
        }

infix fun<Ty2> Iterable<Ty2>.fu13(predicate : (Ty2)->Boolean) : Iterable<Ty2>
        {
            return Kla10 {
                val iterator = setOf<Ty2>().iterator()
                fun fu15() : Ty2? {
                    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
while(iterator.hasNext())
                    {
                        val next = iterator.next()
                        if (predicate(next))
                            return next
                    }
                    return null
                }
                    { fu15() }
            }
        }

infix fun<Ty2, Ty3> Iterable<Ty2>.fu14(selector : (Ty2)->Ty3) : Iterable<Ty3>
        {
            var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
return Kla10 {
                val iterator = this.iterator();
                { if(iterator.hasNext()) selector(iterator.next()) else null }
            }
        }

fun box773() : String {
    var prope3 = Kla0()
val prope0 = Kla5()
val prope1 = Kla6()
val prope11 = 0..(Kla3().context).equals(Kla3().prope4).compareTo(false)
    val prope12 = prope11 fu13 { (Kla7.context).equals("cnkwl").compareTo(Kla6().prope7) == 0 }
    val prope13 = listOfNotNull<Int>(-1948448589)
    var prope14 = 0
    for (prope11 in prope13)
        prope14 += prope11
    return if ((Kla7).equals(null).and(true)) (test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))).substringBefore('薃', test<Sequence<*>>(sequenceOf<Any?>("cdrrl"))) else (0.8879969265206952).toChar().plus(test<Sequence<*>>(sequenceOf<Any?>("cdrrl")))
}


2021-03-11 21:21:22,740 [main:107] - replacing (iterator.next(), Ty2)
2021-03-11 21:21:22,740 [main:50] - replacing iterator.next() Ty2
2021-03-11 21:21:22,740 [main:54] - Getting value of type Ty2
