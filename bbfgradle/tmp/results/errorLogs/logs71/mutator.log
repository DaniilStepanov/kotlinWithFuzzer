2021-03-12 03:17:59,150 [main:66] - Compilation checking started
2021-03-12 03:18:00,236 [main:50] - replacing val x: Long Long
2021-03-12 03:18:00,237 [main:54] - Getting value of type Long
2021-03-12 03:18:00,408 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:18:00,410 [main:58] - GENERATED VALUE OF TYPE Long = 7680882311614337104
2021-03-12 03:18:00,410 [main:61] - GENERATED IS CALL =false
2021-03-12 03:18:01,018 [main:67] - randomType = ULong
2021-03-12 03:18:01,143 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 03:18:01,297 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@4d9aaed2]
2021-03-12 03:18:01,300 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.takeHighestOneBit(): kotlin.Long defined in kotlin[DeserializedSimpleFunctionDescriptor@13ef6f49]
2021-03-12 03:18:01,303 [main:78] - Generated call from random type = (6054569144400716644.toULong()).toLong().takeHighestOneBit()
2021-03-12 03:18:01,305 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 03:18:01,305 [main:66] - Compilation checking started
2021-03-12 03:18:01,308 [main:71] - Wrong syntax or breaks conditions
2021-03-12 03:18:01,308 [main:49] - Result = false
Text:
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long = 7680882311614337104) : A<Foo> {
    override fun foo(a: Foo) {}
}
2021-03-12 03:18:01,310 [main:302] - generating value of type = Foo false depth = 0
2021-03-12 03:18:01,311 [main:112] - generating klass Foo text = inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}
2021-03-12 03:18:01,415 [main:194] - Type params = []
2021-03-12 03:18:01,533 [main:302] - generating value of type = Long true depth = 2
2021-03-12 03:18:01,535 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 03:18:01,536 [main:66] - Compilation checking started
2021-03-12 03:18:01,537 [main:71] - Wrong syntax or breaks conditions
2021-03-12 03:18:01,538 [main:49] - Result = false
Text:
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo = Foo(-3913648833303995769)) {}
}
2021-03-12 03:18:01,733 [main:112] - generating klass A text = interface A<T> {
    fun foo(a: T)
}
2021-03-12 03:18:02,191 [main:302] - generating value of type = Foo false depth = 1
2021-03-12 03:18:02,191 [main:112] - generating klass Foo text = inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}
2021-03-12 03:18:02,267 [main:194] - Type params = []
2021-03-12 03:18:02,375 [main:302] - generating value of type = Long true depth = 3
2021-03-12 03:18:02,378 [main:112] - generating klass Foo text = inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}
2021-03-12 03:18:02,475 [main:194] - Type params = []
2021-03-12 03:18:02,576 [main:302] - generating value of type = Long true depth = 1
2021-03-12 03:18:02,806 [main:45] - Trying to change 0 nodes
2021-03-12 03:18:02,916 [main:41] - AFTER TRY 0 res = interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}
2021-03-12 03:18:03,060 [main:112] - generating klass A text = interface A<T> {
    fun foo(a: T)
}
2021-03-12 03:18:03,405 [main:302] - generating value of type = Foo false depth = 1
2021-03-12 03:18:03,405 [main:112] - generating klass Foo text = inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}
2021-03-12 03:18:03,504 [main:194] - Type params = []
2021-03-12 03:18:03,601 [main:302] - generating value of type = Long true depth = 3
2021-03-12 03:18:03,603 [main:112] - generating klass Foo text = inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}
2021-03-12 03:18:03,690 [main:194] - Type params = []
2021-03-12 03:18:03,773 [main:302] - generating value of type = Long true depth = 1
2021-03-12 03:18:03,940 [main:43] - Try №0
2021-03-12 03:18:05,270 [main:69] - Trying to insert fun box119(): String {
    val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable(prope0) as Object).getClass()

    return if (prope1 == prope2) "OK" else "$prope1 $prope2"
}
2021-03-12 03:18:05,371 [main:66] - Compilation checking started
2021-03-12 03:18:05,955 [main:103] - Trying to change 7 nodes
2021-03-12 03:18:05,955 [main:107] - replacing (prope0, Function0<Unit>)
2021-03-12 03:18:05,955 [main:50] - replacing prope0 Function0<Unit>
2021-03-12 03:18:05,955 [main:54] - Getting value of type Function0<Unit>
2021-03-12 03:18:06,059 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 03:18:06,059 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 03:18:06,161 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 03:18:06,163 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 03:18:06,373 [main:302] - generating value of type = Any false depth = 4
2021-03-12 03:18:06,375 [main:95] - GENERATED = print("okyjq")
2021-03-12 03:18:06,376 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("okyjq")}
2021-03-12 03:18:06,376 [main:61] - GENERATED IS CALL =false
2021-03-12 03:18:07,075 [main:67] - randomType = Function2<Short, List<Foo>, Pair<Float, Char>>
2021-03-12 03:18:07,077 [main:106] - GETTING Function0<Unit> from Long
2021-03-12 03:18:07,162 [main:114] - replacement of prope0 of type Function0<Unit> is { print("okyjq")}
2021-03-12 03:18:07,242 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 03:18:07,242 [main:66] - Compilation checking started
2021-03-12 03:18:07,657 [main:53] - Result = true
Text:
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return if (prope1 == prope2) "OK" else "$prope1 $prope2"
}


2021-03-12 03:18:07,657 [main:107] - replacing (prope0, Function0<Unit>)
2021-03-12 03:18:07,658 [main:50] - replacing prope0 Function0<Unit>
2021-03-12 03:18:07,658 [main:54] - Getting value of type Function0<Unit>
2021-03-12 03:18:07,757 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 03:18:07,757 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 03:18:07,851 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 03:18:07,853 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 03:18:08,036 [main:302] - generating value of type = Any false depth = 4
2021-03-12 03:18:08,036 [main:95] - GENERATED = println("agmys")
2021-03-12 03:18:08,036 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("agmys")}
2021-03-12 03:18:08,037 [main:61] - GENERATED IS CALL =false
2021-03-12 03:18:08,241 [main:67] - randomType = UInt?
2021-03-12 03:18:08,330 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 03:18:08,440 [main:106] - GETTING Function0<Unit> from Long
2021-03-12 03:18:08,523 [main:114] - replacement of prope0 of type Function0<Unit> is { println("agmys")}
2021-03-12 03:18:08,605 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 03:18:08,605 [main:66] - Compilation checking started
2021-03-12 03:18:09,029 [main:53] - Result = true
Text:
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { }
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return if (prope1 == prope2) "OK" else "$prope1 $prope2"
}


2021-03-12 03:18:09,029 [main:107] - replacing (if (prope1 == prope2) "OK" else "$prope1 $prope2", String)
2021-03-12 03:18:09,029 [main:50] - replacing if (prope1 == prope2) "OK" else "$prope1 $prope2" String
2021-03-12 03:18:09,030 [main:54] - Getting value of type String
2021-03-12 03:18:09,117 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:18:09,117 [main:58] - GENERATED VALUE OF TYPE String = "ugvti"
2021-03-12 03:18:09,117 [main:61] - GENERATED IS CALL =false
2021-03-12 03:18:09,208 [main:67] - randomType = UShort
2021-03-12 03:18:09,305 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 03:18:09,355 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@751ae3d]
2021-03-12 03:18:09,439 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 03:18:09,440 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5067b8d9]
2021-03-12 03:18:09,520 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:18:09,521 [main:78] - Generated call from random type = (24564.toUShort()).compareTo(12.toUByte()).toString(-2127095700)
2021-03-12 03:18:09,522 [main:106] - GETTING String from Long
2021-03-12 03:18:09,557 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6009b817], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5067b8d9]]
2021-03-12 03:18:09,557 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6009b817]
2021-03-12 03:18:09,557 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5067b8d9]
2021-03-12 03:18:09,638 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:18:09,640 [main:117] - GENERATED CALL = (Foo(-1684647957278571901).x).toInt().toString(2015211743)
2021-03-12 03:18:09,640 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]]
2021-03-12 03:18:09,640 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]
2021-03-12 03:18:09,720 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:18:09,721 [main:117] - GENERATED CALL = (Foo(-1684647957278571901).x).toString(1212841193)
2021-03-12 03:18:09,721 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@66277dde], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48b50a1]]
2021-03-12 03:18:09,722 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@66277dde]
2021-03-12 03:18:09,722 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48b50a1]
2021-03-12 03:18:09,803 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:18:09,804 [main:117] - GENERATED CALL = (Foo(-1684647957278571901).x).toByte().toString(762144048)
2021-03-12 03:18:09,805 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4aa3088], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20010d37]]
2021-03-12 03:18:09,805 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4aa3088]
2021-03-12 03:18:09,805 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20010d37]
2021-03-12 03:18:09,886 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:18:09,886 [main:117] - GENERATED CALL = (Foo(-1684647957278571901).x).toShort().toString(1742882614)
2021-03-12 03:18:09,887 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@41588114], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5067b8d9]]
2021-03-12 03:18:09,887 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@41588114]
2021-03-12 03:18:09,989 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:18:09,990 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5067b8d9]
2021-03-12 03:18:10,107 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:18:10,108 [main:117] - GENERATED CALL = (Foo(-1684647957278571901).x).compareTo(121).toString(-1876307585)
2021-03-12 03:18:10,108 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@eb9cfc9]]
2021-03-12 03:18:10,109 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605]
2021-03-12 03:18:10,109 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@eb9cfc9]
2021-03-12 03:18:10,187 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:18:10,188 [main:117] - GENERATED CALL = (Foo(-1684647957278571901).x).toChar().plus("kqcnv")
2021-03-12 03:18:10,189 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e293f0e]]
2021-03-12 03:18:10,189 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605]
2021-03-12 03:18:10,189 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e293f0e]
2021-03-12 03:18:10,189 [main:117] - GENERATED CALL = (Foo(-1684647957278571901).x).toChar().uppercase()
2021-03-12 03:18:10,190 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fce7191]]
2021-03-12 03:18:10,190 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605]
2021-03-12 03:18:10,190 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fce7191]
2021-03-12 03:18:10,190 [main:117] - GENERATED CALL = (Foo(-1684647957278571901).x).toChar().titlecase()
2021-03-12 03:18:10,190 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@117c130f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]]
2021-03-12 03:18:10,190 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@117c130f]
2021-03-12 03:18:10,191 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]
2021-03-12 03:18:10,270 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:18:10,271 [main:117] - GENERATED CALL = (Foo(-1684647957278571901).x).toLong().toString(430925651)
2021-03-12 03:18:10,271 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7607dfd4]]
2021-03-12 03:18:10,271 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605]
2021-03-12 03:18:10,272 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7607dfd4]
2021-03-12 03:18:10,272 [main:117] - GENERATED CALL = (Foo(-1684647957278571901).x).toChar().lowercase()
2021-03-12 03:18:10,272 [main:114] - replacement of if (prope1 == prope2) "OK" else "$prope1 $prope2" of type String is (Foo(-1684647957278571901).x).toChar().plus("kqcnv")
2021-03-12 03:18:10,353 [main:33] - Trying to replace Element(IF) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:18:10,353 [main:66] - Compilation checking started
2021-03-12 03:18:10,756 [main:53] - Result = true
Text:
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { }
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(-1684647957278571901).x).toChar().plus("kqcnv")
}


2021-03-12 03:18:10,756 [main:107] - replacing ({ }, Function0<Unit>)
2021-03-12 03:18:10,757 [main:50] - replacing { } Function0<Unit>
2021-03-12 03:18:10,757 [main:54] - Getting value of type Function0<Unit>
2021-03-12 03:18:10,873 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 03:18:10,874 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 03:18:10,986 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 03:18:10,989 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 03:18:11,235 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 03:18:11,236 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 03:18:11,348 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 03:18:11,351 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 03:18:11,744 [main:302] - generating value of type = Int true depth = 8
2021-03-12 03:18:11,744 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 03:18:11,745 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 03:18:11,862 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 03:18:11,864 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 03:18:12,067 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 03:18:12,068 [main:95] - GENERATED = check(true)
2021-03-12 03:18:12,068 [main:95] - GENERATED = repeat(-1146526662, {a: Int -> check(true)})
2021-03-12 03:18:12,069 [main:95] - GENERATED = contract({ repeat(-1146526662, {a: Int -> check(true)})})
2021-03-12 03:18:12,069 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ repeat(-1146526662, {a: Int -> check(true)})})}
2021-03-12 03:18:12,069 [main:61] - GENERATED IS CALL =false
2021-03-12 03:18:12,070 [main:67] - randomType = Foo
2021-03-12 03:18:12,160 [main:302] - generating value of type = Foo false depth = 0
2021-03-12 03:18:12,160 [main:112] - generating klass Foo text = inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}
2021-03-12 03:18:12,255 [main:194] - Type params = []
2021-03-12 03:18:12,384 [main:302] - generating value of type = Long true depth = 2
2021-03-12 03:18:12,407 [main:106] - GETTING Function0<Unit> from Long
2021-03-12 03:18:12,466 [main:114] - replacement of { } of type Function0<Unit> is { contract({ repeat(-1146526662, {a: Int -> check(true)})})}
2021-03-12 03:18:12,565 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 03:18:12,566 [main:66] - Compilation checking started
2021-03-12 03:18:12,902 [main:49] - Result = false
Text:
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { contract({ repeat(-1146526662, {a: Int -> check(true)})})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(-1684647957278571901).x).toChar().plus("kqcnv")
}


2021-03-12 03:18:12,903 [main:107] - replacing ({ }, Function0<Unit>)
2021-03-12 03:18:12,903 [main:50] - replacing { } Function0<Unit>
2021-03-12 03:18:12,903 [main:54] - Getting value of type Function0<Unit>
2021-03-12 03:18:13,006 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 03:18:13,006 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 03:18:13,108 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 03:18:13,110 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 03:18:13,481 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 03:18:13,481 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 03:18:13,482 [main:302] - generating value of type = Any false depth = 5
2021-03-12 03:18:13,482 [main:95] - GENERATED = check(false, { "jcwxv"})
2021-03-12 03:18:13,482 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "jcwxv"})}
2021-03-12 03:18:13,482 [main:61] - GENERATED IS CALL =false
2021-03-12 03:18:14,148 [main:67] - randomType = HashSet<A<Short?>?>?
2021-03-12 03:18:14,236 [main:302] - generating value of type = HashSet<A<Short?>?> false depth = 0
2021-03-12 03:18:14,326 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<A<Short?>?> = TODO()
2021-03-12 03:18:14,327 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<A<Short?>?> = TODO()
2021-03-12 03:18:14,630 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:18:14,631 [main:302] - generating value of type = Float true depth = 3
2021-03-12 03:18:14,633 [main:95] - GENERATED = LinkedHashSet<A<Short?>?>(-875689974, 0.40528995f)
2021-03-12 03:18:14,840 [main:106] - GETTING Function0<Unit> from Long
2021-03-12 03:18:14,897 [main:114] - replacement of { } of type Function0<Unit> is { check(false, { "jcwxv"})}
2021-03-12 03:18:14,989 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 03:18:14,990 [main:66] - Compilation checking started
2021-03-12 03:18:15,442 [main:53] - Result = true
Text:
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(-1684647957278571901).x).toChar().plus("kqcnv")
}


2021-03-12 03:18:15,533 [main:141] - TRYING TO REPLACE CONSTANT 1684647957278571901
2021-03-12 03:18:15,633 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:18:15,633 [main:66] - Compilation checking started
2021-03-12 03:18:16,035 [main:53] - Result = true
Text:
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}


2021-03-12 03:18:16,036 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 03:18:16,125 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 03:18:16,125 [main:66] - Compilation checking started
2021-03-12 03:18:16,513 [main:41] - AFTER TRY 1 res = interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}


2021-03-12 03:18:16,689 [main:112] - generating klass A text = interface A<T> {
    fun foo(a: T)
}
2021-03-12 03:18:17,869 [main:302] - generating value of type = Foo false depth = 1
2021-03-12 03:18:17,869 [main:112] - generating klass Foo text = inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}
2021-03-12 03:18:17,957 [main:194] - Type params = []
2021-03-12 03:18:18,042 [main:302] - generating value of type = Long true depth = 3
2021-03-12 03:18:18,043 [main:112] - generating klass Foo text = inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}
2021-03-12 03:18:18,129 [main:194] - Type params = []
2021-03-12 03:18:18,207 [main:302] - generating value of type = Long true depth = 1
2021-03-12 03:18:18,400 [main:43] - Try №1
2021-03-12 03:18:19,321 [main:48] - Already checked
2021-03-12 03:18:19,743 [main:69] - Trying to insert fun fu0(): Any {
        return {}
    }
2021-03-12 03:18:19,858 [main:66] - Compilation checking started
2021-03-12 03:18:20,551 [main:103] - Trying to change 13 nodes
2021-03-12 03:18:20,552 [main:107] - replacing ("foo", String)
2021-03-12 03:18:20,555 [main:50] - replacing "foo" String
2021-03-12 03:18:20,555 [main:54] - Getting value of type String
2021-03-12 03:18:20,660 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:18:20,661 [main:58] - GENERATED VALUE OF TYPE String = "ywmjx"
2021-03-12 03:18:20,661 [main:61] - GENERATED IS CALL =false
2021-03-12 03:18:20,662 [main:67] - randomType = Boolean
2021-03-12 03:18:20,751 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:18:20,763 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@59609d18]
2021-03-12 03:18:20,851 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:18:20,852 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5067b8d9]
2021-03-12 03:18:20,942 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:18:20,943 [main:78] - Generated call from random type = (false).compareTo(false).toString(-180483567)
2021-03-12 03:18:20,943 [main:114] - replacement of "foo" of type String is (false).compareTo(false).toString(-180483567)
2021-03-12 03:18:21,056 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:18:21,056 [main:66] - Compilation checking started
2021-03-12 03:18:21,523 [main:53] - Result = true
Text:
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if (prope4?.getName() != (false).compareTo(false).toString(-180483567)) return "method: $prope4"

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != "test.C") return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return "anonymous function has a declaring class: $prope6"

    return "OK"
}


2021-03-12 03:18:21,524 [main:107] - replacing (prope4?.getName() != (false).compareTo(false).toString(-180483567), Boolean)
2021-03-12 03:18:21,524 [main:50] - replacing prope4?.getName() != (false).compareTo(false).toString(-180483567) Boolean
2021-03-12 03:18:21,524 [main:54] - Getting value of type Boolean
2021-03-12 03:18:21,633 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:18:21,634 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 03:18:21,634 [main:61] - GENERATED IS CALL =false
2021-03-12 03:18:21,740 [main:67] - randomType = Float
2021-03-12 03:18:21,831 [main:302] - generating value of type = Float true depth = 0
2021-03-12 03:18:21,874 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@4ddc78ec]
2021-03-12 03:18:21,875 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]
2021-03-12 03:18:21,968 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:18:22,088 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:18:22,090 [main:78] - Generated call from random type = (0.3028282f).toChar().equals('㰏', true)
2021-03-12 03:18:22,092 [main:106] - GETTING Boolean from Foo
2021-03-12 03:18:22,115 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@5b13c761], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@458cf415]]
2021-03-12 03:18:22,116 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@5b13c761]
2021-03-12 03:18:22,213 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:18:22,213 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@458cf415]
2021-03-12 03:18:22,309 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:18:22,310 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x)).equals("cishv").xor(false)
2021-03-12 03:18:22,310 [main:113] - Case = [public open fun foo(a: Foo): kotlin.Unit defined in Foo[SimpleFunctionDescriptorImpl@35217758], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@dc68c1c]]
2021-03-12 03:18:22,311 [main:149] - GENERATING call of type public open fun foo(a: Foo): kotlin.Unit defined in Foo[SimpleFunctionDescriptorImpl@35217758]
2021-03-12 03:18:22,311 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@dc68c1c]
2021-03-12 03:18:22,407 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:18:22,408 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x)).foo(Foo(-1684647957278571901)).equals("juljp")
2021-03-12 03:18:22,408 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@5b13c761], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@788577d3]]
2021-03-12 03:18:22,408 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@5b13c761]
2021-03-12 03:18:22,500 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:18:22,500 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@788577d3]
2021-03-12 03:18:22,590 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:18:22,591 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x)).equals("hptkq").or(false)
2021-03-12 03:18:22,591 [main:113] - Case = [public final val x: kotlin.Long defined in Foo[PropertyDescriptorImpl@1c55e862], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5a7380a5]]
2021-03-12 03:18:22,591 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5a7380a5]
2021-03-12 03:18:22,687 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:18:22,688 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x)).x.equals("wgvpi")
2021-03-12 03:18:22,688 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@5b13c761]]
2021-03-12 03:18:22,688 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@5b13c761]
2021-03-12 03:18:22,795 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:18:22,796 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x)).equals("mfimu")
2021-03-12 03:18:22,796 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@5b13c761], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2550a63c]]
2021-03-12 03:18:22,796 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@5b13c761]
2021-03-12 03:18:22,901 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:18:22,901 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2550a63c]
2021-03-12 03:18:22,901 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x)).equals("kutba").not()
2021-03-12 03:18:22,902 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@5b13c761], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@64ea9b8c]]
2021-03-12 03:18:22,902 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@5b13c761]
2021-03-12 03:18:22,995 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:18:22,995 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@64ea9b8c]
2021-03-12 03:18:23,084 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x)).equals("sardl").equals(null)
2021-03-12 03:18:23,084 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@5b13c761], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66c8d520]]
2021-03-12 03:18:23,084 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@5b13c761]
2021-03-12 03:18:23,176 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:18:23,176 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66c8d520]
2021-03-12 03:18:23,270 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:18:23,271 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x)).equals("mzbvr").and(false)
2021-03-12 03:18:23,271 [main:114] - replacement of prope4?.getName() != (false).compareTo(false).toString(-180483567) of type Boolean is (Foo(Foo(-1684647957278571901).x)).foo(Foo(-1684647957278571901)).equals("juljp")
2021-03-12 03:18:23,396 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:18:23,396 [main:66] - Compilation checking started
2021-03-12 03:18:23,882 [main:53] - Result = true
Text:
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(-1684647957278571901).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return "method: $prope4"

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != "test.C") return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return "anonymous function has a declaring class: $prope6"

    return "OK"
}


2021-03-12 03:18:23,883 [main:107] - replacing (Kla0(), Kla0)
2021-03-12 03:18:23,884 [main:50] - replacing Kla0() Kla0
2021-03-12 03:18:23,884 [main:54] - Getting value of type Kla0
2021-03-12 03:18:23,986 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 03:18:23,987 [main:112] - generating klass Kla0 text = class Kla0 {
    fun fu0(): Any {
        return {}
    }
}
2021-03-12 03:18:23,987 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-12 03:18:23,987 [main:61] - GENERATED IS CALL =true
2021-03-12 03:18:24,100 [main:67] - randomType = Float
2021-03-12 03:18:24,196 [main:302] - generating value of type = Float true depth = 0
2021-03-12 03:18:24,238 [main:106] - GETTING Kla0 from Long
2021-03-12 03:18:24,268 [main:106] - GETTING Kla0 from Long
2021-03-12 03:18:24,268 [main:106] - GETTING Kla0 from Foo
2021-03-12 03:18:24,278 [main:106] - GETTING Kla0 from Foo
2021-03-12 03:18:24,279 [main:106] - GETTING Kla0 from Char
2021-03-12 03:18:24,299 [main:106] - GETTING Kla0 from Long
2021-03-12 03:18:24,299 [main:114] - replacement of Kla0() of type Kla0 is Kla0()
2021-03-12 03:18:24,384 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:18:24,385 [main:107] - replacing ("method: $prope4", String)
2021-03-12 03:18:24,385 [main:50] - replacing "method: $prope4" String
2021-03-12 03:18:24,385 [main:54] - Getting value of type String
2021-03-12 03:18:24,491 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:18:24,491 [main:58] - GENERATED VALUE OF TYPE String = "zbyjl"
2021-03-12 03:18:24,492 [main:61] - GENERATED IS CALL =false
2021-03-12 03:18:24,585 [main:67] - randomType = Float
2021-03-12 03:18:24,671 [main:302] - generating value of type = Float true depth = 0
2021-03-12 03:18:24,714 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@29a70beb]
2021-03-12 03:18:24,802 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:18:24,803 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5067b8d9]
2021-03-12 03:18:24,892 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:18:24,893 [main:78] - Generated call from random type = (0.40427768f).compareTo(-62).toString(-1285523261)
2021-03-12 03:18:24,893 [main:114] - replacement of "method: $prope4" of type String is (0.40427768f).compareTo(-62).toString(-1285523261)
2021-03-12 03:18:24,980 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:18:24,980 [main:66] - Compilation checking started
2021-03-12 03:18:25,378 [main:53] - Result = true
Text:
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(-1684647957278571901).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-62).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != "test.C") return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return "anonymous function has a declaring class: $prope6"

    return "OK"
}


2021-03-12 03:18:25,379 [main:107] - replacing ("test.C", String)
2021-03-12 03:18:25,379 [main:50] - replacing "test.C" String
2021-03-12 03:18:25,379 [main:54] - Getting value of type String
2021-03-12 03:18:25,494 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:18:25,495 [main:58] - GENERATED VALUE OF TYPE String = "azdqz"
2021-03-12 03:18:25,495 [main:61] - GENERATED IS CALL =false
2021-03-12 03:18:25,602 [main:67] - randomType = Kla0
2021-03-12 03:18:25,702 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 03:18:25,703 [main:112] - generating klass Kla0 text = class Kla0 {
    fun fu0(): Any {
        return {}
    }
}
2021-03-12 03:18:25,711 [main:106] - GETTING String from Foo
2021-03-12 03:18:25,727 [main:113] - Case = [public final val x: kotlin.Long defined in Foo[PropertyDescriptorImpl@1c55e862], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]]
2021-03-12 03:18:25,727 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]
2021-03-12 03:18:25,826 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:18:25,827 [main:117] - GENERATED CALL = (Foo(-1684647957278571901)).x.toString(-438515907)
2021-03-12 03:18:25,827 [main:114] - replacement of "test.C" of type String is (Foo(-1684647957278571901)).x.toString(-438515907)
2021-03-12 03:18:25,922 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:18:25,922 [main:66] - Compilation checking started
2021-03-12 03:18:26,331 [main:53] - Result = true
Text:
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(-1684647957278571901).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-62).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(-1684647957278571901)).x.toString(-438515907)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return "anonymous function has a declaring class: $prope6"

    return "OK"
}


2021-03-12 03:18:26,332 [main:107] - replacing ("anonymous function has a declaring class: $prope6", String)
2021-03-12 03:18:26,332 [main:50] - replacing "anonymous function has a declaring class: $prope6" String
2021-03-12 03:18:26,332 [main:54] - Getting value of type String
2021-03-12 03:18:26,437 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:18:26,438 [main:58] - GENERATED VALUE OF TYPE String = "fxlkd"
2021-03-12 03:18:26,438 [main:61] - GENERATED IS CALL =false
2021-03-12 03:18:26,647 [main:67] - randomType = A<Int>
2021-03-12 03:18:26,649 [main:106] - GETTING String from Foo
2021-03-12 03:18:26,668 [main:113] - Case = [public final val x: kotlin.Long defined in Foo[PropertyDescriptorImpl@1c55e862], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]]
2021-03-12 03:18:26,668 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]
2021-03-12 03:18:26,769 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:18:26,771 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x)).x.toString(1773365742)
2021-03-12 03:18:26,771 [main:114] - replacement of "anonymous function has a declaring class: $prope6" of type String is (Foo(Foo(-1684647957278571901).x)).x.toString(1773365742)
2021-03-12 03:18:26,861 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:18:26,861 [main:66] - Compilation checking started
2021-03-12 03:18:27,262 [main:53] - Result = true
Text:
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(-1684647957278571901).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-62).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(-1684647957278571901)).x.toString(-438515907)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(-1684647957278571901).x)).x.toString(1773365742)

    return "OK"
}


2021-03-12 03:18:27,389 [main:141] - TRYING TO REPLACE CONSTANT 1684647957278571901
2021-03-12 03:18:27,485 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 03:18:27,485 [main:141] - TRYING TO REPLACE CONSTANT 1684647957278571901
2021-03-12 03:18:27,582 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:18:27,582 [main:66] - Compilation checking started
2021-03-12 03:18:28,016 [main:53] - Result = true
Text:
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-62).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(-1684647957278571901)).x.toString(-438515907)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(-1684647957278571901).x)).x.toString(1773365742)

    return "OK"
}


2021-03-12 03:18:28,016 [main:141] - TRYING TO REPLACE CONSTANT 0.40427768f
2021-03-12 03:18:28,141 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-12 03:18:28,141 [main:66] - Compilation checking started
2021-03-12 03:18:28,542 [main:141] - TRYING TO REPLACE CONSTANT 1285523261
2021-03-12 03:18:28,634 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:18:28,635 [main:66] - Compilation checking started
2021-03-12 03:18:28,899 [main:49] - Result = false
Text:
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-62).toString(compareTo(-62))

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(-1684647957278571901)).x.toString(-438515907)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(-1684647957278571901).x)).x.toString(1773365742)

    return "OK"
}


2021-03-12 03:18:28,900 [main:141] - TRYING TO REPLACE CONSTANT 62
2021-03-12 03:18:29,014 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 03:18:29,014 [main:66] - Compilation checking started
2021-03-12 03:18:29,414 [main:53] - Result = true
Text:
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(-1684647957278571901)).x.toString(-438515907)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(-1684647957278571901).x)).x.toString(1773365742)

    return "OK"
}


2021-03-12 03:18:29,414 [main:141] - TRYING TO REPLACE CONSTANT 438515907
2021-03-12 03:18:29,510 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 03:18:29,511 [main:66] - Compilation checking started
2021-03-12 03:18:29,870 [main:53] - Result = true
Text:
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(-1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(-1684647957278571901).x)).x.toString(1773365742)

    return "OK"
}


2021-03-12 03:18:29,870 [main:141] - TRYING TO REPLACE CONSTANT 1684647957278571901
2021-03-12 03:18:29,961 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 03:18:29,961 [main:66] - Compilation checking started
2021-03-12 03:18:30,313 [main:53] - Result = true
Text:
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(-1684647957278571901).x)).x.toString(1773365742)

    return "OK"
}


2021-03-12 03:18:30,314 [main:141] - TRYING TO REPLACE CONSTANT 1773365742
2021-03-12 03:18:30,432 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:18:30,432 [main:66] - Compilation checking started
2021-03-12 03:18:30,787 [main:53] - Result = true
Text:
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(-1684647957278571901).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}


2021-03-12 03:18:30,787 [main:141] - TRYING TO REPLACE CONSTANT 1684647957278571901
2021-03-12 03:18:30,882 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:18:30,882 [main:66] - Compilation checking started
2021-03-12 03:18:31,250 [main:53] - Result = true
Text:
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}


2021-03-12 03:18:31,250 [main:41] - AFTER TRY 2 res = interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}


2021-03-12 03:18:31,433 [main:112] - generating klass A text = interface A<T> {
    fun foo(a: T)
}
2021-03-12 03:18:31,636 [main:302] - generating value of type = Foo false depth = 1
2021-03-12 03:18:31,637 [main:112] - generating klass Foo text = inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}
2021-03-12 03:18:31,731 [main:194] - Type params = []
2021-03-12 03:18:31,821 [main:302] - generating value of type = Long true depth = 3
2021-03-12 03:18:31,823 [main:112] - generating klass Foo text = inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}
2021-03-12 03:18:31,917 [main:194] - Type params = []
2021-03-12 03:18:32,011 [main:302] - generating value of type = Long true depth = 1
2021-03-12 03:18:32,013 [main:112] - generating klass Kla0 text = class Kla0 {
    fun fu0(): Any {
        return {}
    }
}
2021-03-12 03:18:32,213 [main:43] - Try №2
2021-03-12 03:18:41,429 [main:48] - Already checked
2021-03-12 03:18:45,223 [main:69] - Trying to insert override fun fu5(exception: Throwable) {
        throw exception
    }
2021-03-12 03:18:45,333 [main:66] - Compilation checking started
2021-03-12 03:18:46,436 [main:103] - Trying to change 149 nodes
2021-03-12 03:18:46,436 [main:107] - replacing (prope12, Int)
2021-03-12 03:18:46,437 [main:50] - replacing prope12 Int
2021-03-12 03:18:46,437 [main:54] - Getting value of type Int
2021-03-12 03:18:46,591 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:18:46,593 [main:58] - GENERATED VALUE OF TYPE Int = 1323867831
2021-03-12 03:18:46,593 [main:61] - GENERATED IS CALL =false
2021-03-12 03:18:46,766 [main:67] - randomType = A<String>
2021-03-12 03:18:46,768 [main:106] - GETTING Int from Long
2021-03-12 03:18:46,818 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4aa3088], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@554b5c15]]
2021-03-12 03:18:46,818 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4aa3088]
2021-03-12 03:18:46,818 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@554b5c15]
2021-03-12 03:18:46,993 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:18:46,996 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toShort().div(2)
2021-03-12 03:18:46,996 [main:113] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@39fe414f], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@121e7f7]]
2021-03-12 03:18:46,996 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@39fe414f]
2021-03-12 03:18:46,997 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@121e7f7]
2021-03-12 03:18:46,997 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).div((0.40427768f)).toBits()
2021-03-12 03:18:46,997 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6009b817], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@34a69db]]
2021-03-12 03:18:46,997 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6009b817]
2021-03-12 03:18:46,997 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@34a69db]
2021-03-12 03:18:46,997 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toInt().takeLowestOneBit()
2021-03-12 03:18:46,997 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@41588114], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8a53a2]]
2021-03-12 03:18:46,997 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@41588114]
2021-03-12 03:18:47,150 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:18:47,153 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8a53a2]
2021-03-12 03:18:47,319 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:18:47,322 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).compareTo(-95).ushr(-174141365)
2021-03-12 03:18:47,322 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@66277dde], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4e1ec5a2]]
2021-03-12 03:18:47,322 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@66277dde]
2021-03-12 03:18:47,323 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4e1ec5a2]
2021-03-12 03:18:47,487 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:18:47,489 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toByte().times(21)
2021-03-12 03:18:47,490 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@41588114], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@bf04793]]
2021-03-12 03:18:47,490 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@41588114]
2021-03-12 03:18:47,644 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:18:47,646 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@bf04793]
2021-03-12 03:18:47,647 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).compareTo(-128).coerceAtLeast((0.40427768f).compareTo(-438515907))
2021-03-12 03:18:47,647 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@66277dde], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4cacd9b8]]
2021-03-12 03:18:47,647 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@66277dde]
2021-03-12 03:18:47,647 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4cacd9b8]
2021-03-12 03:18:47,801 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:18:47,803 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toByte().rem(40)
2021-03-12 03:18:47,804 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@41588114], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6fd00647]]
2021-03-12 03:18:47,804 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@41588114]
2021-03-12 03:18:47,958 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:18:47,960 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6fd00647]
2021-03-12 03:18:47,961 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).compareTo(-46).takeHighestOneBit()
2021-03-12 03:18:47,961 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@117c130f], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@41588114]]
2021-03-12 03:18:47,961 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@117c130f]
2021-03-12 03:18:47,961 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@41588114]
2021-03-12 03:18:48,118 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:18:48,120 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toLong().compareTo(-63)
2021-03-12 03:18:48,120 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4aa3088], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4d742035]]
2021-03-12 03:18:48,120 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4aa3088]
2021-03-12 03:18:48,120 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4d742035]
2021-03-12 03:18:48,121 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toShort().countOneBits()
2021-03-12 03:18:48,121 [main:114] - replacement of prope12 of type Int is (Foo(Foo(-1684647957278571901).x).x).compareTo(-95).ushr(-174141365)
2021-03-12 03:18:48,315 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:18:48,316 [main:66] - Compilation checking started
2021-03-12 03:18:48,860 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    return 1000L.c()
}

fun box419(): String {
    var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if (prope9 != "OK1000") return prope9
    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
(Foo(Foo(-1684647957278571901).x).x).compareTo(-95).ushr(-174141365) = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope12 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope8.prope14 = {
            prope8.prope13 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 03:18:48,862 [main:107] - replacing ("tail-call optimization miss: method at " + it + " has state-machine ", String)
2021-03-12 03:18:48,863 [main:50] - replacing "tail-call optimization miss: method at " + it + " has state-machine " String
2021-03-12 03:18:48,863 [main:54] - Getting value of type String
2021-03-12 03:18:49,015 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:18:49,019 [main:58] - GENERATED VALUE OF TYPE String = "astzw"
2021-03-12 03:18:49,019 [main:61] - GENERATED IS CALL =false
2021-03-12 03:18:49,211 [main:67] - randomType = ULong
2021-03-12 03:18:49,364 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 03:18:49,410 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@62ce280b]
2021-03-12 03:18:49,410 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]
2021-03-12 03:18:49,410 [main:78] - Generated call from random type = (8425598683600249964.toULong()).toLong().toString((0.40427768f).compareTo(-438515907))
2021-03-12 03:18:49,411 [main:106] - GETTING String from Kla0
2021-03-12 03:18:49,419 [main:106] - GETTING String from Long
2021-03-12 03:18:49,470 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6009b817], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5067b8d9]]
2021-03-12 03:18:49,471 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6009b817]
2021-03-12 03:18:49,471 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5067b8d9]
2021-03-12 03:18:49,687 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:18:49,690 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toInt().toString(1312311736)
2021-03-12 03:18:49,690 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e293f0e]]
2021-03-12 03:18:49,690 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605]
2021-03-12 03:18:49,690 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e293f0e]
2021-03-12 03:18:49,691 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toChar().uppercase()
2021-03-12 03:18:49,691 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@66277dde], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48b50a1]]
2021-03-12 03:18:49,691 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@66277dde]
2021-03-12 03:18:49,691 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48b50a1]
2021-03-12 03:18:49,691 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toByte().toString((0.40427768f).compareTo(-438515907))
2021-03-12 03:18:49,691 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4aa3088], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20010d37]]
2021-03-12 03:18:49,691 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4aa3088]
2021-03-12 03:18:49,692 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20010d37]
2021-03-12 03:18:49,692 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toShort().toString((0.40427768f).compareTo(-438515907))
2021-03-12 03:18:49,692 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@eb9cfc9]]
2021-03-12 03:18:49,692 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605]
2021-03-12 03:18:49,692 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@eb9cfc9]
2021-03-12 03:18:49,844 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:18:49,846 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toChar().plus("ivsiz")
2021-03-12 03:18:49,846 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@117c130f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]]
2021-03-12 03:18:49,847 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@117c130f]
2021-03-12 03:18:49,847 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]
2021-03-12 03:18:49,994 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:18:49,996 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toLong().toString(-112065890)
2021-03-12 03:18:49,996 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]]
2021-03-12 03:18:49,996 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]
2021-03-12 03:18:49,997 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toString((0.40427768f).compareTo(-438515907))
2021-03-12 03:18:49,997 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@41588114], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5067b8d9]]
2021-03-12 03:18:49,997 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@41588114]
2021-03-12 03:18:50,148 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:18:50,151 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5067b8d9]
2021-03-12 03:18:50,152 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).compareTo(1).toString((0.40427768f).compareTo(-438515907))
2021-03-12 03:18:50,152 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fce7191]]
2021-03-12 03:18:50,152 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605]
2021-03-12 03:18:50,152 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fce7191]
2021-03-12 03:18:50,152 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toChar().titlecase()
2021-03-12 03:18:50,153 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7607dfd4]]
2021-03-12 03:18:50,153 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605]
2021-03-12 03:18:50,153 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7607dfd4]
2021-03-12 03:18:50,153 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toChar().lowercase()
2021-03-12 03:18:50,153 [main:114] - replacement of "tail-call optimization miss: method at " + it + " has state-machine " of type String is "astzw"
2021-03-12 03:18:50,307 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 03:18:50,308 [main:66] - Compilation checking started
2021-03-12 03:18:51,048 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    return 1000L.c()
}

fun box419(): String {
    var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if (prope9 != "OK1000") return prope9
    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("astzw" +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope12 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope8.prope14 = {
            prope8.prope13 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 03:18:51,051 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope12, String)
2021-03-12 03:18:51,052 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope12 String
2021-03-12 03:18:51,052 [main:54] - Getting value of type String
2021-03-12 03:18:51,210 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:18:51,212 [main:58] - GENERATED VALUE OF TYPE String = "vzndo"
2021-03-12 03:18:51,213 [main:61] - GENERATED IS CALL =false
2021-03-12 03:18:51,385 [main:67] - randomType = Byte
2021-03-12 03:18:51,560 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:18:51,614 [main:149] - GENERATING call of type public abstract fun toByte(): kotlin.Byte defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@ab116aa]
2021-03-12 03:18:51,614 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48b50a1]
2021-03-12 03:18:51,775 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:18:51,778 [main:78] - Generated call from random type = (-86).toByte().toString(1215853795)
2021-03-12 03:18:51,779 [main:106] - GETTING String from Long
2021-03-12 03:18:51,817 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4aa3088], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20010d37]]
2021-03-12 03:18:51,818 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4aa3088]
2021-03-12 03:18:51,818 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20010d37]
2021-03-12 03:18:51,959 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:18:51,961 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toShort().toString(-1769788363)
2021-03-12 03:18:51,961 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]]
2021-03-12 03:18:51,961 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]
2021-03-12 03:18:51,961 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toString((0.40427768f).compareTo(-438515907))
2021-03-12 03:18:51,961 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@eb9cfc9]]
2021-03-12 03:18:51,961 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605]
2021-03-12 03:18:51,962 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@eb9cfc9]
2021-03-12 03:18:52,126 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:18:52,130 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toChar().plus("hyzzs")
2021-03-12 03:18:52,130 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fce7191]]
2021-03-12 03:18:52,130 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605]
2021-03-12 03:18:52,130 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fce7191]
2021-03-12 03:18:52,131 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toChar().titlecase()
2021-03-12 03:18:52,131 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7607dfd4]]
2021-03-12 03:18:52,131 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605]
2021-03-12 03:18:52,131 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7607dfd4]
2021-03-12 03:18:52,131 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toChar().lowercase()
2021-03-12 03:18:52,131 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e293f0e]]
2021-03-12 03:18:52,132 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605]
2021-03-12 03:18:52,132 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e293f0e]
2021-03-12 03:18:52,132 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toChar().uppercase()
2021-03-12 03:18:52,132 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@117c130f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]]
2021-03-12 03:18:52,132 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@117c130f]
2021-03-12 03:18:52,132 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]
2021-03-12 03:18:52,133 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toLong().toString((0.40427768f).compareTo(-438515907))
2021-03-12 03:18:52,133 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@66277dde], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48b50a1]]
2021-03-12 03:18:52,133 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@66277dde]
2021-03-12 03:18:52,133 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48b50a1]
2021-03-12 03:18:52,278 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:18:52,281 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toByte().toString(-284481883)
2021-03-12 03:18:52,281 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6009b817], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5067b8d9]]
2021-03-12 03:18:52,281 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6009b817]
2021-03-12 03:18:52,281 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5067b8d9]
2021-03-12 03:18:52,281 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).toInt().toString((0.40427768f).compareTo(-438515907))
2021-03-12 03:18:52,281 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@41588114], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5067b8d9]]
2021-03-12 03:18:52,281 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@41588114]
2021-03-12 03:18:52,437 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:18:52,439 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5067b8d9]
2021-03-12 03:18:52,440 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x).x).compareTo(-44).toString((0.40427768f).compareTo(-438515907))
2021-03-12 03:18:52,440 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope12 of type String is "vzndo"
2021-03-12 03:18:52,585 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 03:18:52,585 [main:66] - Compilation checking started
2021-03-12 03:18:53,291 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    return 1000L.c()
}

fun box419(): String {
    var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if (prope9 != "OK1000") return prope9
    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("astzw" +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if (prope12 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope8.prope14 = {
            prope8.prope13 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 03:18:53,294 [main:107] - replacing (c, Continuation<*>)
2021-03-12 03:18:53,296 [main:50] - replacing c Continuation<*>
2021-03-12 03:18:53,296 [main:54] - Getting value of type Continuation<*>
2021-03-12 03:18:53,521 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 03:18:53,681 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 03:18:53,687 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 03:18:54,275 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 03:18:54,435 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:18:54,441 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:18:54,954 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 03:18:55,155 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:18:55,159 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:18:55,797 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:18:55,797 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:18:55,797 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 03:18:55,797 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 03:18:56,170 [main:67] - randomType = MutableMap<String, Float?>
2021-03-12 03:18:56,172 [main:106] - GETTING Continuation<*> from Long
2021-03-12 03:18:56,221 [main:106] - GETTING Continuation<*> from Any
2021-03-12 03:18:56,226 [main:106] - GETTING Continuation<*> from Int
2021-03-12 03:18:56,270 [main:106] - GETTING Continuation<*> from Foo
2021-03-12 03:18:56,280 [main:106] - GETTING Continuation<*> from Char
2021-03-12 03:18:56,298 [main:106] - GETTING Continuation<*> from Long
2021-03-12 03:18:56,299 [main:106] - GETTING Continuation<*> from Kla0
2021-03-12 03:18:56,303 [main:106] - GETTING Continuation<*> from Any
2021-03-12 03:18:56,304 [main:106] - GETTING Continuation<*> from Float
2021-03-12 03:18:56,342 [main:106] - GETTING Continuation<*> from Foo
2021-03-12 03:18:56,343 [main:106] - GETTING Continuation<*> from Long
2021-03-12 03:18:56,344 [main:106] - GETTING Continuation<*> from Long
2021-03-12 03:18:56,345 [main:106] - GETTING Continuation<*> from Foo
2021-03-12 03:18:56,346 [main:106] - GETTING Continuation<*> from Foo
2021-03-12 03:18:56,347 [main:106] - GETTING Continuation<*> from Foo
2021-03-12 03:18:56,348 [main:106] - GETTING Continuation<*> from Long
2021-03-12 03:18:56,349 [main:106] - GETTING Continuation<*> from Foo
2021-03-12 03:18:56,349 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 03:18:56,349 [main:107] - replacing (prope10, Result<Any?>)
2021-03-12 03:18:56,350 [main:50] - replacing prope10 Result<Any?>
2021-03-12 03:18:56,350 [main:54] - Getting value of type Result<Any?>
2021-03-12 03:18:56,536 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 03:18:56,708 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 03:18:56,712 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 03:18:57,194 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 03:18:57,198 [main:302] - generating value of type = Any false depth = 4
2021-03-12 03:18:57,198 [main:95] - GENERATED = runCatching<Any?>({ "xhrct"})
2021-03-12 03:18:57,199 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "xhrct"})
2021-03-12 03:18:57,199 [main:61] - GENERATED IS CALL =true
2021-03-12 03:18:57,464 [main:67] - randomType = UInt
2021-03-12 03:18:57,606 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 03:18:57,650 [main:106] - GETTING Result<Any?> from Foo
2021-03-12 03:18:57,668 [main:106] - GETTING Result<Any?> from Foo
2021-03-12 03:18:57,670 [main:106] - GETTING Result<Any?> from Long
2021-03-12 03:18:57,717 [main:106] - GETTING Result<Any?> from Foo
2021-03-12 03:18:57,719 [main:106] - GETTING Result<Any?> from Foo
2021-03-12 03:18:57,720 [main:106] - GETTING Result<Any?> from Any
2021-03-12 03:18:57,726 [main:106] - GETTING Result<Any?> from Foo
2021-03-12 03:18:57,728 [main:106] - GETTING Result<Any?> from Char
2021-03-12 03:18:57,760 [main:106] - GETTING Result<Any?> from Int
2021-03-12 03:18:57,799 [main:106] - GETTING Result<Any?> from Foo
2021-03-12 03:18:57,801 [main:106] - GETTING Result<Any?> from Long
2021-03-12 03:18:57,802 [main:106] - GETTING Result<Any?> from Long
2021-03-12 03:18:57,804 [main:106] - GETTING Result<Any?> from Long
2021-03-12 03:18:57,805 [main:106] - GETTING Result<Any?> from Kla0
2021-03-12 03:18:57,811 [main:106] - GETTING Result<Any?> from Any
2021-03-12 03:18:57,812 [main:106] - GETTING Result<Any?> from Long
2021-03-12 03:18:57,813 [main:106] - GETTING Result<Any?> from Float
2021-03-12 03:18:57,844 [main:114] - replacement of prope10 of type Result<Any?> is runCatching<Any?>({ "xhrct"})
2021-03-12 03:18:58,029 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:18:58,030 [main:66] - Compilation checking started
2021-03-12 03:18:58,756 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    return 1000L.c()
}

fun box419(): String {
    var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if (prope9 != "OK1000") return prope9
    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("astzw" +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if (prope12 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope8.prope14 = {
            prope8.prope13 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 03:18:58,758 [main:107] - replacing (prope12 != numberOfSuspensions, Boolean)
2021-03-12 03:18:58,758 [main:50] - replacing prope12 != numberOfSuspensions Boolean
2021-03-12 03:18:58,758 [main:54] - Getting value of type Boolean
2021-03-12 03:18:58,973 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:18:58,976 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 03:18:58,977 [main:61] - GENERATED IS CALL =false
2021-03-12 03:18:58,999 [main:67] - randomType = Kla4
2021-03-12 03:18:59,138 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 03:18:59,140 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("astzw" +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}
2021-03-12 03:18:59,149 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@7aed5de6]
2021-03-12 03:18:59,310 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:18:59,311 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2550a63c]
2021-03-12 03:18:59,311 [main:78] - Generated call from random type = (Kla4()).equals("jfoqn").not()
2021-03-12 03:18:59,312 [main:106] - GETTING Boolean from Long
2021-03-12 03:18:59,385 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@212b37d2], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2d20aacc]]
2021-03-12 03:18:59,385 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@212b37d2]
2021-03-12 03:18:59,541 [main:302] - generating value of type = Double true depth = 0
2021-03-12 03:18:59,544 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2d20aacc]
2021-03-12 03:18:59,544 [main:117] - GENERATED CALL = ((Foo(1684647957278571901)).x).div(0.9351375859432585).isFinite()
2021-03-12 03:18:59,544 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5a7380a5], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2550a63c]]
2021-03-12 03:18:59,544 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5a7380a5]
2021-03-12 03:18:59,673 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:18:59,673 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2550a63c]
2021-03-12 03:18:59,673 [main:117] - GENERATED CALL = ((Foo(1684647957278571901)).x).equals("evppx").not()
2021-03-12 03:18:59,673 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@628fe6aa], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1e8e8f19]]
2021-03-12 03:18:59,673 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@628fe6aa]
2021-03-12 03:18:59,673 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1e8e8f19]
2021-03-12 03:18:59,674 [main:117] - GENERATED CALL = ((Foo(1684647957278571901)).x).toFloat().isNaN()
2021-03-12 03:18:59,674 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5a7380a5]]
2021-03-12 03:18:59,674 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5a7380a5]
2021-03-12 03:18:59,819 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:18:59,820 [main:117] - GENERATED CALL = ((Foo(1684647957278571901)).x).equals("gepcc")
2021-03-12 03:18:59,820 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@66277dde], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@15fdcd0e]]
2021-03-12 03:18:59,820 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@66277dde]
2021-03-12 03:18:59,820 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@15fdcd0e]
2021-03-12 03:18:59,987 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:18:59,988 [main:117] - GENERATED CALL = ((Foo(1684647957278571901)).x).toByte().equals("dtdeh")
2021-03-12 03:18:59,988 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22b093db]]
2021-03-12 03:18:59,988 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605]
2021-03-12 03:18:59,988 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22b093db]
2021-03-12 03:18:59,988 [main:117] - GENERATED CALL = ((Foo(1684647957278571901)).x).toChar().isDigit()
2021-03-12 03:18:59,989 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4201ca80], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@69e780ff]]
2021-03-12 03:18:59,989 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4201ca80]
2021-03-12 03:18:59,989 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@69e780ff]
2021-03-12 03:18:59,989 [main:117] - GENERATED CALL = ((Foo(1684647957278571901)).x).toDouble().isInfinite()
2021-03-12 03:18:59,989 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5a7380a5], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66c8d520]]
2021-03-12 03:18:59,989 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5a7380a5]
2021-03-12 03:19:00,198 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:00,199 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66c8d520]
2021-03-12 03:19:00,338 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:19:00,340 [main:117] - GENERATED CALL = ((Foo(1684647957278571901)).x).equals("afxcm").and(true)
2021-03-12 03:19:00,340 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e70cb9f]]
2021-03-12 03:19:00,340 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605]
2021-03-12 03:19:00,341 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e70cb9f]
2021-03-12 03:19:00,341 [main:117] - GENERATED CALL = ((Foo(1684647957278571901)).x).toChar().isISOControl()
2021-03-12 03:19:00,341 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.LongRange defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@60d501f6], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@46f83e71]]
2021-03-12 03:19:00,341 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.LongRange defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@60d501f6]
2021-03-12 03:19:00,502 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:19:00,504 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@46f83e71]
2021-03-12 03:19:00,505 [main:117] - GENERATED CALL = ((Foo(1684647957278571901)).x).rangeTo(86).isEmpty()
2021-03-12 03:19:00,505 [main:114] - replacement of prope12 != numberOfSuspensions of type Boolean is ((Foo(1684647957278571901)).x).toFloat().isNaN()
2021-03-12 03:19:00,631 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:19:00,631 [main:66] - Compilation checking started
2021-03-12 03:19:01,338 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    return 1000L.c()
}

fun box419(): String {
    var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if (prope9 != "OK1000") return prope9
    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("astzw" +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if (prope12 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope8.prope14 = {
            prope8.prope13 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 03:19:01,341 [main:107] - replacing ("OK", String)
2021-03-12 03:19:01,342 [main:50] - replacing "OK" String
2021-03-12 03:19:01,342 [main:54] - Getting value of type String
2021-03-12 03:19:01,510 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:19:01,514 [main:58] - GENERATED VALUE OF TYPE String = "xojld"
2021-03-12 03:19:01,514 [main:61] - GENERATED IS CALL =false
2021-03-12 03:19:02,375 [main:67] - randomType = List<Function1<Kla4?, Kla6?>>
2021-03-12 03:19:02,377 [main:106] - GETTING String from Any
2021-03-12 03:19:02,384 [main:106] - GETTING String from Foo
2021-03-12 03:19:02,402 [main:113] - Case = [public final val x: kotlin.Long defined in Foo[PropertyDescriptorImpl@40e4cc1b], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]]
2021-03-12 03:19:02,402 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]
2021-03-12 03:19:02,590 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:19:02,594 [main:117] - GENERATED CALL = (Foo(Foo(-1684647957278571901).x)).x.toString(-377571606)
2021-03-12 03:19:02,594 [main:114] - replacement of "OK" of type String is "xojld"
2021-03-12 03:19:02,748 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 03:19:02,748 [main:66] - Compilation checking started
2021-03-12 03:19:03,442 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    return 1000L.c()
}

fun box419(): String {
    val prope0 = { check(false, { "jcwxv"})}
var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if (prope9 != "OK1000") return prope9
    return "xojld"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("astzw" +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if (prope12 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope8.prope14 = {
            prope8.prope13 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 03:19:03,445 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 03:19:03,445 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 03:19:03,445 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 03:19:03,650 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 03:19:03,657 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 03:19:03,843 [main:67] - randomType = LinkedHashSet<Kla2>
2021-03-12 03:19:03,990 [main:302] - generating value of type = LinkedHashSet<Kla2> false depth = 0
2021-03-12 03:19:04,138 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Kla2> = TODO()
2021-03-12 03:19:04,141 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Kla2> = TODO()
2021-03-12 03:19:04,306 [main:95] - GENERATED = linkedSetOf<Kla2>()
2021-03-12 03:19:04,454 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-12 03:19:04,473 [main:106] - GETTING EmptyCoroutineContext from Foo
2021-03-12 03:19:04,483 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 03:19:04,517 [main:106] - GETTING EmptyCoroutineContext from Foo
2021-03-12 03:19:04,517 [main:106] - GETTING EmptyCoroutineContext from Long
2021-03-12 03:19:04,554 [main:106] - GETTING EmptyCoroutineContext from Foo
2021-03-12 03:19:04,555 [main:106] - GETTING EmptyCoroutineContext from Kla0
2021-03-12 03:19:04,560 [main:106] - GETTING EmptyCoroutineContext from Float
2021-03-12 03:19:04,600 [main:106] - GETTING EmptyCoroutineContext from Long
2021-03-12 03:19:04,600 [main:106] - GETTING EmptyCoroutineContext from Any
2021-03-12 03:19:04,605 [main:106] - GETTING EmptyCoroutineContext from Foo
2021-03-12 03:19:04,606 [main:106] - GETTING EmptyCoroutineContext from Foo
2021-03-12 03:19:04,606 [main:106] - GETTING EmptyCoroutineContext from Long
2021-03-12 03:19:04,607 [main:106] - GETTING EmptyCoroutineContext from Foo
2021-03-12 03:19:04,608 [main:106] - GETTING EmptyCoroutineContext from Any
2021-03-12 03:19:04,608 [main:106] - GETTING EmptyCoroutineContext from Long
2021-03-12 03:19:04,609 [main:106] - GETTING EmptyCoroutineContext from Long
2021-03-12 03:19:04,609 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 03:19:04,609 [main:107] - replacing ("\n", String)
2021-03-12 03:19:04,609 [main:50] - replacing "\n" String
2021-03-12 03:19:04,609 [main:54] - Getting value of type String
2021-03-12 03:19:04,768 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:19:04,770 [main:58] - GENERATED VALUE OF TYPE String = "cgvtt"
2021-03-12 03:19:04,771 [main:61] - GENERATED IS CALL =false
2021-03-12 03:19:04,775 [main:67] - randomType = Char
2021-03-12 03:19:04,909 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:19:04,934 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5ea3d8ed]
2021-03-12 03:19:04,934 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]
2021-03-12 03:19:04,934 [main:78] - Generated call from random type = ('䟘').toLong().toString((0.40427768f).compareTo(-438515907))
2021-03-12 03:19:04,935 [main:106] - GETTING String from Any
2021-03-12 03:19:04,938 [main:106] - GETTING String from Kla0
2021-03-12 03:19:04,943 [main:106] - GETTING String from Foo
2021-03-12 03:19:04,952 [main:113] - Case = [public final val x: kotlin.Long defined in Foo[PropertyDescriptorImpl@40e4cc1b], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]]
2021-03-12 03:19:04,952 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]
2021-03-12 03:19:04,952 [main:117] - GENERATED CALL = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))
2021-03-12 03:19:04,953 [main:114] - replacement of "\n" of type String is (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))
2021-03-12 03:19:05,105 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:19:05,106 [main:66] - Compilation checking started
2021-03-12 03:19:05,754 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    return 1000L.c()
}

fun box419(): String {
    val prope0 = { check(false, { "jcwxv"})}
var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if (prope9 != "OK1000") return prope9
    return "xojld"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("astzw" +
                prope11.joinToString(separator = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907)))) }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if (prope12 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope8.prope14 = {
            prope8.prope13 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 03:19:05,757 [main:107] - replacing (prope15 != null, Boolean)
2021-03-12 03:19:05,757 [main:50] - replacing prope15 != null Boolean
2021-03-12 03:19:05,757 [main:54] - Getting value of type Boolean
2021-03-12 03:19:05,958 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:19:05,964 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 03:19:05,964 [main:61] - GENERATED IS CALL =false
2021-03-12 03:19:05,976 [main:67] - randomType = Int
2021-03-12 03:19:06,162 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:19:06,196 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@276996f2]
2021-03-12 03:19:06,354 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:06,354 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@458cf415]
2021-03-12 03:19:06,507 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:19:06,511 [main:78] - Generated call from random type = (1325982736).equals("veahp").xor(true)
2021-03-12 03:19:06,511 [main:114] - replacement of prope15 != null of type Boolean is (1325982736).equals("veahp").xor(true)
2021-03-12 03:19:06,672 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:19:06,673 [main:66] - Compilation checking started
2021-03-12 03:19:07,079 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    return 1000L.c()
}

fun box419(): String {
    val prope0 = { check(false, { "jcwxv"})}
var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if (prope9 != "OK1000") return prope9
    return "xojld"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while ((1325982736).equals("veahp").xor(true)) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("astzw" +
                prope11.joinToString(separator = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907)))) }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if (prope12 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope8.prope14 = {
            prope8.prope13 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 03:19:07,082 [main:107] - replacing (prope9 != "OK1000", Boolean)
2021-03-12 03:19:07,082 [main:50] - replacing prope9 != "OK1000" Boolean
2021-03-12 03:19:07,082 [main:54] - Getting value of type Boolean
2021-03-12 03:19:07,258 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:19:07,261 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 03:19:07,262 [main:61] - GENERATED IS CALL =false
2021-03-12 03:19:07,415 [main:67] - randomType = UByte
2021-03-12 03:19:07,562 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 03:19:07,622 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@53b15d0f]
2021-03-12 03:19:07,765 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:07,766 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@64ea9b8c]
2021-03-12 03:19:07,940 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:07,940 [main:78] - Generated call from random type = (84.toUByte()).equals("jqvle").equals("mqwah")
2021-03-12 03:19:07,942 [main:106] - GETTING Boolean from Foo
2021-03-12 03:19:07,964 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@7922a92d], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2550a63c]]
2021-03-12 03:19:07,964 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@7922a92d]
2021-03-12 03:19:08,114 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:08,114 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2550a63c]
2021-03-12 03:19:08,114 [main:117] - GENERATED CALL = (Foo(Foo(Foo(-1684647957278571901).x).x)).equals("uraaw").not()
2021-03-12 03:19:08,114 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@7922a92d], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66c8d520]]
2021-03-12 03:19:08,114 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@7922a92d]
2021-03-12 03:19:08,265 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:08,265 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66c8d520]
2021-03-12 03:19:08,406 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:19:08,410 [main:117] - GENERATED CALL = (Foo(Foo(Foo(-1684647957278571901).x).x)).equals("cflkv").and(false)
2021-03-12 03:19:08,410 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@7922a92d]]
2021-03-12 03:19:08,410 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@7922a92d]
2021-03-12 03:19:08,565 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:08,565 [main:117] - GENERATED CALL = (Foo(Foo(Foo(-1684647957278571901).x).x)).equals("ctatk")
2021-03-12 03:19:08,565 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@7922a92d], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@788577d3]]
2021-03-12 03:19:08,565 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@7922a92d]
2021-03-12 03:19:08,703 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:08,703 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@788577d3]
2021-03-12 03:19:08,846 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:19:08,858 [main:117] - GENERATED CALL = (Foo(Foo(Foo(-1684647957278571901).x).x)).equals("berim").or(true)
2021-03-12 03:19:08,858 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@7922a92d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@64ea9b8c]]
2021-03-12 03:19:08,859 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@7922a92d]
2021-03-12 03:19:08,989 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:08,990 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@64ea9b8c]
2021-03-12 03:19:09,146 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:09,147 [main:117] - GENERATED CALL = (Foo(Foo(Foo(-1684647957278571901).x).x)).equals("rgnej").equals("gvdhi")
2021-03-12 03:19:09,147 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@7922a92d], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@458cf415]]
2021-03-12 03:19:09,147 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Foo[SimpleFunctionDescriptorImpl@7922a92d]
2021-03-12 03:19:09,284 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:09,284 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@458cf415]
2021-03-12 03:19:09,426 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:19:09,440 [main:117] - GENERATED CALL = (Foo(Foo(Foo(-1684647957278571901).x).x)).equals("jiqyn").xor(true)
2021-03-12 03:19:09,440 [main:113] - Case = [public open fun foo(a: Foo): kotlin.Unit defined in Foo[SimpleFunctionDescriptorImpl@1ec9f90], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@dc68c1c]]
2021-03-12 03:19:09,440 [main:149] - GENERATING call of type public open fun foo(a: Foo): kotlin.Unit defined in Foo[SimpleFunctionDescriptorImpl@1ec9f90]
2021-03-12 03:19:09,440 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@dc68c1c]
2021-03-12 03:19:09,573 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:09,574 [main:117] - GENERATED CALL = (Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(Foo(Foo(-1684647957278571901).x).x)).equals("prpgy")
2021-03-12 03:19:09,574 [main:113] - Case = [public final val x: kotlin.Long defined in Foo[PropertyDescriptorImpl@40e4cc1b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5a7380a5]]
2021-03-12 03:19:09,574 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5a7380a5]
2021-03-12 03:19:09,720 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:09,720 [main:117] - GENERATED CALL = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.equals("lakel")
2021-03-12 03:19:09,720 [main:114] - replacement of prope9 != "OK1000" of type Boolean is (Foo(Foo(Foo(-1684647957278571901).x).x)).equals("uraaw").not()
2021-03-12 03:19:09,858 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:19:09,859 [main:66] - Compilation checking started
2021-03-12 03:19:10,546 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    return 1000L.c()
}

fun box419(): String {
    val prope0 = { check(false, { "jcwxv"})}
var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).equals("uraaw").not()) return prope9
    return "xojld"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("astzw" +
                prope11.joinToString(separator = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907)))) }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if (prope12 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope8.prope14 = {
            prope8.prope13 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 03:19:10,549 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-12 03:19:10,550 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-12 03:19:10,550 [main:54] - Getting value of type Boolean
2021-03-12 03:19:10,745 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:19:10,750 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 03:19:10,750 [main:61] - GENERATED IS CALL =false
2021-03-12 03:19:10,938 [main:67] - randomType = Kla5?
2021-03-12 03:19:11,085 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 03:19:11,089 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if (prope12 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 03:19:11,109 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66c8d520]
2021-03-12 03:19:11,241 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:19:11,245 [main:78] - Generated call from random type = (Kla5())?.prope13.and(true)
2021-03-12 03:19:11,246 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (Kla5())?.prope13.and(true)
2021-03-12 03:19:11,419 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:19:11,419 [main:66] - Compilation checking started
2021-03-12 03:19:12,180 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    return 1000L.c()
}

fun box419(): String {
    val prope0 = { check(false, { "jcwxv"})}
var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).equals("uraaw").not()) return prope9
    return "xojld"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("astzw" +
                prope11.joinToString(separator = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907)))) }
    }

    fun fu9(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { (Kla5())?.prope13.and(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if (prope12 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope8.prope14 = {
            prope8.prope13 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 03:19:12,183 [main:107] - replacing (checkFinished && !prope13, Boolean)
2021-03-12 03:19:12,184 [main:50] - replacing checkFinished && !prope13 Boolean
2021-03-12 03:19:12,184 [main:54] - Getting value of type Boolean
2021-03-12 03:19:12,343 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:19:12,347 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 03:19:12,348 [main:61] - GENERATED IS CALL =false
2021-03-12 03:19:12,520 [main:67] - randomType = String?
2021-03-12 03:19:12,662 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:19:12,708 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@281b0150]
2021-03-12 03:19:12,841 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:12,841 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16488016]
2021-03-12 03:19:12,984 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:19:13,129 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:19:13,133 [main:78] - Generated call from random type = ("suebl")?.plus("guhwc").startsWith("liiab", true)
2021-03-12 03:19:13,134 [main:106] - GETTING Boolean from Long
2021-03-12 03:19:13,166 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@212b37d2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@62831a96]]
2021-03-12 03:19:13,166 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@212b37d2]
2021-03-12 03:19:13,320 [main:302] - generating value of type = Double true depth = 0
2021-03-12 03:19:13,324 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@62831a96]
2021-03-12 03:19:13,461 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:13,461 [main:117] - GENERATED CALL = (Foo(-2316865634605250658).x).div(0.11992001645253414).equals("ajdyj")
2021-03-12 03:19:13,461 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@212b37d2], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@32dc7ae3]]
2021-03-12 03:19:13,461 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@212b37d2]
2021-03-12 03:19:13,622 [main:302] - generating value of type = Double true depth = 0
2021-03-12 03:19:13,626 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@32dc7ae3]
2021-03-12 03:19:13,627 [main:117] - GENERATED CALL = (Foo(-2316865634605250658).x).div(0.4921959279173801).isNaN()
2021-03-12 03:19:13,627 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4aa3088], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7a250d1f]]
2021-03-12 03:19:13,627 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4aa3088]
2021-03-12 03:19:13,627 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7a250d1f]
2021-03-12 03:19:13,767 [main:117] - GENERATED CALL = (Foo(-2316865634605250658).x).toShort().equals(null)
2021-03-12 03:19:13,767 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.LongRange defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@60d501f6], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@46f83e71]]
2021-03-12 03:19:13,767 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.LongRange defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@60d501f6]
2021-03-12 03:19:13,906 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:19:13,911 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@46f83e71]
2021-03-12 03:19:13,911 [main:117] - GENERATED CALL = (Foo(-2316865634605250658).x).rangeTo(23).isEmpty()
2021-03-12 03:19:13,911 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4201ca80], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@32dc7ae3]]
2021-03-12 03:19:13,911 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4201ca80]
2021-03-12 03:19:13,911 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@32dc7ae3]
2021-03-12 03:19:13,912 [main:117] - GENERATED CALL = (Foo(-2316865634605250658).x).toDouble().isNaN()
2021-03-12 03:19:13,912 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4201ca80], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@62831a96]]
2021-03-12 03:19:13,912 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4201ca80]
2021-03-12 03:19:13,912 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@62831a96]
2021-03-12 03:19:14,055 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:14,056 [main:117] - GENERATED CALL = (Foo(-2316865634605250658).x).toDouble().equals("gmmai")
2021-03-12 03:19:14,056 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@628fe6aa], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1a82c5b5]]
2021-03-12 03:19:14,056 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@628fe6aa]
2021-03-12 03:19:14,056 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1a82c5b5]
2021-03-12 03:19:14,056 [main:117] - GENERATED CALL = (Foo(-2316865634605250658).x).toFloat().isInfinite()
2021-03-12 03:19:14,056 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22b093db]]
2021-03-12 03:19:14,056 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605]
2021-03-12 03:19:14,057 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22b093db]
2021-03-12 03:19:14,057 [main:117] - GENERATED CALL = (Foo(-2316865634605250658).x).toChar().isDigit()
2021-03-12 03:19:14,057 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a06df44]]
2021-03-12 03:19:14,057 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605]
2021-03-12 03:19:14,057 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a06df44]
2021-03-12 03:19:14,057 [main:117] - GENERATED CALL = (Foo(-2316865634605250658).x).toChar().isWhitespace()
2021-03-12 03:19:14,057 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@212b37d2], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@69e780ff]]
2021-03-12 03:19:14,057 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@212b37d2]
2021-03-12 03:19:14,200 [main:302] - generating value of type = Double true depth = 0
2021-03-12 03:19:14,204 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@69e780ff]
2021-03-12 03:19:14,205 [main:117] - GENERATED CALL = (Foo(-2316865634605250658).x).div(0.39858194597045615).isInfinite()
2021-03-12 03:19:14,205 [main:114] - replacement of checkFinished && !prope13 of type Boolean is (Foo(-2316865634605250658).x).toDouble().isNaN()
2021-03-12 03:19:14,349 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:19:14,350 [main:66] - Compilation checking started
2021-03-12 03:19:15,032 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    return 1000L.c()
}

fun box419(): String {
    val prope0 = { check(false, { "jcwxv"})}
var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).equals("uraaw").not()) return prope9
    return "xojld"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("astzw" +
                prope11.joinToString(separator = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907)))) }
    }

    fun fu9(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { (Kla5())?.prope13.and(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if (prope12 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((Foo(-2316865634605250658).x).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope8.prope14 = {
            prope8.prope13 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 03:19:15,035 [main:107] - replacing (prope12 != i, Boolean)
2021-03-12 03:19:15,036 [main:50] - replacing prope12 != i Boolean
2021-03-12 03:19:15,036 [main:54] - Getting value of type Boolean
2021-03-12 03:19:15,209 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:19:15,214 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 03:19:15,214 [main:61] - GENERATED IS CALL =false
2021-03-12 03:19:15,552 [main:67] - randomType = UShort?
2021-03-12 03:19:15,700 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 03:19:15,745 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@435feb55]
2021-03-12 03:19:15,893 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:15,893 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@788577d3]
2021-03-12 03:19:16,040 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:19:16,044 [main:78] - Generated call from random type = (14987.toUShort())?.equals("wbiiq").or(false)
2021-03-12 03:19:16,045 [main:106] - GETTING Boolean from Kla0
2021-03-12 03:19:16,052 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@4a4284f9], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66c8d520]]
2021-03-12 03:19:16,052 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@4a4284f9]
2021-03-12 03:19:16,193 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:16,193 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66c8d520]
2021-03-12 03:19:16,331 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:19:16,335 [main:117] - GENERATED CALL = (Kla0()).equals("rqbkp").and(false)
2021-03-12 03:19:16,335 [main:113] - Case = [public final fun fu0(): kotlin.Any defined in Kla0[SimpleFunctionDescriptorImpl@5337372f], public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@231a5622]]
2021-03-12 03:19:16,335 [main:149] - GENERATING call of type public final fun fu0(): kotlin.Any defined in Kla0[SimpleFunctionDescriptorImpl@5337372f]
2021-03-12 03:19:16,336 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@231a5622]
2021-03-12 03:19:16,476 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:16,477 [main:117] - GENERATED CALL = (Kla0()).fu0().equals("ksaoe")
2021-03-12 03:19:16,477 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@4a4284f9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@64ea9b8c]]
2021-03-12 03:19:16,477 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@4a4284f9]
2021-03-12 03:19:16,623 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:16,623 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@64ea9b8c]
2021-03-12 03:19:16,764 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:16,765 [main:117] - GENERATED CALL = (Kla0()).equals("nenin").equals("iwqxb")
2021-03-12 03:19:16,765 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@4a4284f9], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2550a63c]]
2021-03-12 03:19:16,765 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@4a4284f9]
2021-03-12 03:19:16,906 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:16,906 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2550a63c]
2021-03-12 03:19:16,907 [main:117] - GENERATED CALL = (Kla0()).equals("whzzt").not()
2021-03-12 03:19:16,907 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@4a4284f9], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@788577d3]]
2021-03-12 03:19:16,907 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@4a4284f9]
2021-03-12 03:19:17,050 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:17,050 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@788577d3]
2021-03-12 03:19:17,193 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:19:17,197 [main:117] - GENERATED CALL = (Kla0()).equals("bopyr").or(false)
2021-03-12 03:19:17,197 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@4a4284f9]]
2021-03-12 03:19:17,197 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@4a4284f9]
2021-03-12 03:19:17,346 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:17,346 [main:117] - GENERATED CALL = (Kla0()).equals("nzydy")
2021-03-12 03:19:17,347 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@4a4284f9], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@458cf415]]
2021-03-12 03:19:17,347 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@4a4284f9]
2021-03-12 03:19:17,505 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:17,505 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@458cf415]
2021-03-12 03:19:17,649 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:19:17,653 [main:117] - GENERATED CALL = (Kla0()).equals("xvjjb").xor(true)
2021-03-12 03:19:17,813 [main:114] - replacement of prope12 != i of type Boolean is (Kla0()).equals("rqbkp").and(false)
2021-03-12 03:19:17,951 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:19:17,951 [main:66] - Compilation checking started
2021-03-12 03:19:18,626 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    return 1000L.c()
}

fun box419(): String {
    val prope0 = { check(false, { "jcwxv"})}
var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).equals("uraaw").not()) return prope9
    return "xojld"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("astzw" +
                prope11.joinToString(separator = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907)))) }
    }

    fun fu9(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { (Kla5())?.prope13.and(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if ((Kla0()).equals("rqbkp").and(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((Foo(-2316865634605250658).x).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope8.prope14 = {
            prope8.prope13 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 03:19:18,628 [main:107] - replacing (let(x), Unit?)
2021-03-12 03:19:18,629 [main:50] - replacing let(x) Unit?
2021-03-12 03:19:18,629 [main:54] - Getting value of type Unit?
2021-03-12 03:19:18,801 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 03:19:18,952 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 03:19:18,958 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 03:19:19,291 [main:302] - generating value of type = Any false depth = 3
2021-03-12 03:19:19,292 [main:95] - GENERATED = println("hcxny")
2021-03-12 03:19:19,292 [main:58] - GENERATED VALUE OF TYPE Unit? = println("hcxny")
2021-03-12 03:19:19,292 [main:61] - GENERATED IS CALL =true
2021-03-12 03:19:19,301 [main:67] - randomType = Long
2021-03-12 03:19:19,445 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:19:19,502 [main:106] - GETTING Unit? from Foo
2021-03-12 03:19:19,518 [main:113] - Case = [public open fun foo(a: Foo): kotlin.Unit defined in Foo[SimpleFunctionDescriptorImpl@1ec9f90]]
2021-03-12 03:19:19,519 [main:149] - GENERATING call of type public open fun foo(a: Foo): kotlin.Unit defined in Foo[SimpleFunctionDescriptorImpl@1ec9f90]
2021-03-12 03:19:19,519 [main:117] - GENERATED CALL = ((Foo(Foo(Foo(-1684647957278571901).x).x)))?.foo((Foo(Foo(Foo(-1684647957278571901).x).x)))
2021-03-12 03:19:19,519 [main:114] - replacement of let(x) of type Unit? is ((Foo(Foo(Foo(-1684647957278571901).x).x)))?.foo((Foo(Foo(Foo(-1684647957278571901).x).x)))
2021-03-12 03:19:19,643 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 03:19:19,644 [main:66] - Compilation checking started
2021-03-12 03:19:20,028 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    return 1000L.c()
}

fun box419(): String {
    val prope0 = { check(false, { "jcwxv"})}
var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).equals("uraaw").not()) return prope9
    return "xojld"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.((Foo(Foo(Foo(-1684647957278571901).x).x)))?.foo((Foo(Foo(Foo(-1684647957278571901).x).x)))
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("astzw" +
                prope11.joinToString(separator = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907)))) }
    }

    fun fu9(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { (Kla5())?.prope13.and(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if ((Kla0()).equals("rqbkp").and(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((Foo(-2316865634605250658).x).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope8.prope14 = {
            prope8.prope13 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 03:19:20,030 [main:107] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-12 03:19:20,030 [main:50] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-12 03:19:20,030 [main:54] - Getting value of type Function0<Boolean>
2021-03-12 03:19:20,175 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-12 03:19:20,179 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:19:20,183 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-12 03:19:20,184 [main:61] - GENERATED IS CALL =false
2021-03-12 03:19:21,143 [main:67] - randomType = Pair<Float, Pair<UByte, LinkedHashSet<Byte>>>
2021-03-12 03:19:21,275 [main:302] - generating value of type = Pair<Float, Pair<UByte, LinkedHashSet<Byte>>> false depth = 0
2021-03-12 03:19:21,428 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Float, second: Pair<UByte, LinkedHashSet<Byte>>): Pair<Float, Pair<UByte, LinkedHashSet<Byte>>> = TODO()
2021-03-12 03:19:21,433 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Float, second: Pair<UByte, LinkedHashSet<Byte>>): Pair<Float, Pair<UByte, LinkedHashSet<Byte>>> = TODO()
2021-03-12 03:19:21,582 [main:302] - generating value of type = Float true depth = 3
2021-03-12 03:19:21,586 [main:302] - generating value of type = Pair<UByte, LinkedHashSet<Byte>> false depth = 3
2021-03-12 03:19:21,741 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UByte, second: LinkedHashSet<Byte>): Pair<UByte, LinkedHashSet<Byte>> = TODO()
2021-03-12 03:19:21,746 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UByte, second: LinkedHashSet<Byte>): Pair<UByte, LinkedHashSet<Byte>> = TODO()
2021-03-12 03:19:21,901 [main:302] - generating value of type = UByte true depth = 6
2021-03-12 03:19:21,905 [main:302] - generating value of type = LinkedHashSet<Byte> false depth = 6
2021-03-12 03:19:22,062 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): LinkedHashSet<Byte> = TODO()
2021-03-12 03:19:22,071 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): LinkedHashSet<Byte> = TODO()
2021-03-12 03:19:22,219 [main:95] - GENERATED = LinkedHashSet<Byte>()
2021-03-12 03:19:22,219 [main:95] - GENERATED = Pair<UByte, LinkedHashSet<Byte>>(128.toUByte(), LinkedHashSet<Byte>())
2021-03-12 03:19:22,219 [main:95] - GENERATED = Pair<Float, Pair<UByte, LinkedHashSet<Byte>>>(0.3573357f, Pair<UByte, LinkedHashSet<Byte>>(128.toUByte(), LinkedHashSet<Byte>()))
2021-03-12 03:19:22,237 [main:106] - GETTING Function0<Boolean> from Any
2021-03-12 03:19:22,240 [main:106] - GETTING Function0<Boolean> from Foo
2021-03-12 03:19:22,251 [main:106] - GETTING Function0<Boolean> from Kla0
2021-03-12 03:19:22,255 [main:106] - GETTING Function0<Boolean> from Long
2021-03-12 03:19:22,303 [main:106] - GETTING Function0<Boolean> from Long
2021-03-12 03:19:22,304 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 03:19:22,350 [main:106] - GETTING Function0<Boolean> from Long
2021-03-12 03:19:22,351 [main:106] - GETTING Function0<Boolean> from Any
2021-03-12 03:19:22,352 [main:106] - GETTING Function0<Boolean> from Float
2021-03-12 03:19:22,395 [main:106] - GETTING Function0<Boolean> from Char
2021-03-12 03:19:22,433 [main:106] - GETTING Function0<Boolean> from Foo
2021-03-12 03:19:22,434 [main:106] - GETTING Function0<Boolean> from Foo
2021-03-12 03:19:22,436 [main:106] - GETTING Function0<Boolean> from Foo
2021-03-12 03:19:22,437 [main:106] - GETTING Function0<Boolean> from Foo
2021-03-12 03:19:22,438 [main:106] - GETTING Function0<Boolean> from Foo
2021-03-12 03:19:22,439 [main:106] - GETTING Function0<Boolean> from Long
2021-03-12 03:19:22,440 [main:106] - GETTING Function0<Boolean> from Long
2021-03-12 03:19:22,440 [main:114] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { false}
2021-03-12 03:19:22,593 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 03:19:22,594 [main:66] - Compilation checking started
2021-03-12 03:19:23,330 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    return 1000L.c()
}

fun box419(): String {
    val prope0 = { check(false, { "jcwxv"})}
var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).equals("uraaw").not()) return prope9
    return "xojld"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { false}?.let { error("astzw" +
                prope11.joinToString(separator = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907)))) }
    }

    fun fu9(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { (Kla5())?.prope13.and(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if ((Kla0()).equals("rqbkp").and(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((Foo(-2316865634605250658).x).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope8.prope14 = {
            prope8.prope13 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 03:19:23,333 [main:107] - replacing (c, Continuation<Unit>)
2021-03-12 03:19:23,333 [main:50] - replacing c Continuation<Unit>
2021-03-12 03:19:23,334 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 03:19:23,539 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 03:19:23,702 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 03:19:23,708 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 03:19:24,209 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 03:19:24,375 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:19:24,380 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:19:24,711 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 03:19:24,888 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:19:24,893 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:19:25,421 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:19:25,421 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:19:25,421 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 03:19:25,421 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 03:19:25,429 [main:67] - randomType = Char
2021-03-12 03:19:25,598 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:19:25,650 [main:106] - GETTING Continuation<Unit> from Foo
2021-03-12 03:19:25,673 [main:106] - GETTING Continuation<Unit> from Foo
2021-03-12 03:19:25,674 [main:106] - GETTING Continuation<Unit> from Float
2021-03-12 03:19:25,728 [main:106] - GETTING Continuation<Unit> from Foo
2021-03-12 03:19:25,730 [main:106] - GETTING Continuation<Unit> from Foo
2021-03-12 03:19:25,731 [main:106] - GETTING Continuation<Unit> from Long
2021-03-12 03:19:25,772 [main:106] - GETTING Continuation<Unit> from Char
2021-03-12 03:19:25,792 [main:106] - GETTING Continuation<Unit> from Long
2021-03-12 03:19:25,793 [main:106] - GETTING Continuation<Unit> from Any
2021-03-12 03:19:25,797 [main:106] - GETTING Continuation<Unit> from Foo
2021-03-12 03:19:25,798 [main:106] - GETTING Continuation<Unit> from Long
2021-03-12 03:19:25,799 [main:106] - GETTING Continuation<Unit> from Kla0
2021-03-12 03:19:25,804 [main:106] - GETTING Continuation<Unit> from Foo
2021-03-12 03:19:25,805 [main:106] - GETTING Continuation<Unit> from Any
2021-03-12 03:19:25,806 [main:106] - GETTING Continuation<Unit> from Long
2021-03-12 03:19:25,807 [main:106] - GETTING Continuation<Unit> from Long
2021-03-12 03:19:25,808 [main:106] - GETTING Continuation<Unit> from Int
2021-03-12 03:19:25,838 [main:111] - Cant find and generate replacement for c type Continuation<Unit>
2021-03-12 03:19:25,838 [main:107] - replacing ("\n", String)
2021-03-12 03:19:25,838 [main:50] - replacing "\n" String
2021-03-12 03:19:25,838 [main:54] - Getting value of type String
2021-03-12 03:19:25,973 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:19:25,977 [main:58] - GENERATED VALUE OF TYPE String = "zkalx"
2021-03-12 03:19:25,977 [main:61] - GENERATED IS CALL =false
2021-03-12 03:19:26,153 [main:67] - randomType = UByte
2021-03-12 03:19:26,300 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 03:19:26,353 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@30e0f51]
2021-03-12 03:19:26,353 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20010d37]
2021-03-12 03:19:26,354 [main:78] - Generated call from random type = (14.toUByte()).toShort().toString((0.40427768f).compareTo(-438515907))
2021-03-12 03:19:26,355 [main:106] - GETTING String from Any
2021-03-12 03:19:26,359 [main:106] - GETTING String from Foo
2021-03-12 03:19:26,373 [main:113] - Case = [public final val x: kotlin.Long defined in Foo[PropertyDescriptorImpl@40e4cc1b], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]]
2021-03-12 03:19:26,373 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@efa4745]
2021-03-12 03:19:26,373 [main:117] - GENERATED CALL = (Foo(-1684647957278571901)).x.toString((0.40427768f).compareTo(-438515907))
2021-03-12 03:19:26,373 [main:114] - replacement of "\n" of type String is (Foo(-1684647957278571901)).x.toString((0.40427768f).compareTo(-438515907))
2021-03-12 03:19:26,495 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:19:26,496 [main:66] - Compilation checking started
2021-03-12 03:19:27,088 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    return 1000L.c()
}

fun box419(): String {
    val prope0 = { check(false, { "jcwxv"})}
var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).equals("uraaw").not()) return prope9
    return "xojld"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { false}?.let { error("astzw" +
                prope11.joinToString(separator = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907)))) }
    }

    fun fu9(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { (Kla5())?.prope13.and(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = (Foo(-1684647957278571901)).x.toString((0.40427768f).compareTo(-438515907))))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if ((Kla0()).equals("rqbkp").and(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((Foo(-2316865634605250658).x).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope8.prope14 = {
            prope8.prope13 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 03:19:27,091 [main:107] - replacing (exception, Throwable)
2021-03-12 03:19:27,092 [main:50] - replacing exception Throwable
2021-03-12 03:19:27,092 [main:54] - Getting value of type Throwable
2021-03-12 03:19:27,257 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 03:19:27,265 [main:58] - GENERATED VALUE OF TYPE Throwable = ArithmeticException()
2021-03-12 03:19:27,265 [main:61] - GENERATED IS CALL =true
2021-03-12 03:19:27,944 [main:67] - randomType = Pair<UShort?, ArrayList<Double>>
2021-03-12 03:19:28,088 [main:302] - generating value of type = Pair<UShort?, ArrayList<Double>> false depth = 0
2021-03-12 03:19:28,248 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UShort?, second: ArrayList<Double>): Pair<UShort?, ArrayList<Double>> = TODO()
2021-03-12 03:19:28,253 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UShort?, second: ArrayList<Double>): Pair<UShort?, ArrayList<Double>> = TODO()
2021-03-12 03:19:28,409 [main:302] - generating value of type = UShort true depth = 3
2021-03-12 03:19:28,413 [main:302] - generating value of type = ArrayList<Double> false depth = 3
2021-03-12 03:19:28,566 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Double> = TODO()
2021-03-12 03:19:28,572 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Double> = TODO()
2021-03-12 03:19:28,736 [main:95] - GENERATED = arrayListOf<Double>()
2021-03-12 03:19:28,736 [main:95] - GENERATED = Pair<UShort?, ArrayList<Double>>(17503.toUShort(), arrayListOf<Double>())
2021-03-12 03:19:28,757 [main:106] - GETTING Throwable from Float
2021-03-12 03:19:28,785 [main:106] - GETTING Throwable from Foo
2021-03-12 03:19:28,795 [main:106] - GETTING Throwable from Foo
2021-03-12 03:19:28,796 [main:106] - GETTING Throwable from Foo
2021-03-12 03:19:28,796 [main:106] - GETTING Throwable from Long
2021-03-12 03:19:28,826 [main:106] - GETTING Throwable from Int
2021-03-12 03:19:28,858 [main:106] - GETTING Throwable from Long
2021-03-12 03:19:28,858 [main:106] - GETTING Throwable from Long
2021-03-12 03:19:28,859 [main:106] - GETTING Throwable from Long
2021-03-12 03:19:28,860 [main:106] - GETTING Throwable from Long
2021-03-12 03:19:28,860 [main:106] - GETTING Throwable from Any
2021-03-12 03:19:28,864 [main:106] - GETTING Throwable from Char
2021-03-12 03:19:28,882 [main:106] - GETTING Throwable from Foo
2021-03-12 03:19:28,882 [main:106] - GETTING Throwable from Foo
2021-03-12 03:19:28,883 [main:106] - GETTING Throwable from Any
2021-03-12 03:19:28,884 [main:106] - GETTING Throwable from Kla0
2021-03-12 03:19:28,888 [main:106] - GETTING Throwable from Foo
2021-03-12 03:19:28,889 [main:114] - replacement of exception of type Throwable is ArithmeticException()
2021-03-12 03:19:29,027 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:19:29,028 [main:66] - Compilation checking started
2021-03-12 03:19:29,698 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    return 1000L.c()
}

fun box419(): String {
    val prope0 = { check(false, { "jcwxv"})}
var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).equals("uraaw").not()) return prope9
    return "xojld"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { false}?.let { error("astzw" +
                prope11.joinToString(separator = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907)))) }
    }

    fun fu9(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { (Kla5())?.prope13.and(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = (Foo(-1684647957278571901)).x.toString((0.40427768f).compareTo(-438515907))))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if ((Kla0()).equals("rqbkp").and(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((Foo(-2316865634605250658).x).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope8.prope14 = {
            prope8.prope13 = true
        }
    }

    override fun fu5(exception: Throwable) {
        val prope0 = { check(false, { "jcwxv"})}
throw ArithmeticException()
    }
}


2021-03-12 03:19:29,701 [main:107] - replacing ("tail-call optimization hit: method ", String)
2021-03-12 03:19:29,702 [main:50] - replacing "tail-call optimization hit: method " String
2021-03-12 03:19:29,702 [main:54] - Getting value of type String
2021-03-12 03:19:29,873 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:19:29,880 [main:58] - GENERATED VALUE OF TYPE String = "ocezo"
2021-03-12 03:19:29,880 [main:61] - GENERATED IS CALL =false
2021-03-12 03:19:30,129 [main:67] - randomType = ArrayList<Long>
2021-03-12 03:19:30,300 [main:302] - generating value of type = ArrayList<Long> false depth = 0
2021-03-12 03:19:30,517 [main:43] - GENERATING CALL OF fun <E> ArrayList(): ArrayList<Long> = TODO()
2021-03-12 03:19:30,522 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(): ArrayList<Long> = TODO()
2021-03-12 03:19:30,667 [main:95] - GENERATED = ArrayList<Long>()
2021-03-12 03:19:30,810 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5b3650ef]
2021-03-12 03:19:30,952 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:19:31,098 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:19:31,251 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:19:31,396 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:19:31,401 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:19:31,715 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 03:19:31,722 [main:95] - GENERATED = StringBuilder("ycdut")
2021-03-12 03:19:31,868 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:19:32,011 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 03:19:32,015 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 03:19:32,169 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:19:32,174 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:19:32,495 [main:302] - generating value of type = String true depth = 4
2021-03-12 03:19:32,499 [main:95] - GENERATED = StringBuilder("jhgjx")
2021-03-12 03:19:32,500 [main:78] - Generated call from random type = (ArrayList<Long>()).joinToString("pejio", "vgrue", StringBuilder("ycdut"), (0.40427768f).compareTo(-438515907), "zbhcy", {a: T -> StringBuilder("jhgjx")})
2021-03-12 03:19:32,500 [main:114] - replacement of "tail-call optimization hit: method " of type String is (ArrayList<Long>()).joinToString("pejio", "vgrue", StringBuilder("ycdut"), (0.40427768f).compareTo(-438515907), "zbhcy", {a: T -> StringBuilder("jhgjx")})
2021-03-12 03:19:32,653 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:19:32,653 [main:66] - Compilation checking started
2021-03-12 03:19:33,105 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    return 1000L.c()
}

fun box419(): String {
    val prope0 = { check(false, { "jcwxv"})}
var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).equals("uraaw").not()) return prope9
    return "xojld"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { false}?.let { error("astzw" +
                prope11.joinToString(separator = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907)))) }
    }

    fun fu9(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { (Kla5())?.prope13.and(true) } ?: error((ArrayList<Long>()).joinToString("pejio", "vgrue", StringBuilder("ycdut"), (0.40427768f).compareTo(-438515907), "zbhcy", {a: T -> StringBuilder("jhgjx")}) + method + " has no state-machine " +
                prope11.joinToString(separator = (Foo(-1684647957278571901)).x.toString((0.40427768f).compareTo(-438515907))))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if ((Kla0()).equals("rqbkp").and(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((Foo(-2316865634605250658).x).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope8.prope14 = {
            prope8.prope13 = true
        }
    }

    override fun fu5(exception: Throwable) {
        val prope0 = { check(false, { "jcwxv"})}
throw ArithmeticException()
    }
}


2021-03-12 03:19:33,107 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 03:19:33,108 [main:50] - replacing {} Function0<Unit>
2021-03-12 03:19:33,108 [main:54] - Getting value of type Function0<Unit>
2021-03-12 03:19:33,265 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 03:19:33,269 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 03:19:33,427 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 03:19:33,432 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 03:19:33,749 [main:302] - generating value of type = Any false depth = 4
2021-03-12 03:19:33,749 [main:95] - GENERATED = println("jqrob")
2021-03-12 03:19:33,749 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("jqrob")}
2021-03-12 03:19:33,749 [main:61] - GENERATED IS CALL =false
2021-03-12 03:19:33,766 [main:67] - randomType = Kla1
2021-03-12 03:19:33,907 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 03:19:33,911 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}
2021-03-12 03:19:34,048 [main:194] - Type params = []
2021-03-12 03:19:34,194 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 03:19:34,341 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:19:34,346 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:19:34,673 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 03:19:34,839 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:19:34,845 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:19:35,358 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 03:19:35,358 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 03:19:35,373 [main:106] - GETTING Function0<Unit> from Kla0
2021-03-12 03:19:35,378 [main:106] - GETTING Function0<Unit> from Foo
2021-03-12 03:19:35,389 [main:106] - GETTING Function0<Unit> from Long
2021-03-12 03:19:35,419 [main:106] - GETTING Function0<Unit> from Foo
2021-03-12 03:19:35,420 [main:106] - GETTING Function0<Unit> from Long
2021-03-12 03:19:35,421 [main:106] - GETTING Function0<Unit> from Long
2021-03-12 03:19:35,422 [main:106] - GETTING Function0<Unit> from Foo
2021-03-12 03:19:35,423 [main:106] - GETTING Function0<Unit> from Foo
2021-03-12 03:19:35,423 [main:106] - GETTING Function0<Unit> from Foo
2021-03-12 03:19:35,424 [main:106] - GETTING Function0<Unit> from Long
2021-03-12 03:19:35,425 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 03:19:35,430 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 03:19:35,431 [main:106] - GETTING Function0<Unit> from Float
2021-03-12 03:19:35,461 [main:106] - GETTING Function0<Unit> from Foo
2021-03-12 03:19:35,462 [main:106] - GETTING Function0<Unit> from Char
2021-03-12 03:19:35,481 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 03:19:35,512 [main:106] - GETTING Function0<Unit> from Long
2021-03-12 03:19:35,512 [main:114] - replacement of {} of type Function0<Unit> is { println("jqrob")}
2021-03-12 03:19:35,653 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 03:19:35,654 [main:66] - Compilation checking started
2021-03-12 03:19:36,277 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    return 1000L.c()
}

fun box419(): String {
    val prope0 = { check(false, { "jcwxv"})}
var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).equals("uraaw").not()) return prope9
    return "xojld"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { false}?.let { error("astzw" +
                prope11.joinToString(separator = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907)))) }
    }

    fun fu9(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { (Kla5())?.prope13.and(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = (Foo(-1684647957278571901)).x.toString((0.40427768f).compareTo(-438515907))))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = { println("jqrob")}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if ((Kla0()).equals("rqbkp").and(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((Foo(-2316865634605250658).x).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope8.prope14 = {
            prope8.prope13 = true
        }
    }

    override fun fu5(exception: Throwable) {
        val prope0 = { check(false, { "jcwxv"})}
throw ArithmeticException()
    }
}


2021-03-12 03:19:36,279 [main:107] - replacing (true, Boolean)
2021-03-12 03:19:36,280 [main:50] - replacing true Boolean
2021-03-12 03:19:36,280 [main:54] - Getting value of type Boolean
2021-03-12 03:19:36,475 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:19:36,482 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 03:19:36,482 [main:61] - GENERATED IS CALL =false
2021-03-12 03:19:36,507 [main:67] - randomType = Kla4
2021-03-12 03:19:36,652 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 03:19:36,656 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { false}?.let { error("astzw" +
                prope11.joinToString(separator = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907)))) }
    }

    fun fu9(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { (Kla5())?.prope13.and(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = (Foo(-1684647957278571901)).x.toString((0.40427768f).compareTo(-438515907))))
    }
}
2021-03-12 03:19:36,661 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@35cdf537]
2021-03-12 03:19:36,802 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:36,803 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2550a63c]
2021-03-12 03:19:36,803 [main:78] - Generated call from random type = (Kla4()).equals("wuixd").not()
2021-03-12 03:19:36,804 [main:106] - GETTING Boolean from Any
2021-03-12 03:19:36,807 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@231a5622], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66c8d520]]
2021-03-12 03:19:36,808 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@231a5622]
2021-03-12 03:19:36,948 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:36,948 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66c8d520]
2021-03-12 03:19:37,098 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:19:37,102 [main:117] - GENERATED CALL = (Kla0().fu0()).equals("xmebj").and(true)
2021-03-12 03:19:37,103 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@231a5622], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2550a63c]]
2021-03-12 03:19:37,103 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@231a5622]
2021-03-12 03:19:37,240 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:37,240 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2550a63c]
2021-03-12 03:19:37,240 [main:117] - GENERATED CALL = (Kla0().fu0()).equals("kmwel").not()
2021-03-12 03:19:37,240 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@231a5622], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@788577d3]]
2021-03-12 03:19:37,240 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@231a5622]
2021-03-12 03:19:37,379 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:37,380 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@788577d3]
2021-03-12 03:19:37,516 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:19:37,521 [main:117] - GENERATED CALL = (Kla0().fu0()).equals("anwvl").or(false)
2021-03-12 03:19:37,521 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@231a5622], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@64ea9b8c]]
2021-03-12 03:19:37,521 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@231a5622]
2021-03-12 03:19:37,657 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:37,657 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@64ea9b8c]
2021-03-12 03:19:37,796 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:37,796 [main:117] - GENERATED CALL = (Kla0().fu0()).equals("vdtor").equals("klibm")
2021-03-12 03:19:37,796 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@231a5622], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@458cf415]]
2021-03-12 03:19:37,796 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@231a5622]
2021-03-12 03:19:37,945 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:37,945 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@458cf415]
2021-03-12 03:19:38,084 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:19:38,088 [main:117] - GENERATED CALL = (Kla0().fu0()).equals("mxwga").xor(false)
2021-03-12 03:19:38,088 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@231a5622]]
2021-03-12 03:19:38,088 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@231a5622]
2021-03-12 03:19:38,231 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:38,232 [main:117] - GENERATED CALL = (Kla0().fu0()).equals("dqlxw")
2021-03-12 03:19:38,232 [main:114] - replacement of true of type Boolean is (Kla0().fu0()).equals("mxwga").xor(false)
2021-03-12 03:19:38,368 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:19:38,368 [main:66] - Compilation checking started
2021-03-12 03:19:38,959 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    return 1000L.c()
}

fun box419(): String {
    val prope0 = { check(false, { "jcwxv"})}
var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).equals("uraaw").not()) return prope9
    return "xojld"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { false}?.let { error("astzw" +
                prope11.joinToString(separator = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907)))) }
    }

    fun fu9(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { (Kla5())?.prope13.and(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = (Foo(-1684647957278571901)).x.toString((0.40427768f).compareTo(-438515907))))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = { println("jqrob")}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if ((Kla0()).equals("rqbkp").and(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((Foo(-2316865634605250658).x).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = { check(false, { "jcwxv"})}
prope8.prope14 = {
            prope8.prope13 = (Kla0().fu0()).equals("mxwga").xor(false)
        }
    }

    override fun fu5(exception: Throwable) {
        val prope0 = { check(false, { "jcwxv"})}
throw ArithmeticException()
    }
}


2021-03-12 03:19:38,961 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-12 03:19:38,962 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-12 03:19:38,962 [main:54] - Getting value of type Throwable?
2021-03-12 03:19:39,110 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 03:19:39,266 [main:43] - GENERATING CALL OF fun AssertionError(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 03:19:39,271 [main:61] - WITHOUT TYPE PARAMS = fun AssertionError(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 03:19:39,777 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:19:39,781 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 03:19:39,927 [main:43] - GENERATING CALL OF fun ArithmeticException(message: kotlin.String?): Throwable = TODO()
2021-03-12 03:19:39,932 [main:61] - WITHOUT TYPE PARAMS = fun ArithmeticException(message: kotlin.String?): Throwable = TODO()
2021-03-12 03:19:40,255 [main:302] - generating value of type = String true depth = 6
2021-03-12 03:19:40,259 [main:95] - GENERATED = ArithmeticException("xdtea")
2021-03-12 03:19:40,259 [main:95] - GENERATED = AssertionError("jtnwm", ArithmeticException("xdtea"))
2021-03-12 03:19:40,259 [main:58] - GENERATED VALUE OF TYPE Throwable? = AssertionError("jtnwm", ArithmeticException("xdtea"))
2021-03-12 03:19:40,259 [main:61] - GENERATED IS CALL =true
2021-03-12 03:19:40,964 [main:67] - randomType = LinkedHashMap<ArrayDeque<Long>, UShort>
2021-03-12 03:19:41,107 [main:302] - generating value of type = LinkedHashMap<ArrayDeque<Long>, UShort> false depth = 0
2021-03-12 03:19:41,255 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<ArrayDeque<Long>, UShort> = TODO()
2021-03-12 03:19:41,260 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<ArrayDeque<Long>, UShort> = TODO()
2021-03-12 03:19:41,418 [main:95] - GENERATED = linkedMapOf<ArrayDeque<Long>, UShort>()
2021-03-12 03:19:41,669 [main:106] - GETTING Throwable? from Foo
2021-03-12 03:19:41,689 [main:106] - GETTING Throwable? from Kla0
2021-03-12 03:19:41,697 [main:106] - GETTING Throwable? from Foo
2021-03-12 03:19:41,698 [main:106] - GETTING Throwable? from Foo
2021-03-12 03:19:41,699 [main:106] - GETTING Throwable? from Long
2021-03-12 03:19:41,751 [main:106] - GETTING Throwable? from Float
2021-03-12 03:19:41,801 [main:106] - GETTING Throwable? from Foo
2021-03-12 03:19:41,802 [main:106] - GETTING Throwable? from Long
2021-03-12 03:19:41,803 [main:106] - GETTING Throwable? from Long
2021-03-12 03:19:41,804 [main:106] - GETTING Throwable? from Long
2021-03-12 03:19:41,805 [main:106] - GETTING Throwable? from Foo
2021-03-12 03:19:41,805 [main:106] - GETTING Throwable? from Any
2021-03-12 03:19:41,811 [main:106] - GETTING Throwable? from Long
2021-03-12 03:19:41,812 [main:106] - GETTING Throwable? from Int
2021-03-12 03:19:41,868 [main:106] - GETTING Throwable? from Any
2021-03-12 03:19:41,869 [main:106] - GETTING Throwable? from Foo
2021-03-12 03:19:41,870 [main:106] - GETTING Throwable? from Char
2021-03-12 03:19:41,901 [main:114] - replacement of exceptionOrNull() of type Throwable? is AssertionError("jtnwm", ArithmeticException("xdtea"))
2021-03-12 03:19:42,087 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:19:42,087 [main:66] - Compilation checking started
2021-03-12 03:19:42,570 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    return 1000L.c()
}

fun box419(): String {
    val prope0 = { check(false, { "jcwxv"})}
var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).equals("uraaw").not()) return prope9
    return "xojld"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        val prope0 = { check(false, { "jcwxv"})}
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(prope10.AssertionError("jtnwm", ArithmeticException("xdtea"))!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { false}?.let { error("astzw" +
                prope11.joinToString(separator = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907)))) }
    }

    fun fu9(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { (Kla5())?.prope13.and(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = (Foo(-1684647957278571901)).x.toString((0.40427768f).compareTo(-438515907))))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = { println("jqrob")}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if ((Kla0()).equals("rqbkp").and(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((Foo(-2316865634605250658).x).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = { check(false, { "jcwxv"})}
prope8.prope14 = {
            prope8.prope13 = (Kla0().fu0()).equals("mxwga").xor(false)
        }
    }

    override fun fu5(exception: Throwable) {
        val prope0 = { check(false, { "jcwxv"})}
throw ArithmeticException()
    }
}


2021-03-12 03:19:42,573 [main:107] - replacing (prope10, Result<Ty0>)
2021-03-12 03:19:42,573 [main:50] - replacing prope10 Result<Ty0>
2021-03-12 03:19:42,573 [main:54] - Getting value of type Result<Ty0>
2021-03-12 03:19:42,733 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 03:19:42,903 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 03:19:42,909 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 03:19:43,267 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 03:19:43,269 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 03:19:43,602 [main:67] - randomType = ULong?
2021-03-12 03:19:43,727 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 03:19:43,761 [main:106] - GETTING Result<Ty0> from Foo
2021-03-12 03:19:43,772 [main:106] - GETTING Result<Ty0> from Any
2021-03-12 03:19:43,775 [main:106] - GETTING Result<Ty0> from Long
2021-03-12 03:19:43,804 [main:106] - GETTING Result<Ty0> from Char
2021-03-12 03:19:43,821 [main:106] - GETTING Result<Ty0> from Long
2021-03-12 03:19:43,823 [main:106] - GETTING Result<Ty0> from Long
2021-03-12 03:19:43,824 [main:106] - GETTING Result<Ty0> from Any
2021-03-12 03:19:43,825 [main:106] - GETTING Result<Ty0> from Long
2021-03-12 03:19:43,826 [main:106] - GETTING Result<Ty0> from Foo
2021-03-12 03:19:43,827 [main:106] - GETTING Result<Ty0> from Foo
2021-03-12 03:19:43,828 [main:106] - GETTING Result<Ty0> from Foo
2021-03-12 03:19:43,829 [main:106] - GETTING Result<Ty0> from Float
2021-03-12 03:19:43,859 [main:106] - GETTING Result<Ty0> from Long
2021-03-12 03:19:43,861 [main:106] - GETTING Result<Ty0> from Foo
2021-03-12 03:19:43,862 [main:106] - GETTING Result<Ty0> from Kla0
2021-03-12 03:19:43,867 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 03:19:43,897 [main:106] - GETTING Result<Ty0> from Foo
2021-03-12 03:19:43,897 [main:111] - Cant find and generate replacement for prope10 type Result<Ty0>
2021-03-12 03:19:43,897 [main:107] - replacing (c, [@kotlin.ExtensionFunctionType] SuspendFunction1<Long, String>)
2021-03-12 03:19:43,898 [main:50] - replacing c [@kotlin.ExtensionFunctionType] SuspendFunction1<Long, String>
2021-03-12 03:19:43,898 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Long, String>
2021-03-12 03:19:44,023 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Long, String> false depth = 0
2021-03-12 03:19:44,027 [main:302] - generating value of type = String true depth = 1
2021-03-12 03:19:44,032 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Long, String> = {a: Long -> "hizxe"}
2021-03-12 03:19:44,032 [main:61] - GENERATED IS CALL =false
2021-03-12 03:19:44,040 [main:67] - randomType = Float
2021-03-12 03:19:44,185 [main:302] - generating value of type = Float true depth = 0
2021-03-12 03:19:44,224 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Long, String> from Foo
2021-03-12 03:19:44,237 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Long, String> from Long
2021-03-12 03:19:44,275 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Long, String> from Foo
2021-03-12 03:19:44,280 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Long, String> from Foo
2021-03-12 03:19:44,285 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Long, String> from Float
2021-03-12 03:19:44,325 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Long, String> from Foo
2021-03-12 03:19:44,330 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Long, String> from Any
2021-03-12 03:19:44,338 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Long, String> from Foo
2021-03-12 03:19:44,343 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Long, String> from Int
2021-03-12 03:19:44,386 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Long, String> from Long
2021-03-12 03:19:44,391 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Long, String> from Char
2021-03-12 03:19:44,417 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Long, String> from Long
2021-03-12 03:19:44,422 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Long, String> from Long
2021-03-12 03:19:44,426 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Long, String> from Long
2021-03-12 03:19:44,431 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Long, String> from Foo
2021-03-12 03:19:44,436 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Long, String> from Kla0
2021-03-12 03:19:44,446 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Long, String> from Any
2021-03-12 03:19:44,446 [main:114] - replacement of c of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Long, String> is {a: Long -> "hizxe"}
2021-03-12 03:19:44,593 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 03:19:44,594 [main:66] - Compilation checking started
2021-03-12 03:19:45,005 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    val prope0 = { check(false, { "jcwxv"})}
return 1000L.{a: Long -> "hizxe"}()
}

fun box419(): String {
    val prope0 = { check(false, { "jcwxv"})}
var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).equals("uraaw").not()) return prope9
    return "xojld"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        val prope0 = { check(false, { "jcwxv"})}
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { false}?.let { error("astzw" +
                prope11.joinToString(separator = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907)))) }
    }

    fun fu9(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { (Kla5())?.prope13.and(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = (Foo(-1684647957278571901)).x.toString((0.40427768f).compareTo(-438515907))))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = { println("jqrob")}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if ((Kla0()).equals("rqbkp").and(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((Foo(-2316865634605250658).x).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = { check(false, { "jcwxv"})}
prope8.prope14 = {
            prope8.prope13 = (Kla0().fu0()).equals("mxwga").xor(false)
        }
    }

    override fun fu5(exception: Throwable) {
        val prope0 = { check(false, { "jcwxv"})}
throw ArithmeticException()
    }
}


2021-03-12 03:19:45,008 [main:107] - replacing (prope10.exceptionOrNull(), Throwable?)
2021-03-12 03:19:45,008 [main:50] - replacing prope10.exceptionOrNull() Throwable?
2021-03-12 03:19:45,008 [main:54] - Getting value of type Throwable?
2021-03-12 03:19:45,146 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 03:19:45,291 [main:43] - GENERATING CALL OF fun RuntimeException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 03:19:45,296 [main:61] - WITHOUT TYPE PARAMS = fun RuntimeException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 03:19:45,739 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:19:45,743 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 03:19:45,750 [main:95] - GENERATED = RuntimeException("btqef", UnsupportedOperationException())
2021-03-12 03:19:45,750 [main:58] - GENERATED VALUE OF TYPE Throwable? = RuntimeException("btqef", UnsupportedOperationException())
2021-03-12 03:19:45,750 [main:61] - GENERATED IS CALL =true
2021-03-12 03:19:46,101 [main:67] - randomType = Sequence<Double?>
2021-03-12 03:19:46,102 [main:106] - GETTING Throwable? from Foo
2021-03-12 03:19:46,115 [main:106] - GETTING Throwable? from Int
2021-03-12 03:19:46,162 [main:106] - GETTING Throwable? from Long
2021-03-12 03:19:46,207 [main:106] - GETTING Throwable? from Float
2021-03-12 03:19:46,255 [main:106] - GETTING Throwable? from Foo
2021-03-12 03:19:46,255 [main:106] - GETTING Throwable? from Foo
2021-03-12 03:19:46,256 [main:106] - GETTING Throwable? from Long
2021-03-12 03:19:46,257 [main:106] - GETTING Throwable? from Char
2021-03-12 03:19:46,281 [main:106] - GETTING Throwable? from Foo
2021-03-12 03:19:46,282 [main:106] - GETTING Throwable? from Long
2021-03-12 03:19:46,282 [main:106] - GETTING Throwable? from Foo
2021-03-12 03:19:46,283 [main:106] - GETTING Throwable? from Kla0
2021-03-12 03:19:46,289 [main:106] - GETTING Throwable? from Long
2021-03-12 03:19:46,289 [main:106] - GETTING Throwable? from Any
2021-03-12 03:19:46,293 [main:106] - GETTING Throwable? from Long
2021-03-12 03:19:46,294 [main:106] - GETTING Throwable? from Any
2021-03-12 03:19:46,295 [main:106] - GETTING Throwable? from Foo
2021-03-12 03:19:46,295 [main:114] - replacement of prope10.exceptionOrNull() of type Throwable? is RuntimeException("btqef", UnsupportedOperationException())
2021-03-12 03:19:46,441 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:19:46,442 [main:66] - Compilation checking started
2021-03-12 03:19:47,092 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    val prope0 = { check(false, { "jcwxv"})}
return 1000L.c()
}

fun box419(): String {
    val prope0 = { check(false, { "jcwxv"})}
var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).equals("uraaw").not()) return prope9
    return "xojld"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        val prope0 = { check(false, { "jcwxv"})}
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(RuntimeException("btqef", UnsupportedOperationException())!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { false}?.let { error("astzw" +
                prope11.joinToString(separator = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907)))) }
    }

    fun fu9(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { (Kla5())?.prope13.and(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = (Foo(-1684647957278571901)).x.toString((0.40427768f).compareTo(-438515907))))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = { println("jqrob")}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if ((Kla0()).equals("rqbkp").and(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((Foo(-2316865634605250658).x).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = { check(false, { "jcwxv"})}
prope8.prope14 = {
            prope8.prope13 = (Kla0().fu0()).equals("mxwga").xor(false)
        }
    }

    override fun fu5(exception: Throwable) {
        val prope0 = { check(false, { "jcwxv"})}
throw ArithmeticException()
    }
}


2021-03-12 03:19:47,094 [main:107] - replacing (prope8.prope14, Function0<Unit>)
2021-03-12 03:19:47,094 [main:50] - replacing prope8.prope14 Function0<Unit>
2021-03-12 03:19:47,094 [main:54] - Getting value of type Function0<Unit>
2021-03-12 03:19:47,325 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 03:19:47,331 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 03:19:47,510 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 03:19:47,515 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 03:19:47,810 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 03:19:47,814 [main:95] - GENERATED = require(true)
2021-03-12 03:19:47,814 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-12 03:19:47,815 [main:61] - GENERATED IS CALL =false
2021-03-12 03:19:48,139 [main:67] - randomType = ArrayDeque<ULong>
2021-03-12 03:19:48,272 [main:302] - generating value of type = ArrayDeque<ULong> false depth = 0
2021-03-12 03:19:48,403 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<ULong> = TODO()
2021-03-12 03:19:48,408 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<ULong> = TODO()
2021-03-12 03:19:48,753 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:19:48,758 [main:95] - GENERATED = ArrayDeque<ULong>(-1352183550)
2021-03-12 03:19:48,905 [main:106] - GETTING Function0<Unit> from Long
2021-03-12 03:19:48,934 [main:106] - GETTING Function0<Unit> from Kla0
2021-03-12 03:19:48,939 [main:106] - GETTING Function0<Unit> from Foo
2021-03-12 03:19:48,949 [main:106] - GETTING Function0<Unit> from Foo
2021-03-12 03:19:48,950 [main:106] - GETTING Function0<Unit> from Foo
2021-03-12 03:19:48,951 [main:106] - GETTING Function0<Unit> from Float
2021-03-12 03:19:48,979 [main:106] - GETTING Function0<Unit> from Char
2021-03-12 03:19:48,996 [main:106] - GETTING Function0<Unit> from Long
2021-03-12 03:19:48,997 [main:106] - GETTING Function0<Unit> from Long
2021-03-12 03:19:48,998 [main:106] - GETTING Function0<Unit> from Long
2021-03-12 03:19:48,999 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 03:19:49,003 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 03:19:49,004 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 03:19:49,033 [main:106] - GETTING Function0<Unit> from Long
2021-03-12 03:19:49,034 [main:106] - GETTING Function0<Unit> from Foo
2021-03-12 03:19:49,035 [main:106] - GETTING Function0<Unit> from Foo
2021-03-12 03:19:49,036 [main:106] - GETTING Function0<Unit> from Foo
2021-03-12 03:19:49,036 [main:114] - replacement of prope8.prope14 of type Function0<Unit> is { require(true)}
2021-03-12 03:19:49,164 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 03:19:49,165 [main:66] - Compilation checking started
2021-03-12 03:19:49,554 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    val prope0 = { check(false, { "jcwxv"})}
return 1000L.c()
}

fun box419(): String {
    val prope0 = { check(false, { "jcwxv"})}
var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).equals("uraaw").not()) return prope9
    return "xojld"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        val prope0 = { check(false, { "jcwxv"})}
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(RuntimeException("btqef", UnsupportedOperationException())!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { false}?.let { error("astzw" +
                prope11.joinToString(separator = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907)))) }
    }

    fun fu9(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { (Kla5())?.prope13.and(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = (Foo(-1684647957278571901)).x.toString((0.40427768f).compareTo(-438515907))))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = { println("jqrob")}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if ((Kla0()).equals("rqbkp").and(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((Foo(-2316865634605250658).x).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = { check(false, { "jcwxv"})}
{ require(true)} = {
            prope8.prope13 = (Kla0().fu0()).equals("mxwga").xor(false)
        }
    }

    override fun fu5(exception: Throwable) {
        val prope0 = { check(false, { "jcwxv"})}
throw ArithmeticException()
    }
}


2021-03-12 03:19:49,557 [main:107] - replacing (prope15 != null, Boolean)
2021-03-12 03:19:49,557 [main:50] - replacing prope15 != null Boolean
2021-03-12 03:19:49,557 [main:54] - Getting value of type Boolean
2021-03-12 03:19:49,684 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:19:49,688 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 03:19:49,688 [main:61] - GENERATED IS CALL =false
2021-03-12 03:19:49,841 [main:67] - randomType = UShort
2021-03-12 03:19:49,983 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 03:19:50,017 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@31e3b6fa]
2021-03-12 03:19:50,165 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 03:19:50,170 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@3e7b9bdc]
2021-03-12 03:19:50,326 [main:78] - Generated call from random type = (7299.toUShort()).rangeTo(14165.toUShort()).equals(null)
2021-03-12 03:19:50,327 [main:106] - GETTING Boolean from Long
2021-03-12 03:19:50,376 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.LongRange defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@60d501f6], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@46f83e71]]
2021-03-12 03:19:50,376 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.LongRange defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@60d501f6]
2021-03-12 03:19:50,522 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:19:50,526 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@46f83e71]
2021-03-12 03:19:50,527 [main:117] - GENERATED CALL = ((Foo(1684647957278571901)).x).rangeTo(108).isEmpty()
2021-03-12 03:19:50,527 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5a7380a5], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66c8d520]]
2021-03-12 03:19:50,527 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5a7380a5]
2021-03-12 03:19:50,669 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:50,669 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66c8d520]
2021-03-12 03:19:50,817 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:19:50,821 [main:117] - GENERATED CALL = ((Foo(1684647957278571901)).x).equals("eguyb").and(true)
2021-03-12 03:19:50,821 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ebbd67e]]
2021-03-12 03:19:50,821 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605]
2021-03-12 03:19:50,822 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ebbd67e]
2021-03-12 03:19:50,822 [main:117] - GENERATED CALL = ((Foo(1684647957278571901)).x).toChar().isLowerCase()
2021-03-12 03:19:50,822 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@603e2da]]
2021-03-12 03:19:50,822 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605]
2021-03-12 03:19:50,822 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@603e2da]
2021-03-12 03:19:50,822 [main:117] - GENERATED CALL = ((Foo(1684647957278571901)).x).toChar().isUpperCase()
2021-03-12 03:19:50,822 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.LongRange defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@60d501f6], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.LongRange.contains(element: kotlin.Long?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@497d3a85]]
2021-03-12 03:19:50,822 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.LongRange defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@60d501f6]
2021-03-12 03:19:50,970 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:19:50,974 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.LongRange.contains(element: kotlin.Long?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@497d3a85]
2021-03-12 03:19:51,104 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:19:51,109 [main:117] - GENERATED CALL = ((Foo(1684647957278571901)).x).rangeTo(121).contains(-5265465682433390953)
2021-03-12 03:19:51,109 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ad0d1b0]]
2021-03-12 03:19:51,109 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605]
2021-03-12 03:19:51,109 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ad0d1b0]
2021-03-12 03:19:51,109 [main:117] - GENERATED CALL = ((Foo(1684647957278571901)).x).toChar().isLowSurrogate()
2021-03-12 03:19:51,109 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78d8a7cc]]
2021-03-12 03:19:51,109 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@616c1605]
2021-03-12 03:19:51,109 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78d8a7cc]
2021-03-12 03:19:51,110 [main:117] - GENERATED CALL = ((Foo(1684647957278571901)).x).toChar().isHighSurrogate()
2021-03-12 03:19:51,110 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5a7380a5]]
2021-03-12 03:19:51,110 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5a7380a5]
2021-03-12 03:19:51,256 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:51,257 [main:117] - GENERATED CALL = ((Foo(1684647957278571901)).x).equals("jahda")
2021-03-12 03:19:51,257 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@628fe6aa], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1e8e8f19]]
2021-03-12 03:19:51,257 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@628fe6aa]
2021-03-12 03:19:51,257 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1e8e8f19]
2021-03-12 03:19:51,257 [main:117] - GENERATED CALL = ((Foo(1684647957278571901)).x).toFloat().isNaN()
2021-03-12 03:19:51,257 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@66277dde], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@15fdcd0e]]
2021-03-12 03:19:51,257 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@66277dde]
2021-03-12 03:19:51,257 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@15fdcd0e]
2021-03-12 03:19:51,395 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:19:51,396 [main:117] - GENERATED CALL = ((Foo(1684647957278571901)).x).toByte().equals("yvwhz")
2021-03-12 03:19:51,396 [main:114] - replacement of prope15 != null of type Boolean is ((Foo(1684647957278571901)).x).equals("eguyb").and(true)
2021-03-12 03:19:51,538 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:19:51,539 [main:66] - Compilation checking started
2021-03-12 03:19:51,950 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    val prope0 = { check(false, { "jcwxv"})}
return 1000L.c()
}

fun box419(): String {
    val prope0 = { check(false, { "jcwxv"})}
var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).equals("uraaw").not()) return prope9
    return "xojld"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        val prope0 = { check(false, { "jcwxv"})}
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(RuntimeException("btqef", UnsupportedOperationException())!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (((Foo(1684647957278571901)).x).equals("eguyb").and(true)) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { false}?.let { error("astzw" +
                prope11.joinToString(separator = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907)))) }
    }

    fun fu9(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { (Kla5())?.prope13.and(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = (Foo(-1684647957278571901)).x.toString((0.40427768f).compareTo(-438515907))))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = { println("jqrob")}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if ((Kla0()).equals("rqbkp").and(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((Foo(-2316865634605250658).x).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = { check(false, { "jcwxv"})}
prope8.prope14 = {
            prope8.prope13 = (Kla0().fu0()).equals("mxwga").xor(false)
        }
    }

    override fun fu5(exception: Throwable) {
        val prope0 = { check(false, { "jcwxv"})}
throw ArithmeticException()
    }
}


2021-03-12 03:19:51,952 [main:107] - replacing (prope10, Result<Ty0>)
2021-03-12 03:19:51,953 [main:50] - replacing prope10 Result<Ty0>
2021-03-12 03:19:51,953 [main:54] - Getting value of type Result<Ty0>
2021-03-12 03:19:52,104 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 03:19:52,250 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 03:19:52,256 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 03:19:52,628 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 03:19:52,628 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 03:19:52,818 [main:67] - randomType = Kla4?
2021-03-12 03:19:52,956 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 03:19:52,961 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { false}?.let { error("astzw" +
                prope11.joinToString(separator = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907)))) }
    }

    fun fu9(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { (Kla5())?.prope13.and(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = (Foo(-1684647957278571901)).x.toString((0.40427768f).compareTo(-438515907))))
    }
}
2021-03-12 03:19:52,970 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 03:19:53,018 [main:106] - GETTING Result<Ty0> from Long
2021-03-12 03:19:53,050 [main:106] - GETTING Result<Ty0> from Kla0
2021-03-12 03:19:53,055 [main:106] - GETTING Result<Ty0> from Long
2021-03-12 03:19:53,056 [main:106] - GETTING Result<Ty0> from Any
2021-03-12 03:19:53,059 [main:106] - GETTING Result<Ty0> from Long
2021-03-12 03:19:53,061 [main:106] - GETTING Result<Ty0> from Foo
2021-03-12 03:19:53,073 [main:106] - GETTING Result<Ty0> from Long
2021-03-12 03:19:53,074 [main:106] - GETTING Result<Ty0> from Char
2021-03-12 03:19:53,098 [main:106] - GETTING Result<Ty0> from Long
2021-03-12 03:19:53,099 [main:106] - GETTING Result<Ty0> from Foo
2021-03-12 03:19:53,101 [main:106] - GETTING Result<Ty0> from Foo
2021-03-12 03:19:53,102 [main:106] - GETTING Result<Ty0> from Foo
2021-03-12 03:19:53,103 [main:106] - GETTING Result<Ty0> from Foo
2021-03-12 03:19:53,104 [main:106] - GETTING Result<Ty0> from Foo
2021-03-12 03:19:53,105 [main:106] - GETTING Result<Ty0> from Float
2021-03-12 03:19:53,134 [main:106] - GETTING Result<Ty0> from Any
2021-03-12 03:19:53,134 [main:111] - Cant find and generate replacement for prope10 type Result<Ty0>
2021-03-12 03:19:53,134 [main:107] - replacing ("tail-call optimization hit: method " + method + " has no state-machine ", String)
2021-03-12 03:19:53,134 [main:50] - replacing "tail-call optimization hit: method " + method + " has no state-machine " String
2021-03-12 03:19:53,134 [main:54] - Getting value of type String
2021-03-12 03:19:53,277 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:19:53,281 [main:58] - GENERATED VALUE OF TYPE String = "dqooi"
2021-03-12 03:19:53,282 [main:61] - GENERATED IS CALL =false
2021-03-12 03:19:53,464 [main:67] - randomType = Long?
2021-03-12 03:19:53,613 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:19:53,655 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@66277dde]
2021-03-12 03:19:53,655 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48b50a1]
2021-03-12 03:19:53,664 [main:78] - Generated call from random type = (-6221560509887450678)?.toByte().toString((0.40427768f).compareTo(-438515907))
2021-03-12 03:19:53,664 [main:114] - replacement of "tail-call optimization hit: method " + method + " has no state-machine " of type String is (-6221560509887450678)?.toByte().toString((0.40427768f).compareTo(-438515907))
2021-03-12 03:19:53,794 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:19:53,794 [main:66] - Compilation checking started
2021-03-12 03:19:54,433 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    val prope0 = { check(false, { "jcwxv"})}
return 1000L.c()
}

fun box419(): String {
    val prope0 = { check(false, { "jcwxv"})}
var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).equals("uraaw").not()) return prope9
    return "xojld"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        val prope0 = { check(false, { "jcwxv"})}
x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        val prope0 = { check(false, { "jcwxv"})}
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(RuntimeException("btqef", UnsupportedOperationException())!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { false}?.let { error("astzw" +
                prope11.joinToString(separator = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907)))) }
    }

    fun fu9(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { (Kla5())?.prope13.and(true) } ?: error((-6221560509887450678)?.toByte().toString((0.40427768f).compareTo(-438515907)) +
                prope11.joinToString(separator = (Foo(-1684647957278571901)).x.toString((0.40427768f).compareTo(-438515907))))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = { println("jqrob")}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in 1..numberOfSuspensions) {
            if ((Kla0()).equals("rqbkp").and(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((Foo(-2316865634605250658).x).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = { check(false, { "jcwxv"})}
prope8.prope14 = {
            prope8.prope13 = (Kla0().fu0()).equals("mxwga").xor(false)
        }
    }

    override fun fu5(exception: Throwable) {
        val prope0 = { check(false, { "jcwxv"})}
throw ArithmeticException()
    }
}


2021-03-12 03:19:54,437 [main:107] - replacing (1..numberOfSuspensions, IntRange)
2021-03-12 03:19:54,437 [main:50] - replacing 1..numberOfSuspensions IntRange
2021-03-12 03:19:54,437 [main:54] - Getting value of type IntRange
2021-03-12 03:19:54,612 [main:302] - generating value of type = IntRange false depth = 0
2021-03-12 03:19:54,768 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 03:19:54,773 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 03:19:55,260 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:19:55,264 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:19:55,269 [main:95] - GENERATED = IntRange(866510944, 1262785714)
2021-03-12 03:19:55,269 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(866510944, 1262785714)
2021-03-12 03:19:55,269 [main:61] - GENERATED IS CALL =true
2021-03-12 03:19:55,277 [main:67] - randomType = Char
2021-03-12 03:19:55,423 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:19:55,451 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@64678ceb]
2021-03-12 03:19:55,451 [main:149] - GENERATING call of type public infix fun kotlin.Short.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6263089d]
2021-03-12 03:19:55,593 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:19:55,598 [main:78] - Generated call from random type = ('Ȱ').toShort().until(-64)
2021-03-12 03:19:55,599 [main:106] - GETTING IntRange from Char
2021-03-12 03:19:55,616 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7bf83bdd], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67e2f838]]
2021-03-12 03:19:55,616 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7bf83bdd]
2021-03-12 03:19:55,770 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:19:55,775 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67e2f838]
2021-03-12 03:19:55,917 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:19:55,922 [main:117] - GENERATED CALL = ((Foo(Foo(-1684647957278571901).x).x).toChar()).compareTo('嵧').rangeTo(98)
2021-03-12 03:19:55,922 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@64678ceb], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@34fa65d6]]
2021-03-12 03:19:55,922 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@64678ceb]
2021-03-12 03:19:55,922 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@34fa65d6]
2021-03-12 03:19:56,073 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:19:56,078 [main:117] - GENERATED CALL = ((Foo(Foo(-1684647957278571901).x).x).toChar()).toShort().rangeTo(-36)
2021-03-12 03:19:56,078 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7bf83bdd], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@27f3c057]]
2021-03-12 03:19:56,078 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7bf83bdd]
2021-03-12 03:19:56,079 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@27f3c057]
2021-03-12 03:19:56,240 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:19:56,245 [main:117] - GENERATED CALL = ((Foo(Foo(-1684647957278571901).x).x).toChar()).compareTo((Foo(Foo(-1684647957278571901).x).x).toChar()).until(76)
2021-03-12 03:19:56,245 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7ba79d15], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5dfe144]]
2021-03-12 03:19:56,245 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7ba79d15]
2021-03-12 03:19:56,245 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5dfe144]
2021-03-12 03:19:56,387 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:19:56,392 [main:117] - GENERATED CALL = ((Foo(Foo(-1684647957278571901).x).x).toChar()).toByte().rangeTo(10)
2021-03-12 03:19:56,392 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7ba79d15], public infix fun kotlin.Byte.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@c31308e]]
2021-03-12 03:19:56,392 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7ba79d15]
2021-03-12 03:19:56,392 [main:149] - GENERATING call of type public infix fun kotlin.Byte.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@c31308e]
2021-03-12 03:19:56,529 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:19:56,534 [main:117] - GENERATED CALL = ((Foo(Foo(-1684647957278571901).x).x).toChar()).toByte().until(-66)
2021-03-12 03:19:56,534 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@64678ceb], public infix fun kotlin.Short.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6263089d]]
2021-03-12 03:19:56,534 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@64678ceb]
2021-03-12 03:19:56,534 [main:149] - GENERATING call of type public infix fun kotlin.Short.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6263089d]
2021-03-12 03:19:56,678 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:19:56,683 [main:117] - GENERATED CALL = ((Foo(Foo(-1684647957278571901).x).x).toChar()).toShort().until(-54)
2021-03-12 03:19:56,683 [main:114] - replacement of 1..numberOfSuspensions of type IntRange is ((Foo(Foo(-1684647957278571901).x).x).toChar()).toByte().rangeTo(10)
2021-03-12 03:19:56,834 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:19:56,835 [main:66] - Compilation checking started
2021-03-12 03:19:57,480 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    val prope0 = { check(false, { "jcwxv"})}
return 1000L.c()
}

fun box419(): String {
    val prope0 = { check(false, { "jcwxv"})}
var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).equals("uraaw").not()) return prope9
    return "xojld"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        val prope0 = { check(false, { "jcwxv"})}
x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        val prope0 = { check(false, { "jcwxv"})}
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(RuntimeException("btqef", UnsupportedOperationException())!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { false}?.let { error("astzw" +
                prope11.joinToString(separator = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907)))) }
    }

    fun fu9(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { (Kla5())?.prope13.and(true) } ?: error((-6221560509887450678)?.toByte().toString((0.40427768f).compareTo(-438515907)) +
                prope11.joinToString(separator = (Foo(-1684647957278571901)).x.toString((0.40427768f).compareTo(-438515907))))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = { println("jqrob")}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in ((Foo(Foo(-1684647957278571901).x).x).toChar()).toByte().rangeTo(10)) {
            if ((Kla0()).equals("rqbkp").and(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((Foo(-2316865634605250658).x).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = { check(false, { "jcwxv"})}
prope8.prope14 = {
            prope8.prope13 = (Kla0().fu0()).equals("mxwga").xor(false)
        }
    }

    override fun fu5(exception: Throwable) {
        val prope0 = { check(false, { "jcwxv"})}
throw ArithmeticException()
    }
}


2021-03-12 03:19:57,483 [main:107] - replacing (this, Kla2)
2021-03-12 03:19:57,484 [main:50] - replacing this Kla2
2021-03-12 03:19:57,485 [main:54] - Getting value of type Kla2
2021-03-12 03:19:57,697 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 03:19:57,704 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}
2021-03-12 03:19:57,705 [main:58] - GENERATED VALUE OF TYPE Kla2 = Kla2()
2021-03-12 03:19:57,705 [main:61] - GENERATED IS CALL =true
2021-03-12 03:19:57,716 [main:67] - randomType = String
2021-03-12 03:19:57,860 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:19:57,889 [main:106] - GETTING Kla2 from Foo
2021-03-12 03:19:57,899 [main:106] - GETTING Kla2 from Long
2021-03-12 03:19:57,929 [main:106] - GETTING Kla2 from Foo
2021-03-12 03:19:57,930 [main:106] - GETTING Kla2 from Long
2021-03-12 03:19:57,930 [main:106] - GETTING Kla2 from Long
2021-03-12 03:19:57,931 [main:106] - GETTING Kla2 from Foo
2021-03-12 03:19:57,931 [main:106] - GETTING Kla2 from Foo
2021-03-12 03:19:57,932 [main:106] - GETTING Kla2 from Any
2021-03-12 03:19:57,936 [main:106] - GETTING Kla2 from Char
2021-03-12 03:19:57,954 [main:106] - GETTING Kla2 from Float
2021-03-12 03:19:57,981 [main:106] - GETTING Kla2 from Foo
2021-03-12 03:19:57,982 [main:106] - GETTING Kla2 from Int
2021-03-12 03:19:58,011 [main:106] - GETTING Kla2 from Any
2021-03-12 03:19:58,012 [main:106] - GETTING Kla2 from Kla0
2021-03-12 03:19:58,016 [main:106] - GETTING Kla2 from Long
2021-03-12 03:19:58,017 [main:106] - GETTING Kla2 from Foo
2021-03-12 03:19:58,017 [main:106] - GETTING Kla2 from Long
2021-03-12 03:19:58,017 [main:114] - replacement of this of type Kla2 is Kla2()
2021-03-12 03:19:58,170 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:19:58,171 [main:66] - Compilation checking started
2021-03-12 03:19:58,842 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A<T> {
    fun foo(a: T)
}

inline class Foo(val x: Long) : A<Foo> {
    override fun foo(a: Foo) {}
}

fun box119(): String {
    val prope0 = { check(false, { "jcwxv"})}
    val prope1 = (Runnable({ println("agmys")}) as Object).getClass()
    val prope2 = (Runnable({ print("okyjq")}) as Object).getClass()

    return (Foo(Foo(-1684647957278571901).x).x).toChar().plus("kqcnv")
}

class Kla0 {
    fun fu0(): Any {
        return {}
    }
}

fun box235(): String {
    val prope0 = { check(false, { "jcwxv"})}
val javaClass = Kla0().fu0().javaClass
    val prope4 = javaClass.getEnclosingMethod()
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).foo(Foo(-1684647957278571901)).equals("juljp")) return (0.40427768f).compareTo(-438515907).toString(-1285523261)

    val prope5 = javaClass.getEnclosingClass()
    if (prope5?.getName() != (Foo(1684647957278571901)).x.toString(1773365742)) return "enclosing class: $prope5"

    val prope6 = javaClass.getDeclaringClass()
    if (prope6 != null) return (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907))

    return "OK"
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend Long.() -> String): String {
    val prope0 = { check(false, { "jcwxv"})}
return 1000L.c()
}

fun box419(): String {
    val prope0 = { check(false, { "jcwxv"})}
var prope9 = ""
    fu1 {
        prope9 = fu2 { ->
            "OK$this"
        }
    }
    if ((Foo(Foo(Foo(-1684647957278571901).x).x)).equals("uraaw").not()) return prope9
    return "xojld"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        val prope0 = { check(false, { "jcwxv"})}
x(prope10.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
runCatching<Any?>({ "xhrct"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val prope0 = { check(false, { "jcwxv"})}
Kla2().prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty0>) {
        val prope0 = { check(false, { "jcwxv"})}
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu5(RuntimeException("btqef", UnsupportedOperationException())!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val prope0 = { check(false, { "jcwxv"})}
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = c
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu8(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { false}?.let { error("astzw" +
                prope11.joinToString(separator = (Foo(Foo(Foo(-1684647957278571901).x).x)).x.toString((0.40427768f).compareTo(-438515907)))) }
    }

    fun fu9(method: String) {
        val prope0 = { check(false, { "jcwxv"})}
prope11.find { (Kla5())?.prope13.and(true) } ?: error((-6221560509887450678)?.toByte().toString((0.40427768f).compareTo(-438515907)) +
                prope11.joinToString(separator = (Foo(-1684647957278571901)).x.toString((0.40427768f).compareTo(-438515907))))
    }
}

val prope7 = Kla4()

class Kla5 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu10() {
        val prope0 = { check(false, { "jcwxv"})}
prope12 = 0
        prope13 = false
        prope14 = { println("jqrob")}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope12++
        prope14 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = { check(false, { "jcwxv"})}
for (i in ((Foo(Foo(-1684647957278571901).x).x).toChar()).toByte().rangeTo(10)) {
            if ((Kla0()).equals("rqbkp").and(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (((Foo(1684647957278571901)).x).toFloat().isNaN())
            error("vzndo")
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((Foo(-2316865634605250658).x).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope8 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = { check(false, { "jcwxv"})}
prope8.prope14 = {
            prope8.prope13 = (Kla0().fu0()).equals("mxwga").xor(false)
        }
    }

    override fun fu5(exception: Throwable) {
        val prope0 = { check(false, { "jcwxv"})}
throw ArithmeticException()
    }
}


2021-03-12 03:19:58,845 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-12 03:19:58,845 [main:50] - replacing getOrThrow() Ty0
2021-03-12 03:19:58,845 [main:54] - Getting value of type Ty0
