2021-03-12 09:48:22,801 [main:66] - Compilation checking started
2021-03-12 09:48:23,950 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:48:23,954 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 09:48:23,969 [main:66] - Compilation checking started
2021-03-12 09:48:24,412 [main:53] - Result = true
Text:
inline fun foo(s: String  = "ooxxh") = s

fun box() = foo() + foo("K")
2021-03-12 09:48:24,962 [main:43] - GENERATING CALL OF inline fun foo(s: String = "O") = s
2021-03-12 09:48:24,962 [main:61] - WITHOUT TYPE PARAMS = inline fun foo(s: String = "O") = s
2021-03-12 09:48:25,081 [main:302] - generating value of type = String true depth = 1
2021-03-12 09:48:25,083 [main:95] - GENERATED = foo("huwdq")
2021-03-12 09:48:25,228 [main:45] - Trying to change 6 nodes
2021-03-12 09:48:25,231 [main:53] - replacing (foo("K"), String)
2021-03-12 09:48:25,231 [main:50] - replacing foo("K") String
2021-03-12 09:48:25,231 [main:54] - Getting value of type String
2021-03-12 09:48:25,319 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:48:25,320 [main:58] - GENERATED VALUE OF TYPE String = "ruyje"
2021-03-12 09:48:25,320 [main:61] - GENERATED IS CALL =false
2021-03-12 09:48:25,322 [main:67] - randomType = String
2021-03-12 09:48:25,423 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:48:25,933 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9f36c40]
2021-03-12 09:48:25,935 [main:78] - Generated call from random type = ("sqoeo").trimMargin(foo("huwdq"))
2021-03-12 09:48:25,935 [main:106] - GETTING String from String
2021-03-12 09:48:26,005 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70fce245]]
2021-03-12 09:48:26,006 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:48:26,107 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:26,186 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:26,187 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70fce245]
2021-03-12 09:48:26,278 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 09:48:26,404 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 09:48:26,409 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 09:48:26,745 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:48:26,745 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 09:48:26,756 [main:95] - GENERATED = Regex("uyesq", kotlin.text.RegexOption.MULTILINE)
2021-03-12 09:48:26,864 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 09:48:26,865 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 09:48:26,977 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:48:26,981 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:48:27,197 [main:302] - generating value of type = String true depth = 4
2021-03-12 09:48:27,202 [main:95] - GENERATED = StringBuilder("kexsb")
2021-03-12 09:48:27,207 [main:117] - GENERATED CALL = (foo("huwdq")).subSequence(-667060378, 943150504).replace(Regex("uyesq", kotlin.text.RegexOption.MULTILINE), {a: MatchResult -> StringBuilder("kexsb")})
2021-03-12 09:48:27,208 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bbbb64c]]
2021-03-12 09:48:27,208 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bbbb64c]
2021-03-12 09:48:27,308 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:48:27,387 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:48:27,389 [main:117] - GENERATED CALL = (foo("huwdq")).commonSuffixWith("dpcin", false)
2021-03-12 09:48:27,389 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55517531]]
2021-03-12 09:48:27,389 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55517531]
2021-03-12 09:48:27,489 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:27,492 [main:117] - GENERATED CALL = (foo("huwdq")).dropLast(-36463364)
2021-03-12 09:48:27,492 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3da3d0f5]]
2021-03-12 09:48:27,492 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3da3d0f5]
2021-03-12 09:48:27,591 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:48:27,667 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 09:48:27,669 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 09:48:27,850 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 09:48:27,855 [main:95] - GENERATED = StringBuilder("tlnmr")
2021-03-12 09:48:27,859 [main:117] - GENERATED CALL = (foo("huwdq")).removeSurrounding(StringBuilder("tlnmr"))
2021-03-12 09:48:27,860 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73b02395]]
2021-03-12 09:48:27,860 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73b02395]
2021-03-12 09:48:27,932 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 09:48:27,932 [main:302] - generating value of type = Char true depth = 1
2021-03-12 09:48:27,934 [main:117] - GENERATED CALL = (foo("huwdq")).replaceFirstChar({a: Char -> '돵'})
2021-03-12 09:48:27,934 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60e957e9]]
2021-03-12 09:48:27,935 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60e957e9]
2021-03-12 09:48:28,009 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:48:28,119 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 09:48:28,122 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 09:48:28,323 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 09:48:28,331 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-12 09:48:28,332 [main:117] - GENERATED CALL = (foo("huwdq")).removeSuffix(StringBuilder(StringBuilder()))
2021-03-12 09:48:28,333 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6da58910]]
2021-03-12 09:48:28,333 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-12 09:48:28,424 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 09:48:28,425 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:48:28,427 [main:117] - GENERATED CALL = (foo("huwdq")).filterIndexed({a: Int, b: Char -> true})
2021-03-12 09:48:28,427 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15752ae9]]
2021-03-12 09:48:28,428 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15752ae9]
2021-03-12 09:48:28,526 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:48:28,619 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:48:28,621 [main:117] - GENERATED CALL = (foo("huwdq")).replaceBeforeLast('', "lpbiz", foo("huwdq"))
2021-03-12 09:48:28,622 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7220aca3]]
2021-03-12 09:48:28,622 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7220aca3]
2021-03-12 09:48:28,692 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:48:28,766 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:48:28,767 [main:117] - GENERATED CALL = (foo("huwdq")).commonPrefixWith("mmaxa", false)
2021-03-12 09:48:28,767 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6af2203]]
2021-03-12 09:48:28,767 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6af2203]
2021-03-12 09:48:28,845 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:48:28,847 [main:117] - GENERATED CALL = (foo("huwdq")).plus("mqhpr")
2021-03-12 09:48:28,847 [main:61] - replacement of foo("K")

 of type String is (foo("huwdq")).subSequence(-667060378, 943150504).replace(Regex("uyesq", kotlin.text.RegexOption.MULTILINE), {a: MatchResult -> StringBuilder("kexsb")})
2021-03-12 09:48:28,925 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:48:28,926 [main:66] - Compilation checking started
2021-03-12 09:48:29,603 [main:53] - Result = true
Text:
inline fun foo(s: String = "O") = s

fun box() = foo() + (foo("huwdq")).subSequence(-667060378, 943150504).replace(Regex("uyesq", kotlin.text.RegexOption.MULTILINE), {a: MatchResult -> StringBuilder("kexsb")})
2021-03-12 09:48:29,604 [main:53] - replacing (foo() + (foo("huwdq")).subSequence(-667060378, 943150504).replace(Regex("uyesq", kotlin.text.RegexOption.MULTILINE), {a: MatchResult -> StringBuilder("kexsb")}), String)
2021-03-12 09:48:29,604 [main:50] - replacing foo() + (foo("huwdq")).subSequence(-667060378, 943150504).replace(Regex("uyesq", kotlin.text.RegexOption.MULTILINE), {a: MatchResult -> StringBuilder("kexsb")}) String
2021-03-12 09:48:29,604 [main:54] - Getting value of type String
2021-03-12 09:48:29,701 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:48:29,702 [main:58] - GENERATED VALUE OF TYPE String = "gwzhp"
2021-03-12 09:48:29,702 [main:61] - GENERATED IS CALL =false
2021-03-12 09:48:29,997 [main:67] - randomType = HashSet<Boolean>
2021-03-12 09:48:30,085 [main:302] - generating value of type = HashSet<Boolean> false depth = 0
2021-03-12 09:48:30,173 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<Boolean> = TODO()
2021-03-12 09:48:30,174 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<Boolean> = TODO()
2021-03-12 09:48:30,303 [main:95] - GENERATED = hashSetOf<Boolean>()
2021-03-12 09:48:30,533 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]
2021-03-12 09:48:30,620 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:30,621 [main:78] - Generated call from random type = (hashSetOf<Boolean>()).size.toString(10899794)
2021-03-12 09:48:30,621 [main:106] - GETTING String from String
2021-03-12 09:48:30,651 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34db013e]]
2021-03-12 09:48:30,651 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34db013e]
2021-03-12 09:48:30,736 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:30,737 [main:117] - GENERATED CALL = (foo("huwdq")).repeat(176849909)
2021-03-12 09:48:30,737 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1620633d]]
2021-03-12 09:48:30,737 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1620633d]
2021-03-12 09:48:30,738 [main:117] - GENERATED CALL = (foo("huwdq")).lowercase()
2021-03-12 09:48:30,738 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73b02395]]
2021-03-12 09:48:30,738 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73b02395]
2021-03-12 09:48:30,827 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 09:48:30,827 [main:302] - generating value of type = Char true depth = 1
2021-03-12 09:48:30,829 [main:117] - GENERATED CALL = (foo("huwdq")).replaceFirstChar({a: Char -> '櫊'})
2021-03-12 09:48:30,830 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6da58910]]
2021-03-12 09:48:30,830 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-12 09:48:30,953 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 09:48:30,954 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:48:30,960 [main:117] - GENERATED CALL = (foo("huwdq")).filterIndexed({a: Int, b: Char -> false})
2021-03-12 09:48:30,961 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@322eded1]]
2021-03-12 09:48:30,961 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@322eded1]
2021-03-12 09:48:31,090 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:48:31,091 [main:117] - GENERATED CALL = (foo("huwdq")).replaceAfterLast('㘢', foo("huwdq"), foo("huwdq"))
2021-03-12 09:48:31,092 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b40f50a]]
2021-03-12 09:48:31,092 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b40f50a]
2021-03-12 09:48:31,175 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:48:31,261 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:48:31,262 [main:117] - GENERATED CALL = (foo("huwdq")).substringAfterLast('쌟', "fxcca")
2021-03-12 09:48:31,262 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55764e19]]
2021-03-12 09:48:31,262 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55764e19]
2021-03-12 09:48:31,352 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:48:31,353 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:48:31,354 [main:117] - GENERATED CALL = (foo("huwdq")).filterNot({a: Char -> true})
2021-03-12 09:48:31,355 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]]
2021-03-12 09:48:31,355 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:48:31,355 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]
2021-03-12 09:48:31,483 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:31,485 [main:117] - GENERATED CALL = (foo("huwdq")).compareTo(foo("huwdq")).toString(-868764823)
2021-03-12 09:48:31,485 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d45bf2b]]
2021-03-12 09:48:31,485 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d45bf2b]
2021-03-12 09:48:31,574 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:48:31,575 [main:117] - GENERATED CALL = (foo("huwdq")).replaceAfter('ⷔ', foo("huwdq"), foo("huwdq"))
2021-03-12 09:48:31,575 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e45fdcb]]
2021-03-12 09:48:31,576 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e45fdcb]
2021-03-12 09:48:31,664 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:48:31,665 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:48:31,666 [main:117] - GENERATED CALL = (foo("huwdq")).takeLastWhile({a: Char -> true})
2021-03-12 09:48:31,666 [main:61] - replacement of foo() + (foo("huwdq")).subSequence(-667060378, 943150504).replace(Regex("uyesq", kotlin.text.RegexOption.MULTILINE), {a: MatchResult -> StringBuilder("kexsb")})

 of type String is "gwzhp"
2021-03-12 09:48:31,747 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 09:48:31,747 [main:66] - Compilation checking started
2021-03-12 09:48:32,028 [main:53] - Result = true
Text:
inline fun foo(s: String = "O") = s

fun box() = "gwzhp"
2021-03-12 09:48:32,029 [main:53] - replacing ("O", String)
2021-03-12 09:48:32,030 [main:50] - replacing "O" String
2021-03-12 09:48:32,030 [main:54] - Getting value of type String
2021-03-12 09:48:32,137 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:48:32,137 [main:58] - GENERATED VALUE OF TYPE String = "azwhm"
2021-03-12 09:48:32,138 [main:61] - GENERATED IS CALL =false
2021-03-12 09:48:32,301 [main:67] - randomType = List<String>
2021-03-12 09:48:32,302 [main:106] - GETTING String from String
2021-03-12 09:48:32,338 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55517531]]
2021-03-12 09:48:32,338 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55517531]
2021-03-12 09:48:32,406 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:32,407 [main:117] - GENERATED CALL = (s).dropLast(-381124727)
2021-03-12 09:48:32,407 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2a290d]]
2021-03-12 09:48:32,407 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2a290d]
2021-03-12 09:48:32,479 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:48:32,479 [main:117] - GENERATED CALL = (s).substringBeforeLast('๩', foo("huwdq"))
2021-03-12 09:48:32,480 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2841bdfa]]
2021-03-12 09:48:32,480 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2841bdfa]
2021-03-12 09:48:32,480 [main:117] - GENERATED CALL = (s).capitalize()
2021-03-12 09:48:32,480 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bbbb64c]]
2021-03-12 09:48:32,480 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bbbb64c]
2021-03-12 09:48:32,547 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:48:32,631 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:48:32,632 [main:117] - GENERATED CALL = (s).commonSuffixWith(StringBuilder(), false)
2021-03-12 09:48:32,632 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d45bf2b]]
2021-03-12 09:48:32,632 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d45bf2b]
2021-03-12 09:48:32,707 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:48:32,778 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:48:32,779 [main:117] - GENERATED CALL = (s).replaceAfter('앑', s, "eqakl")
2021-03-12 09:48:32,779 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20df4edc]]
2021-03-12 09:48:32,779 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20df4edc]
2021-03-12 09:48:32,851 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:48:32,853 [main:117] - GENERATED CALL = (s).replaceIndent("ijpwb")
2021-03-12 09:48:32,853 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6855bae5]]
2021-03-12 09:48:32,853 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6855bae5]
2021-03-12 09:48:32,854 [main:117] - GENERATED CALL = (s).reversed()
2021-03-12 09:48:32,854 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58a36d97]]
2021-03-12 09:48:32,854 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58a36d97]
2021-03-12 09:48:32,855 [main:117] - GENERATED CALL = (s).decapitalize()
2021-03-12 09:48:32,855 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15752ae9]]
2021-03-12 09:48:32,855 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15752ae9]
2021-03-12 09:48:32,924 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:48:32,925 [main:117] - GENERATED CALL = (s).replaceBeforeLast('钍', s, foo("huwdq"))
2021-03-12 09:48:32,925 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e75d52a]]
2021-03-12 09:48:32,925 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e75d52a]
2021-03-12 09:48:32,926 [main:117] - GENERATED CALL = (s).concat(s)
2021-03-12 09:48:32,926 [main:61] - replacement of "O" of type String is (s).replaceIndent("ijpwb")
2021-03-12 09:48:33,003 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:48:33,003 [main:66] - Compilation checking started
2021-03-12 09:48:33,171 [main:49] - Result = false
Text:
inline fun foo(s: String = (s).replaceIndent("ijpwb")) = s

fun box() = "gwzhp"
2021-03-12 09:48:33,259 [main:41] - AFTER TRY 0 res = inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")
2021-03-12 09:48:33,564 [main:43] - GENERATING CALL OF inline fun foo(s: String = "O") = s
2021-03-12 09:48:33,565 [main:61] - WITHOUT TYPE PARAMS = inline fun foo(s: String = "O") = s
2021-03-12 09:48:33,643 [main:302] - generating value of type = String true depth = 1
2021-03-12 09:48:33,643 [main:95] - GENERATED = foo("kznso")
2021-03-12 09:48:33,715 [main:43] - Try №0
2021-03-12 09:48:44,894 [main:48] - Already checked
2021-03-12 09:48:45,137 [main:48] - Already checked
2021-03-12 09:48:49,352 [main:69] - Trying to insert fun box531(): String {
    var prope2 = "OK"
    fu1 {
        fu0()
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}
2021-03-12 09:48:49,450 [main:66] - Compilation checking started
2021-03-12 09:48:50,589 [main:103] - Trying to change 159 nodes
2021-03-12 09:48:50,589 [main:107] - replacing ({ error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }, Function0<Nothing>)
2021-03-12 09:48:50,589 [main:50] - replacing { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) } Function0<Nothing>
2021-03-12 09:48:50,589 [main:54] - Getting value of type Function0<Nothing>
2021-03-12 09:48:50,741 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-12 09:48:50,742 [main:302] - generating value of type = Nothing false depth = 1
2021-03-12 09:48:50,748 [main:58] - GENERATED VALUE OF TYPE Function0<Nothing> = { TODO()}
2021-03-12 09:48:50,749 [main:61] - GENERATED IS CALL =false
2021-03-12 09:48:50,913 [main:67] - randomType = Kla5
2021-03-12 09:48:51,074 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 09:48:51,075 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}
2021-03-12 09:48:51,112 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 09:48:51,148 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 09:48:51,148 [main:114] - replacement of { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) } of type Function0<Nothing> is { TODO()}
2021-03-12 09:48:51,305 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 09:48:51,306 [main:66] - Compilation checking started
2021-03-12 09:48:52,115 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (e?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        fu0()
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:48:52,118 [main:107] - replacing (false, Boolean)
2021-03-12 09:48:52,119 [main:50] - replacing false Boolean
2021-03-12 09:48:52,119 [main:54] - Getting value of type Boolean
2021-03-12 09:48:52,266 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:48:52,267 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 09:48:52,267 [main:61] - GENERATED IS CALL =false
2021-03-12 09:48:52,424 [main:67] - randomType = Byte
2021-03-12 09:48:52,588 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:48:52,660 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6fbcbd62]
2021-03-12 09:48:52,660 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ffe60f1]
2021-03-12 09:48:52,814 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:48:52,969 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:48:52,970 [main:78] - Generated call from random type = (-3).toChar().equals('東', false)
2021-03-12 09:48:52,972 [main:106] - GETTING Boolean from String
2021-03-12 09:48:53,008 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@603a0fa7]]
2021-03-12 09:48:53,009 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:48:53,157 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:53,311 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:53,313 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@603a0fa7]
2021-03-12 09:48:53,476 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:48:53,628 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:48:53,630 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(1150182824, -1093741638).startsWith('ᴰ', true)
2021-03-12 09:48:53,630 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12335ae5]]
2021-03-12 09:48:53,630 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12335ae5]
2021-03-12 09:48:53,631 [main:117] - GENERATED CALL = (foo("kznso")).any()
2021-03-12 09:48:53,631 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cff845a]]
2021-03-12 09:48:53,631 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:48:53,780 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:53,914 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:53,916 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cff845a]
2021-03-12 09:48:54,058 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:48:54,060 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:48:54,061 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(1767449002, 1919122562).all({a: Char -> false})
2021-03-12 09:48:54,062 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]]
2021-03-12 09:48:54,062 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]
2021-03-12 09:48:54,208 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:54,350 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:48:54,484 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:54,614 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:54,830 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:48:54,831 [main:117] - GENERATED CALL = (foo("kznso")).regionMatches(-669137158, "txacu", -1825414934, -773151749, true)
2021-03-12 09:48:54,832 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1832b55f]]
2021-03-12 09:48:54,832 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1832b55f]
2021-03-12 09:48:54,961 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:48:54,961 [main:117] - GENERATED CALL = (foo("kznso")).length.equals("ibwlq")
2021-03-12 09:48:54,961 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]]
2021-03-12 09:48:54,961 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]
2021-03-12 09:48:55,098 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:48:55,099 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]
2021-03-12 09:48:55,230 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:48:55,231 [main:117] - GENERATED CALL = (foo("kznso")).equals("daryo").equals("nzydd")
2021-03-12 09:48:55,231 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e81170]]
2021-03-12 09:48:55,231 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:48:55,356 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:55,509 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:55,511 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e81170]
2021-03-12 09:48:55,511 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(-2106634705, -1920929535).none()
2021-03-12 09:48:55,512 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@20d6a76b]]
2021-03-12 09:48:55,512 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:48:55,662 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:55,794 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:55,795 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@20d6a76b]
2021-03-12 09:48:55,919 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:48:55,920 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")
2021-03-12 09:48:55,920 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@394874b0]]
2021-03-12 09:48:55,920 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:48:56,051 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:56,054 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@394874b0]
2021-03-12 09:48:56,054 [main:117] - GENERATED CALL = (foo("kznso")).get(-701072088).isUpperCase()
2021-03-12 09:48:56,054 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36baf748]]
2021-03-12 09:48:56,054 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36baf748]
2021-03-12 09:48:56,055 [main:117] - GENERATED CALL = (foo("kznso")).isEmpty()
2021-03-12 09:48:56,055 [main:114] - replacement of false of type Boolean is (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")
2021-03-12 09:48:56,212 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:48:56,213 [main:66] - Compilation checking started
2021-03-12 09:48:56,837 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (e?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        fu0()
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:48:56,840 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 09:48:56,840 [main:50] - replacing getOrThrow() Any?
2021-03-12 09:48:56,841 [main:54] - Getting value of type Any?
2021-03-12 09:48:56,981 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:48:56,981 [main:58] - GENERATED VALUE OF TYPE Any? = "hhhpy"
2021-03-12 09:48:56,981 [main:61] - GENERATED IS CALL =false
2021-03-12 09:48:56,988 [main:67] - randomType = Kla4
2021-03-12 09:48:57,136 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 09:48:57,137 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 09:48:57,163 [main:106] - GETTING Any? from String
2021-03-12 09:48:57,217 [main:106] - GETTING Any? from String
2021-03-12 09:48:57,217 [main:114] - replacement of getOrThrow() of type Any? is "hhhpy"
2021-03-12 09:48:57,361 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 09:48:57,362 [main:66] - Compilation checking started
2021-03-12 09:48:57,759 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (e?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        fu0()
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2."hhhpy"
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:48:57,761 [main:107] - replacing (", got ", String)
2021-03-12 09:48:57,761 [main:50] - replacing ", got " String
2021-03-12 09:48:57,761 [main:54] - Getting value of type String
2021-03-12 09:48:57,888 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:48:57,889 [main:58] - GENERATED VALUE OF TYPE String = "ojswb"
2021-03-12 09:48:57,889 [main:61] - GENERATED IS CALL =false
2021-03-12 09:48:57,895 [main:67] - randomType = Kla4
2021-03-12 09:48:58,032 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 09:48:58,033 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 09:48:58,046 [main:106] - GETTING String from String
2021-03-12 09:48:58,079 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2490f82e]]
2021-03-12 09:48:58,079 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2490f82e]
2021-03-12 09:48:58,217 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 09:48:58,349 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 09:48:58,352 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 09:48:58,489 [main:302] - generating value of type = Int true depth = 3
2021-03-12 09:48:58,491 [main:95] - GENERATED = hashSetOf<Int>(608352981)
2021-03-12 09:48:58,491 [main:117] - GENERATED CALL = (foo()).slice(hashSetOf<Int>(608352981))
2021-03-12 09:48:58,491 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2841bdfa]]
2021-03-12 09:48:58,491 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2841bdfa]
2021-03-12 09:48:58,492 [main:117] - GENERATED CALL = (foo()).capitalize()
2021-03-12 09:48:58,492 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6897e324]]
2021-03-12 09:48:58,492 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6897e324]
2021-03-12 09:48:58,492 [main:117] - GENERATED CALL = (foo()).trimIndent()
2021-03-12 09:48:58,492 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6da58910]]
2021-03-12 09:48:58,492 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-12 09:48:58,631 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 09:48:58,632 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:48:58,634 [main:117] - GENERATED CALL = (foo()).filterIndexed({a: Int, b: Char -> false})
2021-03-12 09:48:58,635 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@745254a0]]
2021-03-12 09:48:58,635 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@745254a0]
2021-03-12 09:48:58,635 [main:117] - GENERATED CALL = (foo()).trimStart()
2021-03-12 09:48:58,635 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58a36d97]]
2021-03-12 09:48:58,635 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58a36d97]
2021-03-12 09:48:58,636 [main:117] - GENERATED CALL = (foo()).decapitalize()
2021-03-12 09:48:58,636 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@775f732d]]
2021-03-12 09:48:58,636 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:48:58,766 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:58,892 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:58,893 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@775f732d]
2021-03-12 09:48:59,064 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:59,193 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:59,194 [main:117] - GENERATED CALL = (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554)
2021-03-12 09:48:59,194 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e45fdcb]]
2021-03-12 09:48:59,195 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e45fdcb]
2021-03-12 09:48:59,319 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:48:59,321 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:48:59,324 [main:117] - GENERATED CALL = (foo()).takeLastWhile({a: Char -> true})
2021-03-12 09:48:59,324 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb1b04c]]
2021-03-12 09:48:59,324 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb1b04c]
2021-03-12 09:48:59,452 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:59,453 [main:117] - GENERATED CALL = (foo()).drop(-2034402201)
2021-03-12 09:48:59,454 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ceeeaf7]]
2021-03-12 09:48:59,454 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:48:59,591 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:48:59,592 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ceeeaf7]
2021-03-12 09:48:59,593 [main:117] - GENERATED CALL = (foo()).get(-1277895414).uppercase()
2021-03-12 09:48:59,593 [main:114] - replacement of ", got " of type String is (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554)
2021-03-12 09:48:59,753 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:48:59,754 [main:66] - Compilation checking started
2021-03-12 09:49:00,347 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (e?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        fu0()
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:49:00,349 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 09:49:00,349 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 09:49:00,349 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 09:49:00,488 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 09:49:00,494 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 09:49:00,634 [main:67] - randomType = Short
2021-03-12 09:49:00,773 [main:302] - generating value of type = Short true depth = 0
2021-03-12 09:49:00,837 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 09:49:00,870 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 09:49:00,871 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 09:49:00,871 [main:107] - replacing (prope2, Result<Any?>)
2021-03-12 09:49:00,871 [main:50] - replacing prope2 Result<Any?>
2021-03-12 09:49:00,871 [main:54] - Getting value of type Result<Any?>
2021-03-12 09:49:01,004 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 09:49:01,143 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 09:49:01,146 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 09:49:01,432 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 09:49:01,433 [main:302] - generating value of type = Any false depth = 4
2021-03-12 09:49:01,434 [main:95] - GENERATED = runCatching<Any?>({ "fgnui"})
2021-03-12 09:49:01,434 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "fgnui"})
2021-03-12 09:49:01,434 [main:61] - GENERATED IS CALL =true
2021-03-12 09:49:01,579 [main:67] - randomType = Kla5
2021-03-12 09:49:01,754 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 09:49:01,757 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}
2021-03-12 09:49:01,821 [main:106] - GETTING Result<Any?> from String
2021-03-12 09:49:01,851 [main:106] - GETTING Result<Any?> from String
2021-03-12 09:49:01,851 [main:114] - replacement of prope2 of type Result<Any?> is runCatching<Any?>({ "fgnui"})
2021-03-12 09:49:01,991 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:49:01,992 [main:66] - Compilation checking started
2021-03-12 09:49:02,611 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (e?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        fu0()
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:49:02,614 [main:107] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-12 09:49:02,614 [main:50] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-12 09:49:02,614 [main:54] - Getting value of type Function0<Boolean>
2021-03-12 09:49:02,751 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-12 09:49:02,752 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:49:02,754 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-12 09:49:02,754 [main:61] - GENERATED IS CALL =false
2021-03-12 09:49:03,085 [main:67] - randomType = Double?
2021-03-12 09:49:03,223 [main:302] - generating value of type = Double true depth = 0
2021-03-12 09:49:03,304 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 09:49:03,354 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 09:49:03,354 [main:114] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { false}
2021-03-12 09:49:03,498 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 09:49:03,498 [main:66] - Compilation checking started
2021-03-12 09:49:04,137 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (e?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        fu0()
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:49:04,140 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-12 09:49:04,140 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-12 09:49:04,140 [main:54] - Getting value of type Throwable?
2021-03-12 09:49:04,273 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 09:49:04,283 [main:58] - GENERATED VALUE OF TYPE Throwable? = RuntimeException()
2021-03-12 09:49:04,284 [main:61] - GENERATED IS CALL =true
2021-03-12 09:49:04,432 [main:67] - randomType = Kla4?
2021-03-12 09:49:04,557 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 09:49:04,559 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 09:49:04,571 [main:106] - GETTING Throwable? from String
2021-03-12 09:49:04,603 [main:106] - GETTING Throwable? from String
2021-03-12 09:49:04,603 [main:114] - replacement of exceptionOrNull() of type Throwable? is RuntimeException()
2021-03-12 09:49:04,732 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:49:04,732 [main:66] - Compilation checking started
2021-03-12 09:49:05,105 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (e?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        fu0()
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.RuntimeException()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:49:05,107 [main:107] - replacing (Kla0, Kla6)
2021-03-12 09:49:05,108 [main:50] - replacing Kla0 Kla6
2021-03-12 09:49:05,108 [main:54] - Getting value of type Kla6
2021-03-12 09:49:05,233 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 09:49:05,235 [main:112] - generating klass Kla6 text = companion object Kla6 : Kla0()
2021-03-12 09:49:05,235 [main:58] - GENERATED VALUE OF TYPE Kla6 = 
2021-03-12 09:49:05,767 [main:67] - randomType = LinkedHashSet<Short?>?
2021-03-12 09:49:05,913 [main:302] - generating value of type = LinkedHashSet<Short?> false depth = 0
2021-03-12 09:49:06,052 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Short?> = TODO()
2021-03-12 09:49:06,056 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Short?> = TODO()
2021-03-12 09:49:06,186 [main:95] - GENERATED = linkedSetOf<Short?>()
2021-03-12 09:49:06,374 [main:106] - GETTING Kla6 from String
2021-03-12 09:49:06,407 [main:106] - GETTING Kla6 from String
2021-03-12 09:49:06,407 [main:111] - Cant find and generate replacement for Kla0 type Kla6
2021-03-12 09:49:06,407 [main:107] - replacing ({
        fu6(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 09:49:06,408 [main:50] - replacing {
        fu6(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-12 09:49:06,408 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 09:49:06,536 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 09:49:06,538 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:49:06,664 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 09:49:06,666 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 09:49:06,993 [main:302] - generating value of type = Any false depth = 4
2021-03-12 09:49:06,993 [main:95] - GENERATED = print("gpwwp")
2021-03-12 09:49:06,993 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> print("gpwwp")}
2021-03-12 09:49:06,994 [main:61] - GENERATED IS CALL =false
2021-03-12 09:49:07,146 [main:67] - randomType = Short
2021-03-12 09:49:07,260 [main:302] - generating value of type = Short true depth = 0
2021-03-12 09:49:07,299 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 09:49:07,321 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 09:49:07,321 [main:114] - replacement of {
        fu6(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> print("gpwwp")}
2021-03-12 09:49:07,437 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 09:49:07,438 [main:66] - Compilation checking started
2021-03-12 09:49:08,105 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (e?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        fu0()
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:49:08,108 [main:107] - replacing (c, Continuation<Unit>)
2021-03-12 09:49:08,108 [main:50] - replacing c Continuation<Unit>
2021-03-12 09:49:08,108 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 09:49:08,233 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 09:49:08,356 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 09:49:08,359 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 09:49:08,765 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 09:49:08,927 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:08,930 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:09,194 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 09:49:09,315 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:09,317 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:09,714 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:09,714 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:09,714 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 09:49:09,714 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 09:49:10,526 [main:67] - randomType = Map<Kla2<Kla5?>, Boolean?>
2021-03-12 09:49:10,528 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 09:49:10,555 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 09:49:10,555 [main:111] - Cant find and generate replacement for c type Continuation<Unit>
2021-03-12 09:49:10,556 [main:107] - replacing (prope4, Int)
2021-03-12 09:49:10,556 [main:50] - replacing prope4 Int
2021-03-12 09:49:10,556 [main:54] - Getting value of type Int
2021-03-12 09:49:10,678 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:10,680 [main:58] - GENERATED VALUE OF TYPE Int = 275971682
2021-03-12 09:49:10,680 [main:61] - GENERATED IS CALL =false
2021-03-12 09:49:11,294 [main:67] - randomType = Function2<Kla4, Boolean, Collection<List<Byte>>>
2021-03-12 09:49:11,295 [main:106] - GETTING Int from String
2021-03-12 09:49:11,319 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2be99362]]
2021-03-12 09:49:11,320 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2be99362]
2021-03-12 09:49:11,320 [main:117] - GENERATED CALL = (foo("kznso")).length.inc()
2021-03-12 09:49:11,320 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@54ab606b]]
2021-03-12 09:49:11,320 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:49:11,320 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@54ab606b]
2021-03-12 09:49:11,440 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:49:11,442 [main:117] - GENERATED CALL = (foo("kznso")).compareTo(foo()).div(26)
2021-03-12 09:49:11,442 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@44849f77]]
2021-03-12 09:49:11,442 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:49:11,442 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@44849f77]
2021-03-12 09:49:11,442 [main:117] - GENERATED CALL = (foo("kznso")).compareTo(foo()).unaryMinus()
2021-03-12 09:49:11,443 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@84dd68a]]
2021-03-12 09:49:11,443 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:49:11,443 [main:117] - GENERATED CALL = (foo("kznso")).compareTo(foo("kznso")).absoluteValue
2021-03-12 09:49:11,443 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79cf55a3]]
2021-03-12 09:49:11,443 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79cf55a3]
2021-03-12 09:49:11,563 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:11,565 [main:117] - GENERATED CALL = (foo("kznso")).length.shl(-68198280)
2021-03-12 09:49:11,565 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3f8d1391]]
2021-03-12 09:49:11,565 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3f8d1391]
2021-03-12 09:49:11,566 [main:117] - GENERATED CALL = (foo("kznso")).length.countLeadingZeroBits()
2021-03-12 09:49:11,566 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70dcb401]]
2021-03-12 09:49:11,566 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:49:11,723 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:49:11,724 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70dcb401]
2021-03-12 09:49:11,848 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:49:11,850 [main:117] - GENERATED CALL = (foo("kznso")).compareTo("wxcpl").times(68)
2021-03-12 09:49:11,850 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65fa344]]
2021-03-12 09:49:11,850 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:49:11,850 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65fa344]
2021-03-12 09:49:11,964 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:11,966 [main:117] - GENERATED CALL = (foo("kznso")).compareTo(foo()).or(1371948457)
2021-03-12 09:49:11,967 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4650e9d1]]
2021-03-12 09:49:11,967 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:49:12,086 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:12,210 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:12,211 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4650e9d1]
2021-03-12 09:49:12,380 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:49:12,502 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:12,613 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:49:12,615 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(-998062139, -55720921).indexOf('岩', -1472722484, true)
2021-03-12 09:49:12,615 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57e52459]]
2021-03-12 09:49:12,615 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57e52459]
2021-03-12 09:49:12,730 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:12,732 [main:117] - GENERATED CALL = (foo("kznso")).length.and(1515705345)
2021-03-12 09:49:12,732 [main:114] - replacement of prope4 of type Int is (foo("kznso")).length.shl(-68198280)
2021-03-12 09:49:12,861 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:49:12,862 [main:66] - Compilation checking started
2021-03-12 09:49:13,445 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (e?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        fu0()
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo("kznso")).length.shl(-68198280) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:49:13,447 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 09:49:13,447 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 09:49:13,448 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 09:49:13,564 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 09:49:13,569 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 09:49:13,575 [main:67] - randomType = Kla0
2021-03-12 09:49:13,692 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 09:49:13,694 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-12 09:49:13,806 [main:194] - Type params = []
2021-03-12 09:49:13,918 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 09:49:14,035 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:14,038 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:14,336 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 09:49:14,472 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:14,475 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:14,862 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:14,862 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:14,884 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 09:49:14,912 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 09:49:14,912 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 09:49:14,912 [main:107] - replacing (c, Continuation<*>)
2021-03-12 09:49:14,912 [main:50] - replacing c Continuation<*>
2021-03-12 09:49:14,912 [main:54] - Getting value of type Continuation<*>
2021-03-12 09:49:15,025 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 09:49:15,159 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 09:49:15,171 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 09:49:15,556 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 09:49:15,671 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:15,674 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:15,968 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 09:49:16,092 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:16,094 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:16,481 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:16,481 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:16,482 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 09:49:16,482 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 09:49:16,774 [main:67] - randomType = Char?
2021-03-12 09:49:16,885 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:49:16,914 [main:106] - GETTING Continuation<*> from String
2021-03-12 09:49:16,934 [main:106] - GETTING Continuation<*> from String
2021-03-12 09:49:16,934 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 09:49:16,934 [main:107] - replacing (c, Continuation<*>)
2021-03-12 09:49:16,934 [main:50] - replacing c Continuation<*>
2021-03-12 09:49:16,934 [main:54] - Getting value of type Continuation<*>
2021-03-12 09:49:17,045 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 09:49:17,160 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 09:49:17,162 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 09:49:17,561 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 09:49:17,682 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:17,685 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:17,928 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 09:49:18,075 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:18,077 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:18,464 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:18,464 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:18,464 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 09:49:18,464 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 09:49:18,467 [main:67] - randomType = String
2021-03-12 09:49:18,594 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:49:18,622 [main:106] - GETTING Continuation<*> from String
2021-03-12 09:49:18,654 [main:106] - GETTING Continuation<*> from String
2021-03-12 09:49:18,654 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 09:49:18,654 [main:107] - replacing (prope5, Boolean)
2021-03-12 09:49:18,655 [main:50] - replacing prope5 Boolean
2021-03-12 09:49:18,655 [main:54] - Getting value of type Boolean
2021-03-12 09:49:18,783 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:49:18,784 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 09:49:18,784 [main:61] - GENERATED IS CALL =false
2021-03-12 09:49:18,923 [main:67] - randomType = Kla0?
2021-03-12 09:49:19,032 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 09:49:19,033 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-12 09:49:19,144 [main:194] - Type params = []
2021-03-12 09:49:19,254 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 09:49:19,401 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:19,404 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:19,656 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 09:49:19,782 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:19,784 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:20,200 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:20,201 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:20,220 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@2a18736c]
2021-03-12 09:49:20,334 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:49:20,334 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4be1d672]
2021-03-12 09:49:20,452 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:49:20,454 [main:78] - Generated call from random type = (Kla0())?.equals("xjgbz").xor(true)
2021-03-12 09:49:20,456 [main:106] - GETTING Boolean from String
2021-03-12 09:49:20,485 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65ea5d55]]
2021-03-12 09:49:20,486 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:49:20,594 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:20,596 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65ea5d55]
2021-03-12 09:49:20,596 [main:117] - GENERATED CALL = (foo("kznso")).get(2047543505).isDefined()
2021-03-12 09:49:20,596 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12335ae5]]
2021-03-12 09:49:20,596 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:49:20,705 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:20,832 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:20,834 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12335ae5]
2021-03-12 09:49:20,834 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(1284166406, -921264209).any()
2021-03-12 09:49:20,834 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e81170]]
2021-03-12 09:49:20,834 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e81170]
2021-03-12 09:49:20,834 [main:117] - GENERATED CALL = (foo("kznso")).none()
2021-03-12 09:49:20,835 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]]
2021-03-12 09:49:20,835 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:49:20,961 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:21,071 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:21,073 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]
2021-03-12 09:49:21,181 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:21,291 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:49:21,405 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:49:21,408 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:49:21,690 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:49:21,692 [main:95] - GENERATED = StringBuilder("wbmxp")
2021-03-12 09:49:21,801 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:21,913 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:22,027 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:49:22,029 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(-818573019, -171753884).regionMatches(1393529700, StringBuilder("wbmxp"), -60687724, 665882684, false)
2021-03-12 09:49:22,029 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]]
2021-03-12 09:49:22,029 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:49:22,137 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:22,246 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:22,248 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]
2021-03-12 09:49:22,248 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(1351103056, -1874029340).isNotBlank()
2021-03-12 09:49:22,248 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1832b55f]]
2021-03-12 09:49:22,248 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:49:22,248 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1832b55f]
2021-03-12 09:49:22,368 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:49:22,369 [main:117] - GENERATED CALL = (foo("kznso")).compareTo(foo("kznso")).equals("fjodx")
2021-03-12 09:49:22,369 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4be1d672]]
2021-03-12 09:49:22,369 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]
2021-03-12 09:49:22,483 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:49:22,483 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4be1d672]
2021-03-12 09:49:22,616 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:49:22,618 [main:117] - GENERATED CALL = (foo("kznso")).equals("kjzdj").xor(true)
2021-03-12 09:49:22,621 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70232b31]]
2021-03-12 09:49:22,621 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]
2021-03-12 09:49:22,754 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:49:22,754 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70232b31]
2021-03-12 09:49:22,754 [main:117] - GENERATED CALL = (foo("kznso")).equals("psehq").not()
2021-03-12 09:49:22,754 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]]
2021-03-12 09:49:22,754 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]
2021-03-12 09:49:22,897 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:49:22,897 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]
2021-03-12 09:49:23,027 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:49:23,027 [main:117] - GENERATED CALL = (foo("kznso")).equals("cpwkz").equals("wpndm")
2021-03-12 09:49:23,027 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@394874b0]]
2021-03-12 09:49:23,027 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:49:23,175 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:23,176 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@394874b0]
2021-03-12 09:49:23,177 [main:117] - GENERATED CALL = (foo("kznso")).get(340580395).isUpperCase()
2021-03-12 09:49:23,177 [main:114] - replacement of prope5 of type Boolean is (foo("kznso")).get(340580395).isUpperCase()
2021-03-12 09:49:23,304 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:49:23,305 [main:66] - Compilation checking started
2021-03-12 09:49:23,940 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (e?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        fu0()
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo("kznso")).length.shl(-68198280) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + prope4)
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:49:23,943 [main:107] - replacing (!prope5, Boolean)
2021-03-12 09:49:23,943 [main:50] - replacing !prope5 Boolean
2021-03-12 09:49:23,943 [main:54] - Getting value of type Boolean
2021-03-12 09:49:24,133 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:49:24,135 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 09:49:24,136 [main:61] - GENERATED IS CALL =false
2021-03-12 09:49:24,288 [main:67] - randomType = Short
2021-03-12 09:49:24,440 [main:302] - generating value of type = Short true depth = 0
2021-03-12 09:49:24,501 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2215284f]
2021-03-12 09:49:24,501 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65ea5d55]
2021-03-12 09:49:24,501 [main:78] - Generated call from random type = (13638).toChar().isDefined()
2021-03-12 09:49:24,501 [main:114] - replacement of !prope5 of type Boolean is (13638).toChar().isDefined()
2021-03-12 09:49:24,617 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:49:24,618 [main:66] - Compilation checking started
2021-03-12 09:49:25,201 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (e?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        fu0()
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo("kznso")).length.shl(-68198280) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + prope4)
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:49:25,204 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 09:49:25,204 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 09:49:25,204 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 09:49:25,386 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 09:49:25,393 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 09:49:25,542 [main:67] - randomType = Byte
2021-03-12 09:49:25,687 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:49:25,777 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 09:49:25,817 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 09:49:25,817 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 09:49:25,817 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 09:49:25,817 [main:50] - replacing {} Function0<Unit>
2021-03-12 09:49:25,817 [main:54] - Getting value of type Function0<Unit>
2021-03-12 09:49:25,949 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 09:49:25,951 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:49:26,066 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:49:26,069 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:49:26,443 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 09:49:26,444 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 09:49:26,446 [main:302] - generating value of type = Any false depth = 5
2021-03-12 09:49:26,446 [main:95] - GENERATED = check(true, { "zijak"})
2021-03-12 09:49:26,446 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "zijak"})}
2021-03-12 09:49:26,446 [main:61] - GENERATED IS CALL =false
2021-03-12 09:49:27,028 [main:67] - randomType = List<Sequence<Kla3?>?>
2021-03-12 09:49:27,030 [main:106] - GETTING Function0<Unit> from String
2021-03-12 09:49:27,049 [main:106] - GETTING Function0<Unit> from String
2021-03-12 09:49:27,049 [main:114] - replacement of {} of type Function0<Unit> is { check(true, { "zijak"})}
2021-03-12 09:49:27,155 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 09:49:27,155 [main:66] - Compilation checking started
2021-03-12 09:49:27,702 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (e?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        fu0()
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo("kznso")).length.shl(-68198280) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + prope4)
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:49:27,705 [main:107] - replacing (createCoroutine(Kla0), Continuation<Unit>)
2021-03-12 09:49:27,705 [main:50] - replacing createCoroutine(Kla0) Continuation<Unit>
2021-03-12 09:49:27,705 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 09:49:27,823 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 09:49:27,944 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 09:49:27,947 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 09:49:28,364 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 09:49:28,499 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:28,501 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:28,814 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 09:49:29,003 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:29,006 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:29,450 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:29,451 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:29,451 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 09:49:29,451 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 09:49:29,605 [main:67] - randomType = UShort
2021-03-12 09:49:29,747 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 09:49:29,787 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 09:49:29,816 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 09:49:29,816 [main:111] - Cant find and generate replacement for createCoroutine(Kla0) type Continuation<Unit>
2021-03-12 09:49:29,816 [main:107] - replacing (prope4, Int)
2021-03-12 09:49:29,816 [main:50] - replacing prope4 Int
2021-03-12 09:49:29,816 [main:54] - Getting value of type Int
2021-03-12 09:49:29,941 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:29,942 [main:58] - GENERATED VALUE OF TYPE Int = 494431057
2021-03-12 09:49:29,942 [main:61] - GENERATED IS CALL =false
2021-03-12 09:49:30,229 [main:67] - randomType = Set<Kla3?>
2021-03-12 09:49:30,230 [main:106] - GETTING Int from String
2021-03-12 09:49:30,271 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2d9c1b93]]
2021-03-12 09:49:30,271 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:49:30,398 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:30,400 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2d9c1b93]
2021-03-12 09:49:30,525 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:49:30,527 [main:117] - GENERATED CALL = (foo("kznso")).get(1428881551).minus('퓆')
2021-03-12 09:49:30,527 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27cd355a]]
2021-03-12 09:49:30,527 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27cd355a]
2021-03-12 09:49:30,653 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:49:30,655 [main:117] - GENERATED CALL = (foo("kznso")).length.compareTo(-83)
2021-03-12 09:49:30,655 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@13b0a2ef]]
2021-03-12 09:49:30,655 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:49:30,655 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@13b0a2ef]
2021-03-12 09:49:30,779 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:30,781 [main:117] - GENERATED CALL = (foo("kznso")).compareTo(foo()).coerceAtMost(1867800338)
2021-03-12 09:49:30,781 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@84dd68a]]
2021-03-12 09:49:30,781 [main:117] - GENERATED CALL = (foo("kznso")).length.absoluteValue
2021-03-12 09:49:30,781 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a3cea3c]]
2021-03-12 09:49:30,781 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:49:30,906 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:30,908 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a3cea3c]
2021-03-12 09:49:30,908 [main:117] - GENERATED CALL = (foo("kznso")).get(1115575838).digitToInt()
2021-03-12 09:49:30,908 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2be99362]]
2021-03-12 09:49:30,909 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2be99362]
2021-03-12 09:49:30,909 [main:117] - GENERATED CALL = (foo("kznso")).length.inc()
2021-03-12 09:49:30,909 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6e868b0d]]
2021-03-12 09:49:30,909 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:49:30,909 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6e868b0d]
2021-03-12 09:49:31,039 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:31,041 [main:117] - GENERATED CALL = (foo("kznso")).compareTo(foo("kznso")).rotateLeft(-528779842)
2021-03-12 09:49:31,041 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@54ab606b]]
2021-03-12 09:49:31,041 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:49:31,041 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@54ab606b]
2021-03-12 09:49:31,168 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:49:31,170 [main:117] - GENERATED CALL = (foo("kznso")).compareTo(foo("kznso")).div(10)
2021-03-12 09:49:31,170 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70dcb401]]
2021-03-12 09:49:31,170 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70dcb401]
2021-03-12 09:49:31,297 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:49:31,299 [main:117] - GENERATED CALL = (foo("kznso")).length.times(-104)
2021-03-12 09:49:31,299 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3f8d1391]]
2021-03-12 09:49:31,299 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:49:31,300 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3f8d1391]
2021-03-12 09:49:31,300 [main:117] - GENERATED CALL = (foo("kznso")).compareTo(foo("kznso")).countLeadingZeroBits()
2021-03-12 09:49:31,300 [main:114] - replacement of prope4 of type Int is (foo("kznso")).length.times(-104)
2021-03-12 09:49:31,426 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:49:31,426 [main:66] - Compilation checking started
2021-03-12 09:49:32,035 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (e?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        fu0()
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo("kznso")).length.shl(-68198280) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:49:32,037 [main:107] - replacing (e, Exception)
2021-03-12 09:49:32,038 [main:50] - replacing e Exception
2021-03-12 09:49:32,038 [main:54] - Getting value of type Exception
2021-03-12 09:49:32,195 [main:302] - generating value of type = Exception false depth = 0
2021-03-12 09:49:32,202 [main:58] - GENERATED VALUE OF TYPE Exception = ClassCastException()
2021-03-12 09:49:32,202 [main:61] - GENERATED IS CALL =true
2021-03-12 09:49:33,330 [main:67] - randomType = Triple<Kla4, Function2<ULong, Function1<Map<Char, String>, UInt>, Kla0>, Kla0?>
2021-03-12 09:49:33,480 [main:302] - generating value of type = Triple<Kla4, Function2<ULong, Function1<Map<Char, String>, UInt>, Kla0>, Kla0?> false depth = 0
2021-03-12 09:49:33,614 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla4, second: Function2<ULong, Function1<Map<Char, String>, UInt>, Kla0>, third: Kla0?): Triple<Kla4, Function2<ULong, Function1<Map<Char, String>, UInt>, Kla0>, Kla0?> = TODO()
2021-03-12 09:49:33,616 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla4, second: Function2<ULong, Function1<Map<Char, String>, UInt>, Kla0>, third: Kla0?): Triple<Kla4, Function2<ULong, Function1<Map<Char, String>, UInt>, Kla0>, Kla0?> = TODO()
2021-03-12 09:49:33,774 [main:302] - generating value of type = Kla4 false depth = 3
2021-03-12 09:49:33,776 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo("kznso")).length.shl(-68198280) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 09:49:33,776 [main:302] - generating value of type = Function2<ULong, Function1<Map<Char, String>, UInt>, Kla0> false depth = 3
2021-03-12 09:49:33,778 [main:302] - generating value of type = Kla0 false depth = 4
2021-03-12 09:49:33,781 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-12 09:49:33,915 [main:194] - Type params = []
2021-03-12 09:49:34,057 [main:302] - generating value of type = CoroutineContext false depth = 6
2021-03-12 09:49:34,195 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:34,197 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:34,558 [main:302] - generating value of type = Key<*> false depth = 9
2021-03-12 09:49:34,743 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:34,748 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:35,343 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:35,343 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:35,344 [main:302] - generating value of type = Kla0 false depth = 3
2021-03-12 09:49:35,345 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-12 09:49:35,528 [main:194] - Type params = []
2021-03-12 09:49:35,727 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-12 09:49:35,928 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:35,933 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:36,255 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-12 09:49:36,393 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:36,395 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:36,858 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:49:36,858 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:49:36,859 [main:95] - GENERATED = Triple<Kla4, Function2<ULong, Function1<Map<Char, String>, UInt>, Kla0>, Kla0?>(Kla4(), {a: ULong, b: Function1<Map<Char, String>, UInt> -> Kla0()}, Kla0())
2021-03-12 09:49:36,906 [main:106] - GETTING Exception from String
2021-03-12 09:49:36,951 [main:106] - GETTING Exception from String
2021-03-12 09:49:36,951 [main:114] - replacement of e of type Exception is ClassCastException()
2021-03-12 09:49:37,069 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:49:37,069 [main:66] - Compilation checking started
2021-03-12 09:49:37,721 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (ClassCastException()?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        fu0()
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo("kznso")).length.shl(-68198280) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:49:37,723 [main:107] - replacing ({ c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 09:49:37,723 [main:50] - replacing { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-12 09:49:37,723 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 09:49:37,905 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 09:49:37,907 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:49:38,111 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 09:49:38,114 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 09:49:38,507 [main:302] - generating value of type = Any false depth = 4
2021-03-12 09:49:38,507 [main:95] - GENERATED = println("nmbjc")
2021-03-12 09:49:38,507 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> println("nmbjc")}
2021-03-12 09:49:38,507 [main:61] - GENERATED IS CALL =false
2021-03-12 09:49:38,666 [main:67] - randomType = Byte
2021-03-12 09:49:38,814 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:49:38,869 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 09:49:38,897 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 09:49:38,897 [main:114] - replacement of { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> println("nmbjc")}
2021-03-12 09:49:39,029 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 09:49:39,030 [main:66] - Compilation checking started
2021-03-12 09:49:39,639 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (ClassCastException()?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        fu0()
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo("kznso")).length.shl(-68198280) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:49:39,641 [main:107] - replacing (x, Function1<Throwable, Unit>)
2021-03-12 09:49:39,641 [main:50] - replacing x Function1<Throwable, Unit>
2021-03-12 09:49:39,642 [main:54] - Getting value of type Function1<Throwable, Unit>
2021-03-12 09:49:39,773 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 0
2021-03-12 09:49:39,774 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:49:39,904 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 09:49:39,907 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 09:49:40,179 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 09:49:40,181 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 09:49:40,315 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:49:40,318 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:49:40,768 [main:302] - generating value of type = Int true depth = 8
2021-03-12 09:49:40,770 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 09:49:40,771 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 09:49:40,777 [main:95] - GENERATED = repeat(2072938378, {a: Int -> println()})
2021-03-12 09:49:40,777 [main:95] - GENERATED = contract({ repeat(2072938378, {a: Int -> println()})})
2021-03-12 09:49:40,777 [main:58] - GENERATED VALUE OF TYPE Function1<Throwable, Unit> = {a: Throwable -> contract({ repeat(2072938378, {a: Int -> println()})})}
2021-03-12 09:49:40,777 [main:61] - GENERATED IS CALL =false
2021-03-12 09:49:40,781 [main:67] - randomType = Int
2021-03-12 09:49:40,910 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:40,959 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 09:49:40,995 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 09:49:40,995 [main:114] - replacement of x of type Function1<Throwable, Unit> is {a: Throwable -> contract({ repeat(2072938378, {a: Int -> println()})})}
2021-03-12 09:49:41,114 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 09:49:41,115 [main:66] - Compilation checking started
2021-03-12 09:49:41,495 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (ClassCastException()?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        fu0()
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> contract({ repeat(2072938378, {a: Int -> println()})})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo("kznso")).length.shl(-68198280) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:49:41,497 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-12 09:49:41,497 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-12 09:49:41,497 [main:54] - Getting value of type Boolean
2021-03-12 09:49:41,634 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:49:41,635 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 09:49:41,636 [main:61] - GENERATED IS CALL =false
2021-03-12 09:49:41,785 [main:67] - randomType = Kla2<Kla0>
2021-03-12 09:49:41,924 [main:302] - generating value of type = Kla2<Kla0> false depth = 0
2021-03-12 09:49:41,926 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 09:49:42,495 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-12 09:49:42,497 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}
2021-03-12 09:49:42,517 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla2[DeserializedSimpleFunctionDescriptor@25902bef]
2021-03-12 09:49:42,642 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:49:42,642 [main:78] - Generated call from random type = (Kla5).equals("wofvg")
2021-03-12 09:49:42,643 [main:106] - GETTING Boolean from String
2021-03-12 09:49:42,665 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1832b55f]]
2021-03-12 09:49:42,665 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1832b55f]
2021-03-12 09:49:42,794 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:49:42,794 [main:117] - GENERATED CALL = (foo()).length.equals("aprci")
2021-03-12 09:49:42,794 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@394874b0]]
2021-03-12 09:49:42,794 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:49:42,966 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:42,968 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@394874b0]
2021-03-12 09:49:42,968 [main:117] - GENERATED CALL = (foo()).get(1911311826).isUpperCase()
2021-03-12 09:49:42,968 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@137e1d44]]
2021-03-12 09:49:42,968 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:49:43,102 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:43,242 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:43,244 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@137e1d44]
2021-03-12 09:49:43,370 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 09:49:43,499 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 09:49:43,501 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 09:49:43,969 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:49:43,971 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 09:49:43,973 [main:95] - GENERATED = Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 09:49:43,973 [main:117] - GENERATED CALL = (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE))
2021-03-12 09:49:43,973 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ce6d1]]
2021-03-12 09:49:43,973 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:49:44,122 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:44,125 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ce6d1]
2021-03-12 09:49:44,127 [main:117] - GENERATED CALL = (foo()).get(-842974370).isISOControl()
2021-03-12 09:49:44,128 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1832b55f]]
2021-03-12 09:49:44,128 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:49:44,128 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1832b55f]
2021-03-12 09:49:44,291 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:49:44,291 [main:117] - GENERATED CALL = (foo()).compareTo(foo()).equals("kwwuk")
2021-03-12 09:49:44,291 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd2cf85]]
2021-03-12 09:49:44,291 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:49:44,448 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:44,450 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd2cf85]
2021-03-12 09:49:44,451 [main:117] - GENERATED CALL = (foo()).get(1491468624).isWhitespace()
2021-03-12 09:49:44,451 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56d70c33]]
2021-03-12 09:49:44,451 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:49:44,590 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:44,723 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:44,725 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56d70c33]
2021-03-12 09:49:44,854 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:49:44,981 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:49:44,983 [main:117] - GENERATED CALL = (foo()).subSequence(533388378, -1670235336).contains('칒', false)
2021-03-12 09:49:44,983 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12335ae5]]
2021-03-12 09:49:44,983 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:49:45,119 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:45,249 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:45,251 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12335ae5]
2021-03-12 09:49:45,251 [main:117] - GENERATED CALL = (foo()).subSequence(-1150264381, 1320910884).any()
2021-03-12 09:49:45,251 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]]
2021-03-12 09:49:45,251 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:49:45,393 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:45,563 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:45,566 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]
2021-03-12 09:49:45,768 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:45,926 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:49:46,068 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:46,198 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:46,329 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:49:46,331 [main:117] - GENERATED CALL = (foo()).subSequence(721688192, -570307852).regionMatches(301393363, StringBuilder(), -1947966203, 2035467634, false)
2021-03-12 09:49:46,331 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76e01234]]
2021-03-12 09:49:46,331 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:49:46,454 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:46,591 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:46,593 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76e01234]
2021-03-12 09:49:46,764 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:49:46,903 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:49:46,905 [main:117] - GENERATED CALL = (foo()).subSequence(-1769895041, -914667657).endsWith('⼓', false)
2021-03-12 09:49:46,905 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE))
2021-03-12 09:49:47,032 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:49:47,033 [main:66] - Compilation checking started
2021-03-12 09:49:47,665 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (ClassCastException()?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        fu0()
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo("kznso")).length.shl(-68198280) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:49:47,668 [main:107] - replacing (prope5, Boolean)
2021-03-12 09:49:47,668 [main:50] - replacing prope5 Boolean
2021-03-12 09:49:47,668 [main:54] - Getting value of type Boolean
2021-03-12 09:49:47,823 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:49:47,825 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 09:49:47,825 [main:61] - GENERATED IS CALL =false
2021-03-12 09:49:48,863 [main:67] - randomType = HashMap<Float, HashMap<Kla0?, List<Kla0>>>?
2021-03-12 09:49:48,993 [main:302] - generating value of type = HashMap<Float, HashMap<Kla0?, List<Kla0>>> false depth = 0
2021-03-12 09:49:49,134 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<Float, HashMap<Kla0?, List<Kla0>>> = TODO()
2021-03-12 09:49:49,137 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<Float, HashMap<Kla0?, List<Kla0>>> = TODO()
2021-03-12 09:49:49,266 [main:95] - GENERATED = hashMapOf<Float, HashMap<Kla0?, List<Kla0>>>()
2021-03-12 09:49:49,471 [main:149] - GENERATING call of type public abstract fun add(element: kotlin.collections.HashMap<Kla0?, kotlin.collections.List<Kla0>>): kotlin.Boolean defined in kotlin.collections.MutableCollection[DeserializedSimpleFunctionDescriptor@6d7cea5]
2021-03-12 09:49:49,654 [main:302] - generating value of type = HashMap<Kla0?, List<Kla0>> false depth = 0
2021-03-12 09:49:49,851 [main:43] - GENERATING CALL OF fun <K, V> HashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashMap<Kla0?, List<Kla0>> = TODO()
2021-03-12 09:49:49,856 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashMap<Kla0?, List<Kla0>> = TODO()
2021-03-12 09:49:50,416 [main:302] - generating value of type = Int true depth = 3
2021-03-12 09:49:50,418 [main:302] - generating value of type = Float true depth = 3
2021-03-12 09:49:50,421 [main:95] - GENERATED = HashMap<Kla0?, List<Kla0>>(95316011, 0.50982136f)
2021-03-12 09:49:50,421 [main:78] - Generated call from random type = (hashMapOf<Float, HashMap<Kla0?, List<Kla0>>>())?.values.add(HashMap<Kla0?, List<Kla0>>(95316011, 0.50982136f))
2021-03-12 09:49:50,422 [main:106] - GETTING Boolean from String
2021-03-12 09:49:50,451 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cff845a]]
2021-03-12 09:49:50,451 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:49:50,596 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:50,731 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:50,733 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cff845a]
2021-03-12 09:49:50,861 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:49:50,863 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:49:50,865 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(-1364347238, 738343710).all({a: Char -> true})
2021-03-12 09:49:50,866 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65ea5d55]]
2021-03-12 09:49:50,866 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:49:51,018 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:51,020 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65ea5d55]
2021-03-12 09:49:51,020 [main:117] - GENERATED CALL = (foo("kznso")).get(-176770905).isDefined()
2021-03-12 09:49:51,021 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6baa5329]]
2021-03-12 09:49:51,021 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6baa5329]
2021-03-12 09:49:51,147 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:51,149 [main:117] - GENERATED CALL = (foo("kznso")).hasSurrogatePairAt(-1554093008)
2021-03-12 09:49:51,149 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12335ae5]]
2021-03-12 09:49:51,149 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:49:51,291 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:51,419 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:51,421 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12335ae5]
2021-03-12 09:49:51,422 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(446544992, -2012641355).any()
2021-03-12 09:49:51,422 [main:113] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bff2b3a]]
2021-03-12 09:49:51,422 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bff2b3a]
2021-03-12 09:49:51,422 [main:117] - GENERATED CALL = (foo("kznso")).isBlank()
2021-03-12 09:49:51,422 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b392736]]
2021-03-12 09:49:51,422 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:49:51,562 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:51,565 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b392736]
2021-03-12 09:49:51,565 [main:117] - GENERATED CALL = (foo("kznso")).get(1132213920).isLetter()
2021-03-12 09:49:51,565 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7555e4a8]]
2021-03-12 09:49:51,565 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:49:51,711 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:51,713 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7555e4a8]
2021-03-12 09:49:51,713 [main:117] - GENERATED CALL = (foo("kznso")).get(361001691).isDigit()
2021-03-12 09:49:51,713 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ffe60f1]]
2021-03-12 09:49:51,713 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:49:51,870 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:51,872 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ffe60f1]
2021-03-12 09:49:52,000 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:49:52,155 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:49:52,158 [main:117] - GENERATED CALL = (foo("kznso")).get(-444951936).equals('꿂', true)
2021-03-12 09:49:52,158 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@153ba2b7]]
2021-03-12 09:49:52,158 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@153ba2b7]
2021-03-12 09:49:52,341 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:49:52,520 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:49:52,523 [main:117] - GENERATED CALL = (foo("kznso")).endsWith("wnjbg", true)
2021-03-12 09:49:52,524 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17b1288e]]
2021-03-12 09:49:52,524 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:49:52,678 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:52,684 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17b1288e]
2021-03-12 09:49:52,684 [main:117] - GENERATED CALL = (foo("kznso")).get(-2045199386).isLowSurrogate()
2021-03-12 09:49:52,684 [main:114] - replacement of prope5 of type Boolean is true
2021-03-12 09:49:52,817 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-12 09:49:52,818 [main:66] - Compilation checking started
2021-03-12 09:49:53,204 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (ClassCastException()?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        fu0()
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        true = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo("kznso")).length.shl(-68198280) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:49:53,206 [main:107] - replacing (prope5, Boolean)
2021-03-12 09:49:53,206 [main:50] - replacing prope5 Boolean
2021-03-12 09:49:53,206 [main:54] - Getting value of type Boolean
2021-03-12 09:49:53,333 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:49:53,335 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 09:49:53,335 [main:61] - GENERATED IS CALL =false
2021-03-12 09:49:54,568 [main:67] - randomType = ArrayList<Function2<LinkedHashMap<Double, Collection<Kla4>>?, Int?, Double>>
2021-03-12 09:49:54,702 [main:302] - generating value of type = ArrayList<Function2<LinkedHashMap<Double, Collection<Kla4>>?, Int?, Double>> false depth = 0
2021-03-12 09:49:54,849 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Function2<LkedHashMap<Double, Collection<Kla4>>?, Int?, Double>> = TODO()
2021-03-12 09:49:54,852 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Function2<LkedHashMap<Double, Collection<Kla4>>?, Int?, Double>> = TODO()
2021-03-12 09:49:54,998 [main:95] - GENERATED = arrayListOf<Function2<LinkedHashMap<Double, Collection<Kla4>>?, Int?, Double>>()
2021-03-12 09:49:55,340 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7d459954]
2021-03-12 09:49:55,341 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@30172b56]
2021-03-12 09:49:55,519 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:49:55,520 [main:78] - Generated call from random type = (arrayListOf<Function2<LinkedHashMap<Double, Collection<Kla4>>?, Int?, Double>>()).toArray().equals("klbvc")
2021-03-12 09:49:55,521 [main:106] - GETTING Boolean from String
2021-03-12 09:49:55,573 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]]
2021-03-12 09:49:55,573 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]
2021-03-12 09:49:55,733 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:49:55,734 [main:117] - GENERATED CALL = (foo()).equals("vwsnh")
2021-03-12 09:49:55,734 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4be1d672]]
2021-03-12 09:49:55,734 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]
2021-03-12 09:49:55,890 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:49:55,890 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4be1d672]
2021-03-12 09:49:56,021 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:49:56,023 [main:117] - GENERATED CALL = (foo()).equals("ywoqy").xor(false)
2021-03-12 09:49:56,024 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7555e4a8]]
2021-03-12 09:49:56,024 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:49:56,157 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:56,159 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7555e4a8]
2021-03-12 09:49:56,160 [main:117] - GENERATED CALL = (foo()).get(-1318110570).isDigit()
2021-03-12 09:49:56,160 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cff845a]]
2021-03-12 09:49:56,160 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cff845a]
2021-03-12 09:49:56,314 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:49:56,317 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:49:56,320 [main:117] - GENERATED CALL = (foo()).all({a: Char -> false})
2021-03-12 09:49:56,321 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@235e080a]]
2021-03-12 09:49:56,321 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@235e080a]
2021-03-12 09:49:56,321 [main:117] - GENERATED CALL = (foo()).toBoolean()
2021-03-12 09:49:56,321 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76e01234]]
2021-03-12 09:49:56,322 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:49:56,486 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:56,648 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:56,650 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76e01234]
2021-03-12 09:49:56,803 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:49:56,975 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:49:56,977 [main:117] - GENERATED CALL = (foo()).subSequence(-216713910, 97784611).endsWith('ꊎ', true)
2021-03-12 09:49:56,977 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ce6d1]]
2021-03-12 09:49:56,977 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:49:57,115 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:57,117 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ce6d1]
2021-03-12 09:49:57,117 [main:117] - GENERATED CALL = (foo()).get(912693539).isISOControl()
2021-03-12 09:49:57,117 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ffe60f1]]
2021-03-12 09:49:57,117 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:49:57,282 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:57,285 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ffe60f1]
2021-03-12 09:49:57,446 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:49:57,595 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:49:57,597 [main:117] - GENERATED CALL = (foo()).get(224245390).equals('◽', true)
2021-03-12 09:49:57,597 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@20d6a76b]]
2021-03-12 09:49:57,597 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:49:57,729 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:57,891 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:57,894 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@20d6a76b]
2021-03-12 09:49:58,054 [main:117] - GENERATED CALL = (foo()).subSequence(791163756, 340855832).equals(null)
2021-03-12 09:49:58,054 [main:113] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@425b151f]]
2021-03-12 09:49:58,054 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@425b151f]
2021-03-12 09:49:58,054 [main:117] - GENERATED CALL = (foo()).matches(foo("kznso"))
2021-03-12 09:49:58,055 [main:114] - replacement of prope5 of type Boolean is (foo()).equals("ywoqy").xor(false)
2021-03-12 09:49:58,196 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:49:58,197 [main:66] - Compilation checking started
2021-03-12 09:49:58,599 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (ClassCastException()?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        fu0()
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        (foo()).equals("ywoqy").xor(false) = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo("kznso")).length.shl(-68198280) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:49:58,601 [main:107] - replacing (prope1.prope5, Boolean)
2021-03-12 09:49:58,601 [main:50] - replacing prope1.prope5 Boolean
2021-03-12 09:49:58,601 [main:54] - Getting value of type Boolean
2021-03-12 09:49:58,757 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:49:58,760 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 09:49:58,760 [main:61] - GENERATED IS CALL =false
2021-03-12 09:49:58,911 [main:67] - randomType = ULong
2021-03-12 09:49:59,061 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 09:49:59,120 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@77bfdea4]
2021-03-12 09:49:59,120 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@52ed11cf]
2021-03-12 09:49:59,120 [main:78] - Generated call from random type = (2377121183981054355.toULong()).toFloat().isNaN()
2021-03-12 09:49:59,121 [main:106] - GETTING Boolean from String
2021-03-12 09:49:59,159 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71b52a09]]
2021-03-12 09:49:59,159 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:49:59,319 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:59,322 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71b52a09]
2021-03-12 09:49:59,322 [main:117] - GENERATED CALL = (foo()).get(2083481897).isTitleCase()
2021-03-12 09:49:59,323 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bff2b3a]]
2021-03-12 09:49:59,323 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:49:59,511 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:59,663 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:59,665 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bff2b3a]
2021-03-12 09:49:59,665 [main:117] - GENERATED CALL = (foo()).subSequence(1809926480, -1794619997).isBlank()
2021-03-12 09:49:59,665 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6baa5329]]
2021-03-12 09:49:59,665 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6baa5329]
2021-03-12 09:49:59,800 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:49:59,802 [main:117] - GENERATED CALL = (foo()).hasSurrogatePairAt(1612990720)
2021-03-12 09:49:59,802 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cff845a]]
2021-03-12 09:49:59,802 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:49:59,934 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:00,053 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:00,055 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cff845a]
2021-03-12 09:50:00,206 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:50:00,210 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:50:00,213 [main:117] - GENERATED CALL = (foo()).subSequence(1508362662, -1781483377).all({a: Char -> false})
2021-03-12 09:50:00,214 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11e82c70]]
2021-03-12 09:50:00,214 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:50:00,357 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:00,359 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11e82c70]
2021-03-12 09:50:00,359 [main:117] - GENERATED CALL = (foo()).get(788618928).isLowerCase()
2021-03-12 09:50:00,359 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cff845a]]
2021-03-12 09:50:00,359 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cff845a]
2021-03-12 09:50:00,491 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:50:00,493 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:50:00,495 [main:117] - GENERATED CALL = (foo()).all({a: Char -> true})
2021-03-12 09:50:00,495 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4563cc3c]]
2021-03-12 09:50:00,495 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:50:00,618 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:00,621 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4563cc3c]
2021-03-12 09:50:00,621 [main:117] - GENERATED CALL = (foo()).get(-489608527).isSurrogate()
2021-03-12 09:50:00,621 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65ea5d55]]
2021-03-12 09:50:00,621 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:50:00,788 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:00,791 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65ea5d55]
2021-03-12 09:50:00,791 [main:117] - GENERATED CALL = (foo()).get(1889345344).isDefined()
2021-03-12 09:50:00,792 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@20d6a76b]]
2021-03-12 09:50:00,792 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:50:00,972 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:01,107 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:01,109 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@20d6a76b]
2021-03-12 09:50:01,243 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:50:01,243 [main:117] - GENERATED CALL = (foo()).subSequence(-1765305118, -1840796890).equals("brtiy")
2021-03-12 09:50:01,244 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ce6d1]]
2021-03-12 09:50:01,244 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:50:01,370 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:01,372 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ce6d1]
2021-03-12 09:50:01,373 [main:117] - GENERATED CALL = (foo()).get(-1984592031).isISOControl()
2021-03-12 09:50:01,373 [main:114] - replacement of prope1.prope5 of type Boolean is (foo()).hasSurrogatePairAt(1612990720)
2021-03-12 09:50:01,486 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:50:01,486 [main:66] - Compilation checking started
2021-03-12 09:50:01,830 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (ClassCastException()?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        fu0()
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo("kznso")).length.shl(-68198280) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            (foo()).hasSurrogatePairAt(1612990720) = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:50:01,831 [main:107] - replacing (fu0(), Any)
2021-03-12 09:50:01,831 [main:50] - replacing fu0() Any
2021-03-12 09:50:01,831 [main:54] - Getting value of type Any
2021-03-12 09:50:01,975 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:50:01,975 [main:58] - GENERATED VALUE OF TYPE Any = "hvbxi"
2021-03-12 09:50:01,975 [main:61] - GENERATED IS CALL =false
2021-03-12 09:50:03,067 [main:67] - randomType = Array<HashSet<Function2<Byte, Kla2<Boolean?>, UByte>>>
2021-03-12 09:50:03,200 [main:302] - generating value of type = Array<HashSet<Function2<Byte, Kla2<Boolean?>, UByte>>> false depth = 0
2021-03-12 09:50:03,355 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->HashSet<Function2<Byte, Kla2<Boolean?>, UByte>>): Array<HashSet<Function2<Byte, Kla2<Boolean?>, UByte>>> = TODO()
2021-03-12 09:50:03,358 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->HashSet<Function2<Byte, Kla2<Boolean?>, UByte>>): Array<HashSet<Function2<Byte, Kla2<Boolean?>, UByte>>> = TODO()
2021-03-12 09:50:03,763 [main:302] - generating value of type = Int true depth = 3
2021-03-12 09:50:03,765 [main:302] - generating value of type = Function1<Int, HashSet<Function2<Byte, Kla2<Boolean?>, UByte>>> false depth = 3
2021-03-12 09:50:03,767 [main:302] - generating value of type = HashSet<Function2<Byte, Kla2<Boolean?>, UByte>> false depth = 4
2021-03-12 09:50:03,883 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Function2<Byte, Kla2<Boolean?>, UByte>): HashSet<Function2<Byte, Kla2<Boolean?>, UByte>> = TODO()
2021-03-12 09:50:03,886 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Function2<Byte, Kla2<Boolean?>, UByte>): HashSet<Function2<Byte, Kla2<Boolean?>, UByte>> = TODO()
2021-03-12 09:50:04,011 [main:302] - generating value of type = Function2<Byte, Kla2<Boolean?>, UByte> false depth = 7
2021-03-12 09:50:04,013 [main:302] - generating value of type = UByte true depth = 8
2021-03-12 09:50:04,015 [main:95] - GENERATED = linkedSetOf<Function2<Byte, Kla2<Boolean?>, UByte>>({a: Byte, b: Kla2<Boolean?> -> 25.toUByte()})
2021-03-12 09:50:04,015 [main:95] - GENERATED = Array<HashSet<Function2<Byte, Kla2<Boolean?>, UByte>>>(700886336, {a: Int -> linkedSetOf<Function2<Byte, Kla2<Boolean?>, UByte>>({a: Byte, b: Kla2<Boolean?> -> 25.toUByte()})})
2021-03-12 09:50:04,048 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.collections.HashSet<(kotlin.Byte, Kla2<kotlin.Boolean?>) -> kotlin.UByte> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@25b08a79]
2021-03-12 09:50:04,157 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:04,159 [main:149] - GENERATING call of type @kotlin.js.JsName public open fun toJSON(): kotlin.Any defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@64259c62]
2021-03-12 09:50:04,160 [main:78] - Generated call from random type = (Array<HashSet<Function2<Byte, Kla2<Boolean?>, UByte>>>(700886336, {a: Int -> linkedSetOf<Function2<Byte, Kla2<Boolean?>, UByte>>({a: Byte, b: Kla2<Boolean?> -> 25.toUByte()})})).get(1951941653).toJSON()
2021-03-12 09:50:04,163 [main:106] - GETTING Any from String
2021-03-12 09:50:04,188 [main:114] - replacement of fu0() of type Any is "hvbxi"
2021-03-12 09:50:04,297 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 09:50:04,297 [main:66] - Compilation checking started
2021-03-12 09:50:04,942 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (ClassCastException()?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo("kznso")).length.shl(-68198280) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:50:04,945 [main:107] - replacing (exception, Throwable)
2021-03-12 09:50:04,945 [main:50] - replacing exception Throwable
2021-03-12 09:50:04,945 [main:54] - Getting value of type Throwable
2021-03-12 09:50:05,088 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 09:50:05,206 [main:43] - GENERATING CALL OF fun NotImplementedError(message: kotlin.String): Throwable = TODO()
2021-03-12 09:50:05,209 [main:61] - WITHOUT TYPE PARAMS = fun NotImplementedError(message: kotlin.String): Throwable = TODO()
2021-03-12 09:50:05,451 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:50:05,453 [main:95] - GENERATED = NotImplementedError("symik")
2021-03-12 09:50:05,454 [main:58] - GENERATED VALUE OF TYPE Throwable = NotImplementedError("symik")
2021-03-12 09:50:05,454 [main:61] - GENERATED IS CALL =true
2021-03-12 09:50:08,127 [main:67] - randomType = Triple<Function2<Kla2<Function1<Kla2<Kla1>, HashSet<UByte>>>, String, Function2<ULong, Triple<Int, Boolean, HashSet<Function1<UByte, Long>>>, UByte?>>, Short?, UByte>
2021-03-12 09:50:08,257 [main:302] - generating value of type = Triple<Function2<Kla2<Function1<Kla2<Kla1>, HashSet<UByte>>>, String, Function2<ULong, Triple<Int, Boolean, HashSet<Function1<UByte, Long>>>, UByte?>>, Short?, UByte> false depth = 0
2021-03-12 09:50:08,395 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Function2<Kla2<Function1<Kla2<Kla1>, HashSet<UByte>>>, String, Function2<ULong, Triple<Int, Boolean, HashSet<Function1<UByte, Long>>>, UByte?>>, second: Short?, third: UByte): Triple<Function2<Kla2<Function1<Kla2<Kla1>, HashSet<UByte>>>, String, Function2<ULong, Triple<Int, Boolean, HashSet<Function1<UByte, Long>>>, UByte?>>, Short?, UByte> = TODO()
2021-03-12 09:50:08,398 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Function2<Kla2<Function1<Kla2<Kla1>, HashSet<UByte>>>, String, Function2<ULong, Triple<Int, Boolean, HashSet<Function1<UByte, Long>>>, UByte?>>, second: Short?, third: UByte): Triple<Function2<Kla2<Function1<Kla2<Kla1>, HashSet<UByte>>>, String, Function2<ULong, Triple<Int, Boolean, HashSet<Function1<UByte, Long>>>, UByte?>>, Short?, UByte> = TODO()
2021-03-12 09:50:08,516 [main:302] - generating value of type = Function2<Kla2<Function1<Kla2<Kla1>, HashSet<UByte>>>, String, Function2<ULong, Triple<Int, Boolean, HashSet<Function1<UByte, Long>>>, UByte?>> false depth = 3
2021-03-12 09:50:08,517 [main:302] - generating value of type = Function2<ULong, Triple<Int, Boolean, HashSet<Function1<UByte, Long>>>, UByte?> false depth = 4
2021-03-12 09:50:08,519 [main:302] - generating value of type = UByte true depth = 5
2021-03-12 09:50:08,521 [main:302] - generating value of type = Short true depth = 3
2021-03-12 09:50:08,523 [main:302] - generating value of type = UByte true depth = 3
2021-03-12 09:50:08,525 [main:95] - GENERATED = Triple<Function2<Kla2<Function1<Kla2<Kla1>, HashSet<UByte>>>, String, Function2<ULong, Triple<Int, Boolean, HashSet<Function1<UByte, Long>>>, UByte?>>, Short?, UByte>({a: Kla2<Function1<Kla2<Kla1>, HashSet<UByte>>>, b: String -> {a: ULong, b: Triple<Int, Boolean, HashSet<Function1<UByte, Long>>> -> 52.toUByte()}}, -32284, 48.toUByte())
2021-03-12 09:50:08,568 [main:106] - GETTING Throwable from String
2021-03-12 09:50:08,585 [main:106] - GETTING Throwable from String
2021-03-12 09:50:08,585 [main:114] - replacement of exception of type Throwable is NotImplementedError("symik")
2021-03-12 09:50:08,710 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:50:08,711 [main:66] - Compilation checking started
2021-03-12 09:50:09,345 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (ClassCastException()?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo("kznso")).length.shl(-68198280) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:50:09,348 [main:107] - replacing ((foo("kznso")).length.shl(-68198280) != numberOfSuspensions, Boolean)
2021-03-12 09:50:09,348 [main:50] - replacing (foo("kznso")).length.shl(-68198280) != numberOfSuspensions Boolean
2021-03-12 09:50:09,348 [main:54] - Getting value of type Boolean
2021-03-12 09:50:09,498 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:50:09,501 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 09:50:09,501 [main:61] - GENERATED IS CALL =false
2021-03-12 09:50:09,508 [main:67] - randomType = Char
2021-03-12 09:50:09,674 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:50:09,709 [main:149] - GENERATING call of type public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6e107f0]
2021-03-12 09:50:09,709 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@201788cd]
2021-03-12 09:50:09,710 [main:78] - Generated call from random type = ('䜞').toDouble().isInfinite()
2021-03-12 09:50:09,711 [main:106] - GETTING Boolean from String
2021-03-12 09:50:09,743 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]]
2021-03-12 09:50:09,744 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:50:09,884 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:10,050 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:10,053 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]
2021-03-12 09:50:10,183 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:10,318 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:50:10,447 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:50:10,449 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:50:10,736 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:50:10,738 [main:95] - GENERATED = StringBuilder("nalrl")
2021-03-12 09:50:10,886 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:11,035 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:11,160 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:50:11,162 [main:117] - GENERATED CALL = (foo()).subSequence(1164515278, 485390459).regionMatches(-1591639676, StringBuilder("nalrl"), 1526928222, 93982910, false)
2021-03-12 09:50:11,163 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bff2b3a]]
2021-03-12 09:50:11,163 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:50:11,273 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:11,409 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:11,411 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bff2b3a]
2021-03-12 09:50:11,411 [main:117] - GENERATED CALL = (foo()).subSequence(804726171, -188415978).isBlank()
2021-03-12 09:50:11,411 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71b52a09]]
2021-03-12 09:50:11,411 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:50:11,546 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:11,549 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71b52a09]
2021-03-12 09:50:11,549 [main:117] - GENERATED CALL = (foo()).get(1239747872).isTitleCase()
2021-03-12 09:50:11,550 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ffe60f1]]
2021-03-12 09:50:11,550 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:50:11,704 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:11,706 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ffe60f1]
2021-03-12 09:50:11,838 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:50:11,955 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:50:11,957 [main:117] - GENERATED CALL = (foo()).get(1463605311).equals('꛾', true)
2021-03-12 09:50:11,957 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1832b55f]]
2021-03-12 09:50:11,957 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1832b55f]
2021-03-12 09:50:12,082 [main:117] - GENERATED CALL = (foo()).length.equals(null)
2021-03-12 09:50:12,082 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@153ba2b7]]
2021-03-12 09:50:12,082 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@153ba2b7]
2021-03-12 09:50:12,204 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:50:12,206 [main:117] - GENERATED CALL = (foo()).endsWith(foo(), false)
2021-03-12 09:50:12,207 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]]
2021-03-12 09:50:12,207 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]
2021-03-12 09:50:12,316 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:12,442 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:50:12,569 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 09:50:12,572 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 09:50:12,845 [main:302] - generating value of type = Int true depth = 3
2021-03-12 09:50:12,848 [main:95] - GENERATED = StringBuilder(-21791953)
2021-03-12 09:50:12,969 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:13,078 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:13,204 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:50:13,206 [main:117] - GENERATED CALL = (foo()).regionMatches(-1286090653, StringBuilder(-21791953), 56461393, 621563944, true)
2021-03-12 09:50:13,206 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6634e609]]
2021-03-12 09:50:13,206 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6634e609]
2021-03-12 09:50:13,328 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:50:13,331 [main:117] - GENERATED CALL = (foo()).startsWith(foo(), false)
2021-03-12 09:50:13,331 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7555e4a8]]
2021-03-12 09:50:13,331 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:50:13,442 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:13,444 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7555e4a8]
2021-03-12 09:50:13,444 [main:117] - GENERATED CALL = (foo()).get(-441454740).isDigit()
2021-03-12 09:50:13,445 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cff845a]]
2021-03-12 09:50:13,445 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cff845a]
2021-03-12 09:50:13,568 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:50:13,570 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:50:13,572 [main:117] - GENERATED CALL = (foo()).all({a: Char -> false})
2021-03-12 09:50:13,573 [main:114] - replacement of (foo("kznso")).length.shl(-68198280) != numberOfSuspensions of type Boolean is (foo()).get(1463605311).equals('꛾', true)
2021-03-12 09:50:13,695 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:50:13,695 [main:66] - Compilation checking started
2021-03-12 09:50:14,257 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (ClassCastException()?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:50:14,260 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-12 09:50:14,260 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-12 09:50:14,260 [main:54] - Getting value of type Throwable?
2021-03-12 09:50:14,408 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 09:50:14,547 [main:43] - GENERATING CALL OF fun RuntimeException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 09:50:14,550 [main:61] - WITHOUT TYPE PARAMS = fun RuntimeException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 09:50:15,005 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:50:15,007 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 09:50:15,127 [main:43] - GENERATING CALL OF fun IllegalStateException(message: kotlin.String?): Throwable = TODO()
2021-03-12 09:50:15,130 [main:61] - WITHOUT TYPE PARAMS = fun IllegalStateException(message: kotlin.String?): Throwable = TODO()
2021-03-12 09:50:15,402 [main:302] - generating value of type = String true depth = 6
2021-03-12 09:50:15,404 [main:95] - GENERATED = IllegalStateException("tdusm")
2021-03-12 09:50:15,405 [main:95] - GENERATED = RuntimeException("rirzt", IllegalStateException("tdusm"))
2021-03-12 09:50:15,405 [main:58] - GENERATED VALUE OF TYPE Throwable? = RuntimeException("rirzt", IllegalStateException("tdusm"))
2021-03-12 09:50:15,405 [main:61] - GENERATED IS CALL =true
2021-03-12 09:50:15,412 [main:67] - randomType = Kla0
2021-03-12 09:50:15,522 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 09:50:15,524 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-12 09:50:15,662 [main:194] - Type params = []
2021-03-12 09:50:15,784 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 09:50:15,901 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:50:15,904 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:50:16,186 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 09:50:16,335 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:50:16,338 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:50:16,782 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 09:50:16,912 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:50:16,915 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:50:17,337 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:50:17,337 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:50:17,337 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:50:17,358 [main:106] - GETTING Throwable? from String
2021-03-12 09:50:17,388 [main:106] - GETTING Throwable? from String
2021-03-12 09:50:17,388 [main:114] - replacement of exceptionOrNull() of type Throwable? is RuntimeException("rirzt", IllegalStateException("tdusm"))
2021-03-12 09:50:17,514 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:50:17,515 [main:66] - Compilation checking started
2021-03-12 09:50:17,877 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (ClassCastException()?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.RuntimeException("rirzt", IllegalStateException("tdusm"))?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:50:17,880 [main:107] - replacing (true, Boolean)
2021-03-12 09:50:17,880 [main:50] - replacing true Boolean
2021-03-12 09:50:17,880 [main:54] - Getting value of type Boolean
2021-03-12 09:50:18,009 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:50:18,011 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 09:50:18,011 [main:61] - GENERATED IS CALL =false
2021-03-12 09:50:18,303 [main:67] - randomType = Collection<Kla4?>
2021-03-12 09:50:18,304 [main:106] - GETTING Boolean from String
2021-03-12 09:50:18,335 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@137e1d44]]
2021-03-12 09:50:18,335 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:50:18,462 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:18,574 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:18,576 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@137e1d44]
2021-03-12 09:50:18,701 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 09:50:18,827 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 09:50:18,830 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 09:50:19,268 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:50:19,271 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 09:50:19,273 [main:95] - GENERATED = Regex("rtdvm", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 09:50:19,273 [main:117] - GENERATED CALL = (foo()).subSequence(-1608547341, -1594108214).matches(Regex("rtdvm", kotlin.text.RegexOption.IGNORE_CASE))
2021-03-12 09:50:19,273 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]]
2021-03-12 09:50:19,273 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]
2021-03-12 09:50:19,274 [main:117] - GENERATED CALL = (foo()).isNotBlank()
2021-03-12 09:50:19,274 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1832b55f]]
2021-03-12 09:50:19,274 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1832b55f]
2021-03-12 09:50:19,403 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:50:19,404 [main:117] - GENERATED CALL = (foo()).length.equals("pjign")
2021-03-12 09:50:19,404 [main:113] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@425b151f]]
2021-03-12 09:50:19,404 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@425b151f]
2021-03-12 09:50:19,404 [main:117] - GENERATED CALL = (foo()).matches(foo("kznso"))
2021-03-12 09:50:19,404 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e81170]]
2021-03-12 09:50:19,404 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:50:19,543 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:19,666 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:19,668 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e81170]
2021-03-12 09:50:19,669 [main:117] - GENERATED CALL = (foo()).subSequence(1105030903, -248248101).none()
2021-03-12 09:50:19,669 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6baa5329]]
2021-03-12 09:50:19,669 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6baa5329]
2021-03-12 09:50:19,796 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:19,798 [main:117] - GENERATED CALL = (foo()).hasSurrogatePairAt(865310824)
2021-03-12 09:50:19,798 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]]
2021-03-12 09:50:19,798 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]
2021-03-12 09:50:19,923 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:50:19,924 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]
2021-03-12 09:50:20,037 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:50:20,037 [main:117] - GENERATED CALL = (foo()).equals("emfqc").equals("aoujd")
2021-03-12 09:50:20,037 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44d8198]]
2021-03-12 09:50:20,037 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:50:20,165 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:20,168 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44d8198]
2021-03-12 09:50:20,168 [main:117] - GENERATED CALL = (foo()).get(-423825331).isHighSurrogate()
2021-03-12 09:50:20,168 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]]
2021-03-12 09:50:20,168 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:50:20,305 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:20,420 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:20,422 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]
2021-03-12 09:50:20,422 [main:117] - GENERATED CALL = (foo()).subSequence(1891828489, 1253388030).isNotBlank()
2021-03-12 09:50:20,422 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6634e609]]
2021-03-12 09:50:20,422 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6634e609]
2021-03-12 09:50:20,550 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:50:20,552 [main:117] - GENERATED CALL = (foo()).startsWith(foo("kznso"), true)
2021-03-12 09:50:20,552 [main:114] - replacement of true of type Boolean is (foo()).hasSurrogatePairAt(865310824)
2021-03-12 09:50:20,689 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:50:20,689 [main:66] - Compilation checking started
2021-03-12 09:50:21,218 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (ClassCastException()?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:50:21,220 [main:107] - replacing (prope6, Function0<Unit>)
2021-03-12 09:50:21,220 [main:50] - replacing prope6 Function0<Unit>
2021-03-12 09:50:21,220 [main:54] - Getting value of type Function0<Unit>
2021-03-12 09:50:21,373 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 09:50:21,376 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:50:21,515 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:50:21,518 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:50:21,918 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 09:50:21,921 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 09:50:21,922 [main:302] - generating value of type = Any false depth = 5
2021-03-12 09:50:21,923 [main:95] - GENERATED = check(false, { "nxjck"})
2021-03-12 09:50:21,923 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "nxjck"})}
2021-03-12 09:50:21,923 [main:61] - GENERATED IS CALL =false
2021-03-12 09:50:22,348 [main:67] - randomType = Function1<UInt, Byte>
2021-03-12 09:50:22,349 [main:106] - GETTING Function0<Unit> from String
2021-03-12 09:50:22,382 [main:106] - GETTING Function0<Unit> from String
2021-03-12 09:50:22,382 [main:114] - replacement of prope6 of type Function0<Unit> is { check(false, { "nxjck"})}
2021-03-12 09:50:22,497 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 09:50:22,497 [main:66] - Compilation checking started
2021-03-12 09:50:22,830 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if (ClassCastException()?.message != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.{ check(false, { "nxjck"})} = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:50:22,833 [main:107] - replacing (ClassCastException()?.message, String?)
2021-03-12 09:50:22,833 [main:50] - replacing ClassCastException()?.message String?
2021-03-12 09:50:22,833 [main:54] - Getting value of type String?
2021-03-12 09:50:22,959 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:50:22,961 [main:58] - GENERATED VALUE OF TYPE String? = "snzuj"
2021-03-12 09:50:22,961 [main:61] - GENERATED IS CALL =false
2021-03-12 09:50:23,108 [main:67] - randomType = ArrayDeque<Int>
2021-03-12 09:50:23,219 [main:302] - generating value of type = ArrayDeque<Int> false depth = 0
2021-03-12 09:50:23,371 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Int> = TODO()
2021-03-12 09:50:23,375 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Int> = TODO()
2021-03-12 09:50:23,512 [main:95] - GENERATED = ArrayDeque<Int>()
2021-03-12 09:50:23,655 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]
2021-03-12 09:50:23,782 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:23,784 [main:78] - Generated call from random type = (ArrayDeque<Int>()).size.toString(1955959437)
2021-03-12 09:50:23,785 [main:106] - GETTING String? from String
2021-03-12 09:50:23,815 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284b784c]]
2021-03-12 09:50:23,816 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284b784c]
2021-03-12 09:50:23,944 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:50:23,946 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:50:23,948 [main:117] - GENERATED CALL = (foo())?.dropWhile({a: Char -> false})
2021-03-12 09:50:23,948 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55764e19]]
2021-03-12 09:50:23,949 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55764e19]
2021-03-12 09:50:24,060 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:50:24,062 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:50:24,064 [main:117] - GENERATED CALL = (foo())?.filterNot({a: Char -> false})
2021-03-12 09:50:24,064 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70a40148]]
2021-03-12 09:50:24,064 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:50:24,191 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:24,193 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70a40148]
2021-03-12 09:50:24,194 [main:117] - GENERATED CALL = (foo())?.get(-1354381132).lowercase()
2021-03-12 09:50:24,194 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15752ae9]]
2021-03-12 09:50:24,194 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15752ae9]
2021-03-12 09:50:24,314 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:50:24,437 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:50:24,440 [main:117] - GENERATED CALL = (foo())?.replaceBeforeLast('瘯', foo("kznso"), "csvfs")
2021-03-12 09:50:24,440 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6af2203]]
2021-03-12 09:50:24,440 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6af2203]
2021-03-12 09:50:24,600 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:50:24,601 [main:117] - GENERATED CALL = (foo())?.plus("mchkb")
2021-03-12 09:50:24,601 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]]
2021-03-12 09:50:24,601 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:50:24,725 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:50:24,727 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]
2021-03-12 09:50:24,838 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:24,840 [main:117] - GENERATED CALL = (foo())?.compareTo("kjvnj").toString(-813450519)
2021-03-12 09:50:24,840 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43cadd6c]]
2021-03-12 09:50:24,840 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43cadd6c]
2021-03-12 09:50:24,840 [main:117] - GENERATED CALL = (foo())?.trimEnd()
2021-03-12 09:50:24,840 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9f36c40]]
2021-03-12 09:50:24,841 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9f36c40]
2021-03-12 09:50:24,841 [main:117] - GENERATED CALL = (foo())?.trimMargin(foo())
2021-03-12 09:50:24,841 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5317a8ea]]
2021-03-12 09:50:24,841 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5317a8ea]
2021-03-12 09:50:24,976 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:25,102 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:25,104 [main:117] - GENERATED CALL = (foo())?.removeRange(-1859046676, -1563950908)
2021-03-12 09:50:25,104 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6897e324]]
2021-03-12 09:50:25,104 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6897e324]
2021-03-12 09:50:25,104 [main:117] - GENERATED CALL = (foo())?.trimIndent()
2021-03-12 09:50:25,104 [main:114] - replacement of ClassCastException()?.message of type String? is (foo())?.get(-1354381132).lowercase()
2021-03-12 09:50:25,214 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:50:25,214 [main:66] - Compilation checking started
2021-03-12 09:50:25,746 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:50:25,749 [main:107] - replacing (prope1.prope5, Boolean)
2021-03-12 09:50:25,750 [main:50] - replacing prope1.prope5 Boolean
2021-03-12 09:50:25,750 [main:54] - Getting value of type Boolean
2021-03-12 09:50:25,913 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:50:25,915 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 09:50:25,915 [main:61] - GENERATED IS CALL =false
2021-03-12 09:50:26,198 [main:67] - randomType = Kla2<Long>
2021-03-12 09:50:26,326 [main:302] - generating value of type = Kla2<Long> false depth = 0
2021-03-12 09:50:26,328 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 09:50:26,725 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-12 09:50:26,727 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}
2021-03-12 09:50:26,748 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla2[DeserializedSimpleFunctionDescriptor@78e343d7]
2021-03-12 09:50:26,872 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:50:26,872 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6704d495]
2021-03-12 09:50:26,979 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:50:26,982 [main:78] - Generated call from random type = (Kla5).equals("rygzh").and(false)
2021-03-12 09:50:26,983 [main:106] - GETTING Boolean from String
2021-03-12 09:50:27,001 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ef52922]]
2021-03-12 09:50:27,001 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:50:27,129 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:27,256 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:27,259 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ef52922]
2021-03-12 09:50:27,259 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(422199216, -1298822428).isNotEmpty()
2021-03-12 09:50:27,259 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ef52922]]
2021-03-12 09:50:27,259 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ef52922]
2021-03-12 09:50:27,259 [main:117] - GENERATED CALL = (foo("kznso")).isNotEmpty()
2021-03-12 09:50:27,259 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1832b55f]]
2021-03-12 09:50:27,259 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:50:27,259 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1832b55f]
2021-03-12 09:50:27,371 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:50:27,371 [main:117] - GENERATED CALL = (foo("kznso")).compareTo(foo()).equals("cahcr")
2021-03-12 09:50:27,371 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]]
2021-03-12 09:50:27,371 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:50:27,507 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:27,632 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:27,634 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]
2021-03-12 09:50:27,745 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:27,879 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:50:28,006 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:28,122 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:28,250 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:50:28,252 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(441423323, 291414960).regionMatches(275734935, "aesol", 1716267237, 416096010, true)
2021-03-12 09:50:28,252 [main:113] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@425b151f]]
2021-03-12 09:50:28,252 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@425b151f]
2021-03-12 09:50:28,253 [main:117] - GENERATED CALL = (foo("kznso")).matches(foo())
2021-03-12 09:50:28,253 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@137e1d44]]
2021-03-12 09:50:28,253 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:50:28,378 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:28,495 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:28,498 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@137e1d44]
2021-03-12 09:50:28,630 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 09:50:28,771 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 09:50:28,774 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 09:50:29,171 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:50:29,173 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 09:50:29,176 [main:95] - GENERATED = Regex("xcrkw", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 09:50:29,176 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(-1045811708, 2055238284).matches(Regex("xcrkw", kotlin.text.RegexOption.IGNORE_CASE))
2021-03-12 09:50:29,176 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@394874b0]]
2021-03-12 09:50:29,176 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:50:29,286 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:29,288 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@394874b0]
2021-03-12 09:50:29,288 [main:117] - GENERATED CALL = (foo("kznso")).get(-342279494).isUpperCase()
2021-03-12 09:50:29,288 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b392736]]
2021-03-12 09:50:29,288 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:50:29,437 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:29,439 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b392736]
2021-03-12 09:50:29,440 [main:117] - GENERATED CALL = (foo("kznso")).get(-2120185859).isLetter()
2021-03-12 09:50:29,440 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]]
2021-03-12 09:50:29,440 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:50:29,565 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:29,680 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:29,682 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]
2021-03-12 09:50:29,682 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(-1000203066, -354789402).isNotBlank()
2021-03-12 09:50:29,682 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4be1d672]]
2021-03-12 09:50:29,682 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]
2021-03-12 09:50:29,831 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:50:29,831 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4be1d672]
2021-03-12 09:50:29,956 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:50:29,958 [main:117] - GENERATED CALL = (foo("kznso")).equals("sxdnx").xor(false)
2021-03-12 09:50:29,958 [main:114] - replacement of prope1.prope5 of type Boolean is (foo("kznso")).get(-342279494).isUpperCase()
2021-03-12 09:50:30,067 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:50:30,068 [main:66] - Compilation checking started
2021-03-12 09:50:30,385 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            (foo("kznso")).get(-342279494).isUpperCase() = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:50:30,387 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-12 09:50:30,387 [main:50] - replacing getOrThrow() Ty0
2021-03-12 09:50:30,387 [main:54] - Getting value of type Ty0
2021-03-12 09:50:30,527 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 09:50:30,532 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 09:50:33,405 [main:67] - randomType = Function2<Triple<Char, Function1<ArrayList<Boolean>, Kla2<Function1<Int?, Kla2<HashMap<Double, Double>>>>?>, Double>, Collection<Pair<Kla2<UByte>, Kla0>>?, Array<Kla0>>
2021-03-12 09:50:33,406 [main:106] - GETTING Ty0 from String
2021-03-12 09:50:33,438 [main:106] - GETTING Ty0 from String
2021-03-12 09:50:33,438 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-12 09:50:33,438 [main:107] - replacing (prope2, String)
2021-03-12 09:50:33,438 [main:50] - replacing prope2 String
2021-03-12 09:50:33,438 [main:54] - Getting value of type String
2021-03-12 09:50:33,565 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:50:33,568 [main:58] - GENERATED VALUE OF TYPE String = "uyntu"
2021-03-12 09:50:33,568 [main:61] - GENERATED IS CALL =false
2021-03-12 09:50:33,709 [main:67] - randomType = ULong
2021-03-12 09:50:33,838 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 09:50:33,881 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@61454cd7]
2021-03-12 09:50:33,990 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 09:50:33,992 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]
2021-03-12 09:50:34,120 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:34,122 [main:78] - Generated call from random type = (3148467976074666953.toULong()).compareTo(75.toUByte()).toString(436767520)
2021-03-12 09:50:34,122 [main:106] - GETTING String from String
2021-03-12 09:50:34,148 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d45bf2b]]
2021-03-12 09:50:34,148 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d45bf2b]
2021-03-12 09:50:34,271 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:50:34,390 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:50:34,519 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:50:34,522 [main:117] - GENERATED CALL = (foo()).replaceAfter('駎', "fpddj", "rsccu")
2021-03-12 09:50:34,522 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6855bae5]]
2021-03-12 09:50:34,522 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6855bae5]
2021-03-12 09:50:34,522 [main:117] - GENERATED CALL = (foo()).reversed()
2021-03-12 09:50:34,522 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb1b04c]]
2021-03-12 09:50:34,522 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb1b04c]
2021-03-12 09:50:34,647 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:34,649 [main:117] - GENERATED CALL = (foo()).drop(-300664010)
2021-03-12 09:50:34,649 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7154703a]]
2021-03-12 09:50:34,649 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7154703a]
2021-03-12 09:50:34,760 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:50:34,887 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:50:34,889 [main:117] - GENERATED CALL = (foo()).replaceBefore('舥', foo("kznso"), "pwzdc")
2021-03-12 09:50:34,890 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55764e19]]
2021-03-12 09:50:34,890 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55764e19]
2021-03-12 09:50:35,013 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:50:35,016 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:50:35,018 [main:117] - GENERATED CALL = (foo()).filterNot({a: Char -> false})
2021-03-12 09:50:35,018 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284b784c]]
2021-03-12 09:50:35,018 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284b784c]
2021-03-12 09:50:35,128 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:50:35,130 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:50:35,132 [main:117] - GENERATED CALL = (foo()).dropWhile({a: Char -> true})
2021-03-12 09:50:35,133 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]]
2021-03-12 09:50:35,133 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:50:35,133 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]
2021-03-12 09:50:35,258 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:35,260 [main:117] - GENERATED CALL = (foo()).compareTo(foo("kznso")).toString(-2017514913)
2021-03-12 09:50:35,260 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3ae7ef]]
2021-03-12 09:50:35,260 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3ae7ef]
2021-03-12 09:50:35,391 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:35,394 [main:117] - GENERATED CALL = (foo()).take(-41225338)
2021-03-12 09:50:35,394 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f5ead23]]
2021-03-12 09:50:35,394 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f5ead23]
2021-03-12 09:50:35,539 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:35,681 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:35,804 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:50:35,930 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:50:35,933 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:50:36,234 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:50:36,237 [main:95] - GENERATED = StringBuilder("lvmds")
2021-03-12 09:50:36,237 [main:117] - GENERATED CALL = (foo()).replaceRange(-1187828865, 1689477980, StringBuilder("lvmds"))
2021-03-12 09:50:36,237 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ad21b1]]
2021-03-12 09:50:36,237 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ad21b1]
2021-03-12 09:50:36,238 [main:117] - GENERATED CALL = (foo()).prependIndent(foo("kznso"))
2021-03-12 09:50:36,238 [main:114] - replacement of prope2 of type String is (foo()).dropWhile({a: Char -> true})
2021-03-12 09:50:36,364 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:50:36,365 [main:66] - Compilation checking started
2021-03-12 09:50:37,056 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw RuntimeException("Unexpected result: ${e?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:50:37,059 [main:107] - replacing (e, Exception)
2021-03-12 09:50:37,060 [main:50] - replacing e Exception
2021-03-12 09:50:37,060 [main:54] - Getting value of type Exception
2021-03-12 09:50:37,252 [main:302] - generating value of type = Exception false depth = 0
2021-03-12 09:50:37,259 [main:58] - GENERATED VALUE OF TYPE Exception = IllegalArgumentException()
2021-03-12 09:50:37,260 [main:61] - GENERATED IS CALL =true
2021-03-12 09:50:37,790 [main:67] - randomType = MutableMap<Byte, Array<Kla1>>
2021-03-12 09:50:37,792 [main:106] - GETTING Exception from String
2021-03-12 09:50:37,831 [main:106] - GETTING Exception from String
2021-03-12 09:50:37,832 [main:114] - replacement of e of type Exception is IllegalArgumentException()
2021-03-12 09:50:37,953 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:50:37,954 [main:66] - Compilation checking started
2021-03-12 09:50:38,661 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw RuntimeException("Unexpected result: ${IllegalArgumentException()?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:50:38,664 [main:107] - replacing (prope2, String)
2021-03-12 09:50:38,664 [main:50] - replacing prope2 String
2021-03-12 09:50:38,664 [main:54] - Getting value of type String
2021-03-12 09:50:38,856 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:50:38,859 [main:58] - GENERATED VALUE OF TYPE String = "ykuvk"
2021-03-12 09:50:38,859 [main:61] - GENERATED IS CALL =false
2021-03-12 09:50:39,064 [main:67] - randomType = ULong
2021-03-12 09:50:39,257 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 09:50:39,306 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@4d458157]
2021-03-12 09:50:39,307 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29104e56]
2021-03-12 09:50:39,473 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:39,476 [main:78] - Generated call from random type = (270880253678194710.toULong()).toUShort().toString(-73108728)
2021-03-12 09:50:39,476 [main:106] - GETTING String from String
2021-03-12 09:50:39,520 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@403f1bb7]]
2021-03-12 09:50:39,520 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:50:39,698 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:39,846 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:39,849 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@403f1bb7]
2021-03-12 09:50:39,992 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 09:50:40,155 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 09:50:40,158 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 09:50:40,653 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:50:40,655 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 09:50:40,657 [main:95] - GENERATED = Regex("xkpqk", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 09:50:40,657 [main:117] - GENERATED CALL = (foo()).subSequence(-1027896297, 927941341).replaceFirst(Regex("xkpqk", kotlin.text.RegexOption.IGNORE_CASE), foo("kznso"))
2021-03-12 09:50:40,658 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70a40148]]
2021-03-12 09:50:40,658 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:50:40,792 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:40,794 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70a40148]
2021-03-12 09:50:40,794 [main:117] - GENERATED CALL = (foo()).get(104586739).lowercase()
2021-03-12 09:50:40,794 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7154703a]]
2021-03-12 09:50:40,794 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7154703a]
2021-03-12 09:50:40,906 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:50:40,908 [main:117] - GENERATED CALL = (foo()).replaceBefore('罆', foo(), foo())
2021-03-12 09:50:40,908 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2be5e038]]
2021-03-12 09:50:40,908 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2be5e038]
2021-03-12 09:50:41,037 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:50:41,163 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:50:41,278 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:50:41,280 [main:117] - GENERATED CALL = (foo()).replace('萈', '盎', false)
2021-03-12 09:50:41,280 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d2bf30b]]
2021-03-12 09:50:41,280 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d2bf30b]
2021-03-12 09:50:41,406 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:50:41,408 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:50:41,411 [main:117] - GENERATED CALL = (foo()).filter({a: Char -> true})
2021-03-12 09:50:41,411 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39b09117]]
2021-03-12 09:50:41,411 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39b09117]
2021-03-12 09:50:41,411 [main:117] - GENERATED CALL = (foo()).toLowerCase()
2021-03-12 09:50:41,411 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d3c28be]]
2021-03-12 09:50:41,411 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d3c28be]
2021-03-12 09:50:41,411 [main:117] - GENERATED CALL = (foo()).toUpperCase()
2021-03-12 09:50:41,411 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34db013e]]
2021-03-12 09:50:41,411 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34db013e]
2021-03-12 09:50:41,538 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:41,540 [main:117] - GENERATED CALL = (foo()).repeat(822445856)
2021-03-12 09:50:41,540 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ad21b1]]
2021-03-12 09:50:41,540 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ad21b1]
2021-03-12 09:50:41,541 [main:117] - GENERATED CALL = (foo()).prependIndent(foo("kznso"))
2021-03-12 09:50:41,541 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6855bae5]]
2021-03-12 09:50:41,541 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6855bae5]
2021-03-12 09:50:41,541 [main:117] - GENERATED CALL = (foo()).reversed()
2021-03-12 09:50:41,541 [main:114] - replacement of prope2 of type String is (foo()).prependIndent(foo("kznso"))
2021-03-12 09:50:41,652 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:50:41,652 [main:66] - Compilation checking started
2021-03-12 09:50:41,978 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw RuntimeException("Unexpected result: ${IllegalArgumentException()?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 {
        (foo()).prependIndent(foo("kznso")) = "fail 2"
    }

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:50:41,980 [main:107] - replacing (prope2.exceptionOrNull(), Throwable?)
2021-03-12 09:50:41,980 [main:50] - replacing prope2.exceptionOrNull() Throwable?
2021-03-12 09:50:41,980 [main:54] - Getting value of type Throwable?
2021-03-12 09:50:42,120 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 09:50:42,282 [main:43] - GENERATING CALL OF fun ConcurrentModificationException(message: kotlin.String?): Throwable = TODO()
2021-03-12 09:50:42,285 [main:61] - WITHOUT TYPE PARAMS = fun ConcurrentModificationException(message: kotlin.String?): Throwable = TODO()
2021-03-12 09:50:42,566 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:50:42,569 [main:95] - GENERATED = ConcurrentModificationException("aclyd")
2021-03-12 09:50:42,569 [main:58] - GENERATED VALUE OF TYPE Throwable? = ConcurrentModificationException("aclyd")
2021-03-12 09:50:42,569 [main:61] - GENERATED IS CALL =true
2021-03-12 09:50:42,762 [main:67] - randomType = Kla2<Kla1>
2021-03-12 09:50:42,879 [main:302] - generating value of type = Kla2<Kla1> false depth = 0
2021-03-12 09:50:42,881 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 09:50:43,859 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-12 09:50:43,861 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}
2021-03-12 09:50:43,879 [main:106] - GETTING Throwable? from String
2021-03-12 09:50:43,904 [main:106] - GETTING Throwable? from String
2021-03-12 09:50:43,904 [main:114] - replacement of prope2.exceptionOrNull() of type Throwable? is ConcurrentModificationException("aclyd")
2021-03-12 09:50:44,048 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:50:44,048 [main:66] - Compilation checking started
2021-03-12 09:50:44,657 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw RuntimeException("Unexpected result: ${IllegalArgumentException()?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "fail 2"
    }

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:50:44,660 [main:107] - replacing ("fail 2", String)
2021-03-12 09:50:44,660 [main:50] - replacing "fail 2" String
2021-03-12 09:50:44,660 [main:54] - Getting value of type String
2021-03-12 09:50:44,864 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:50:44,867 [main:58] - GENERATED VALUE OF TYPE String = "nmesx"
2021-03-12 09:50:44,867 [main:61] - GENERATED IS CALL =false
2021-03-12 09:50:44,877 [main:67] - randomType = Kla3
2021-03-12 09:50:45,042 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 09:50:45,045 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 09:50:45,059 [main:106] - GETTING String from String
2021-03-12 09:50:45,103 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1620633d]]
2021-03-12 09:50:45,103 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1620633d]
2021-03-12 09:50:45,103 [main:117] - GENERATED CALL = (foo("kznso")).lowercase()
2021-03-12 09:50:45,104 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39b09117]]
2021-03-12 09:50:45,104 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39b09117]
2021-03-12 09:50:45,104 [main:117] - GENERATED CALL = (foo("kznso")).toLowerCase()
2021-03-12 09:50:45,104 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ceeeaf7]]
2021-03-12 09:50:45,104 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:50:45,271 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:45,273 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ceeeaf7]
2021-03-12 09:50:45,273 [main:117] - GENERATED CALL = (foo("kznso")).get(-1514737688).uppercase()
2021-03-12 09:50:45,273 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43cadd6c]]
2021-03-12 09:50:45,273 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43cadd6c]
2021-03-12 09:50:45,273 [main:117] - GENERATED CALL = (foo("kznso")).trimEnd()
2021-03-12 09:50:45,273 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]]
2021-03-12 09:50:45,273 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]
2021-03-12 09:50:45,410 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:45,412 [main:117] - GENERATED CALL = (foo("kznso")).length.toString(-1829205843)
2021-03-12 09:50:45,412 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60e957e9]]
2021-03-12 09:50:45,412 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60e957e9]
2021-03-12 09:50:45,528 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:50:45,533 [main:117] - GENERATED CALL = (foo("kznso")).removeSuffix(StringBuilder())
2021-03-12 09:50:45,533 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b40f50a]]
2021-03-12 09:50:45,533 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b40f50a]
2021-03-12 09:50:45,663 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:50:45,787 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:50:45,789 [main:117] - GENERATED CALL = (foo("kznso")).substringAfterLast('ᭊ', "ksmjj")
2021-03-12 09:50:45,789 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@667cae1c]]
2021-03-12 09:50:45,789 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@667cae1c]
2021-03-12 09:50:45,911 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:46,041 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:50:46,043 [main:117] - GENERATED CALL = (foo("kznso")).padStart(-820477716, '㲧')
2021-03-12 09:50:46,043 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1954aa46]]
2021-03-12 09:50:46,043 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1954aa46]
2021-03-12 09:50:46,183 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:50:46,191 [main:117] - GENERATED CALL = (foo("kznso")).removePrefix("sxkfa")
2021-03-12 09:50:46,191 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70fce245]]
2021-03-12 09:50:46,191 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:50:46,309 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:46,457 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:46,459 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70fce245]
2021-03-12 09:50:46,587 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 09:50:46,705 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 09:50:46,708 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 09:50:47,122 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:50:47,126 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 09:50:47,129 [main:95] - GENERATED = Regex("mygyf", kotlin.text.RegexOption.MULTILINE)
2021-03-12 09:50:47,272 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 09:50:47,274 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 09:50:47,279 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(25999383, -1481048557).replace(Regex("mygyf", kotlin.text.RegexOption.MULTILINE), {a: MatchResult -> "afjga"})
2021-03-12 09:50:47,279 [main:114] - replacement of "fail 2" of type String is "nmesx"
2021-03-12 09:50:47,405 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 09:50:47,406 [main:66] - Compilation checking started
2021-03-12 09:50:47,958 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw RuntimeException("Unexpected result: ${IllegalArgumentException()?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "nmesx"
    }

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:50:47,960 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-12 09:50:47,960 [main:50] - replacing getOrThrow() Ty0
2021-03-12 09:50:47,960 [main:54] - Getting value of type Ty0
2021-03-12 09:50:48,139 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 09:50:48,148 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 09:50:48,161 [main:67] - randomType = Kla3
2021-03-12 09:50:48,309 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 09:50:48,312 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 09:50:48,323 [main:106] - GETTING Ty0 from String
2021-03-12 09:50:48,375 [main:106] - GETTING Ty0 from String
2021-03-12 09:50:48,375 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-12 09:50:48,375 [main:107] - replacing (1..numberOfSuspensions, IntRange)
2021-03-12 09:50:48,375 [main:50] - replacing 1..numberOfSuspensions IntRange
2021-03-12 09:50:48,375 [main:54] - Getting value of type IntRange
2021-03-12 09:50:48,489 [main:302] - generating value of type = IntRange false depth = 0
2021-03-12 09:50:48,625 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 09:50:48,629 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 09:50:49,130 [main:302] - generating value of type = Int true depth = 3
2021-03-12 09:50:49,135 [main:302] - generating value of type = Int true depth = 3
2021-03-12 09:50:49,139 [main:95] - GENERATED = IntRange(2055819468, -166580446)
2021-03-12 09:50:49,139 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(2055819468, -166580446)
2021-03-12 09:50:49,139 [main:61] - GENERATED IS CALL =true
2021-03-12 09:50:49,152 [main:67] - randomType = Kla1
2021-03-12 09:50:49,287 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 09:50:49,289 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 09:50:49,315 [main:106] - GETTING IntRange from String
2021-03-12 09:50:49,358 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1fbdd357]]
2021-03-12 09:50:49,358 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1fbdd357]
2021-03-12 09:50:49,482 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:50:49,484 [main:117] - GENERATED CALL = (foo()).length.rangeTo(-19)
2021-03-12 09:50:49,485 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@54584f9]]
2021-03-12 09:50:49,485 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@54584f9]
2021-03-12 09:50:49,622 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:50:49,625 [main:117] - GENERATED CALL = (foo()).length.until(90)
2021-03-12 09:50:49,625 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@6c5fd830]]
2021-03-12 09:50:49,625 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:50:49,785 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:49,915 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:49,917 [main:117] - GENERATED CALL = (foo()).subSequence(-556743747, 134981788).indices
2021-03-12 09:50:49,917 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1fbdd357]]
2021-03-12 09:50:49,917 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:50:49,917 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1fbdd357]
2021-03-12 09:50:50,045 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:50:50,047 [main:117] - GENERATED CALL = (foo()).compareTo(foo()).rangeTo(-120)
2021-03-12 09:50:50,047 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@54584f9]]
2021-03-12 09:50:50,048 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:50:50,048 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@54584f9]
2021-03-12 09:50:50,187 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:50:50,189 [main:117] - GENERATED CALL = (foo()).compareTo(foo("kznso")).until(106)
2021-03-12 09:50:50,189 [main:113] - Case = [public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@6c5fd830]]
2021-03-12 09:50:50,189 [main:117] - GENERATED CALL = (foo()).indices
2021-03-12 09:50:50,190 [main:114] - replacement of 1..numberOfSuspensions of type IntRange is (foo()).indices
2021-03-12 09:50:50,323 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:50:50,323 [main:66] - Compilation checking started
2021-03-12 09:50:50,909 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw RuntimeException("Unexpected result: ${IllegalArgumentException()?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "nmesx"
    }

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:50:50,912 [main:107] - replacing (Kla4(), Kla4)
2021-03-12 09:50:50,914 [main:50] - replacing Kla4() Kla4
2021-03-12 09:50:50,914 [main:54] - Getting value of type Kla4
2021-03-12 09:50:51,072 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 09:50:51,074 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 09:50:51,074 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-12 09:50:51,074 [main:61] - GENERATED IS CALL =true
2021-03-12 09:50:52,406 [main:67] - randomType = Function1<MutableMap<ArrayList<UByte>, Kla0>, Map<Long, Collection<Kla2<Int>>>>
2021-03-12 09:50:52,407 [main:106] - GETTING Kla4 from String
2021-03-12 09:50:52,440 [main:106] - GETTING Kla4 from String
2021-03-12 09:50:52,440 [main:114] - replacement of Kla4() of type Kla4 is Kla4()
2021-03-12 09:50:52,617 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:50:52,620 [main:107] - replacing ("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"), String)
2021-03-12 09:50:52,620 [main:50] - replacing "tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n") String
2021-03-12 09:50:52,620 [main:54] - Getting value of type String
2021-03-12 09:50:52,804 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:50:52,807 [main:58] - GENERATED VALUE OF TYPE String = "kdlre"
2021-03-12 09:50:52,807 [main:61] - GENERATED IS CALL =false
2021-03-12 09:50:52,975 [main:67] - randomType = Float
2021-03-12 09:50:53,130 [main:302] - generating value of type = Float true depth = 0
2021-03-12 09:50:53,192 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@5cca8100]
2021-03-12 09:50:53,193 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a23df8]
2021-03-12 09:50:53,337 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:53,340 [main:78] - Generated call from random type = (0.6264218f).toShort().toString(1917747789)
2021-03-12 09:50:53,340 [main:106] - GETTING String from String
2021-03-12 09:50:53,381 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a97bc42]]
2021-03-12 09:50:53,381 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a97bc42]
2021-03-12 09:50:53,381 [main:117] - GENERATED CALL = (foo()).trim()
2021-03-12 09:50:53,381 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7220aca3]]
2021-03-12 09:50:53,381 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:50:53,534 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:53,683 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:53,685 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7220aca3]
2021-03-12 09:50:53,844 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:50:54,001 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:50:54,004 [main:117] - GENERATED CALL = (foo()).subSequence(-1673503991, -1695164318).commonPrefixWith("obglm", true)
2021-03-12 09:50:54,004 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58a36d97]]
2021-03-12 09:50:54,004 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58a36d97]
2021-03-12 09:50:54,004 [main:117] - GENERATED CALL = (foo()).decapitalize()
2021-03-12 09:50:54,004 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73d56a53]]
2021-03-12 09:50:54,004 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:50:54,145 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:54,147 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73d56a53]
2021-03-12 09:50:54,148 [main:117] - GENERATED CALL = (foo()).get(-1373312006).plus(foo("kznso"))
2021-03-12 09:50:54,148 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9a9268]]
2021-03-12 09:50:54,148 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9a9268]
2021-03-12 09:50:54,294 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:50:54,296 [main:117] - GENERATED CALL = (foo()).substringAfter('ặ', foo())
2021-03-12 09:50:54,296 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7154703a]]
2021-03-12 09:50:54,296 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7154703a]
2021-03-12 09:50:54,429 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:50:54,431 [main:117] - GENERATED CALL = (foo()).replaceBefore('␥', foo("kznso"), foo())
2021-03-12 09:50:54,431 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@667cae1c]]
2021-03-12 09:50:54,432 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@667cae1c]
2021-03-12 09:50:54,596 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:54,763 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:50:54,765 [main:117] - GENERATED CALL = (foo()).padStart(1507827362, '⡿')
2021-03-12 09:50:54,766 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bbbb64c]]
2021-03-12 09:50:54,766 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bbbb64c]
2021-03-12 09:50:54,879 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:50:55,022 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:50:55,024 [main:117] - GENERATED CALL = (foo()).commonSuffixWith("uymqk", false)
2021-03-12 09:50:55,024 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15752ae9]]
2021-03-12 09:50:55,024 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15752ae9]
2021-03-12 09:50:55,176 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:50:55,179 [main:117] - GENERATED CALL = (foo()).replaceBeforeLast('矑', foo(), foo())
2021-03-12 09:50:55,179 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@175c99ba]]
2021-03-12 09:50:55,180 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@175c99ba]
2021-03-12 09:50:55,180 [main:117] - GENERATED CALL = (foo()).uppercase()
2021-03-12 09:50:55,180 [main:114] - replacement of "tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n") of type String is (foo()).commonSuffixWith("uymqk", false)
2021-03-12 09:50:55,300 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:50:55,301 [main:66] - Compilation checking started
2021-03-12 09:50:55,928 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw RuntimeException("Unexpected result: ${IllegalArgumentException()?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "nmesx"
    }

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:50:55,931 [main:107] - replacing (prope2, String)
2021-03-12 09:50:55,932 [main:50] - replacing prope2 String
2021-03-12 09:50:55,932 [main:54] - Getting value of type String
2021-03-12 09:50:56,083 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:50:56,087 [main:58] - GENERATED VALUE OF TYPE String = "bdasu"
2021-03-12 09:50:56,087 [main:61] - GENERATED IS CALL =false
2021-03-12 09:50:56,100 [main:67] - randomType = String?
2021-03-12 09:50:56,239 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:50:56,277 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6af2203]
2021-03-12 09:50:56,393 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:50:56,393 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48bf8b9]
2021-03-12 09:50:56,541 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:50:56,543 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:50:56,546 [main:78] - Generated call from random type = ("qemtb")?.plus("nmduf").dropLastWhile({a: Char -> true})
2021-03-12 09:50:56,546 [main:114] - replacement of prope2 of type String is ("qemtb")?.plus("nmduf").dropLastWhile({a: Char -> true})
2021-03-12 09:50:56,680 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:50:56,680 [main:66] - Compilation checking started
2021-03-12 09:50:57,042 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw RuntimeException("Unexpected result: ${IllegalArgumentException()?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 {
        ("qemtb")?.plus("nmduf").dropLastWhile({a: Char -> true}) = "nmesx"
    }

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:50:57,045 [main:107] - replacing (", got ", String)
2021-03-12 09:50:57,046 [main:50] - replacing ", got " String
2021-03-12 09:50:57,046 [main:54] - Getting value of type String
2021-03-12 09:50:57,214 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:50:57,216 [main:58] - GENERATED VALUE OF TYPE String = "itblw"
2021-03-12 09:50:57,217 [main:61] - GENERATED IS CALL =false
2021-03-12 09:50:57,386 [main:67] - randomType = UByte
2021-03-12 09:50:57,523 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 09:50:57,568 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a89e456]
2021-03-12 09:50:57,704 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:57,708 [main:78] - Generated call from random type = (28.toUByte()).toString(-1090752276)
2021-03-12 09:50:57,708 [main:106] - GETTING String from String
2021-03-12 09:50:57,745 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d2bf30b]]
2021-03-12 09:50:57,745 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d2bf30b]
2021-03-12 09:50:57,906 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:50:57,908 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:50:57,910 [main:117] - GENERATED CALL = (foo("kznso")).filter({a: Char -> false})
2021-03-12 09:50:57,910 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d45bf2b]]
2021-03-12 09:50:57,910 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d45bf2b]
2021-03-12 09:50:58,032 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:50:58,034 [main:117] - GENERATED CALL = (foo("kznso")).replaceAfter('₄', foo(), foo())
2021-03-12 09:50:58,034 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@775f732d]]
2021-03-12 09:50:58,034 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:50:58,161 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:58,305 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:58,308 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@775f732d]
2021-03-12 09:50:58,432 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:58,572 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:58,574 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(1744750880, 1642851291).substring(-236296399, 642074342)
2021-03-12 09:50:58,574 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70fce245]]
2021-03-12 09:50:58,574 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:50:58,695 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:58,821 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:50:58,823 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70fce245]
2021-03-12 09:50:58,950 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 09:50:59,084 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 09:50:59,087 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 09:50:59,516 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:50:59,518 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 09:50:59,645 [main:43] - GENERATING CALL OF fun <E> buildSet(capacity: kotlin.Int, builderAction: kotlin.collections.MutableSet<RegexOption>.()->kotlin.Unit): Set<RegexOption> = TODO()
2021-03-12 09:50:59,648 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildSet(capacity: kotlin.Int, builderAction: kotlin.collections.MutableSet<RegexOption>.()->kotlin.Unit): Set<RegexOption> = TODO()
2021-03-12 09:51:00,122 [main:302] - generating value of type = Int true depth = 6
2021-03-12 09:51:00,126 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<RegexOption>, Unit> false depth = 6
2021-03-12 09:51:00,128 [main:302] - generating value of type = Unit false depth = 7
2021-03-12 09:51:00,375 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 09:51:00,380 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 09:51:00,725 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 10
2021-03-12 09:51:00,727 [main:302] - generating value of type = Unit false depth = 11
2021-03-12 09:51:00,901 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:51:00,904 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:51:01,384 [main:302] - generating value of type = Boolean true depth = 14
2021-03-12 09:51:01,386 [main:302] - generating value of type = Function0<Any> false depth = 14
2021-03-12 09:51:01,388 [main:302] - generating value of type = Any false depth = 15
2021-03-12 09:51:01,388 [main:95] - GENERATED = require(true, { "lnuaj"})
2021-03-12 09:51:01,388 [main:95] - GENERATED = contract({ require(true, { "lnuaj"})})
2021-03-12 09:51:01,388 [main:95] - GENERATED = buildSet<RegexOption>(-1492098959, { contract({ require(true, { "lnuaj"})})})
2021-03-12 09:51:01,389 [main:95] - GENERATED = Regex("krmxj", buildSet<RegexOption>(-1492098959, { contract({ require(true, { "lnuaj"})})}))
2021-03-12 09:51:01,538 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 09:51:01,540 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 09:51:01,729 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:51:01,734 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:51:02,116 [main:302] - generating value of type = String true depth = 4
2021-03-12 09:51:02,119 [main:95] - GENERATED = StringBuilder("flham")
2021-03-12 09:51:02,120 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(327363162, -749246635).replace(Regex("krmxj", buildSet<RegexOption>(-1492098959, { contract({ require(true, { "lnuaj"})})})), {a: MatchResult -> StringBuilder("flham")})
2021-03-12 09:51:02,120 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]]
2021-03-12 09:51:02,120 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]
2021-03-12 09:51:02,267 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:02,270 [main:117] - GENERATED CALL = (foo("kznso")).length.toString(-1200751537)
2021-03-12 09:51:02,270 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70a40148]]
2021-03-12 09:51:02,270 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:51:02,427 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:02,429 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70a40148]
2021-03-12 09:51:02,430 [main:117] - GENERATED CALL = (foo("kznso")).get(340558773).lowercase()
2021-03-12 09:51:02,430 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7872be90]]
2021-03-12 09:51:02,430 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7872be90]
2021-03-12 09:51:02,601 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:51:02,603 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:51:02,606 [main:117] - GENERATED CALL = (foo("kznso")).takeWhile({a: Char -> true})
2021-03-12 09:51:02,606 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34db013e]]
2021-03-12 09:51:02,606 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:51:02,758 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:02,946 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:02,950 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34db013e]
2021-03-12 09:51:03,130 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:03,133 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(2017063439, 2069598472).repeat(1650612652)
2021-03-12 09:51:03,133 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572d84e2]]
2021-03-12 09:51:03,133 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572d84e2]
2021-03-12 09:51:03,277 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:03,438 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:51:03,440 [main:117] - GENERATED CALL = (foo("kznso")).padEnd(-845797644, 'ﱰ')
2021-03-12 09:51:03,440 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60e957e9]]
2021-03-12 09:51:03,440 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60e957e9]
2021-03-12 09:51:03,593 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:51:03,599 [main:117] - GENERATED CALL = (foo("kznso")).removeSuffix("yppkd")
2021-03-12 09:51:03,599 [main:114] - replacement of ", got " of type String is foo("kznso")
2021-03-12 09:51:03,759 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(CALL_EXPRESSION)
2021-03-12 09:51:03,759 [main:66] - Compilation checking started
2021-03-12 09:51:04,513 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw RuntimeException("Unexpected result: ${IllegalArgumentException()?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "nmesx"
    }

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + foo("kznso") + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:51:04,516 [main:107] - replacing (0, Int)
2021-03-12 09:51:04,517 [main:50] - replacing 0 Int
2021-03-12 09:51:04,517 [main:54] - Getting value of type Int
2021-03-12 09:51:04,714 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:04,717 [main:58] - GENERATED VALUE OF TYPE Int = 58638127
2021-03-12 09:51:04,717 [main:61] - GENERATED IS CALL =false
2021-03-12 09:51:04,886 [main:67] - randomType = UByte
2021-03-12 09:51:05,031 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 09:51:05,088 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@162addfb]
2021-03-12 09:51:05,089 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3fba84ff]
2021-03-12 09:51:05,089 [main:78] - Generated call from random type = (65.toUByte()).toShort().countOneBits()
2021-03-12 09:51:05,090 [main:106] - GETTING Int from String
2021-03-12 09:51:05,127 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3f8d1391]]
2021-03-12 09:51:05,127 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:51:05,127 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3f8d1391]
2021-03-12 09:51:05,127 [main:117] - GENERATED CALL = (foo("kznso")).compareTo(foo("kznso")).countLeadingZeroBits()
2021-03-12 09:51:05,127 [main:113] - Case = [public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4650e9d1]]
2021-03-12 09:51:05,127 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4650e9d1]
2021-03-12 09:51:05,305 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:51:05,465 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:05,624 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:51:05,626 [main:117] - GENERATED CALL = (foo("kznso")).indexOf('', 1253042971, false)
2021-03-12 09:51:05,626 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39a5937a]]
2021-03-12 09:51:05,626 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39a5937a]
2021-03-12 09:51:05,626 [main:117] - GENERATED CALL = (foo("kznso")).length.inv()
2021-03-12 09:51:05,626 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65fa344]]
2021-03-12 09:51:05,626 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:51:05,626 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65fa344]
2021-03-12 09:51:05,818 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:05,822 [main:117] - GENERATED CALL = (foo("kznso")).compareTo(foo("kznso")).or(-1370802914)
2021-03-12 09:51:05,822 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6e868b0d]]
2021-03-12 09:51:05,822 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6e868b0d]
2021-03-12 09:51:06,016 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:06,020 [main:117] - GENERATED CALL = (foo("kznso")).length.rotateLeft(529147282)
2021-03-12 09:51:06,020 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57e52459]]
2021-03-12 09:51:06,020 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:51:06,020 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57e52459]
2021-03-12 09:51:06,192 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:06,194 [main:117] - GENERATED CALL = (foo("kznso")).compareTo(foo("kznso")).and(-33472774)
2021-03-12 09:51:06,194 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109d23de]]
2021-03-12 09:51:06,194 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109d23de]
2021-03-12 09:51:06,396 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 09:51:06,400 [main:302] - generating value of type = Int true depth = 1
2021-03-12 09:51:06,403 [main:117] - GENERATED CALL = (foo("kznso")).sumOf({a: Char -> -135204577})
2021-03-12 09:51:06,404 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78188cc6]]
2021-03-12 09:51:06,404 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78188cc6]
2021-03-12 09:51:06,404 [main:117] - GENERATED CALL = (foo("kznso")).length.toInt()
2021-03-12 09:51:06,404 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3430415c]]
2021-03-12 09:51:06,404 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:51:06,404 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3430415c]
2021-03-12 09:51:06,587 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:51:06,590 [main:117] - GENERATED CALL = (foo("kznso")).compareTo(foo()).minus(-86)
2021-03-12 09:51:06,590 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ece8455]]
2021-03-12 09:51:06,591 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ece8455]
2021-03-12 09:51:06,591 [main:117] - GENERATED CALL = (foo("kznso")).length.unaryPlus()
2021-03-12 09:51:06,591 [main:114] - replacement of 0 of type Int is (foo("kznso")).length.toInt()
2021-03-12 09:51:06,738 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:51:06,738 [main:66] - Compilation checking started
2021-03-12 09:51:07,339 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw RuntimeException("Unexpected result: ${IllegalArgumentException()?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "nmesx"
    }

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + foo("kznso") + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:51:07,341 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 09:51:07,341 [main:50] - replacing getOrThrow() Any?
2021-03-12 09:51:07,341 [main:54] - Getting value of type Any?
2021-03-12 09:51:07,509 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:51:07,509 [main:58] - GENERATED VALUE OF TYPE Any? = "lrckx"
2021-03-12 09:51:07,510 [main:61] - GENERATED IS CALL =false
2021-03-12 09:51:07,686 [main:67] - randomType = Kla5
2021-03-12 09:51:07,832 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 09:51:07,834 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}
2021-03-12 09:51:07,862 [main:106] - GETTING Any? from String
2021-03-12 09:51:07,891 [main:106] - GETTING Any? from String
2021-03-12 09:51:07,891 [main:114] - replacement of getOrThrow() of type Any? is "lrckx"
2021-03-12 09:51:08,048 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 09:51:08,048 [main:66] - Compilation checking started
2021-03-12 09:51:08,452 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw RuntimeException("Unexpected result: ${IllegalArgumentException()?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 {
        prope2 = "nmesx"
    }

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2."lrckx"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + foo("kznso") + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:51:08,454 [main:107] - replacing (prope2.isSuccess, Boolean)
2021-03-12 09:51:08,454 [main:50] - replacing prope2.isSuccess Boolean
2021-03-12 09:51:08,454 [main:54] - Getting value of type Boolean
2021-03-12 09:51:08,598 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:51:08,602 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 09:51:08,602 [main:61] - GENERATED IS CALL =false
2021-03-12 09:51:08,909 [main:67] - randomType = Double?
2021-03-12 09:51:09,050 [main:302] - generating value of type = Double true depth = 0
2021-03-12 09:51:09,108 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@62efa1c3]
2021-03-12 09:51:09,242 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:51:09,243 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ba63f8c]
2021-03-12 09:51:09,361 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:51:09,363 [main:78] - Generated call from random type = (0.10658701120846448)?.equals("teerv").or(true)
2021-03-12 09:51:09,363 [main:114] - replacement of prope2.isSuccess of type Boolean is (0.10658701120846448)?.equals("teerv").or(true)
2021-03-12 09:51:09,504 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:51:09,506 [main:107] - replacing (createCoroutine(Kla0), Continuation<Unit>)
2021-03-12 09:51:09,506 [main:50] - replacing createCoroutine(Kla0) Continuation<Unit>
2021-03-12 09:51:09,506 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 09:51:09,641 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 09:51:09,766 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 09:51:09,769 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 09:51:10,211 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 09:51:10,364 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:51:10,367 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:51:10,656 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 09:51:10,812 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:51:10,815 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:51:11,287 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:51:11,288 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:51:11,288 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 09:51:11,288 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 09:51:11,292 [main:67] - randomType = String
2021-03-12 09:51:11,436 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:51:11,469 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 09:51:11,500 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 09:51:11,500 [main:111] - Cant find and generate replacement for createCoroutine(Kla0) type Continuation<Unit>
2021-03-12 09:51:11,500 [main:107] - replacing ({
        prope2 = "nmesx"
    }, SuspendFunction0<Unit>)
2021-03-12 09:51:11,501 [main:50] - replacing {
        prope2 = "nmesx"
    } SuspendFunction0<Unit>
2021-03-12 09:51:11,501 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 09:51:11,617 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 09:51:11,620 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:51:11,763 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:51:11,766 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:51:12,177 [main:302] - generating value of type = Int true depth = 4
2021-03-12 09:51:12,179 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 09:51:12,181 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 09:51:12,348 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:51:12,352 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:51:12,814 [main:302] - generating value of type = Int true depth = 8
2021-03-12 09:51:12,816 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 09:51:12,818 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 09:51:12,962 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:51:12,965 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:51:13,417 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 09:51:13,419 [main:302] - generating value of type = Function0<Any> false depth = 12
2021-03-12 09:51:13,422 [main:302] - generating value of type = Any false depth = 13
2021-03-12 09:51:13,422 [main:95] - GENERATED = require(true, { "azqke"})
2021-03-12 09:51:13,422 [main:95] - GENERATED = repeat(-1741643631, {a: Int -> require(true, { "azqke"})})
2021-03-12 09:51:13,422 [main:95] - GENERATED = repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})
2021-03-12 09:51:13,423 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}
2021-03-12 09:51:13,423 [main:61] - GENERATED IS CALL =false
2021-03-12 09:51:13,602 [main:67] - randomType = Float
2021-03-12 09:51:13,738 [main:302] - generating value of type = Float true depth = 0
2021-03-12 09:51:13,791 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 09:51:13,824 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 09:51:13,824 [main:114] - replacement of {
        prope2 = "nmesx"
    } of type SuspendFunction0<Unit> is { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}
2021-03-12 09:51:13,955 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 09:51:13,955 [main:66] - Compilation checking started
2021-03-12 09:51:14,578 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw RuntimeException("Unexpected result: ${IllegalArgumentException()?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + foo("kznso") + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (13638).toChar().isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:51:14,581 [main:107] - replacing (prope2.getOrThrow(), Ty0)
2021-03-12 09:51:14,581 [main:50] - replacing prope2.getOrThrow() Ty0
2021-03-12 09:51:14,581 [main:54] - Getting value of type Ty0
2021-03-12 09:51:14,744 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 09:51:14,751 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 09:51:15,056 [main:67] - randomType = MutableMap<Char, Long>
2021-03-12 09:51:15,057 [main:106] - GETTING Ty0 from String
2021-03-12 09:51:15,088 [main:106] - GETTING Ty0 from String
2021-03-12 09:51:15,088 [main:111] - Cant find and generate replacement for prope2.getOrThrow() type Ty0
2021-03-12 09:51:15,088 [main:107] - replacing (checkFinished && (13638).toChar().isDefined(), Boolean)
2021-03-12 09:51:15,088 [main:50] - replacing checkFinished && (13638).toChar().isDefined() Boolean
2021-03-12 09:51:15,088 [main:54] - Getting value of type Boolean
2021-03-12 09:51:15,230 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:51:15,233 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 09:51:15,233 [main:61] - GENERATED IS CALL =false
2021-03-12 09:51:15,531 [main:67] - randomType = Sequence<Byte>
2021-03-12 09:51:15,532 [main:106] - GETTING Boolean from String
2021-03-12 09:51:15,555 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd7bc01]]
2021-03-12 09:51:15,555 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:51:15,692 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:15,694 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd7bc01]
2021-03-12 09:51:15,695 [main:117] - GENERATED CALL = (foo("kznso")).get(-465963514).isLetterOrDigit()
2021-03-12 09:51:15,695 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cff845a]]
2021-03-12 09:51:15,695 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:51:15,820 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:15,958 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:15,961 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cff845a]
2021-03-12 09:51:16,101 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:51:16,104 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:51:16,107 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(-940854575, -396085068).all({a: Char -> false})
2021-03-12 09:51:16,107 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36baf748]]
2021-03-12 09:51:16,107 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:51:16,242 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:16,367 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:16,371 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36baf748]
2021-03-12 09:51:16,372 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(-1246220532, 1706597548).isEmpty()
2021-03-12 09:51:16,372 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]]
2021-03-12 09:51:16,372 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]
2021-03-12 09:51:16,526 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:16,721 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:51:16,889 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:17,040 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:17,186 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:51:17,189 [main:117] - GENERATED CALL = (foo("kznso")).regionMatches(1116530732, StringBuilder(), -858042031, 1861536609, true)
2021-03-12 09:51:17,189 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e81170]]
2021-03-12 09:51:17,189 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:51:17,308 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:17,460 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:17,463 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e81170]
2021-03-12 09:51:17,463 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(-206562429, -694814175).none()
2021-03-12 09:51:17,463 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71b52a09]]
2021-03-12 09:51:17,463 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:51:17,604 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:17,607 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71b52a09]
2021-03-12 09:51:17,607 [main:117] - GENERATED CALL = (foo("kznso")).get(-1968294341).isTitleCase()
2021-03-12 09:51:17,607 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4563cc3c]]
2021-03-12 09:51:17,607 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:51:17,729 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:17,733 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4563cc3c]
2021-03-12 09:51:17,733 [main:117] - GENERATED CALL = (foo("kznso")).get(1429351121).isSurrogate()
2021-03-12 09:51:17,733 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70232b31]]
2021-03-12 09:51:17,733 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]
2021-03-12 09:51:17,871 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:51:17,871 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70232b31]
2021-03-12 09:51:17,871 [main:117] - GENERATED CALL = (foo("kznso")).equals("vnfpb").not()
2021-03-12 09:51:17,871 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]]
2021-03-12 09:51:17,871 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]
2021-03-12 09:51:18,007 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:51:18,007 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]
2021-03-12 09:51:18,131 [main:117] - GENERATED CALL = (foo("kznso")).equals("fqqen").equals(null)
2021-03-12 09:51:18,131 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12335ae5]]
2021-03-12 09:51:18,131 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12335ae5]
2021-03-12 09:51:18,131 [main:117] - GENERATED CALL = (foo("kznso")).any()
2021-03-12 09:51:18,131 [main:114] - replacement of checkFinished && (13638).toChar().isDefined() of type Boolean is (foo("kznso")).get(1429351121).isSurrogate()
2021-03-12 09:51:18,271 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:51:18,272 [main:66] - Compilation checking started
2021-03-12 09:51:18,878 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw RuntimeException("Unexpected result: ${IllegalArgumentException()?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + foo("kznso") + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:51:18,880 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 09:51:18,880 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 09:51:18,880 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 09:51:19,039 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 09:51:19,044 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 09:51:19,201 [main:67] - randomType = Kla5
2021-03-12 09:51:19,320 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 09:51:19,323 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}
2021-03-12 09:51:19,353 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 09:51:19,381 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 09:51:19,381 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 09:51:19,381 [main:107] - replacing ({ (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) }, Function0<Boolean>)
2021-03-12 09:51:19,381 [main:50] - replacing { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } Function0<Boolean>
2021-03-12 09:51:19,381 [main:54] - Getting value of type Function0<Boolean>
2021-03-12 09:51:19,516 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-12 09:51:19,520 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:51:19,523 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-12 09:51:19,523 [main:61] - GENERATED IS CALL =false
2021-03-12 09:51:19,692 [main:67] - randomType = UByte
2021-03-12 09:51:19,852 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 09:51:19,889 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 09:51:19,913 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 09:51:19,914 [main:114] - replacement of { (foo()).subSequence(-1740937211, 1473545661).matches(Regex("wkzot", kotlin.text.RegexOption.IGNORE_CASE)) } of type Function0<Boolean> is { true}
2021-03-12 09:51:20,061 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 09:51:20,062 [main:66] - Compilation checking started
2021-03-12 09:51:20,641 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw RuntimeException("Unexpected result: ${IllegalArgumentException()?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + foo("kznso") + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:51:20,643 [main:107] - replacing ("Continuation " + c, String)
2021-03-12 09:51:20,643 [main:50] - replacing "Continuation " + c String
2021-03-12 09:51:20,643 [main:54] - Getting value of type String
2021-03-12 09:51:20,820 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:51:20,824 [main:58] - GENERATED VALUE OF TYPE String = "efxvj"
2021-03-12 09:51:20,824 [main:61] - GENERATED IS CALL =false
2021-03-12 09:51:20,835 [main:67] - randomType = Kla3
2021-03-12 09:51:20,968 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 09:51:20,971 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}
2021-03-12 09:51:20,977 [main:106] - GETTING String from String
2021-03-12 09:51:21,009 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@667cae1c]]
2021-03-12 09:51:21,009 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@667cae1c]
2021-03-12 09:51:21,127 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:21,269 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:51:21,272 [main:117] - GENERATED CALL = (foo("kznso")).padStart(787196395, '綗')
2021-03-12 09:51:21,272 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6af2203]]
2021-03-12 09:51:21,272 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6af2203]
2021-03-12 09:51:21,407 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:51:21,407 [main:117] - GENERATED CALL = (foo("kznso")).plus("oqstr")
2021-03-12 09:51:21,407 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3ae7ef]]
2021-03-12 09:51:21,407 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3ae7ef]
2021-03-12 09:51:21,543 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:21,545 [main:117] - GENERATED CALL = (foo("kznso")).take(1505380128)
2021-03-12 09:51:21,545 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48bf8b9]]
2021-03-12 09:51:21,545 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48bf8b9]
2021-03-12 09:51:21,677 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:51:21,679 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:51:21,682 [main:117] - GENERATED CALL = (foo("kznso")).dropLastWhile({a: Char -> false})
2021-03-12 09:51:21,682 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ceeeaf7]]
2021-03-12 09:51:21,682 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:51:21,848 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:21,851 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ceeeaf7]
2021-03-12 09:51:21,852 [main:117] - GENERATED CALL = (foo("kznso")).get(-703731274).uppercase()
2021-03-12 09:51:21,852 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58a36d97]]
2021-03-12 09:51:21,852 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58a36d97]
2021-03-12 09:51:21,852 [main:117] - GENERATED CALL = (foo("kznso")).decapitalize()
2021-03-12 09:51:21,852 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@403f1bb7]]
2021-03-12 09:51:21,852 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:51:21,984 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:22,104 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:22,106 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@403f1bb7]
2021-03-12 09:51:22,271 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 09:51:22,399 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 09:51:22,403 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 09:51:22,864 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:51:22,867 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 09:51:22,990 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): Set<RegexOption> = TODO()
2021-03-12 09:51:22,993 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): Set<RegexOption> = TODO()
2021-03-12 09:51:23,144 [main:95] - GENERATED = linkedSetOf<RegexOption>()
2021-03-12 09:51:23,144 [main:95] - GENERATED = Regex("ilfca", linkedSetOf<RegexOption>())
2021-03-12 09:51:23,144 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(244207558, -1702327638).replaceFirst(Regex("ilfca", linkedSetOf<RegexOption>()), foo())
2021-03-12 09:51:23,144 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572d84e2]]
2021-03-12 09:51:23,144 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572d84e2]
2021-03-12 09:51:23,288 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:23,460 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:51:23,463 [main:117] - GENERATED CALL = (foo("kznso")).padEnd(-584318137, '瀫')
2021-03-12 09:51:23,463 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73d56a53]]
2021-03-12 09:51:23,463 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:51:23,613 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:23,616 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73d56a53]
2021-03-12 09:51:23,754 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:51:23,757 [main:117] - GENERATED CALL = (foo("kznso")).get(-1659215910).plus("kkfgi")
2021-03-12 09:51:23,757 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b40f50a]]
2021-03-12 09:51:23,757 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b40f50a]
2021-03-12 09:51:23,903 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:51:24,047 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:51:24,050 [main:117] - GENERATED CALL = (foo("kznso")).substringAfterLast('㓄', "vqain")
2021-03-12 09:51:24,050 [main:114] - replacement of "Continuation " + c of type String is (foo("kznso")).get(-703731274).uppercase()
2021-03-12 09:51:24,188 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:51:24,188 [main:66] - Compilation checking started
2021-03-12 09:51:24,776 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw RuntimeException("Unexpected result: ${IllegalArgumentException()?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + foo("kznso") + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:51:24,779 [main:107] - replacing (false, Boolean)
2021-03-12 09:51:24,779 [main:50] - replacing false Boolean
2021-03-12 09:51:24,779 [main:54] - Getting value of type Boolean
2021-03-12 09:51:24,957 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:51:24,960 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 09:51:24,960 [main:61] - GENERATED IS CALL =false
2021-03-12 09:51:25,269 [main:67] - randomType = Function1<Kla5, Boolean>
2021-03-12 09:51:25,271 [main:106] - GETTING Boolean from String
2021-03-12 09:51:25,292 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ef52922]]
2021-03-12 09:51:25,292 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ef52922]
2021-03-12 09:51:25,292 [main:117] - GENERATED CALL = (foo("kznso")).isNotEmpty()
2021-03-12 09:51:25,292 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56d70c33]]
2021-03-12 09:51:25,292 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56d70c33]
2021-03-12 09:51:25,452 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:51:25,589 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:51:25,592 [main:117] - GENERATED CALL = (foo("kznso")).contains('?', false)
2021-03-12 09:51:25,592 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]]
2021-03-12 09:51:25,592 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]
2021-03-12 09:51:25,713 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:51:25,713 [main:117] - GENERATED CALL = (foo("kznso")).equals("hjcmf")
2021-03-12 09:51:25,713 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76e01234]]
2021-03-12 09:51:25,713 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:51:25,854 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:25,980 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:25,983 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76e01234]
2021-03-12 09:51:26,129 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:51:26,310 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:51:26,313 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(-596682156, 397482104).endsWith('?', true)
2021-03-12 09:51:26,313 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7555e4a8]]
2021-03-12 09:51:26,313 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:51:26,441 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:26,443 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7555e4a8]
2021-03-12 09:51:26,444 [main:117] - GENERATED CALL = (foo("kznso")).get(904448881).isDigit()
2021-03-12 09:51:26,444 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]]
2021-03-12 09:51:26,444 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]
2021-03-12 09:51:26,444 [main:117] - GENERATED CALL = (foo("kznso")).isNotBlank()
2021-03-12 09:51:26,444 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6634e609]]
2021-03-12 09:51:26,444 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6634e609]
2021-03-12 09:51:26,581 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:51:26,697 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:51:26,700 [main:117] - GENERATED CALL = (foo("kznso")).startsWith("mivds", false)
2021-03-12 09:51:26,700 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65ea5d55]]
2021-03-12 09:51:26,700 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:51:26,836 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:26,838 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65ea5d55]
2021-03-12 09:51:26,839 [main:117] - GENERATED CALL = (foo("kznso")).get(-1815689386).isDefined()
2021-03-12 09:51:26,839 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd2cf85]]
2021-03-12 09:51:26,839 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:51:26,962 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:26,965 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd2cf85]
2021-03-12 09:51:26,965 [main:117] - GENERATED CALL = (foo("kznso")).get(1587959925).isWhitespace()
2021-03-12 09:51:26,966 [main:113] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@425b151f]]
2021-03-12 09:51:26,966 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@425b151f]
2021-03-12 09:51:26,966 [main:117] - GENERATED CALL = (foo("kznso")).matches(foo())
2021-03-12 09:51:26,966 [main:114] - replacement of false of type Boolean is (foo("kznso")).isNotEmpty()
2021-03-12 09:51:27,139 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:51:27,139 [main:66] - Compilation checking started
2021-03-12 09:51:27,768 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw RuntimeException("Unexpected result: ${IllegalArgumentException()?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + foo("kznso") + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:51:27,771 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i, String)
2021-03-12 09:51:27,772 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i String
2021-03-12 09:51:27,772 [main:54] - Getting value of type String
2021-03-12 09:51:27,924 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:51:27,928 [main:58] - GENERATED VALUE OF TYPE String = "ugyyf"
2021-03-12 09:51:27,928 [main:61] - GENERATED IS CALL =false
2021-03-12 09:51:28,777 [main:67] - randomType = HashSet<Kla2<Short?>>?
2021-03-12 09:51:28,918 [main:302] - generating value of type = HashSet<Kla2<Short?>> false depth = 0
2021-03-12 09:51:29,048 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Kla2<Short?>): HashSet<Kla2<Short?>> = TODO()
2021-03-12 09:51:29,051 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Kla2<Short?>): HashSet<Kla2<Short?>> = TODO()
2021-03-12 09:51:29,191 [main:302] - generating value of type = Kla2<Short?> false depth = 3
2021-03-12 09:51:29,193 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 09:51:29,827 [main:302] - generating value of type = Kla5 false depth = 5
2021-03-12 09:51:29,830 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}
2021-03-12 09:51:29,830 [main:95] - GENERATED = linkedSetOf<Kla2<Short?>>(Kla5)
2021-03-12 09:51:30,033 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@72f5bb69]
2021-03-12 09:51:30,033 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@47d52974]
2021-03-12 09:51:30,034 [main:78] - Generated call from random type = (linkedSetOf<Kla2<Short?>>(Kla5))?.toArray().contentDeepToString()
2021-03-12 09:51:30,034 [main:106] - GETTING String from String
2021-03-12 09:51:30,064 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6bff3]]
2021-03-12 09:51:30,064 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6bff3]
2021-03-12 09:51:30,183 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:30,186 [main:117] - GENERATED CALL = (foo()).substring(372111683)
2021-03-12 09:51:30,186 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572d84e2]]
2021-03-12 09:51:30,186 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572d84e2]
2021-03-12 09:51:30,325 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:30,458 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:51:30,461 [main:117] - GENERATED CALL = (foo()).padEnd(-966369828, '䁣')
2021-03-12 09:51:30,461 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48bf8b9]]
2021-03-12 09:51:30,461 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48bf8b9]
2021-03-12 09:51:30,598 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:51:30,601 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:51:30,604 [main:117] - GENERATED CALL = (foo()).dropLastWhile({a: Char -> true})
2021-03-12 09:51:30,604 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7872be90]]
2021-03-12 09:51:30,604 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7872be90]
2021-03-12 09:51:30,753 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:51:30,755 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:51:30,758 [main:117] - GENERATED CALL = (foo()).takeWhile({a: Char -> true})
2021-03-12 09:51:30,758 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7220aca3]]
2021-03-12 09:51:30,758 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:51:30,886 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:31,024 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:31,027 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7220aca3]
2021-03-12 09:51:31,152 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:51:31,299 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:51:31,303 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:51:31,623 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:51:31,626 [main:95] - GENERATED = StringBuilder("pkrtw")
2021-03-12 09:51:31,762 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:51:31,765 [main:117] - GENERATED CALL = (foo()).subSequence(-1761822978, -1553440589).commonPrefixWith(StringBuilder("pkrtw"), true)
2021-03-12 09:51:31,765 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e75d52a]]
2021-03-12 09:51:31,765 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e75d52a]
2021-03-12 09:51:31,766 [main:117] - GENERATED CALL = (foo()).concat(foo("kznso"))
2021-03-12 09:51:31,766 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bbbb64c]]
2021-03-12 09:51:31,766 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bbbb64c]
2021-03-12 09:51:31,925 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:51:32,056 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:51:32,059 [main:117] - GENERATED CALL = (foo()).commonSuffixWith(StringBuilder(), true)
2021-03-12 09:51:32,059 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d45bf2b]]
2021-03-12 09:51:32,059 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d45bf2b]
2021-03-12 09:51:32,177 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:51:32,180 [main:117] - GENERATED CALL = (foo()).replaceAfter('', foo(), foo("kznso"))
2021-03-12 09:51:32,180 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb1b04c]]
2021-03-12 09:51:32,180 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb1b04c]
2021-03-12 09:51:32,340 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:32,345 [main:117] - GENERATED CALL = (foo()).drop(473965213)
2021-03-12 09:51:32,345 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34db013e]]
2021-03-12 09:51:32,345 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:51:32,541 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:32,727 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:32,731 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34db013e]
2021-03-12 09:51:32,908 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:32,911 [main:117] - GENERATED CALL = (foo()).subSequence(2140221284, 748904361).repeat(-1238988846)
2021-03-12 09:51:32,911 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i of type String is "ugyyf"
2021-03-12 09:51:33,046 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 09:51:33,046 [main:66] - Compilation checking started
2021-03-12 09:51:33,775 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw RuntimeException("Unexpected result: ${IllegalArgumentException()?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if (prope4 != i) error("ugyyf" + foo("kznso") + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:51:33,778 [main:107] - replacing (this.prope2, Any?)
2021-03-12 09:51:33,778 [main:50] - replacing this.prope2 Any?
2021-03-12 09:51:33,778 [main:54] - Getting value of type Any?
2021-03-12 09:51:33,926 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:51:33,926 [main:58] - GENERATED VALUE OF TYPE Any? = "tgzxh"
2021-03-12 09:51:33,926 [main:61] - GENERATED IS CALL =false
2021-03-12 09:51:34,082 [main:67] - randomType = Kla5
2021-03-12 09:51:34,244 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 09:51:34,247 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}
2021-03-12 09:51:34,271 [main:106] - GETTING Any? from String
2021-03-12 09:51:34,293 [main:106] - GETTING Any? from String
2021-03-12 09:51:34,293 [main:114] - replacement of this.prope2 of type Any? is "tgzxh"
2021-03-12 09:51:34,437 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 09:51:34,438 [main:66] - Compilation checking started
2021-03-12 09:51:34,822 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw RuntimeException("Unexpected result: ${IllegalArgumentException()?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        "tgzxh" = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if (prope4 != i) error("ugyyf" + foo("kznso") + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:51:34,824 [main:107] - replacing ({ x ->}, Function1<Continuation<Any>, Unit>)
2021-03-12 09:51:34,824 [main:50] - replacing { x ->} Function1<Continuation<Any>, Unit>
2021-03-12 09:51:34,824 [main:54] - Getting value of type Function1<Continuation<Any>, Unit>
2021-03-12 09:51:35,004 [main:302] - generating value of type = Function1<Continuation<Any>, Unit> false depth = 0
2021-03-12 09:51:35,008 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:51:35,164 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 09:51:35,169 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 09:51:35,495 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 09:51:35,498 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 09:51:35,699 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 09:51:35,705 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 09:51:36,047 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 09:51:36,050 [main:95] - GENERATED = require(true)
2021-03-12 09:51:36,051 [main:95] - GENERATED = contract({ require(true)})
2021-03-12 09:51:36,051 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Any>, Unit> = {a: Continuation<Any> -> contract({ require(true)})}
2021-03-12 09:51:36,051 [main:61] - GENERATED IS CALL =false
2021-03-12 09:51:36,216 [main:67] - randomType = UByte
2021-03-12 09:51:36,377 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 09:51:36,428 [main:106] - GETTING Function1<Continuation<Any>, Unit> from String
2021-03-12 09:51:36,461 [main:106] - GETTING Function1<Continuation<Any>, Unit> from String
2021-03-12 09:51:36,461 [main:114] - replacement of { x ->} of type Function1<Continuation<Any>, Unit> is {a: Continuation<Any> -> contract({ require(true)})}
2021-03-12 09:51:36,604 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 09:51:36,605 [main:66] - Compilation checking started
2021-03-12 09:51:36,976 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn {a: Continuation<Any> -> contract({ require(true)})}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw RuntimeException("Unexpected result: ${IllegalArgumentException()?.message}")
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if (prope4 != i) error("ugyyf" + foo("kznso") + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:51:36,978 [main:107] - replacing (prope2, Result<Ty0>)
2021-03-12 09:51:36,979 [main:50] - replacing prope2 Result<Ty0>
2021-03-12 09:51:36,979 [main:54] - Getting value of type Result<Ty0>
2021-03-12 09:51:37,113 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 09:51:37,244 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 09:51:37,248 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 09:51:37,564 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 09:51:37,564 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 09:51:37,855 [main:67] - randomType = Byte?
2021-03-12 09:51:37,975 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:51:38,055 [main:106] - GETTING Result<Ty0> from String
2021-03-12 09:51:38,089 [main:106] - GETTING Result<Ty0> from String
2021-03-12 09:51:38,089 [main:111] - Cant find and generate replacement for prope2 type Result<Ty0>
2021-03-12 09:51:38,089 [main:107] - replacing (RuntimeException("Unexpected result: ${IllegalArgumentException()?.message}"), RuntimeException)
2021-03-12 09:51:38,089 [main:50] - replacing RuntimeException("Unexpected result: ${IllegalArgumentException()?.message}") RuntimeException
2021-03-12 09:51:38,089 [main:54] - Getting value of type RuntimeException
2021-03-12 09:51:38,239 [main:302] - generating value of type = RuntimeException false depth = 0
2021-03-12 09:51:38,385 [main:43] - GENERATING CALL OF fun UnsupportedOperationException(cause: kotlin.Throwable?): RuntimeException = TODO()
2021-03-12 09:51:38,390 [main:61] - WITHOUT TYPE PARAMS = fun UnsupportedOperationException(cause: kotlin.Throwable?): RuntimeException = TODO()
2021-03-12 09:51:38,671 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 09:51:38,814 [main:43] - GENERATING CALL OF fun AssertionError(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 09:51:38,818 [main:61] - WITHOUT TYPE PARAMS = fun AssertionError(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 09:51:39,312 [main:302] - generating value of type = Throwable false depth = 6
2021-03-12 09:51:39,318 [main:95] - GENERATED = AssertionError(null, IndexOutOfBoundsException())
2021-03-12 09:51:39,318 [main:95] - GENERATED = UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
2021-03-12 09:51:39,318 [main:58] - GENERATED VALUE OF TYPE RuntimeException = UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
2021-03-12 09:51:39,318 [main:61] - GENERATED IS CALL =true
2021-03-12 09:51:39,657 [main:67] - randomType = Double?
2021-03-12 09:51:39,800 [main:302] - generating value of type = Double true depth = 0
2021-03-12 09:51:39,859 [main:106] - GETTING RuntimeException from String
2021-03-12 09:51:39,887 [main:106] - GETTING RuntimeException from String
2021-03-12 09:51:39,887 [main:114] - replacement of RuntimeException("Unexpected result: ${IllegalArgumentException()?.message}") of type RuntimeException is UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
2021-03-12 09:51:40,036 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:51:40,037 [main:66] - Compilation checking started
2021-03-12 09:51:40,573 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if (prope4 != i) error("ugyyf" + foo("kznso") + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:51:40,575 [main:107] - replacing (prope6, Function0<Unit>)
2021-03-12 09:51:40,575 [main:50] - replacing prope6 Function0<Unit>
2021-03-12 09:51:40,575 [main:54] - Getting value of type Function0<Unit>
2021-03-12 09:51:40,732 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 09:51:40,735 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:51:40,877 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 09:51:40,880 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 09:51:41,171 [main:302] - generating value of type = Any false depth = 4
2021-03-12 09:51:41,172 [main:95] - GENERATED = print("ucwke")
2021-03-12 09:51:41,172 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("ucwke")}
2021-03-12 09:51:41,172 [main:61] - GENERATED IS CALL =false
2021-03-12 09:51:41,467 [main:67] - randomType = Double?
2021-03-12 09:51:41,587 [main:302] - generating value of type = Double true depth = 0
2021-03-12 09:51:41,631 [main:106] - GETTING Function0<Unit> from String
2021-03-12 09:51:41,657 [main:106] - GETTING Function0<Unit> from String
2021-03-12 09:51:41,657 [main:114] - replacement of prope6 of type Function0<Unit> is { print("ucwke")}
2021-03-12 09:51:41,829 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 09:51:41,830 [main:66] - Compilation checking started
2021-03-12 09:51:42,245 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if (prope4 != i) error("ugyyf" + foo("kznso") + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.{ print("ucwke")} = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:51:42,247 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 09:51:42,247 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 09:51:42,247 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 09:51:42,420 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 09:51:42,429 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 09:51:42,854 [main:67] - randomType = Set<Kla3>
2021-03-12 09:51:42,855 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 09:51:42,885 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 09:51:42,885 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 09:51:42,885 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-12 09:51:42,886 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-12 09:51:42,886 [main:54] - Getting value of type String
2021-03-12 09:51:43,060 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:51:43,064 [main:58] - GENERATED VALUE OF TYPE String = "kdbnj"
2021-03-12 09:51:43,064 [main:61] - GENERATED IS CALL =false
2021-03-12 09:51:43,079 [main:67] - randomType = Kla4
2021-03-12 09:51:43,212 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 09:51:43,228 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if (prope4 != i) error("ugyyf" + foo("kznso") + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 09:51:43,239 [main:106] - GETTING String from String
2021-03-12 09:51:43,271 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55517531]]
2021-03-12 09:51:43,271 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55517531]
2021-03-12 09:51:43,398 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:43,401 [main:117] - GENERATED CALL = (foo("kznso")).dropLast(147467566)
2021-03-12 09:51:43,401 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2841bdfa]]
2021-03-12 09:51:43,401 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2841bdfa]
2021-03-12 09:51:43,401 [main:117] - GENERATED CALL = (foo("kznso")).capitalize()
2021-03-12 09:51:43,401 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ad21b1]]
2021-03-12 09:51:43,401 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ad21b1]
2021-03-12 09:51:43,402 [main:117] - GENERATED CALL = (foo("kznso")).prependIndent(foo("kznso"))
2021-03-12 09:51:43,402 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6da58910]]
2021-03-12 09:51:43,402 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-12 09:51:43,537 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 09:51:43,540 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:51:43,542 [main:117] - GENERATED CALL = (foo("kznso")).filterIndexed({a: Int, b: Char -> false})
2021-03-12 09:51:43,542 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58a36d97]]
2021-03-12 09:51:43,542 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58a36d97]
2021-03-12 09:51:43,543 [main:117] - GENERATED CALL = (foo("kznso")).decapitalize()
2021-03-12 09:51:43,543 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b40f50a]]
2021-03-12 09:51:43,543 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b40f50a]
2021-03-12 09:51:43,669 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:51:43,672 [main:117] - GENERATED CALL = (foo("kznso")).substringAfterLast('䕙', foo())
2021-03-12 09:51:43,672 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60e957e9]]
2021-03-12 09:51:43,673 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60e957e9]
2021-03-12 09:51:43,808 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:51:43,931 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:51:43,935 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:51:44,239 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:51:44,241 [main:95] - GENERATED = StringBuilder("isgdi")
2021-03-12 09:51:44,242 [main:117] - GENERATED CALL = (foo("kznso")).removeSuffix(StringBuilder("isgdi"))
2021-03-12 09:51:44,242 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@745254a0]]
2021-03-12 09:51:44,242 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@745254a0]
2021-03-12 09:51:44,242 [main:117] - GENERATED CALL = (foo("kznso")).trimStart()
2021-03-12 09:51:44,242 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6af2203]]
2021-03-12 09:51:44,242 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6af2203]
2021-03-12 09:51:44,400 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:51:44,401 [main:117] - GENERATED CALL = (foo("kznso")).plus("fqeqy")
2021-03-12 09:51:44,401 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6897e324]]
2021-03-12 09:51:44,401 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6897e324]
2021-03-12 09:51:44,401 [main:117] - GENERATED CALL = (foo("kznso")).trimIndent()
2021-03-12 09:51:44,401 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is (foo("kznso")).trimStart()
2021-03-12 09:51:44,540 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:51:44,540 [main:66] - Compilation checking started
2021-03-12 09:51:45,109 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw RuntimeException("Exception must be thrown above")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if (prope4 != i) error("ugyyf" + foo("kznso") + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:51:45,112 [main:107] - replacing (RuntimeException("Exception must be thrown above"), RuntimeException)
2021-03-12 09:51:45,112 [main:50] - replacing RuntimeException("Exception must be thrown above") RuntimeException
2021-03-12 09:51:45,113 [main:54] - Getting value of type RuntimeException
2021-03-12 09:51:45,281 [main:302] - generating value of type = RuntimeException false depth = 0
2021-03-12 09:51:45,449 [main:43] - GENERATING CALL OF fun IllegalArgumentException(message: kotlin.String?): RuntimeException = TODO()
2021-03-12 09:51:45,455 [main:61] - WITHOUT TYPE PARAMS = fun IllegalArgumentException(message: kotlin.String?): RuntimeException = TODO()
2021-03-12 09:51:45,794 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:51:45,797 [main:95] - GENERATED = IllegalArgumentException("xauso")
2021-03-12 09:51:45,797 [main:58] - GENERATED VALUE OF TYPE RuntimeException = IllegalArgumentException("xauso")
2021-03-12 09:51:45,797 [main:61] - GENERATED IS CALL =true
2021-03-12 09:51:45,802 [main:67] - randomType = Boolean
2021-03-12 09:51:45,967 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:51:45,988 [main:106] - GETTING RuntimeException from String
2021-03-12 09:51:46,023 [main:106] - GETTING RuntimeException from String
2021-03-12 09:51:46,023 [main:114] - replacement of RuntimeException("Exception must be thrown above") of type RuntimeException is IllegalArgumentException("xauso")
2021-03-12 09:51:46,148 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:51:46,148 [main:66] - Compilation checking started
2021-03-12 09:51:46,861 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if (prope4 != i) error("ugyyf" + foo("kznso") + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:51:46,863 [main:107] - replacing (prope2.exceptionOrNull(), Throwable?)
2021-03-12 09:51:46,864 [main:50] - replacing prope2.exceptionOrNull() Throwable?
2021-03-12 09:51:46,864 [main:54] - Getting value of type Throwable?
2021-03-12 09:51:47,050 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 09:51:47,059 [main:58] - GENERATED VALUE OF TYPE Throwable? = ArithmeticException()
2021-03-12 09:51:47,059 [main:61] - GENERATED IS CALL =true
2021-03-12 09:51:47,237 [main:67] - randomType = ArrayList<Boolean>
2021-03-12 09:51:47,374 [main:302] - generating value of type = ArrayList<Boolean> false depth = 0
2021-03-12 09:51:47,530 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Boolean): ArrayList<Boolean> = TODO()
2021-03-12 09:51:47,535 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Boolean): ArrayList<Boolean> = TODO()
2021-03-12 09:51:47,758 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 09:51:47,762 [main:95] - GENERATED = arrayListOf<Boolean>(true)
2021-03-12 09:51:47,980 [main:106] - GETTING Throwable? from String
2021-03-12 09:51:48,017 [main:106] - GETTING Throwable? from String
2021-03-12 09:51:48,017 [main:114] - replacement of prope2.exceptionOrNull() of type Throwable? is ArithmeticException()
2021-03-12 09:51:48,157 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:51:48,159 [main:107] - replacing (prope4, Int)
2021-03-12 09:51:48,160 [main:50] - replacing prope4 Int
2021-03-12 09:51:48,160 [main:54] - Getting value of type Int
2021-03-12 09:51:48,351 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:48,355 [main:58] - GENERATED VALUE OF TYPE Int = 142343872
2021-03-12 09:51:48,355 [main:61] - GENERATED IS CALL =false
2021-03-12 09:51:48,599 [main:67] - randomType = Kla5
2021-03-12 09:51:48,759 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 09:51:48,763 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}
2021-03-12 09:51:48,805 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla5[DeserializedSimpleFunctionDescriptor@10b14880]
2021-03-12 09:51:49,047 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:51:49,048 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b881ccd]
2021-03-12 09:51:49,251 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:51:49,256 [main:78] - Generated call from random type = (Kla5).equals("clign").compareTo(true)
2021-03-12 09:51:49,258 [main:106] - GETTING Int from String
2021-03-12 09:51:49,322 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@84dd68a]]
2021-03-12 09:51:49,322 [main:117] - GENERATED CALL = (foo()).length.absoluteValue
2021-03-12 09:51:49,323 [main:113] - Case = [public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a6dc62a]]
2021-03-12 09:51:49,323 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a6dc62a]
2021-03-12 09:51:49,514 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:51:49,517 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:51:49,521 [main:117] - GENERATED CALL = (foo()).indexOfLast({a: Char -> false})
2021-03-12 09:51:49,522 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@44849f77]]
2021-03-12 09:51:49,522 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:51:49,717 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:51:49,721 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@44849f77]
2021-03-12 09:51:49,721 [main:117] - GENERATED CALL = (foo()).compareTo("jcaag").unaryMinus()
2021-03-12 09:51:49,721 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@8020711]]
2021-03-12 09:51:49,721 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:51:49,875 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:49,879 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@8020711]
2021-03-12 09:51:50,079 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:51:50,083 [main:117] - GENERATED CALL = (foo()).get(-938312153).compareTo('轡')
2021-03-12 09:51:50,084 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@6b0f06b9]]
2021-03-12 09:51:50,084 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:51:50,270 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:50,275 [main:117] - GENERATED CALL = (foo()).get(-992137973).code
2021-03-12 09:51:50,275 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c4648a5]]
2021-03-12 09:51:50,275 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:51:50,497 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:50,690 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:50,694 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c4648a5]
2021-03-12 09:51:50,904 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 09:51:51,101 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 09:51:51,120 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 09:51:51,399 [main:302] - generating value of type = Char true depth = 3
2021-03-12 09:51:51,404 [main:95] - GENERATED = charArrayOf('໽')
2021-03-12 09:51:51,612 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:51,818 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:51:51,823 [main:117] - GENERATED CALL = (foo()).subSequence(1502558128, -1552085780).lastIndexOfAny(charArrayOf('໽'), 2106559158, true)
2021-03-12 09:51:51,824 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57e52459]]
2021-03-12 09:51:51,824 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:51:51,824 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57e52459]
2021-03-12 09:51:51,995 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:51,999 [main:117] - GENERATED CALL = (foo()).compareTo(foo("kznso")).and(-414479585)
2021-03-12 09:51:51,999 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58bfa095]]
2021-03-12 09:51:51,999 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:51:52,222 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:52,416 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:52,421 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58bfa095]
2021-03-12 09:51:52,621 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 09:51:52,788 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 09:51:52,792 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 09:51:52,990 [main:302] - generating value of type = Char true depth = 3
2021-03-12 09:51:52,994 [main:95] - GENERATED = charArrayOf('')
2021-03-12 09:51:53,229 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:53,433 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:51:53,437 [main:117] - GENERATED CALL = (foo()).subSequence(-1318511208, 1840352828).indexOfAny(charArrayOf(''), -670168958, true)
2021-03-12 09:51:53,438 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6e868b0d]]
2021-03-12 09:51:53,438 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:51:53,626 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:51:53,629 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6e868b0d]
2021-03-12 09:51:53,835 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:53,840 [main:117] - GENERATED CALL = (foo()).compareTo("srhet").rotateLeft(984110555)
2021-03-12 09:51:53,840 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@dfd40bf]]
2021-03-12 09:51:53,840 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@dfd40bf]
2021-03-12 09:51:54,026 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:51:54,031 [main:117] - GENERATED CALL = (foo()).length.xor(-99435425)
2021-03-12 09:51:54,034 [main:114] - replacement of prope4 of type Int is 142343872
2021-03-12 09:51:54,238 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 09:51:54,238 [main:66] - Compilation checking started
2021-03-12 09:51:55,127 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if (142343872 != i) error("ugyyf" + foo("kznso") + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:51:55,130 [main:107] - replacing (createCoroutine(Kla0), Continuation<Unit>)
2021-03-12 09:51:55,130 [main:50] - replacing createCoroutine(Kla0) Continuation<Unit>
2021-03-12 09:51:55,130 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 09:51:55,344 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 09:51:55,551 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 09:51:55,557 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 09:51:56,153 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 09:51:56,332 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:51:56,337 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:51:56,741 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 09:51:56,887 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:51:56,892 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:51:57,472 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 09:51:57,625 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:51:57,629 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:51:58,181 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 12
2021-03-12 09:51:58,343 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:51:58,347 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:51:58,947 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 15
2021-03-12 09:51:59,115 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:51:59,120 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:51:59,635 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 18
2021-03-12 09:51:59,636 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:51:59,636 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:51:59,636 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:51:59,636 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:51:59,636 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:51:59,636 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 09:51:59,636 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 09:51:59,801 [main:67] - randomType = ArrayDeque<Boolean>
2021-03-12 09:51:59,964 [main:302] - generating value of type = ArrayDeque<Boolean> false depth = 0
2021-03-12 09:52:00,126 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Boolean>): ArrayDeque<Boolean> = TODO()
2021-03-12 09:52:00,131 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Boolean>): ArrayDeque<Boolean> = TODO()
2021-03-12 09:52:00,508 [main:302] - generating value of type = Collection<Boolean> false depth = 3
2021-03-12 09:52:00,695 [main:43] - GENERATING CALL OF fun <T> listOf(): Collection<Boolean> = TODO()
2021-03-12 09:52:00,700 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(): Collection<Boolean> = TODO()
2021-03-12 09:52:00,894 [main:95] - GENERATED = listOf<Boolean>()
2021-03-12 09:52:00,895 [main:95] - GENERATED = ArrayDeque<Boolean>(listOf<Boolean>())
2021-03-12 09:52:01,149 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 09:52:01,191 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 09:52:01,191 [main:111] - Cant find and generate replacement for createCoroutine(Kla0) type Continuation<Unit>
2021-03-12 09:52:01,191 [main:107] - replacing (prope5, Boolean)
2021-03-12 09:52:01,191 [main:50] - replacing prope5 Boolean
2021-03-12 09:52:01,191 [main:54] - Getting value of type Boolean
2021-03-12 09:52:01,377 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:52:01,382 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 09:52:01,382 [main:61] - GENERATED IS CALL =false
2021-03-12 09:52:01,561 [main:67] - randomType = UInt
2021-03-12 09:52:01,734 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 09:52:01,785 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@554f82]
2021-03-12 09:52:01,917 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:52:01,917 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4be1d672]
2021-03-12 09:52:02,052 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:52:02,055 [main:78] - Generated call from random type = (1262064937.toUInt()).equals("hxbfc").xor(false)
2021-03-12 09:52:02,056 [main:106] - GETTING Boolean from String
2021-03-12 09:52:02,085 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17b1288e]]
2021-03-12 09:52:02,085 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:52:02,221 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:02,223 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17b1288e]
2021-03-12 09:52:02,224 [main:117] - GENERATED CALL = (foo("kznso")).get(-372846918).isLowSurrogate()
2021-03-12 09:52:02,224 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]]
2021-03-12 09:52:02,224 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]
2021-03-12 09:52:02,391 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:52:02,391 [main:117] - GENERATED CALL = (foo("kznso")).equals("iblln")
2021-03-12 09:52:02,391 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12335ae5]]
2021-03-12 09:52:02,392 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:52:02,539 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:02,696 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:02,698 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12335ae5]
2021-03-12 09:52:02,699 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(-1440281890, -1696604317).any()
2021-03-12 09:52:02,699 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4563cc3c]]
2021-03-12 09:52:02,699 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:52:02,864 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:02,866 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4563cc3c]
2021-03-12 09:52:02,867 [main:117] - GENERATED CALL = (foo("kznso")).get(-367038551).isSurrogate()
2021-03-12 09:52:02,867 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@603a0fa7]]
2021-03-12 09:52:02,867 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:52:02,993 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:03,137 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:03,141 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@603a0fa7]
2021-03-12 09:52:03,322 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:52:03,499 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:52:03,503 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(-1814338782, 1441501130).startsWith('뀒', true)
2021-03-12 09:52:03,503 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1832b55f]]
2021-03-12 09:52:03,503 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1832b55f]
2021-03-12 09:52:03,653 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:52:03,653 [main:117] - GENERATED CALL = (foo("kznso")).length.equals("lenud")
2021-03-12 09:52:03,653 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]]
2021-03-12 09:52:03,653 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]
2021-03-12 09:52:03,784 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:03,951 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:52:04,072 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:04,205 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:04,328 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:52:04,330 [main:117] - GENERATED CALL = (foo("kznso")).regionMatches(-1641915308, "nvjst", 54753936, -1744088114, true)
2021-03-12 09:52:04,331 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@153ba2b7]]
2021-03-12 09:52:04,331 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@153ba2b7]
2021-03-12 09:52:04,469 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:52:04,471 [main:117] - GENERATED CALL = (foo("kznso")).endsWith(foo(), true)
2021-03-12 09:52:04,472 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65ea5d55]]
2021-03-12 09:52:04,472 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:52:04,609 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:04,614 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65ea5d55]
2021-03-12 09:52:04,614 [main:117] - GENERATED CALL = (foo("kznso")).get(-2134110802).isDefined()
2021-03-12 09:52:04,614 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56d70c33]]
2021-03-12 09:52:04,614 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56d70c33]
2021-03-12 09:52:04,769 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:52:04,912 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:52:04,916 [main:117] - GENERATED CALL = (foo("kznso")).contains('䳾', true)
2021-03-12 09:52:04,917 [main:114] - replacement of prope5 of type Boolean is (1262064937.toUInt()).equals("hxbfc").xor(false)
2021-03-12 09:52:05,060 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:52:05,060 [main:66] - Compilation checking started
2021-03-12 09:52:05,504 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != "OK") {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        (1262064937.toUInt()).equals("hxbfc").xor(false) = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if (142343872 != i) error("ugyyf" + foo("kznso") + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:05,506 [main:107] - replacing (ArithmeticException()!!, Throwable)
2021-03-12 09:52:05,507 [main:50] - replacing ArithmeticException()!! Throwable
2021-03-12 09:52:05,507 [main:54] - Getting value of type Throwable
2021-03-12 09:52:05,682 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 09:52:05,871 [main:43] - GENERATING CALL OF fun NoWhenBranchMatchedException(message: kotlin.String?): Throwable = TODO()
2021-03-12 09:52:05,877 [main:61] - WITHOUT TYPE PARAMS = fun NoWhenBranchMatchedException(message: kotlin.String?): Throwable = TODO()
2021-03-12 09:52:06,238 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:52:06,241 [main:95] - GENERATED = NoWhenBranchMatchedException("hkfyj")
2021-03-12 09:52:06,241 [main:58] - GENERATED VALUE OF TYPE Throwable = NoWhenBranchMatchedException("hkfyj")
2021-03-12 09:52:06,241 [main:61] - GENERATED IS CALL =true
2021-03-12 09:52:06,535 [main:67] - randomType = ULong?
2021-03-12 09:52:06,663 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 09:52:06,713 [main:106] - GETTING Throwable from String
2021-03-12 09:52:06,744 [main:106] - GETTING Throwable from String
2021-03-12 09:52:06,744 [main:114] - replacement of ArithmeticException()!! of type Throwable is NoWhenBranchMatchedException("hkfyj")
2021-03-12 09:52:06,880 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:52:06,882 [main:107] - replacing (prope2.getOrThrow(), Ty0)
2021-03-12 09:52:06,882 [main:50] - replacing prope2.getOrThrow() Ty0
2021-03-12 09:52:06,882 [main:54] - Getting value of type Ty0
2021-03-12 09:52:07,016 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 09:52:07,025 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 09:52:07,180 [main:67] - randomType = Byte
2021-03-12 09:52:07,322 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:52:07,393 [main:106] - GETTING Ty0 from String
2021-03-12 09:52:07,420 [main:106] - GETTING Ty0 from String
2021-03-12 09:52:07,421 [main:111] - Cant find and generate replacement for prope2.getOrThrow() type Ty0
2021-03-12 09:52:07,421 [main:107] - replacing ("OK", String)
2021-03-12 09:52:07,421 [main:50] - replacing "OK" String
2021-03-12 09:52:07,421 [main:54] - Getting value of type String
2021-03-12 09:52:07,555 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:52:07,557 [main:58] - GENERATED VALUE OF TYPE String = "gbjww"
2021-03-12 09:52:07,558 [main:61] - GENERATED IS CALL =false
2021-03-12 09:52:07,709 [main:67] - randomType = Kla2<Kla0>
2021-03-12 09:52:07,835 [main:302] - generating value of type = Kla2<Kla0> false depth = 0
2021-03-12 09:52:07,838 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 09:52:08,393 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-12 09:52:08,395 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}
2021-03-12 09:52:08,576 [main:106] - GETTING String from String
2021-03-12 09:52:08,598 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@704e67ba]]
2021-03-12 09:52:08,599 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@704e67ba]
2021-03-12 09:52:08,753 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:08,755 [main:117] - GENERATED CALL = (foo("kznso")).takeLast(1719655342)
2021-03-12 09:52:08,756 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@322eded1]]
2021-03-12 09:52:08,756 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@322eded1]
2021-03-12 09:52:08,929 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:52:09,159 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:52:09,163 [main:117] - GENERATED CALL = (foo("kznso")).replaceAfterLast('ᡦ', "ozshj", foo())
2021-03-12 09:52:09,163 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f5ead23]]
2021-03-12 09:52:09,163 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f5ead23]
2021-03-12 09:52:09,291 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:09,484 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:09,672 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:52:09,681 [main:117] - GENERATED CALL = (foo("kznso")).replaceRange(-896334467, 943468346, "lelys")
2021-03-12 09:52:09,681 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55764e19]]
2021-03-12 09:52:09,682 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55764e19]
2021-03-12 09:52:09,867 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:52:09,871 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:52:09,875 [main:117] - GENERATED CALL = (foo("kznso")).filterNot({a: Char -> false})
2021-03-12 09:52:09,876 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@745254a0]]
2021-03-12 09:52:09,876 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@745254a0]
2021-03-12 09:52:09,876 [main:117] - GENERATED CALL = (foo("kznso")).trimStart()
2021-03-12 09:52:09,876 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2a290d]]
2021-03-12 09:52:09,876 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2a290d]
2021-03-12 09:52:10,012 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:52:10,205 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:52:10,209 [main:117] - GENERATED CALL = (foo("kznso")).substringBeforeLast('ﰏ', "xczsi")
2021-03-12 09:52:10,209 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ceeeaf7]]
2021-03-12 09:52:10,209 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:52:10,384 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:10,388 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ceeeaf7]
2021-03-12 09:52:10,388 [main:117] - GENERATED CALL = (foo("kznso")).get(-956447006).uppercase()
2021-03-12 09:52:10,388 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73d56a53]]
2021-03-12 09:52:10,388 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:52:10,574 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:10,577 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73d56a53]
2021-03-12 09:52:10,707 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:52:10,709 [main:117] - GENERATED CALL = (foo("kznso")).get(-1864780309).plus("sbhor")
2021-03-12 09:52:10,709 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58a36d97]]
2021-03-12 09:52:10,709 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58a36d97]
2021-03-12 09:52:10,710 [main:117] - GENERATED CALL = (foo("kznso")).decapitalize()
2021-03-12 09:52:10,710 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e75d52a]]
2021-03-12 09:52:10,710 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e75d52a]
2021-03-12 09:52:10,710 [main:117] - GENERATED CALL = (foo("kznso")).concat(foo("kznso"))
2021-03-12 09:52:10,710 [main:114] - replacement of "OK" of type String is (foo("kznso")).trimStart()
2021-03-12 09:52:10,843 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:52:10,843 [main:66] - Compilation checking started
2021-03-12 09:52:11,555 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if (142343872 != i) error("ugyyf" + foo("kznso") + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:11,557 [main:107] - replacing (142343872 != i, Boolean)
2021-03-12 09:52:11,558 [main:50] - replacing 142343872 != i Boolean
2021-03-12 09:52:11,558 [main:54] - Getting value of type Boolean
2021-03-12 09:52:11,701 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:52:11,704 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 09:52:11,704 [main:61] - GENERATED IS CALL =false
2021-03-12 09:52:11,714 [main:67] - randomType = Kla3
2021-03-12 09:52:11,845 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 09:52:11,847 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}
2021-03-12 09:52:11,854 [main:149] - GENERATING call of type public final suspend fun fu6(): kotlin.Unit defined in Kla3[SimpleFunctionDescriptorImpl@61079a94]
2021-03-12 09:52:11,855 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@b0e2a34]
2021-03-12 09:52:12,000 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:52:12,001 [main:78] - Generated call from random type = (Kla3()).fu6().equals("duado")
2021-03-12 09:52:12,002 [main:106] - GETTING Boolean from String
2021-03-12 09:52:12,042 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12335ae5]]
2021-03-12 09:52:12,043 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12335ae5]
2021-03-12 09:52:12,043 [main:117] - GENERATED CALL = (foo()).any()
2021-03-12 09:52:12,043 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e81170]]
2021-03-12 09:52:12,043 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e81170]
2021-03-12 09:52:12,043 [main:117] - GENERATED CALL = (foo()).none()
2021-03-12 09:52:12,043 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56d70c33]]
2021-03-12 09:52:12,043 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:52:12,168 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:12,309 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:12,314 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56d70c33]
2021-03-12 09:52:12,449 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:52:12,579 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:52:12,582 [main:117] - GENERATED CALL = (foo()).subSequence(-706716069, -26832547).contains('饀', false)
2021-03-12 09:52:12,582 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]]
2021-03-12 09:52:12,582 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:52:12,697 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:12,830 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:12,833 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]
2021-03-12 09:52:12,833 [main:117] - GENERATED CALL = (foo()).subSequence(-1534067057, -507316495).isNotBlank()
2021-03-12 09:52:12,833 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76e01234]]
2021-03-12 09:52:12,833 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:52:13,006 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:13,183 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:13,187 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76e01234]
2021-03-12 09:52:13,351 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:52:13,536 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:52:13,539 [main:117] - GENERATED CALL = (foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)
2021-03-12 09:52:13,539 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6baa5329]]
2021-03-12 09:52:13,539 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:52:13,671 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:13,830 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:13,833 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6baa5329]
2021-03-12 09:52:13,992 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:13,996 [main:117] - GENERATED CALL = (foo()).subSequence(-1438557480, -794121998).hasSurrogatePairAt(-1702656413)
2021-03-12 09:52:13,996 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6704d495]]
2021-03-12 09:52:13,997 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]
2021-03-12 09:52:14,138 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:52:14,139 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6704d495]
2021-03-12 09:52:14,286 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:52:14,289 [main:117] - GENERATED CALL = (foo()).equals("yuydz").and(false)
2021-03-12 09:52:14,290 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ef52922]]
2021-03-12 09:52:14,290 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:52:14,417 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:14,560 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:14,563 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ef52922]
2021-03-12 09:52:14,563 [main:117] - GENERATED CALL = (foo()).subSequence(-1525271135, 2075824854).isNotEmpty()
2021-03-12 09:52:14,563 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7555e4a8]]
2021-03-12 09:52:14,563 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:52:14,727 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:14,730 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7555e4a8]
2021-03-12 09:52:14,731 [main:117] - GENERATED CALL = (foo()).get(-1823025159).isDigit()
2021-03-12 09:52:14,731 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]]
2021-03-12 09:52:14,731 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:52:14,865 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:14,982 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:14,985 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]
2021-03-12 09:52:15,130 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:15,266 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:52:15,416 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:15,536 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:15,668 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:52:15,671 [main:117] - GENERATED CALL = (foo()).subSequence(1464510865, 895028041).regionMatches(2072118535, "vikoc", 1951402969, -166638890, true)
2021-03-12 09:52:15,671 [main:114] - replacement of 142343872 != i of type Boolean is (foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)
2021-03-12 09:52:15,795 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:52:15,796 [main:66] - Compilation checking started
2021-03-12 09:52:16,405 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error("ugyyf" + foo("kznso") + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:16,407 [main:107] - replacing (prope7 != null, Boolean)
2021-03-12 09:52:16,407 [main:50] - replacing prope7 != null Boolean
2021-03-12 09:52:16,407 [main:54] - Getting value of type Boolean
2021-03-12 09:52:16,540 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:52:16,543 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 09:52:16,543 [main:61] - GENERATED IS CALL =false
2021-03-12 09:52:17,129 [main:67] - randomType = HashSet<Kla2<UShort>>?
2021-03-12 09:52:17,249 [main:302] - generating value of type = HashSet<Kla2<UShort>> false depth = 0
2021-03-12 09:52:17,389 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Kla2<UShort>): HashSet<Kla2<UShort>> = TODO()
2021-03-12 09:52:17,393 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Kla2<UShort>): HashSet<Kla2<UShort>> = TODO()
2021-03-12 09:52:17,511 [main:302] - generating value of type = Kla2<UShort> false depth = 3
2021-03-12 09:52:17,514 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 09:52:19,951 [main:302] - generating value of type = Kla5 false depth = 5
2021-03-12 09:52:19,954 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}
2021-03-12 09:52:19,954 [main:95] - GENERATED = hashSetOf<Kla2<UShort>>(Kla5)
2021-03-12 09:52:20,111 [main:149] - GENERATING call of type public open fun contains(element: Kla2<kotlin.UShort>): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@2467a21c]
2021-03-12 09:52:20,235 [main:302] - generating value of type = Kla2<UShort> false depth = 0
2021-03-12 09:52:20,238 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 09:52:20,903 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-12 09:52:20,906 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}
2021-03-12 09:52:20,906 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6704d495]
2021-03-12 09:52:21,039 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:52:21,042 [main:78] - Generated call from random type = (hashSetOf<Kla2<UShort>>(Kla5))?.contains(Kla5).and(true)
2021-03-12 09:52:21,043 [main:106] - GETTING Boolean from String
2021-03-12 09:52:21,069 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]]
2021-03-12 09:52:21,069 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]
2021-03-12 09:52:21,070 [main:117] - GENERATED CALL = (foo("kznso")).isNotBlank()
2021-03-12 09:52:21,070 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6704d495]]
2021-03-12 09:52:21,070 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]
2021-03-12 09:52:21,192 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:52:21,192 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6704d495]
2021-03-12 09:52:21,315 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:52:21,317 [main:117] - GENERATED CALL = (foo("kznso")).equals("joavf").and(false)
2021-03-12 09:52:21,318 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1832b55f]]
2021-03-12 09:52:21,318 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1832b55f]
2021-03-12 09:52:21,432 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:52:21,432 [main:117] - GENERATED CALL = (foo("kznso")).length.equals("njpnn")
2021-03-12 09:52:21,432 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ce6d1]]
2021-03-12 09:52:21,432 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:52:21,563 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:21,566 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ce6d1]
2021-03-12 09:52:21,566 [main:117] - GENERATED CALL = (foo("kznso")).get(-1553274511).isISOControl()
2021-03-12 09:52:21,566 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ba63f8c]]
2021-03-12 09:52:21,566 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]
2021-03-12 09:52:21,683 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:52:21,683 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ba63f8c]
2021-03-12 09:52:21,810 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:52:21,812 [main:117] - GENERATED CALL = (foo("kznso")).equals("vwnvt").or(false)
2021-03-12 09:52:21,812 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36baf748]]
2021-03-12 09:52:21,812 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:52:21,930 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:22,067 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:22,070 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36baf748]
2021-03-12 09:52:22,070 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(-365689806, 1579775976).isEmpty()
2021-03-12 09:52:22,070 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@603a0fa7]]
2021-03-12 09:52:22,070 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:52:22,189 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:22,320 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:22,323 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@603a0fa7]
2021-03-12 09:52:22,439 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:52:22,584 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:52:22,587 [main:117] - GENERATED CALL = (foo("kznso")).subSequence(-214457021, -1850368528).startsWith('', true)
2021-03-12 09:52:22,587 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65ea5d55]]
2021-03-12 09:52:22,587 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:52:22,707 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:22,709 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65ea5d55]
2021-03-12 09:52:22,710 [main:117] - GENERATED CALL = (foo("kznso")).get(1608627569).isDefined()
2021-03-12 09:52:22,710 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17b1288e]]
2021-03-12 09:52:22,710 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:52:22,833 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:22,836 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17b1288e]
2021-03-12 09:52:22,836 [main:117] - GENERATED CALL = (foo("kznso")).get(-630743041).isLowSurrogate()
2021-03-12 09:52:22,836 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6baa5329]]
2021-03-12 09:52:22,836 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6baa5329]
2021-03-12 09:52:22,949 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:22,951 [main:117] - GENERATED CALL = (foo("kznso")).hasSurrogatePairAt(-664497899)
2021-03-12 09:52:22,951 [main:114] - replacement of prope7 != null of type Boolean is (foo("kznso")).isNotBlank()
2021-03-12 09:52:23,078 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:52:23,078 [main:66] - Compilation checking started
2021-03-12 09:52:23,449 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while ((foo("kznso")).isNotBlank()) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error("ugyyf" + foo("kznso") + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:23,451 [main:107] - replacing ("ugyyf" + foo("kznso"), String)
2021-03-12 09:52:23,452 [main:50] - replacing "ugyyf" + foo("kznso") String
2021-03-12 09:52:23,452 [main:54] - Getting value of type String
2021-03-12 09:52:23,590 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:52:23,592 [main:58] - GENERATED VALUE OF TYPE String = "dgygr"
2021-03-12 09:52:23,592 [main:61] - GENERATED IS CALL =false
2021-03-12 09:52:24,187 [main:67] - randomType = ArrayDeque<Sequence<Kla2<Kla4>>>?
2021-03-12 09:52:24,305 [main:302] - generating value of type = ArrayDeque<Sequence<Kla2<Kla4>>> false depth = 0
2021-03-12 09:52:24,436 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Sequence<Kla2<Kla4>>>): ArrayDeque<Sequence<Kla2<Kla4>>> = TODO()
2021-03-12 09:52:24,440 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Sequence<Kla2<Kla4>>>): ArrayDeque<Sequence<Kla2<Kla4>>> = TODO()
2021-03-12 09:52:24,725 [main:302] - generating value of type = Collection<Sequence<Kla2<Kla4>>> false depth = 3
2021-03-12 09:52:24,853 [main:43] - GENERATING CALL OF fun <T> mutableSetOf(elements: Sequence<Kla2<Kla4>>): Collection<Sequence<Kla2<Kla4>>> = TODO()
2021-03-12 09:52:24,856 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableSetOf(elements: Sequence<Kla2<Kla4>>): Collection<Sequence<Kla2<Kla4>>> = TODO()
2021-03-12 09:52:24,988 [main:302] - generating value of type = Sequence<Kla2<Kla4>> false depth = 6
2021-03-12 09:52:25,110 [main:43] - GENERATING CALL OF fun <T> emptySequence(): Sequence<Kla2<Kla4>> = TODO()
2021-03-12 09:52:25,113 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptySequence(): Sequence<Kla2<Kla4>> = TODO()
2021-03-12 09:52:25,264 [main:95] - GENERATED = emptySequence<Kla2<Kla4>>()
2021-03-12 09:52:25,264 [main:95] - GENERATED = mutableSetOf<Sequence<Kla2<Kla4>>>(emptySequence<Kla2<Kla4>>())
2021-03-12 09:52:25,264 [main:95] - GENERATED = ArrayDeque<Sequence<Kla2<Kla4>>>(mutableSetOf<Sequence<Kla2<Kla4>>>(emptySequence<Kla2<Kla4>>()))
2021-03-12 09:52:25,503 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@1014a18c]
2021-03-12 09:52:25,504 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@47d52974]
2021-03-12 09:52:25,504 [main:78] - Generated call from random type = (ArrayDeque<Sequence<Kla2<Kla4>>>(mutableSetOf<Sequence<Kla2<Kla4>>>(emptySequence<Kla2<Kla4>>())))?.toArray().contentDeepToString()
2021-03-12 09:52:25,504 [main:106] - GETTING String from String
2021-03-12 09:52:25,531 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d2bf30b]]
2021-03-12 09:52:25,531 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d2bf30b]
2021-03-12 09:52:25,646 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:52:25,648 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:52:25,651 [main:117] - GENERATED CALL = (foo("kznso")).filter({a: Char -> true})
2021-03-12 09:52:25,651 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e75d52a]]
2021-03-12 09:52:25,651 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e75d52a]
2021-03-12 09:52:25,651 [main:117] - GENERATED CALL = (foo("kznso")).concat(foo())
2021-03-12 09:52:25,651 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73b02395]]
2021-03-12 09:52:25,651 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73b02395]
2021-03-12 09:52:25,781 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 09:52:25,784 [main:302] - generating value of type = Char true depth = 1
2021-03-12 09:52:25,787 [main:117] - GENERATED CALL = (foo("kznso")).replaceFirstChar({a: Char -> ''})
2021-03-12 09:52:25,787 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572d84e2]]
2021-03-12 09:52:25,787 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572d84e2]
2021-03-12 09:52:25,907 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:26,051 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:52:26,053 [main:117] - GENERATED CALL = (foo("kznso")).padEnd(-602351684, '칑')
2021-03-12 09:52:26,053 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6da58910]]
2021-03-12 09:52:26,054 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-12 09:52:26,170 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 09:52:26,172 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:52:26,175 [main:117] - GENERATED CALL = (foo("kznso")).filterIndexed({a: Int, b: Char -> false})
2021-03-12 09:52:26,175 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284b784c]]
2021-03-12 09:52:26,175 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284b784c]
2021-03-12 09:52:26,306 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:52:26,309 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:52:26,312 [main:117] - GENERATED CALL = (foo("kznso")).dropWhile({a: Char -> false})
2021-03-12 09:52:26,312 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@745254a0]]
2021-03-12 09:52:26,312 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@745254a0]
2021-03-12 09:52:26,312 [main:117] - GENERATED CALL = (foo("kznso")).trimStart()
2021-03-12 09:52:26,312 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9f36c40]]
2021-03-12 09:52:26,312 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9f36c40]
2021-03-12 09:52:26,431 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:52:26,434 [main:117] - GENERATED CALL = (foo("kznso")).trimMargin("iojvv")
2021-03-12 09:52:26,434 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6bff3]]
2021-03-12 09:52:26,434 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6bff3]
2021-03-12 09:52:26,559 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:26,562 [main:117] - GENERATED CALL = (foo("kznso")).substring(1802487456)
2021-03-12 09:52:26,562 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d3c28be]]
2021-03-12 09:52:26,562 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d3c28be]
2021-03-12 09:52:26,562 [main:117] - GENERATED CALL = (foo("kznso")).toUpperCase()
2021-03-12 09:52:26,562 [main:114] - replacement of "ugyyf" + foo("kznso") of type String is (foo("kznso")).filter({a: Char -> true})
2021-03-12 09:52:26,675 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:52:26,675 [main:66] - Compilation checking started
2021-03-12 09:52:27,184 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:27,187 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 09:52:27,187 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 09:52:27,187 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 09:52:27,319 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 09:52:27,325 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 09:52:27,330 [main:67] - randomType = Int
2021-03-12 09:52:27,452 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:27,505 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 09:52:27,532 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 09:52:27,532 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 09:52:27,532 [main:107] - replacing (prope1.prope5, Boolean)
2021-03-12 09:52:27,532 [main:50] - replacing prope1.prope5 Boolean
2021-03-12 09:52:27,532 [main:54] - Getting value of type Boolean
2021-03-12 09:52:27,654 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:52:27,658 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 09:52:27,658 [main:61] - GENERATED IS CALL =false
2021-03-12 09:52:27,824 [main:67] - randomType = Set<Kla3>
2021-03-12 09:52:27,825 [main:106] - GETTING Boolean from String
2021-03-12 09:52:27,854 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]]
2021-03-12 09:52:27,854 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]
2021-03-12 09:52:27,854 [main:117] - GENERATED CALL = (foo()).isNotBlank()
2021-03-12 09:52:27,854 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12335ae5]]
2021-03-12 09:52:27,855 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:52:27,975 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:28,107 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:28,110 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12335ae5]
2021-03-12 09:52:28,110 [main:117] - GENERATED CALL = (foo()).subSequence(-110296004, 724125581).any()
2021-03-12 09:52:28,110 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56d70c33]]
2021-03-12 09:52:28,110 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:52:28,224 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:28,347 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:28,350 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56d70c33]
2021-03-12 09:52:28,482 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:52:28,605 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:52:28,608 [main:117] - GENERATED CALL = (foo()).subSequence(475934881, -2102666540).contains('岴', true)
2021-03-12 09:52:28,608 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ce6d1]]
2021-03-12 09:52:28,608 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:52:28,733 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:28,736 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ce6d1]
2021-03-12 09:52:28,736 [main:117] - GENERATED CALL = (foo()).get(63102777).isISOControl()
2021-03-12 09:52:28,736 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]]
2021-03-12 09:52:28,736 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]
2021-03-12 09:52:28,851 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:52:28,851 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]
2021-03-12 09:52:28,984 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:52:28,984 [main:117] - GENERATED CALL = (foo()).equals("cgkdr").equals("pipkl")
2021-03-12 09:52:28,984 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@20d6a76b]]
2021-03-12 09:52:28,984 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:52:29,105 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:29,233 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:29,236 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@20d6a76b]
2021-03-12 09:52:29,352 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:52:29,352 [main:117] - GENERATED CALL = (foo()).subSequence(1064660152, -1008378228).equals("hybrj")
2021-03-12 09:52:29,352 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11e82c70]]
2021-03-12 09:52:29,352 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:52:29,485 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:29,488 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11e82c70]
2021-03-12 09:52:29,488 [main:117] - GENERATED CALL = (foo()).get(-1166728771).isLowerCase()
2021-03-12 09:52:29,488 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17b1288e]]
2021-03-12 09:52:29,489 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:52:29,608 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:29,611 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17b1288e]
2021-03-12 09:52:29,611 [main:117] - GENERATED CALL = (foo()).get(291796622).isLowSurrogate()
2021-03-12 09:52:29,611 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6baa5329]]
2021-03-12 09:52:29,611 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:52:29,736 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:29,854 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:29,857 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6baa5329]
2021-03-12 09:52:29,989 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:29,992 [main:117] - GENERATED CALL = (foo()).subSequence(-1057579274, -463694848).hasSurrogatePairAt(271901241)
2021-03-12 09:52:29,992 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4563cc3c]]
2021-03-12 09:52:29,992 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:52:30,112 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:52:30,114 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4563cc3c]
2021-03-12 09:52:30,115 [main:117] - GENERATED CALL = (foo()).get(-1866342534).isSurrogate()
2021-03-12 09:52:30,115 [main:114] - replacement of prope1.prope5 of type Boolean is (foo()).get(-1166728771).isLowerCase()
2021-03-12 09:52:30,239 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:52:30,239 [main:66] - Compilation checking started
2021-03-12 09:52:30,573 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            (foo()).get(-1166728771).isLowerCase() = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:30,575 [main:107] - replacing (prope2.getOrThrow(), Any?)
2021-03-12 09:52:30,575 [main:50] - replacing prope2.getOrThrow() Any?
2021-03-12 09:52:30,575 [main:54] - Getting value of type Any?
2021-03-12 09:52:30,705 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:52:30,705 [main:58] - GENERATED VALUE OF TYPE Any? = "ddsvk"
2021-03-12 09:52:30,705 [main:61] - GENERATED IS CALL =false
2021-03-12 09:52:30,715 [main:67] - randomType = Kla1
2021-03-12 09:52:30,835 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 09:52:30,837 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 09:52:30,856 [main:78] - Generated call from random type = (Kla1()).prope2
2021-03-12 09:52:30,857 [main:114] - replacement of prope2.getOrThrow() of type Any? is (Kla1()).prope2
2021-03-12 09:52:30,986 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:52:30,986 [main:66] - Compilation checking started
2021-03-12 09:52:31,496 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, 1158517373).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:31,499 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 09:52:31,499 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 09:52:31,499 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 09:52:31,642 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 09:52:31,647 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 09:52:32,078 [main:67] - randomType = Set<Kla2<Kla5>>
2021-03-12 09:52:32,079 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 09:52:32,102 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 09:52:32,102 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 09:52:32,102 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 09:52:32,102 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 09:52:32,102 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 09:52:32,231 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 09:52:32,236 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 09:52:34,636 [main:67] - randomType = HashSet<Function2<ULong, Set<Sequence<Float>>, Function2<LinkedHashMap<MutableMap<Int, Kla2<Kla1?>>, UByte>, Pair<Kla4?, String>, Kla5>>>
2021-03-12 09:52:34,762 [main:302] - generating value of type = HashSet<Function2<ULong, Set<Sequence<Float>>, Function2<LinkedHashMap<MutableMap<Int, Kla2<Kla1?>>, UByte>, Pair<Kla4?, String>, Kla5>>> false depth = 0
2021-03-12 09:52:34,890 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Function2<ULong, Set<Sequence<Float>>, Function2<LinkedHashMap<MutableMap<Int, Kla2<Kla1?>>, UByte>, Pair<Kla4?, String>, Kla5>>): HashSet<Function2<ULong, Set<Sequence<Float>>, Function2<LkedHashMap<MutableMap<Int, Kla2<Kla1?>>, UByte>, Pair<Kla4?, Strg>, Kla5>>> = TODO()
2021-03-12 09:52:34,893 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Function2<ULong, Set<Sequence<Float>>, Function2<LinkedHashMap<MutableMap<Int, Kla2<Kla1?>>, UByte>, Pair<Kla4?, String>, Kla5>>): HashSet<Function2<ULong, Set<Sequence<Float>>, Function2<LkedHashMap<MutableMap<Int, Kla2<Kla1?>>, UByte>, Pair<Kla4?, Strg>, Kla5>>> = TODO()
2021-03-12 09:52:35,038 [main:302] - generating value of type = Function2<ULong, Set<Sequence<Float>>, Function2<LinkedHashMap<MutableMap<Int, Kla2<Kla1?>>, UByte>, Pair<Kla4?, String>, Kla5>> false depth = 3
2021-03-12 09:52:35,041 [main:302] - generating value of type = Function2<LinkedHashMap<MutableMap<Int, Kla2<Kla1?>>, UByte>, Pair<Kla4?, String>, Kla5> false depth = 4
2021-03-12 09:52:35,044 [main:302] - generating value of type = Kla5 false depth = 5
2021-03-12 09:52:35,046 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}
2021-03-12 09:52:35,047 [main:95] - GENERATED = hashSetOf<Function2<ULong, Set<Sequence<Float>>, Function2<LinkedHashMap<MutableMap<Int, Kla2<Kla1?>>, UByte>, Pair<Kla4?, String>, Kla5>>>({a: ULong, b: Set<Sequence<Float>> -> {a: LinkedHashMap<MutableMap<Int, Kla2<Kla1?>>, UByte>, b: Pair<Kla4?, String> -> Kla5}})
2021-03-12 09:52:35,424 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 09:52:35,444 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 09:52:35,444 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 09:52:35,576 [main:141] - TRYING TO REPLACE CONSTANT 1158517373
2021-03-12 09:52:35,696 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:52:35,696 [main:66] - Compilation checking started
2021-03-12 09:52:36,246 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:36,246 [main:141] - TRYING TO REPLACE CONSTANT 87713372
2021-03-12 09:52:36,431 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:52:36,432 [main:66] - Compilation checking started
2021-03-12 09:52:36,901 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(times(-104), (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(1432564565, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:36,901 [main:141] - TRYING TO REPLACE CONSTANT 1432564565
2021-03-12 09:52:37,084 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 09:52:37,085 [main:66] - Compilation checking started
2021-03-12 09:52:37,640 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, 359112904).substring(865310824, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:37,640 [main:141] - TRYING TO REPLACE CONSTANT 359112904
2021-03-12 09:52:37,774 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 09:52:37,774 [main:66] - Compilation checking started
2021-03-12 09:52:38,323 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, prope4).substring(865310824, -1082142554) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:38,323 [main:141] - TRYING TO REPLACE CONSTANT 1082142554
2021-03-12 09:52:38,460 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:52:38,461 [main:66] - Compilation checking started
2021-03-12 09:52:39,020 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(-1520358765, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:39,020 [main:141] - TRYING TO REPLACE CONSTANT 1520358765
2021-03-12 09:52:39,214 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 09:52:39,215 [main:66] - Compilation checking started
2021-03-12 09:52:39,785 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { false}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:39,785 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 09:52:39,923 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 09:52:39,924 [main:66] - Compilation checking started
2021-03-12 09:52:40,477 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(340580395).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:40,478 [main:141] - TRYING TO REPLACE CONSTANT 340580395
2021-03-12 09:52:40,617 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 09:52:40,617 [main:66] - Compilation checking started
2021-03-12 09:52:41,185 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check(true, { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:41,186 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 09:52:41,319 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:52:41,320 [main:66] - Compilation checking started
2021-03-12 09:52:41,849 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(-104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:41,850 [main:141] - TRYING TO REPLACE CONSTANT 104
2021-03-12 09:52:41,992 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 09:52:41,993 [main:66] - Compilation checking started
2021-03-12 09:52:42,564 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:42,564 [main:141] - TRYING TO REPLACE CONSTANT '꛾'
2021-03-12 09:52:42,698 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-12 09:52:42,698 [main:66] - Compilation checking started
2021-03-12 09:52:43,243 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 09:52:43,375 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 09:52:43,376 [main:141] - TRYING TO REPLACE CONSTANT 1463605311
2021-03-12 09:52:43,499 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 09:52:43,499 [main:66] - Compilation checking started
2021-03-12 09:52:43,854 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(865310824)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(length).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:43,855 [main:141] - TRYING TO REPLACE CONSTANT 865310824
2021-03-12 09:52:43,985 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-12 09:52:43,986 [main:66] - Compilation checking started
2021-03-12 09:52:44,578 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:44,579 [main:141] - TRYING TO REPLACE CONSTANT 1354381132
2021-03-12 09:52:44,718 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 09:52:44,719 [main:66] - Compilation checking started
2021-03-12 09:52:45,124 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(numberOfSuspensions).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:45,124 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 09:52:45,283 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 09:52:45,284 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 09:52:45,407 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 09:52:45,408 [main:66] - Compilation checking started
2021-03-12 09:52:45,766 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(892471155, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", isSurrogate()))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:45,766 [main:141] - TRYING TO REPLACE CONSTANT 892471155
2021-03-12 09:52:45,895 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 09:52:45,895 [main:66] - Compilation checking started
2021-03-12 09:52:46,414 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(-1741643631, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:46,414 [main:141] - TRYING TO REPLACE CONSTANT 1741643631
2021-03-12 09:52:46,549 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 09:52:46,549 [main:66] - Compilation checking started
2021-03-12 09:52:47,087 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:47,087 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 09:52:47,256 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-12 09:52:47,257 [main:66] - Compilation checking started
2021-03-12 09:52:47,675 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(prope7 != null, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get(1429351121).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:47,676 [main:141] - TRYING TO REPLACE CONSTANT 1429351121
2021-03-12 09:52:47,815 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:52:47,815 [main:66] - Compilation checking started
2021-03-12 09:52:48,348 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get(-703731274).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:48,348 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 09:52:48,487 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 09:52:48,488 [main:141] - TRYING TO REPLACE CONSTANT 703731274
2021-03-12 09:52:48,612 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:52:48,612 [main:66] - Compilation checking started
2021-03-12 09:52:49,137 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', false)) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:49,137 [main:141] - TRYING TO REPLACE CONSTANT null
2021-03-12 09:52:49,275 [main:33] - Trying to replace Element(NULL) on Element(NULL)
2021-03-12 09:52:49,275 [main:141] - TRYING TO REPLACE CONSTANT '䶑'
2021-03-12 09:52:49,399 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 09:52:49,399 [main:66] - Compilation checking started
2021-03-12 09:52:49,788 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith(get((foo("kznso")).length.toInt()), false)) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:49,788 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 09:52:49,924 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:52:49,925 [main:66] - Compilation checking started
2021-03-12 09:52:50,455 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(665739906, -1957712125).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:50,455 [main:141] - TRYING TO REPLACE CONSTANT 665739906
2021-03-12 09:52:50,585 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 09:52:50,585 [main:66] - Compilation checking started
2021-03-12 09:52:51,106 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, -1957712125).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:51,106 [main:141] - TRYING TO REPLACE CONSTANT 1957712125
2021-03-12 09:52:51,236 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 09:52:51,237 [main:66] - Compilation checking started
2021-03-12 09:52:51,761 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> true}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:51,762 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 09:52:51,877 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:52:51,877 [main:66] - Compilation checking started
2021-03-12 09:52:52,354 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:52,354 [main:41] - AFTER TRY 1 res = 
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}


2021-03-12 09:52:52,613 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}
2021-03-12 09:52:52,748 [main:194] - Type params = []
2021-03-12 09:52:52,867 [main:302] - generating value of type = CoroutineContext false depth = 1
2021-03-12 09:52:52,985 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:52:52,989 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:52:53,245 [main:302] - generating value of type = Key<*> false depth = 4
2021-03-12 09:52:53,368 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:52:53,372 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:52:53,764 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 7
2021-03-12 09:52:53,889 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:52:53,892 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:52:54,413 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:52:54,414 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:52:54,414 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:52:54,414 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 09:52:54,414 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 09:52:55,209 [main:302] - generating value of type = Kla5 false depth = 1
2021-03-12 09:52:55,211 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}
2021-03-12 09:52:55,212 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}
2021-03-12 09:52:55,212 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}
2021-03-12 09:52:55,212 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}
2021-03-12 09:52:55,212 [main:112] - generating klass null text = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}
2021-03-12 09:52:55,212 [main:112] - generating klass null text = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}
2021-03-12 09:52:55,212 [main:112] - generating klass Kla6 text = companion object Kla6 : Kla0()
2021-03-12 09:52:55,472 [main:43] - GENERATING CALL OF inline fun foo(s: String = "O") = s
2021-03-12 09:52:55,475 [main:61] - WITHOUT TYPE PARAMS = inline fun foo(s: String = "O") = s
2021-03-12 09:52:55,607 [main:302] - generating value of type = String true depth = 1
2021-03-12 09:52:55,610 [main:95] - GENERATED = foo("zmfpg")
2021-03-12 09:52:55,736 [main:43] - GENERATING CALL OF fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}
2021-03-12 09:52:55,738 [main:61] - WITHOUT TYPE PARAMS = fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}
2021-03-12 09:52:56,033 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 1
2021-03-12 09:52:56,035 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 09:52:56,164 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:52:56,168 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:52:56,576 [main:302] - generating value of type = Int true depth = 5
2021-03-12 09:52:56,579 [main:302] - generating value of type = Function1<Int, Unit> false depth = 5
2021-03-12 09:52:56,582 [main:302] - generating value of type = Unit false depth = 6
2021-03-12 09:52:56,741 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:52:56,744 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:52:57,198 [main:302] - generating value of type = Boolean true depth = 9
2021-03-12 09:52:57,202 [main:302] - generating value of type = Function0<Any> false depth = 9
2021-03-12 09:52:57,206 [main:302] - generating value of type = Any false depth = 10
2021-03-12 09:52:57,206 [main:95] - GENERATED = require(true, { "qhwfl"})
2021-03-12 09:52:57,206 [main:95] - GENERATED = repeat(1619659951, {a: Int -> require(true, { "qhwfl"})})
2021-03-12 09:52:57,207 [main:95] - GENERATED = fu1({ repeat(1619659951, {a: Int -> require(true, { "qhwfl"})})})
2021-03-12 09:52:57,360 [main:43] - GENERATING CALL OF fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}
2021-03-12 09:52:57,751 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu2(x: (ArrayList<Int?>) -> Unit): Continuation<ArrayList<Int?>> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}
2021-03-12 09:52:58,111 [main:302] - generating value of type = Function1<ArrayList<Int?>, Unit> false depth = 1
2021-03-12 09:52:58,115 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 09:52:58,258 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:52:58,262 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:52:58,757 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 09:52:58,760 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-12 09:52:58,762 [main:302] - generating value of type = Any false depth = 6
2021-03-12 09:52:58,763 [main:95] - GENERATED = require(true, { "suzln"})
2021-03-12 09:52:58,763 [main:95] - GENERATED = fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})
2021-03-12 09:52:58,889 [main:43] - GENERATING CALL OF fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}
2021-03-12 09:52:58,892 [main:61] - WITHOUT TYPE PARAMS = fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}
2021-03-12 09:52:59,189 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 1
2021-03-12 09:52:59,192 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 09:52:59,364 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:52:59,368 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:52:59,820 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 09:52:59,823 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-12 09:52:59,825 [main:302] - generating value of type = Any false depth = 6
2021-03-12 09:52:59,826 [main:95] - GENERATED = check(true, { "fvgiu"})
2021-03-12 09:52:59,826 [main:95] - GENERATED = fu3({a: Throwable -> check(true, { "fvgiu"})})
2021-03-12 09:53:00,028 [main:43] - Try №1
2021-03-12 09:53:05,854 [main:48] - Already checked
2021-03-12 09:53:08,505 [main:69] - Trying to insert override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
2021-03-12 09:53:08,617 [main:66] - Compilation checking started
2021-03-12 09:53:09,767 [main:103] - Trying to change 143 nodes
2021-03-12 09:53:09,767 [main:107] - replacing (prope15, Function0<Unit>)
2021-03-12 09:53:09,768 [main:50] - replacing prope15 Function0<Unit>
2021-03-12 09:53:09,768 [main:54] - Getting value of type Function0<Unit>
2021-03-12 09:53:09,969 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 09:53:09,974 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:53:10,175 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:53:10,182 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:53:10,875 [main:302] - generating value of type = Int true depth = 4
2021-03-12 09:53:10,880 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 09:53:10,884 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 09:53:11,103 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 09:53:11,112 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 09:53:11,574 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 09:53:11,579 [main:95] - GENERATED = require(true)
2021-03-12 09:53:11,579 [main:95] - GENERATED = repeat(-1113178869, {a: Int -> require(true)})
2021-03-12 09:53:11,579 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-1113178869, {a: Int -> require(true)})}
2021-03-12 09:53:11,579 [main:61] - GENERATED IS CALL =false
2021-03-12 09:53:11,598 [main:67] - randomType = Kla4
2021-03-12 09:53:11,783 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 09:53:11,789 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}
2021-03-12 09:53:11,802 [main:78] - Generated call from random type = (Kla4()).prope6
2021-03-12 09:53:11,804 [main:106] - GETTING Function0<Unit> from String
2021-03-12 09:53:11,836 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 09:53:11,845 [main:106] - GETTING Function0<Unit> from String
2021-03-12 09:53:11,846 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-12 09:53:11,857 [main:106] - GETTING Function0<Unit> from Continuation<Any?>
2021-03-12 09:53:11,866 [main:106] - GETTING Function0<Unit> from Any?
2021-03-12 09:53:11,871 [main:106] - GETTING Function0<Unit> from String
2021-03-12 09:53:11,871 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 09:53:11,886 [main:114] - replacement of prope15 of type Function0<Unit> is { repeat(-1113178869, {a: Int -> require(true)})}
2021-03-12 09:53:12,085 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 09:53:12,085 [main:66] - Compilation checking started
2021-03-12 09:53:12,630 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope10 = "FAIL"
    fu12 {
        prope10 = fu11()
    }
    return prope10
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope13 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope13)
            prope15()
        }
        if (prope13 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        { repeat(-1113178869, {a: Int -> require(true)})}()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:53:12,632 [main:107] - replacing (isSuccess, Boolean)
2021-03-12 09:53:12,634 [main:50] - replacing isSuccess Boolean
2021-03-12 09:53:12,634 [main:54] - Getting value of type Boolean
2021-03-12 09:53:12,797 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:53:12,801 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 09:53:12,801 [main:61] - GENERATED IS CALL =false
2021-03-12 09:53:13,467 [main:67] - randomType = MutableMap<UShort, UShort>
2021-03-12 09:53:13,469 [main:106] - GETTING Boolean from Continuation<ArrayList<Int?>>
2021-03-12 09:53:13,483 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]]
2021-03-12 09:53:13,484 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa]
2021-03-12 09:53:13,667 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:53:13,668 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]
2021-03-12 09:53:13,668 [main:117] - GENERATED CALL = (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals("qnjhc").equals(Kla1().prope2)
2021-03-12 09:53:13,668 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70232b31]]
2021-03-12 09:53:13,668 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa]
2021-03-12 09:53:13,668 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70232b31]
2021-03-12 09:53:13,669 [main:117] - GENERATED CALL = (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals(Kla1().prope2).not()
2021-03-12 09:53:13,669 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6704d495]]
2021-03-12 09:53:13,669 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa]
2021-03-12 09:53:13,844 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:53:13,845 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6704d495]
2021-03-12 09:53:13,845 [main:117] - GENERATED CALL = (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals("ydncd").and(Kla4().prope5)
2021-03-12 09:53:13,846 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4be1d672]]
2021-03-12 09:53:13,846 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa]
2021-03-12 09:53:13,846 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4be1d672]
2021-03-12 09:53:13,846 [main:117] - GENERATED CALL = (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals(Kla1().prope2).xor(Kla4().prope5)
2021-03-12 09:53:13,846 [main:113] - Case = [public abstract val context: kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.Continuation[DeserializedPropertyDescriptor@67d1d69d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]]
2021-03-12 09:53:13,846 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]
2021-03-12 09:53:14,071 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:53:14,071 [main:117] - GENERATED CALL = (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("lfkfp")
2021-03-12 09:53:14,071 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ba63f8c]]
2021-03-12 09:53:14,071 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa]
2021-03-12 09:53:14,071 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ba63f8c]
2021-03-12 09:53:14,072 [main:117] - GENERATED CALL = (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals(Kla1().prope2).or(Kla4().prope5)
2021-03-12 09:53:14,072 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa]]
2021-03-12 09:53:14,072 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa]
2021-03-12 09:53:14,072 [main:117] - GENERATED CALL = (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals(Kla1().prope2)
2021-03-12 09:53:14,072 [main:113] - Case = [public abstract fun resumeWith(result: kotlin.Result<kotlin.collections.ArrayList<kotlin.Int?>>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@2c53f9af], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3b47ee6a]]
2021-03-12 09:53:14,072 [main:149] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<kotlin.collections.ArrayList<kotlin.Int?>>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@2c53f9af]
2021-03-12 09:53:14,266 [main:302] - generating value of type = Result<ArrayList<Int?>> false depth = 0
2021-03-12 09:53:14,435 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->ArrayList<Int?>): Result<ArrayList<Int?>> = TODO()
2021-03-12 09:53:14,441 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->ArrayList<Int?>): Result<ArrayList<Int?>> = TODO()
2021-03-12 09:53:14,913 [main:302] - generating value of type = Function0<ArrayList<Int?>> false depth = 3
2021-03-12 09:53:14,921 [main:302] - generating value of type = ArrayList<Int?> false depth = 4
2021-03-12 09:53:15,140 [main:43] - GENERATING CALL OF fun <E> ArrayList(elements: kotlin.collections.Collection<Int?>): ArrayList<Int?> = TODO()
2021-03-12 09:53:15,146 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(elements: kotlin.collections.Collection<Int?>): ArrayList<Int?> = TODO()
2021-03-12 09:53:15,646 [main:302] - generating value of type = Collection<Int?> false depth = 7
2021-03-12 09:53:15,821 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(element: Int?): Collection<Int?> = TODO()
2021-03-12 09:53:15,827 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(element: Int?): Collection<Int?> = TODO()
2021-03-12 09:53:16,054 [main:302] - generating value of type = Int true depth = 10
2021-03-12 09:53:16,059 [main:95] - GENERATED = listOfNotNull<Int?>(-2116559996)
2021-03-12 09:53:16,059 [main:95] - GENERATED = ArrayList<Int?>(listOfNotNull<Int?>(-2116559996))
2021-03-12 09:53:16,060 [main:95] - GENERATED = runCatching<ArrayList<Int?>>({ ArrayList<Int?>(listOfNotNull<Int?>(-2116559996))})
2021-03-12 09:53:16,060 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3b47ee6a]
2021-03-12 09:53:16,060 [main:117] - GENERATED CALL = (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).resumeWith(runCatching<ArrayList<Int?>>({ ArrayList<Int?>(listOfNotNull<Int?>(-2116559996))})).equals(Kla1().prope2)
2021-03-12 09:53:16,060 [main:114] - replacement of isSuccess of type Boolean is (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).resumeWith(runCatching<ArrayList<Int?>>({ ArrayList<Int?>(listOfNotNull<Int?>(-2116559996))})).equals(Kla1().prope2)
2021-03-12 09:53:16,259 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:53:16,259 [main:66] - Compilation checking started
2021-03-12 09:53:16,772 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope10 = "FAIL"
    fu12 {
        prope10 = fu11()
    }
    return prope10
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.(fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).resumeWith(runCatching<ArrayList<Int?>>({ ArrayList<Int?>(listOfNotNull<Int?>(-2116559996))})).equals(Kla1().prope2)) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope13 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope13)
            prope15()
        }
        if (prope13 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:53:16,773 [main:107] - replacing (let(x), Unit?)
2021-03-12 09:53:16,774 [main:50] - replacing let(x) Unit?
2021-03-12 09:53:16,774 [main:54] - Getting value of type Unit?
2021-03-12 09:53:16,989 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 09:53:17,192 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:53:17,199 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:53:17,956 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 09:53:17,961 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-12 09:53:17,966 [main:302] - generating value of type = Any false depth = 4
2021-03-12 09:53:17,966 [main:95] - GENERATED = check(true, { "akbip"})
2021-03-12 09:53:17,966 [main:58] - GENERATED VALUE OF TYPE Unit? = check(true, { "akbip"})
2021-03-12 09:53:17,966 [main:61] - GENERATED IS CALL =true
2021-03-12 09:53:17,976 [main:67] - randomType = Int
2021-03-12 09:53:18,156 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:53:18,220 [main:106] - GETTING Unit? from CoroutineContext
2021-03-12 09:53:18,230 [main:106] - GETTING Unit? from Boolean
2021-03-12 09:53:18,245 [main:106] - GETTING Unit? from String
2021-03-12 09:53:18,276 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4babdaa3]]
2021-03-12 09:53:18,276 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:53:18,438 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:53:18,632 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:53:18,638 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4babdaa3]
2021-03-12 09:53:18,813 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 09:53:18,818 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:53:19,006 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:53:19,012 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:53:19,634 [main:302] - generating value of type = Int true depth = 4
2021-03-12 09:53:19,639 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 09:53:19,643 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 09:53:19,840 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 09:53:19,846 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 09:53:20,227 [main:302] - generating value of type = Any false depth = 8
2021-03-12 09:53:20,227 [main:95] - GENERATED = println("vwphf")
2021-03-12 09:53:20,228 [main:95] - GENERATED = repeat(-35046185, {a: Int -> println("vwphf")})
2021-03-12 09:53:20,228 [main:117] - GENERATED CALL = ((foo()))?.subSequence(603938152, 9715231).forEach({a: Char -> repeat(-35046185, {a: Int -> println("vwphf")})})
2021-03-12 09:53:20,228 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ae5e849]]
2021-03-12 09:53:20,228 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ae5e849]
2021-03-12 09:53:20,523 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 09:53:20,528 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:53:20,723 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 09:53:20,730 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 09:53:21,176 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 09:53:21,182 [main:95] - GENERATED = check(false)
2021-03-12 09:53:21,182 [main:117] - GENERATED CALL = ((foo()))?.forEachIndexed({a: Int, b: Char -> check(false)})
2021-03-12 09:53:21,182 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ae5e849]]
2021-03-12 09:53:21,182 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:53:21,346 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:53:21,548 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:53:21,553 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ae5e849]
2021-03-12 09:53:21,735 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 09:53:21,740 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:53:21,914 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 09:53:21,921 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 09:53:22,355 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 09:53:22,363 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 09:53:22,612 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 09:53:22,621 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 09:53:23,015 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 09:53:23,020 [main:95] - GENERATED = require(true)
2021-03-12 09:53:23,020 [main:95] - GENERATED = contract({ require(true)})
2021-03-12 09:53:23,021 [main:117] - GENERATED CALL = ((foo()))?.subSequence(-2011464186, 1879538207).forEachIndexed({a: Int, b: Char -> contract({ require(true)})})
2021-03-12 09:53:23,021 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4babdaa3]]
2021-03-12 09:53:23,021 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4babdaa3]
2021-03-12 09:53:23,190 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 09:53:23,195 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:53:23,380 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 09:53:23,387 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 09:53:23,739 [main:302] - generating value of type = Any false depth = 4
2021-03-12 09:53:23,740 [main:95] - GENERATED = print("egjit")
2021-03-12 09:53:23,740 [main:117] - GENERATED CALL = ((foo()))?.forEach({a: Char -> print("egjit")})
2021-03-12 09:53:23,740 [main:114] - replacement of let(x) of type Unit? is ((foo()))?.forEachIndexed({a: Int, b: Char -> check(false)})
2021-03-12 09:53:23,910 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 09:53:23,911 [main:66] - Compilation checking started
2021-03-12 09:53:24,386 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope10 = "FAIL"
    fu12 {
        prope10 = fu11()
    }
    return prope10
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.((foo()))?.forEachIndexed({a: Int, b: Char -> check(false)})
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope13 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope13)
            prope15()
        }
        if (prope13 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:53:24,388 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 09:53:24,388 [main:50] - replacing {} Function0<Unit>
2021-03-12 09:53:24,388 [main:54] - Getting value of type Function0<Unit>
2021-03-12 09:53:24,536 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 09:53:24,540 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:53:24,697 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 09:53:24,703 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 09:53:25,101 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 09:53:25,106 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 09:53:25,290 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:53:25,296 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:53:25,919 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 09:53:25,923 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 09:53:25,928 [main:302] - generating value of type = Any false depth = 9
2021-03-12 09:53:25,928 [main:95] - GENERATED = check(true, { "pwrkt"})
2021-03-12 09:53:25,928 [main:95] - GENERATED = contract({ check(true, { "pwrkt"})})
2021-03-12 09:53:25,928 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ check(true, { "pwrkt"})})}
2021-03-12 09:53:25,929 [main:61] - GENERATED IS CALL =false
2021-03-12 09:53:25,938 [main:67] - randomType = Boolean
2021-03-12 09:53:26,092 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:53:26,109 [main:106] - GETTING Function0<Unit> from EmptyCoroutineContext
2021-03-12 09:53:26,136 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 09:53:26,145 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 09:53:26,158 [main:114] - replacement of {} of type Function0<Unit> is { contract({ check(true, { "pwrkt"})})}
2021-03-12 09:53:26,369 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 09:53:26,369 [main:66] - Compilation checking started
2021-03-12 09:53:26,871 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope10 = "FAIL"
    fu12 {
        prope10 = fu11()
    }
    return prope10
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = { contract({ check(true, { "pwrkt"})})}

    fun fu21() {
        prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope13 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope13)
            prope15()
        }
        if (prope13 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:53:26,872 [main:107] - replacing (it, Continuation<Unit>)
2021-03-12 09:53:26,873 [main:50] - replacing it Continuation<Unit>
2021-03-12 09:53:26,873 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 09:53:27,031 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 09:53:27,191 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 09:53:27,197 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 09:53:27,796 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 09:53:27,974 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:53:27,980 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:53:28,418 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 09:53:28,596 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:53:28,606 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:53:29,265 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 09:53:29,510 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:53:29,517 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:53:30,164 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:53:30,165 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:53:30,165 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:53:30,165 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 09:53:30,165 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 09:53:30,548 [main:67] - randomType = Long?
2021-03-12 09:53:30,725 [main:302] - generating value of type = Long true depth = 0
2021-03-12 09:53:30,786 [main:106] - GETTING Continuation<Unit> from CoroutineContext
2021-03-12 09:53:30,795 [main:106] - GETTING Continuation<Unit> from CoroutineContext
2021-03-12 09:53:30,796 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 09:53:30,824 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 09:53:30,825 [main:106] - GETTING Continuation<Unit> from Boolean
2021-03-12 09:53:30,838 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 09:53:30,839 [main:106] - GETTING Continuation<Unit> from Any
2021-03-12 09:53:30,844 [main:106] - GETTING Continuation<Unit> from Function0<Unit>
2021-03-12 09:53:30,857 [main:106] - GETTING Continuation<Unit> from CoroutineContext
2021-03-12 09:53:30,858 [main:106] - GETTING Continuation<Unit> from Any?
2021-03-12 09:53:30,863 [main:106] - GETTING Continuation<Unit> from EmptyCoroutineContext
2021-03-12 09:53:30,883 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 09:53:30,884 [main:106] - GETTING Continuation<Unit> from Continuation<ArrayList<Int?>>
2021-03-12 09:53:30,894 [main:106] - GETTING Continuation<Unit> from Continuation<Any?>
2021-03-12 09:53:30,902 [main:111] - Cant find and generate replacement for it type Continuation<Unit>
2021-03-12 09:53:30,903 [main:107] - replacing (prope13, Int)
2021-03-12 09:53:30,903 [main:50] - replacing prope13 Int
2021-03-12 09:53:30,903 [main:54] - Getting value of type Int
2021-03-12 09:53:31,068 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:53:31,073 [main:58] - GENERATED VALUE OF TYPE Int = -1445549800
2021-03-12 09:53:31,073 [main:61] - GENERATED IS CALL =false
2021-03-12 09:53:31,091 [main:67] - randomType = Kla0
2021-03-12 09:53:31,245 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 09:53:31,250 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}
2021-03-12 09:53:31,425 [main:194] - Type params = []
2021-03-12 09:53:31,604 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 09:53:31,786 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:53:31,792 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:53:32,186 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 09:53:32,377 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:53:32,383 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:53:33,033 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:53:33,033 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:53:33,053 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@6db44eae]
2021-03-12 09:53:33,053 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b881ccd]
2021-03-12 09:53:33,229 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:53:33,234 [main:78] - Generated call from random type = (Kla0()).equals(Kla1().prope2).compareTo(true)
2021-03-12 09:53:33,235 [main:106] - GETTING Int from CoroutineContext
2021-03-12 09:53:33,246 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b881ccd]]
2021-03-12 09:53:33,246 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]
2021-03-12 09:53:33,247 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b881ccd]
2021-03-12 09:53:33,412 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:53:33,417 [main:117] - GENERATED CALL = (Kla5.context).equals(Kla1().prope2).compareTo(true)
2021-03-12 09:53:33,417 [main:114] - replacement of prope13 of type Int is (Kla5.context).equals(Kla1().prope2).compareTo(true)
2021-03-12 09:53:33,606 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:53:33,606 [main:66] - Compilation checking started
2021-03-12 09:53:34,552 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope10 = "FAIL"
    fu12 {
        prope10 = fu11()
    }
    return prope10
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope13)
            prope15()
        }
        if (prope13 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:53:34,554 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 09:53:34,556 [main:50] - replacing getOrThrow() Any?
2021-03-12 09:53:34,556 [main:54] - Getting value of type Any?
2021-03-12 09:53:34,873 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:53:34,873 [main:58] - GENERATED VALUE OF TYPE Any? = "kwzal"
2021-03-12 09:53:34,874 [main:61] - GENERATED IS CALL =false
2021-03-12 09:53:34,892 [main:67] - randomType = Char
2021-03-12 09:53:35,141 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:53:35,181 [main:106] - GETTING Any? from Boolean
2021-03-12 09:53:35,198 [main:106] - GETTING Any? from String
2021-03-12 09:53:35,232 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 09:53:35,244 [main:106] - GETTING Any? from String
2021-03-12 09:53:35,246 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 09:53:35,258 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 09:53:35,259 [main:106] - GETTING Any? from String
2021-03-12 09:53:35,260 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 09:53:35,276 [main:106] - GETTING Any? from Continuation<ArrayList<Int?>>
2021-03-12 09:53:35,289 [main:106] - GETTING Any? from Any
2021-03-12 09:53:35,294 [main:114] - replacement of getOrThrow() of type Any? is "kwzal"
2021-03-12 09:53:35,472 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 09:53:35,473 [main:66] - Compilation checking started
2021-03-12 09:53:35,989 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope10 = "FAIL"
    fu12 {
        prope10 = fu11()
    }
    return prope10
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11."kwzal"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope13)
            prope15()
        }
        if (prope13 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:53:35,991 [main:107] - replacing (prope11.getOrThrow(), Ty1)
2021-03-12 09:53:35,992 [main:50] - replacing prope11.getOrThrow() Ty1
2021-03-12 09:53:35,992 [main:54] - Getting value of type Ty1
2021-03-12 09:53:36,260 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 09:53:36,272 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 09:53:40,072 [main:67] - randomType = Set<Function1<Function1<Kla11, LinkedHashSet<Kla9<Function2<Char, Short, UInt>>?>>, MutableMap<Kla9<UByte>, Kla1>>>
2021-03-12 09:53:40,073 [main:106] - GETTING Ty1 from String
2021-03-12 09:53:40,103 [main:106] - GETTING Ty1 from String
2021-03-12 09:53:40,104 [main:106] - GETTING Ty1 from Any
2021-03-12 09:53:40,109 [main:106] - GETTING Ty1 from Boolean
2021-03-12 09:53:40,126 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 09:53:40,140 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 09:53:40,142 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 09:53:40,164 [main:106] - GETTING Ty1 from Any?
2021-03-12 09:53:40,171 [main:106] - GETTING Ty1 from Continuation<Any?>
2021-03-12 09:53:40,184 [main:106] - GETTING Ty1 from Continuation<ArrayList<Int?>>
2021-03-12 09:53:40,199 [main:106] - GETTING Ty1 from EmptyCoroutineContext
2021-03-12 09:53:40,226 [main:106] - GETTING Ty1 from String
2021-03-12 09:53:40,227 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 09:53:40,228 [main:106] - GETTING Ty1 from String
2021-03-12 09:53:40,228 [main:111] - Cant find and generate replacement for prope11.getOrThrow() type Ty1
2021-03-12 09:53:40,228 [main:107] - replacing (prope10, String)
2021-03-12 09:53:40,229 [main:50] - replacing prope10 String
2021-03-12 09:53:40,229 [main:54] - Getting value of type String
2021-03-12 09:53:40,451 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:53:40,458 [main:58] - GENERATED VALUE OF TYPE String = "ynknj"
2021-03-12 09:53:40,458 [main:61] - GENERATED IS CALL =false
2021-03-12 09:53:40,691 [main:67] - randomType = Short
2021-03-12 09:53:40,887 [main:302] - generating value of type = Short true depth = 0
2021-03-12 09:53:40,964 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2215284f]
2021-03-12 09:53:40,964 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ceeeaf7]
2021-03-12 09:53:40,965 [main:78] - Generated call from random type = (-26566).toChar().uppercase()
2021-03-12 09:53:40,966 [main:106] - GETTING String from CoroutineContext
2021-03-12 09:53:40,977 [main:106] - GETTING String from String
2021-03-12 09:53:41,012 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7220aca3]]
2021-03-12 09:53:41,013 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:53:41,290 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:53:41,583 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:53:41,589 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7220aca3]
2021-03-12 09:53:41,886 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:53:42,163 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:53:42,175 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 09:53:42,733 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:53:42,741 [main:95] - GENERATED = StringBuilder("zzqli")
2021-03-12 09:53:42,996 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:53:43,004 [main:117] - GENERATED CALL = (foo("zmfpg")).subSequence(-482628457, 1340282628).commonPrefixWith(StringBuilder("zzqli"), true)
2021-03-12 09:53:43,005 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]]
2021-03-12 09:53:43,005 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]
2021-03-12 09:53:43,261 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:53:43,269 [main:117] - GENERATED CALL = (foo("zmfpg")).length.toString(-2014475697)
2021-03-12 09:53:43,270 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b40f50a]]
2021-03-12 09:53:43,270 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b40f50a]
2021-03-12 09:53:43,504 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:53:43,509 [main:117] - GENERATED CALL = (foo("zmfpg")).substringAfterLast('벂', var prope2 =
2021-03-12 09:53:43,509 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ad21b1]]
2021-03-12 09:53:43,509 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ad21b1]
2021-03-12 09:53:43,510 [main:117] - GENERATED CALL = (foo("zmfpg")).prependIndent(prope2)
2021-03-12 09:53:43,510 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6855bae5]]
2021-03-12 09:53:43,510 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6855bae5]
2021-03-12 09:53:43,510 [main:117] - GENERATED CALL = (foo("zmfpg")).reversed()
2021-03-12 09:53:43,510 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70a40148]]
2021-03-12 09:53:43,510 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:53:43,779 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:53:43,785 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70a40148]
2021-03-12 09:53:43,785 [main:117] - GENERATED CALL = (foo("zmfpg")).get(-2100584938).lowercase()
2021-03-12 09:53:43,785 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1620633d]]
2021-03-12 09:53:43,785 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1620633d]
2021-03-12 09:53:43,786 [main:117] - GENERATED CALL = (foo("zmfpg")).lowercase()
2021-03-12 09:53:43,786 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3ae7ef]]
2021-03-12 09:53:43,786 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3ae7ef]
2021-03-12 09:53:44,005 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:53:44,011 [main:117] - GENERATED CALL = (foo("zmfpg")).take(480525337)
2021-03-12 09:53:44,011 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d45bf2b]]
2021-03-12 09:53:44,011 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d45bf2b]
2021-03-12 09:53:44,266 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:53:44,274 [main:117] - GENERATED CALL = (foo("zmfpg")).replaceAfter('ﳒ', foo(), prope2)
2021-03-12 09:53:44,274 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55764e19]]
2021-03-12 09:53:44,274 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55764e19]
2021-03-12 09:53:44,493 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:53:44,501 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:53:44,509 [main:117] - GENERATED CALL = (foo("zmfpg")).filterNot({a: Char -> false})
2021-03-12 09:53:44,509 [main:114] - replacement of prope10 of type String is (foo("zmfpg")).get(-2100584938).lowercase()
2021-03-12 09:53:44,769 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:53:44,770 [main:66] - Compilation checking started
2021-03-12 09:53:45,571 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "FAIL"
    fu12 {
        (foo("zmfpg")).get(-2100584938).lowercase() = fu11()
    }
    return prope10
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope13)
            prope15()
        }
        if (prope13 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:53:45,572 [main:107] - replacing (prope14, Boolean)
2021-03-12 09:53:45,574 [main:50] - replacing prope14 Boolean
2021-03-12 09:53:45,574 [main:54] - Getting value of type Boolean
2021-03-12 09:53:45,857 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:53:45,865 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 09:53:45,866 [main:61] - GENERATED IS CALL =false
2021-03-12 09:53:46,220 [main:67] - randomType = Double
2021-03-12 09:53:46,470 [main:302] - generating value of type = Double true depth = 0
2021-03-12 09:53:46,556 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4f90a5e1]
2021-03-12 09:53:46,557 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71b52a09]
2021-03-12 09:53:46,557 [main:78] - Generated call from random type = (0.3284390594933878).toChar().isTitleCase()
2021-03-12 09:53:46,557 [main:114] - replacement of prope14 of type Boolean is (0.3284390594933878).toChar().isTitleCase()
2021-03-12 09:53:46,826 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:53:46,827 [main:66] - Compilation checking started
2021-03-12 09:53:47,559 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "FAIL"
    fu12 {
        prope10 = fu11()
    }
    return prope10
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        (0.3284390594933878).toChar().isTitleCase() = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope13)
            prope15()
        }
        if (prope13 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:53:47,561 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-12 09:53:47,561 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-12 09:53:47,561 [main:54] - Getting value of type Throwable?
2021-03-12 09:53:47,797 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 09:53:48,051 [main:43] - GENERATING CALL OF fun RuntimeException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 09:53:48,057 [main:61] - WITHOUT TYPE PARAMS = fun RuntimeException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 09:53:48,590 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 09:53:48,838 [main:43] - GENERATING CALL OF fun UninitializedPropertyAccessException(message: kotlin.String?): Throwable = TODO()
2021-03-12 09:53:48,846 [main:61] - WITHOUT TYPE PARAMS = fun UninitializedPropertyAccessException(message: kotlin.String?): Throwable = TODO()
2021-03-12 09:53:49,420 [main:302] - generating value of type = String true depth = 6
2021-03-12 09:53:49,426 [main:95] - GENERATED = UninitializedPropertyAccessException("jzzco")
2021-03-12 09:53:49,427 [main:95] - GENERATED = RuntimeException(UninitializedPropertyAccessException("jzzco"))
2021-03-12 09:53:49,427 [main:58] - GENERATED VALUE OF TYPE Throwable? = RuntimeException(UninitializedPropertyAccessException("jzzco"))
2021-03-12 09:53:49,427 [main:61] - GENERATED IS CALL =true
2021-03-12 09:53:49,452 [main:67] - randomType = Kla7
2021-03-12 09:53:49,655 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 09:53:49,660 [main:112] - generating klass Kla7 text = open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.getOrThrow()
    }
}
2021-03-12 09:53:49,862 [main:194] - Type params = []
2021-03-12 09:53:50,051 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 09:53:50,278 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:53:50,286 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:53:50,865 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 09:53:51,103 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:53:51,113 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:53:51,802 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-12 09:53:52,041 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:53:52,048 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:53:52,835 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-12 09:53:53,045 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:53:53,054 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:53:53,847 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 14
2021-03-12 09:53:54,049 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:53:54,056 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:53:54,781 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:53:54,781 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:53:54,781 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:53:54,781 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:53:54,781 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:53:54,803 [main:106] - GETTING Throwable? from String
2021-03-12 09:53:54,858 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 09:53:54,873 [main:106] - GETTING Throwable? from Any?
2021-03-12 09:53:54,881 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 09:53:54,882 [main:106] - GETTING Throwable? from Any
2021-03-12 09:53:54,888 [main:106] - GETTING Throwable? from String
2021-03-12 09:53:54,889 [main:106] - GETTING Throwable? from Function0<Unit>
2021-03-12 09:53:54,907 [main:106] - GETTING Throwable? from String
2021-03-12 09:53:54,908 [main:106] - GETTING Throwable? from Continuation<ArrayList<Int?>>
2021-03-12 09:53:54,922 [main:106] - GETTING Throwable? from Boolean
2021-03-12 09:53:54,938 [main:106] - GETTING Throwable? from String
2021-03-12 09:53:54,939 [main:106] - GETTING Throwable? from EmptyCoroutineContext
2021-03-12 09:53:54,968 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 09:53:54,969 [main:106] - GETTING Throwable? from Continuation<Any?>
2021-03-12 09:53:54,981 [main:114] - replacement of exceptionOrNull() of type Throwable? is RuntimeException(UninitializedPropertyAccessException("jzzco"))
2021-03-12 09:53:55,173 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:53:55,174 [main:66] - Compilation checking started
2021-03-12 09:53:55,691 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "FAIL"
    fu12 {
        prope10 = fu11()
    }
    return prope10
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.RuntimeException(UninitializedPropertyAccessException("jzzco"))!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope13)
            prope15()
        }
        if (prope13 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:53:55,694 [main:107] - replacing ("tail-call optimization miss: method at " + it, String)
2021-03-12 09:53:55,696 [main:50] - replacing "tail-call optimization miss: method at " + it String
2021-03-12 09:53:55,696 [main:54] - Getting value of type String
2021-03-12 09:53:55,912 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:53:55,918 [main:58] - GENERATED VALUE OF TYPE String = "leumq"
2021-03-12 09:53:55,918 [main:61] - GENERATED IS CALL =false
2021-03-12 09:53:56,373 [main:67] - randomType = UShort?
2021-03-12 09:53:56,558 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 09:53:56,604 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline infix fun and(other: kotlin.UShort): kotlin.UShort defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@7cefd971]
2021-03-12 09:53:56,841 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 09:53:56,849 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29104e56]
2021-03-12 09:53:57,054 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:53:57,073 [main:78] - Generated call from random type = (13154.toUShort())?.and(9489.toUShort()).toString(-70363519)
2021-03-12 09:53:57,075 [main:106] - GETTING String from Any?
2021-03-12 09:53:57,082 [main:113] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@58f0bd05]]
2021-03-12 09:53:57,082 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@58f0bd05]
2021-03-12 09:53:57,083 [main:117] - GENERATED CALL = (Kla1().prope2).toString()
2021-03-12 09:53:57,083 [main:114] - replacement of "tail-call optimization miss: method at " + it of type String is "leumq"
2021-03-12 09:53:57,273 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 09:53:57,274 [main:66] - Compilation checking started
2021-03-12 09:53:58,069 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "FAIL"
    fu12 {
        prope10 = fu11()
    }
    return prope10
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("leumq" + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope13)
            prope15()
        }
        if (prope13 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:53:58,071 [main:107] - replacing ("tail-call optimization hit: method " + method, String)
2021-03-12 09:53:58,073 [main:50] - replacing "tail-call optimization hit: method " + method String
2021-03-12 09:53:58,073 [main:54] - Getting value of type String
2021-03-12 09:53:58,286 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:53:58,291 [main:58] - GENERATED VALUE OF TYPE String = "ptzrx"
2021-03-12 09:53:58,291 [main:61] - GENERATED IS CALL =false
2021-03-12 09:53:59,333 [main:67] - randomType = Triple<String, Boolean, Kla2<Kla2<Kla0>>>
2021-03-12 09:53:59,520 [main:302] - generating value of type = Triple<String, Boolean, Kla2<Kla2<Kla0>>> false depth = 0
2021-03-12 09:53:59,733 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: String, second: Boolean, third: Kla2<Kla2<Kla0>>): Triple<String, Boolean, Kla2<Kla2<Kla0>>> = TODO()
2021-03-12 09:53:59,741 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: String, second: Boolean, third: Kla2<Kla2<Kla0>>): Triple<String, Boolean, Kla2<Kla2<Kla0>>> = TODO()
2021-03-12 09:53:59,945 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:53:59,950 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 09:53:59,955 [main:302] - generating value of type = Kla2<Kla2<Kla0>> false depth = 3
2021-03-12 09:53:59,961 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 09:54:01,536 [main:302] - generating value of type = Kla5 false depth = 5
2021-03-12 09:54:01,542 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}
2021-03-12 09:54:01,542 [main:95] - GENERATED = Triple<String, Boolean, Kla2<Kla2<Kla0>>>("uagsh", false, Kla5)
2021-03-12 09:54:01,566 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55764e19]
2021-03-12 09:54:01,750 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:54:01,755 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:54:01,761 [main:78] - Generated call from random type = (Triple<String, Boolean, Kla2<Kla2<Kla0>>>("uagsh", false, Kla5)).first.filterNot({a: Char -> false})
2021-03-12 09:54:01,763 [main:106] - GETTING String from Function0<Unit>
2021-03-12 09:54:01,776 [main:106] - GETTING String from EmptyCoroutineContext
2021-03-12 09:54:01,796 [main:106] - GETTING String from String
2021-03-12 09:54:01,819 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb1b04c]]
2021-03-12 09:54:01,819 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb1b04c]
2021-03-12 09:54:02,017 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:54:02,023 [main:117] - GENERATED CALL = (foo()).drop(930149593)
2021-03-12 09:54:02,023 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48bf8b9]]
2021-03-12 09:54:02,023 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48bf8b9]
2021-03-12 09:54:02,211 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:54:02,216 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:54:02,222 [main:117] - GENERATED CALL = (foo()).dropLastWhile({a: Char -> false})
2021-03-12 09:54:02,222 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3ae7ef]]
2021-03-12 09:54:02,222 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f3ae7ef]
2021-03-12 09:54:02,420 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:54:02,425 [main:117] - GENERATED CALL = (foo()).take(1733088821)
2021-03-12 09:54:02,425 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bbbb64c]]
2021-03-12 09:54:02,425 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:54:02,617 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:54:02,842 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:54:02,848 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bbbb64c]
2021-03-12 09:54:03,037 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:54:03,046 [main:117] - GENERATED CALL = (foo()).subSequence(-137093325, -1362515051).commonSuffixWith("qceol", Kla4().prope5)
2021-03-12 09:54:03,046 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1954aa46]]
2021-03-12 09:54:03,046 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1954aa46]
2021-03-12 09:54:03,245 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:54:03,253 [main:117] - GENERATED CALL = (foo()).removePrefix(StringBuilder())
2021-03-12 09:54:03,253 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@745254a0]]
2021-03-12 09:54:03,253 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@745254a0]
2021-03-12 09:54:03,254 [main:117] - GENERATED CALL = (foo()).trimStart()
2021-03-12 09:54:03,254 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f5ead23]]
2021-03-12 09:54:03,254 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f5ead23]
2021-03-12 09:54:03,436 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:54:03,639 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:54:03,974 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:54:03,983 [main:117] - GENERATED CALL = (foo()).replaceRange(-338150316, -766045140, StringBuilder())
2021-03-12 09:54:03,983 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a97bc42]]
2021-03-12 09:54:03,983 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a97bc42]
2021-03-12 09:54:03,983 [main:117] - GENERATED CALL = (foo()).trim()
2021-03-12 09:54:03,983 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b40f50a]]
2021-03-12 09:54:03,984 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b40f50a]
2021-03-12 09:54:04,158 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:54:04,163 [main:117] - GENERATED CALL = (foo()).substringAfterLast('绒', (foo()))
2021-03-12 09:54:04,163 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]]
2021-03-12 09:54:04,163 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:54:04,163 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]
2021-03-12 09:54:04,358 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:54:04,364 [main:117] - GENERATED CALL = (foo()).compareTo(foo()).toString(341666268)
2021-03-12 09:54:04,365 [main:114] - replacement of "tail-call optimization hit: method " + method of type String is (foo()).trimStart()
2021-03-12 09:54:04,556 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:54:04,557 [main:66] - Compilation checking started
2021-03-12 09:54:05,380 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "FAIL"
    fu12 {
        prope10 = fu11()
    }
    return prope10
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("leumq" + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope13)
            prope15()
        }
        if (prope13 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:54:05,382 [main:107] - replacing (prope11.getOrThrow(), Ty1)
2021-03-12 09:54:05,382 [main:50] - replacing prope11.getOrThrow() Ty1
2021-03-12 09:54:05,382 [main:54] - Getting value of type Ty1
2021-03-12 09:54:05,580 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 09:54:05,589 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 09:54:07,011 [main:67] - randomType = HashMap<Kla10?, Kla2<Long?>>?
2021-03-12 09:54:07,196 [main:302] - generating value of type = HashMap<Kla10?, Kla2<Long?>> false depth = 0
2021-03-12 09:54:07,392 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashMap<Kla10?, Kla2<Long?>> = TODO()
2021-03-12 09:54:07,399 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashMap<Kla10?, Kla2<Long?>> = TODO()
2021-03-12 09:54:08,036 [main:302] - generating value of type = Int true depth = 3
2021-03-12 09:54:08,041 [main:302] - generating value of type = Float true depth = 3
2021-03-12 09:54:08,048 [main:95] - GENERATED = LinkedHashMap<Kla10?, Kla2<Long?>>(1949196660, 0.043290794f)
2021-03-12 09:54:08,212 [main:106] - GETTING Ty1 from Any
2021-03-12 09:54:08,219 [main:106] - GETTING Ty1 from Continuation<Any?>
2021-03-12 09:54:08,230 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 09:54:08,244 [main:106] - GETTING Ty1 from Continuation<ArrayList<Int?>>
2021-03-12 09:54:08,256 [main:106] - GETTING Ty1 from String
2021-03-12 09:54:08,286 [main:106] - GETTING Ty1 from String
2021-03-12 09:54:08,287 [main:106] - GETTING Ty1 from String
2021-03-12 09:54:08,288 [main:106] - GETTING Ty1 from EmptyCoroutineContext
2021-03-12 09:54:08,307 [main:106] - GETTING Ty1 from String
2021-03-12 09:54:08,308 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 09:54:08,315 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 09:54:08,316 [main:106] - GETTING Ty1 from Boolean
2021-03-12 09:54:08,325 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 09:54:08,326 [main:106] - GETTING Ty1 from Any?
2021-03-12 09:54:08,331 [main:111] - Cant find and generate replacement for prope11.getOrThrow() type Ty1
2021-03-12 09:54:08,331 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-12 09:54:08,331 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-12 09:54:08,331 [main:54] - Getting value of type String
2021-03-12 09:54:08,523 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:54:08,529 [main:58] - GENERATED VALUE OF TYPE String = "blfqy"
2021-03-12 09:54:08,529 [main:61] - GENERATED IS CALL =false
2021-03-12 09:54:08,747 [main:67] - randomType = Short
2021-03-12 09:54:08,915 [main:302] - generating value of type = Short true depth = 0
2021-03-12 09:54:08,980 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@745ad798]
2021-03-12 09:54:09,171 [main:302] - generating value of type = Long true depth = 0
2021-03-12 09:54:09,177 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@461d943]
2021-03-12 09:54:09,353 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:54:09,358 [main:78] - Generated call from random type = (30411).div(4055175893884377675).toString(-1006358117)
2021-03-12 09:54:09,359 [main:106] - GETTING String from String
2021-03-12 09:54:09,388 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f5ead23]]
2021-03-12 09:54:09,388 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f5ead23]
2021-03-12 09:54:09,571 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:54:09,745 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:54:09,936 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:54:09,944 [main:117] - GENERATED CALL = (foo("zmfpg")).replaceRange(849890802, 1528192546, "mqexz")
2021-03-12 09:54:09,945 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20df4edc]]
2021-03-12 09:54:09,945 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20df4edc]
2021-03-12 09:54:10,124 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:54:10,129 [main:117] - GENERATED CALL = (foo("zmfpg")).replaceIndent("xohxd")
2021-03-12 09:54:10,129 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b40f50a]]
2021-03-12 09:54:10,130 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b40f50a]
2021-03-12 09:54:10,313 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:54:10,483 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:54:10,488 [main:117] - GENERATED CALL = (foo("zmfpg")).substringAfterLast('䄉', "slbgn")
2021-03-12 09:54:10,488 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@175c99ba]]
2021-03-12 09:54:10,489 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@175c99ba]
2021-03-12 09:54:10,489 [main:117] - GENERATED CALL = (foo("zmfpg")).uppercase()
2021-03-12 09:54:10,489 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfdc48e]]
2021-03-12 09:54:10,489 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfdc48e]
2021-03-12 09:54:10,489 [main:117] - GENERATED CALL = (foo("zmfpg")).replaceIndentByMargin(var prope2 =
2021-03-12 09:54:10,489 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70fce245]]
2021-03-12 09:54:10,489 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:54:10,673 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:54:10,856 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:54:10,863 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70fce245]
2021-03-12 09:54:11,055 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 09:54:11,227 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 09:54:11,233 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 09:54:11,642 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:54:11,659 [main:95] - GENERATED = Regex("qajrr")
2021-03-12 09:54:11,830 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 09:54:11,835 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 09:54:12,011 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 09:54:12,018 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 09:54:12,489 [main:302] - generating value of type = Int true depth = 4
2021-03-12 09:54:12,494 [main:95] - GENERATED = StringBuilder(-1250696907)
2021-03-12 09:54:12,495 [main:117] - GENERATED CALL = (foo("zmfpg")).subSequence(1208382186, 207419859).replace(Regex("qajrr"), {a: MatchResult -> StringBuilder(-1250696907)})
2021-03-12 09:54:12,495 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb1b04c]]
2021-03-12 09:54:12,495 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb1b04c]
2021-03-12 09:54:12,664 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:54:12,670 [main:117] - GENERATED CALL = (foo("zmfpg")).drop(199099825)
2021-03-12 09:54:12,670 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@322eded1]]
2021-03-12 09:54:12,670 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@322eded1]
2021-03-12 09:54:12,833 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:54:12,838 [main:117] - GENERATED CALL = (foo("zmfpg")).replaceAfterLast('Ⱜ', foo("zmfpg"), (foo()))
2021-03-12 09:54:12,838 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55764e19]]
2021-03-12 09:54:12,838 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55764e19]
2021-03-12 09:54:13,025 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:54:13,030 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:54:13,035 [main:117] - GENERATED CALL = (foo("zmfpg")).filterNot({a: Char -> false})
2021-03-12 09:54:13,036 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58a36d97]]
2021-03-12 09:54:13,036 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58a36d97]
2021-03-12 09:54:13,036 [main:117] - GENERATED CALL = (foo("zmfpg")).decapitalize()
2021-03-12 09:54:13,036 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is (foo("zmfpg")).replaceIndentByMargin(var prope2 =
2021-03-12 09:54:13,211 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(BINARY_EXPRESSION)
2021-03-12 09:54:13,212 [main:66] - Compilation checking started
2021-03-12 09:54:13,221 [main:71] - Wrong syntax or breaks conditions
2021-03-12 09:54:13,221 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "FAIL"
    fu12 {
        prope10 = fu11()
    }
    return prope10
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("leumq" + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope13)
            prope15()
        }
        if (prope13 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error((foo("zmfpg")).replaceIndentByMargin(var prope2 =)
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:54:13,223 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got ", String)
2021-03-12 09:54:13,223 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " String
2021-03-12 09:54:13,223 [main:54] - Getting value of type String
2021-03-12 09:54:13,403 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:54:13,409 [main:58] - GENERATED VALUE OF TYPE String = "fypus"
2021-03-12 09:54:13,409 [main:61] - GENERATED IS CALL =false
2021-03-12 09:54:13,429 [main:67] - randomType = Kla7
2021-03-12 09:54:13,592 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 09:54:13,597 [main:112] - generating klass Kla7 text = open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.getOrThrow()
    }
}
2021-03-12 09:54:13,790 [main:194] - Type params = []
2021-03-12 09:54:13,967 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 09:54:14,159 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:54:14,165 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:54:14,597 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 09:54:14,792 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:54:14,800 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:54:15,492 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 09:54:15,694 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:54:15,702 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:54:16,374 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 11
2021-03-12 09:54:16,632 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:54:16,639 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:54:17,338 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 14
2021-03-12 09:54:17,528 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:54:17,535 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:54:18,214 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 17
2021-03-12 09:54:18,214 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:54:18,214 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:54:18,215 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:54:18,215 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:54:18,215 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:54:18,234 [main:106] - GETTING String from Boolean
2021-03-12 09:54:18,247 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b881ccd], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]]
2021-03-12 09:54:18,247 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b881ccd]
2021-03-12 09:54:18,247 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]
2021-03-12 09:54:18,423 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:54:18,428 [main:117] - GENERATED CALL = (Kla4().prope5).compareTo(Kla4().prope5).toString(-2000725677)
2021-03-12 09:54:18,428 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " of type String is "fypus"
2021-03-12 09:54:18,611 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 09:54:18,612 [main:66] - Compilation checking started
2021-03-12 09:54:19,389 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "FAIL"
    fu12 {
        prope10 = fu11()
    }
    return prope10
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("leumq" + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != i) error("fypus" + prope13)
            prope15()
        }
        if (prope13 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:54:19,391 [main:107] - replacing ("FAIL", String)
2021-03-12 09:54:19,391 [main:50] - replacing "FAIL" String
2021-03-12 09:54:19,391 [main:54] - Getting value of type String
2021-03-12 09:54:19,631 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:54:19,636 [main:58] - GENERATED VALUE OF TYPE String = "rrqxv"
2021-03-12 09:54:19,636 [main:61] - GENERATED IS CALL =false
2021-03-12 09:54:19,879 [main:67] - randomType = Kla0?
2021-03-12 09:54:20,054 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 09:54:20,059 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}
2021-03-12 09:54:20,234 [main:194] - Type params = []
2021-03-12 09:54:20,428 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 09:54:20,619 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:54:20,625 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:54:21,032 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 09:54:21,251 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:54:21,258 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:54:21,945 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:54:21,945 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:54:21,966 [main:106] - GETTING String from Boolean
2021-03-12 09:54:21,980 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b881ccd], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]]
2021-03-12 09:54:21,981 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b881ccd]
2021-03-12 09:54:21,981 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]
2021-03-12 09:54:22,165 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:54:22,171 [main:117] - GENERATED CALL = (Kla4().prope5).compareTo(Kla4().prope5).toString(1875519181)
2021-03-12 09:54:22,171 [main:114] - replacement of "FAIL" of type String is "rrqxv"
2021-03-12 09:54:22,350 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 09:54:22,351 [main:66] - Compilation checking started
2021-03-12 09:54:23,061 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 {
        prope10 = fu11()
    }
    return prope10
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("leumq" + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != i) error("fypus" + prope13)
            prope15()
        }
        if (prope13 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:54:23,064 [main:107] - replacing ({
        prope10 = fu11()
    }, SuspendFunction0<Unit>)
2021-03-12 09:54:23,064 [main:50] - replacing {
        prope10 = fu11()
    } SuspendFunction0<Unit>
2021-03-12 09:54:23,064 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 09:54:23,252 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 09:54:23,257 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:54:23,439 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:54:23,447 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:54:24,070 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 09:54:24,075 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 09:54:24,081 [main:302] - generating value of type = Any false depth = 5
2021-03-12 09:54:24,081 [main:95] - GENERATED = check(true, { "pqjni"})
2021-03-12 09:54:24,081 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { check(true, { "pqjni"})}
2021-03-12 09:54:24,081 [main:61] - GENERATED IS CALL =false
2021-03-12 09:54:24,336 [main:67] - randomType = Kla9<Kla10>
2021-03-12 09:54:24,504 [main:302] - generating value of type = Kla9<Kla10> false depth = 0
2021-03-12 09:54:24,510 [main:112] - generating klass Kla9 text = abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-12 09:54:25,402 [main:302] - generating value of type = Kla12 false depth = 2
2021-03-12 09:54:25,408 [main:112] - generating klass Kla12 text = object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}
2021-03-12 09:54:25,431 [main:106] - GETTING SuspendFunction0<Unit> from Any
2021-03-12 09:54:25,436 [main:106] - GETTING SuspendFunction0<Unit> from Any?
2021-03-12 09:54:25,442 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 09:54:25,454 [main:106] - GETTING SuspendFunction0<Unit> from Continuation<ArrayList<Int?>>
2021-03-12 09:54:25,467 [main:106] - GETTING SuspendFunction0<Unit> from Boolean
2021-03-12 09:54:25,483 [main:106] - GETTING SuspendFunction0<Unit> from Function0<Unit>
2021-03-12 09:54:25,500 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 09:54:25,535 [main:106] - GETTING SuspendFunction0<Unit> from Continuation<Any?>
2021-03-12 09:54:25,547 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 09:54:25,548 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 09:54:25,549 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 09:54:25,550 [main:106] - GETTING SuspendFunction0<Unit> from EmptyCoroutineContext
2021-03-12 09:54:25,579 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 09:54:25,580 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 09:54:25,580 [main:114] - replacement of {
        prope10 = fu11()
    } of type SuspendFunction0<Unit> is { check(true, { "pqjni"})}
2021-03-12 09:54:25,766 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 09:54:25,767 [main:66] - Compilation checking started
2021-03-12 09:54:26,520 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return prope10
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("leumq" + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != i) error("fypus" + prope13)
            prope15()
        }
        if (prope13 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:54:26,522 [main:107] - replacing (prope11, Result<Ty1>)
2021-03-12 09:54:26,523 [main:50] - replacing prope11 Result<Ty1>
2021-03-12 09:54:26,523 [main:54] - Getting value of type Result<Ty1>
2021-03-12 09:54:26,689 [main:302] - generating value of type = Result<Ty1> false depth = 0
2021-03-12 09:54:26,899 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 09:54:26,906 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 09:54:27,319 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 09:54:27,319 [main:58] - GENERATED VALUE OF TYPE Result<Ty1> = 
2021-03-12 09:54:27,510 [main:67] - randomType = UByte
2021-03-12 09:54:27,700 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 09:54:27,749 [main:106] - GETTING Result<Ty1> from String
2021-03-12 09:54:27,775 [main:106] - GETTING Result<Ty1> from String
2021-03-12 09:54:27,777 [main:106] - GETTING Result<Ty1> from Function0<Unit>
2021-03-12 09:54:27,791 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 09:54:27,803 [main:106] - GETTING Result<Ty1> from Any
2021-03-12 09:54:27,811 [main:106] - GETTING Result<Ty1> from EmptyCoroutineContext
2021-03-12 09:54:27,844 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 09:54:27,846 [main:106] - GETTING Result<Ty1> from Continuation<Any?>
2021-03-12 09:54:27,861 [main:106] - GETTING Result<Ty1> from Boolean
2021-03-12 09:54:27,875 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 09:54:27,877 [main:106] - GETTING Result<Ty1> from String
2021-03-12 09:54:27,878 [main:106] - GETTING Result<Ty1> from String
2021-03-12 09:54:27,880 [main:106] - GETTING Result<Ty1> from Continuation<ArrayList<Int?>>
2021-03-12 09:54:27,892 [main:106] - GETTING Result<Ty1> from Any?
2021-03-12 09:54:27,897 [main:111] - Cant find and generate replacement for prope11 type Result<Ty1>
2021-03-12 09:54:27,897 [main:107] - replacing (prope13, Int)
2021-03-12 09:54:27,897 [main:50] - replacing prope13 Int
2021-03-12 09:54:27,898 [main:54] - Getting value of type Int
2021-03-12 09:54:28,090 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:54:28,098 [main:58] - GENERATED VALUE OF TYPE Int = 478963793
2021-03-12 09:54:28,098 [main:61] - GENERATED IS CALL =false
2021-03-12 09:54:28,119 [main:67] - randomType = Kla7
2021-03-12 09:54:28,282 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 09:54:28,287 [main:112] - generating klass Kla7 text = open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.getOrThrow()
    }
}
2021-03-12 09:54:28,484 [main:194] - Type params = []
2021-03-12 09:54:28,663 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 09:54:28,869 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:54:28,875 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:54:29,304 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 09:54:29,495 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:54:29,502 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:54:30,145 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:54:30,145 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:54:30,165 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla7[DeserializedSimpleFunctionDescriptor@707f43d9]
2021-03-12 09:54:30,342 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:54:30,342 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b881ccd]
2021-03-12 09:54:30,342 [main:78] - Generated call from random type = (Kla7()).equals("luwrj").compareTo(Kla4().prope5)
2021-03-12 09:54:30,343 [main:106] - GETTING Int from CoroutineContext
2021-03-12 09:54:30,350 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b881ccd]]
2021-03-12 09:54:30,350 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]
2021-03-12 09:54:30,351 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b881ccd]
2021-03-12 09:54:30,351 [main:117] - GENERATED CALL = (Kla5.context).equals(Kla1().prope2).compareTo(Kla4().prope5)
2021-03-12 09:54:30,351 [main:114] - replacement of prope13 of type Int is (Kla7()).equals("luwrj").compareTo(Kla4().prope5)
2021-03-12 09:54:30,534 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:54:30,535 [main:66] - Compilation checking started
2021-03-12 09:54:31,245 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return prope10
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("leumq" + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != i) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:54:31,248 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 09:54:31,248 [main:50] - replacing numberOfSuspensions Int
2021-03-12 09:54:31,248 [main:54] - Getting value of type Int
2021-03-12 09:54:31,441 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:54:31,448 [main:58] - GENERATED VALUE OF TYPE Int = -1427173461
2021-03-12 09:54:31,448 [main:61] - GENERATED IS CALL =false
2021-03-12 09:54:33,611 [main:67] - randomType = LinkedHashMap<Triple<Kla1, Set<UInt>, Pair<Kla11?, Kla1>>, HashSet<Kla9<Long>>>
2021-03-12 09:54:33,795 [main:302] - generating value of type = LinkedHashMap<Triple<Kla1, Set<UInt>, Pair<Kla11?, Kla1>>, HashSet<Kla9<Long>>> false depth = 0
2021-03-12 09:54:33,993 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Triple<Kla1, Set<UInt>, Pair<Kla11?, Kla1>>, HashSet<Kla9<Long>>> = TODO()
2021-03-12 09:54:34,000 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Triple<Kla1, Set<UInt>, Pair<Kla11?, Kla1>>, HashSet<Kla9<Long>>> = TODO()
2021-03-12 09:54:34,187 [main:95] - GENERATED = linkedMapOf<Triple<Kla1, Set<UInt>, Pair<Kla11?, Kla1>>, HashSet<Kla9<Long>>>()
2021-03-12 09:54:34,484 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@212cecfa]
2021-03-12 09:54:34,680 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:54:34,686 [main:78] - Generated call from random type = (linkedMapOf<Triple<Kla1, Set<UInt>, Pair<Kla11?, Kla1>>, HashSet<Kla9<Long>>>()).size.plus(-42)
2021-03-12 09:54:34,687 [main:106] - GETTING Int from String
2021-03-12 09:54:34,720 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27cd355a]]
2021-03-12 09:54:34,720 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27cd355a]
2021-03-12 09:54:34,911 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:54:34,919 [main:117] - GENERATED CALL = (foo("zmfpg")).length.compareTo(99)
2021-03-12 09:54:34,931 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4761643c]]
2021-03-12 09:54:34,932 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4761643c]
2021-03-12 09:54:35,104 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:54:35,110 [main:117] - GENERATED CALL = (foo("zmfpg")).length.ushr(-1799458520)
2021-03-12 09:54:35,111 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@318be20]]
2021-03-12 09:54:35,111 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:54:35,273 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:54:35,280 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@318be20]
2021-03-12 09:54:35,280 [main:117] - GENERATED CALL = (foo("zmfpg")).compareTo("eplsj").takeLowestOneBit()
2021-03-12 09:54:35,280 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2be99362]]
2021-03-12 09:54:35,280 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2be99362]
2021-03-12 09:54:35,280 [main:117] - GENERATED CALL = (foo("zmfpg")).length.inc()
2021-03-12 09:54:35,280 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63cf6d93]]
2021-03-12 09:54:35,280 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63cf6d93]
2021-03-12 09:54:35,280 [main:117] - GENERATED CALL = (foo("zmfpg")).count()
2021-03-12 09:54:35,280 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79cf55a3]]
2021-03-12 09:54:35,281 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79cf55a3]
2021-03-12 09:54:35,486 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:54:35,492 [main:117] - GENERATED CALL = (foo("zmfpg")).length.shl(-111158318)
2021-03-12 09:54:35,492 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1b57a1f5]]
2021-03-12 09:54:35,492 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1b57a1f5]
2021-03-12 09:54:35,668 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:54:35,673 [main:117] - GENERATED CALL = (foo("zmfpg")).length.rotateRight(-1124842252)
2021-03-12 09:54:35,673 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57e52459]]
2021-03-12 09:54:35,674 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:54:35,674 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57e52459]
2021-03-12 09:54:35,853 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:54:35,859 [main:117] - GENERATED CALL = (foo("zmfpg")).compareTo((foo())).and(-2143088046)
2021-03-12 09:54:35,859 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@1a8c9c27]]
2021-03-12 09:54:35,859 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:54:35,860 [main:117] - GENERATED CALL = (foo("zmfpg")).compareTo(var prope2 =.sign
2021-03-12 09:54:35,860 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23605c01]]
2021-03-12 09:54:35,860 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23605c01]
2021-03-12 09:54:35,860 [main:117] - GENERATED CALL = (foo("zmfpg")).length.dec()
2021-03-12 09:54:35,860 [main:114] - replacement of numberOfSuspensions of type Int is (foo("zmfpg")).length.ushr(-1799458520)
2021-03-12 09:54:36,026 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:54:36,027 [main:66] - Compilation checking started
2021-03-12 09:54:36,768 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return prope10
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("leumq" + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != i) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:54:36,770 [main:107] - replacing (prope11.exceptionOrNull(), Throwable?)
2021-03-12 09:54:36,770 [main:50] - replacing prope11.exceptionOrNull() Throwable?
2021-03-12 09:54:36,770 [main:54] - Getting value of type Throwable?
2021-03-12 09:54:36,975 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 09:54:37,164 [main:43] - GENERATING CALL OF fun Exception(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 09:54:37,171 [main:61] - WITHOUT TYPE PARAMS = fun Exception(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 09:54:37,557 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 09:54:37,761 [main:43] - GENERATING CALL OF fun RuntimeException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 09:54:37,767 [main:61] - WITHOUT TYPE PARAMS = fun RuntimeException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 09:54:38,189 [main:302] - generating value of type = Throwable false depth = 6
2021-03-12 09:54:38,364 [main:43] - GENERATING CALL OF fun NotImplementedError(message: kotlin.String): Throwable = TODO()
2021-03-12 09:54:38,371 [main:61] - WITHOUT TYPE PARAMS = fun NotImplementedError(message: kotlin.String): Throwable = TODO()
2021-03-12 09:54:38,825 [main:302] - generating value of type = String true depth = 9
2021-03-12 09:54:38,830 [main:95] - GENERATED = NotImplementedError("tezqi")
2021-03-12 09:54:38,830 [main:95] - GENERATED = RuntimeException(NotImplementedError("tezqi"))
2021-03-12 09:54:38,830 [main:95] - GENERATED = Exception(RuntimeException(NotImplementedError("tezqi")))
2021-03-12 09:54:38,830 [main:58] - GENERATED VALUE OF TYPE Throwable? = Exception(RuntimeException(NotImplementedError("tezqi")))
2021-03-12 09:54:38,830 [main:61] - GENERATED IS CALL =true
2021-03-12 09:54:38,851 [main:67] - randomType = Kla1
2021-03-12 09:54:39,026 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 09:54:39,031 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 09:54:39,059 [main:106] - GETTING Throwable? from String
2021-03-12 09:54:39,084 [main:106] - GETTING Throwable? from EmptyCoroutineContext
2021-03-12 09:54:39,103 [main:106] - GETTING Throwable? from Any?
2021-03-12 09:54:39,106 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 09:54:39,114 [main:106] - GETTING Throwable? from String
2021-03-12 09:54:39,115 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 09:54:39,116 [main:106] - GETTING Throwable? from Continuation<ArrayList<Int?>>
2021-03-12 09:54:39,125 [main:106] - GETTING Throwable? from Function0<Unit>
2021-03-12 09:54:39,136 [main:106] - GETTING Throwable? from Boolean
2021-03-12 09:54:39,146 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 09:54:39,147 [main:106] - GETTING Throwable? from Continuation<Any?>
2021-03-12 09:54:39,156 [main:106] - GETTING Throwable? from String
2021-03-12 09:54:39,157 [main:106] - GETTING Throwable? from String
2021-03-12 09:54:39,158 [main:106] - GETTING Throwable? from Any
2021-03-12 09:54:39,163 [main:114] - replacement of prope11.exceptionOrNull() of type Throwable? is Exception(RuntimeException(NotImplementedError("tezqi")))
2021-03-12 09:54:39,349 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:54:39,351 [main:107] - replacing (prope14, Boolean)
2021-03-12 09:54:39,352 [main:50] - replacing prope14 Boolean
2021-03-12 09:54:39,352 [main:54] - Getting value of type Boolean
2021-03-12 09:54:39,534 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:54:39,540 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 09:54:39,540 [main:61] - GENERATED IS CALL =false
2021-03-12 09:54:39,758 [main:67] - randomType = Short
2021-03-12 09:54:39,929 [main:302] - generating value of type = Short true depth = 0
2021-03-12 09:54:39,973 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4d8ff230]
2021-03-12 09:54:39,973 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ba63f8c]
2021-03-12 09:54:39,974 [main:78] - Generated call from random type = (12).equals(Kla1().prope2).or(Kla4().prope5)
2021-03-12 09:54:39,975 [main:106] - GETTING Boolean from CoroutineContext
2021-03-12 09:54:39,983 [main:113] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@54e8ab82], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@46bed5b4]]
2021-03-12 09:54:39,984 [main:149] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@54e8ab82]
2021-03-12 09:54:40,171 [main:302] - generating value of type = R false depth = 0
2021-03-12 09:54:41,325 [main:43] - GENERATING CALL OF fun <R> run(block: ()->Pair<UShort, Set<Long>>): R = TODO()
2021-03-12 09:54:41,332 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->Pair<UShort, Set<Long>>): R = TODO()
2021-03-12 09:54:41,766 [main:302] - generating value of type = Function0<Pair<UShort, Set<Long>>> false depth = 3
2021-03-12 09:54:41,771 [main:302] - generating value of type = Pair<UShort, Set<Long>> false depth = 4
2021-03-12 09:54:41,940 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UShort, second: Set<Long>): Pair<UShort, Set<Long>> = TODO()
2021-03-12 09:54:41,947 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UShort, second: Set<Long>): Pair<UShort, Set<Long>> = TODO()
2021-03-12 09:54:42,111 [main:302] - generating value of type = UShort true depth = 7
2021-03-12 09:54:42,116 [main:302] - generating value of type = Set<Long> false depth = 7
2021-03-12 09:54:42,314 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): Set<Long> = TODO()
2021-03-12 09:54:42,321 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): Set<Long> = TODO()
2021-03-12 09:54:42,503 [main:95] - GENERATED = linkedSetOf<Long>()
2021-03-12 09:54:42,504 [main:95] - GENERATED = Pair<UShort, Set<Long>>(4214.toUShort(), linkedSetOf<Long>())
2021-03-12 09:54:42,504 [main:95] - GENERATED = run<Pair<UShort, Set<Long>>>({ Pair<UShort, Set<Long>>(4214.toUShort(), linkedSetOf<Long>())})
2021-03-12 09:54:42,672 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-12 09:54:42,677 [main:302] - generating value of type = R false depth = 1
2021-03-12 09:54:43,093 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Kla2<Kla4>, block: T.()->Kla10): R = TODO()
2021-03-12 09:54:43,100 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Kla2<Kla4>, block: T.()->Kla10): R = TODO()
2021-03-12 09:54:43,505 [main:302] - generating value of type = Kla2<Kla4> false depth = 4
2021-03-12 09:54:43,510 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 09:54:44,288 [main:302] - generating value of type = Kla5 false depth = 6
2021-03-12 09:54:44,293 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}
2021-03-12 09:54:44,294 [main:385] - Cant generate call of fun <T, R> with(receiver: Kla2<Kla4>, block: T.()->Kla10): R = TODO()
2021-03-12 09:54:44,294 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@46bed5b4]
2021-03-12 09:54:44,449 [main:302] - generating value of type = T false depth = 0
2021-03-12 09:54:45,301 [main:43] - GENERATING CALL OF fun <T> minOf(a: ArrayDeque<Function1<Boolean, Sequence<Int>>>, b: ArrayDeque<Function1<Boolean, Sequence<Int>>>, comparator: kotlin.Comparator<ArrayDeque<Function1<Boolean, Sequence<Int>>>>): T = TODO()
2021-03-12 09:54:45,308 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: ArrayDeque<Function1<Boolean, Sequence<Int>>>, b: ArrayDeque<Function1<Boolean, Sequence<Int>>>, comparator: kotlin.Comparator<ArrayDeque<Function1<Boolean, Sequence<Int>>>>): T = TODO()
2021-03-12 09:54:45,717 [main:302] - generating value of type = ArrayDeque<Function1<Boolean, Sequence<Int>>> false depth = 3
2021-03-12 09:54:45,883 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Function1<Boolean, Sequence<Int>>> = TODO()
2021-03-12 09:54:45,890 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Function1<Boolean, Sequence<Int>>> = TODO()
2021-03-12 09:54:46,326 [main:302] - generating value of type = Int true depth = 6
2021-03-12 09:54:46,331 [main:95] - GENERATED = ArrayDeque<Function1<Boolean, Sequence<Int>>>(1485007371)
2021-03-12 09:54:46,332 [main:302] - generating value of type = ArrayDeque<Function1<Boolean, Sequence<Int>>> false depth = 3
2021-03-12 09:54:46,502 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Function1<Boolean, Sequence<Int>>> = TODO()
2021-03-12 09:54:46,509 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Function1<Boolean, Sequence<Int>>> = TODO()
2021-03-12 09:54:46,904 [main:302] - generating value of type = Int true depth = 6
2021-03-12 09:54:46,910 [main:95] - GENERATED = ArrayDeque<Function1<Boolean, Sequence<Int>>>(-28190999)
2021-03-12 09:54:46,910 [main:302] - generating value of type = Comparator<ArrayDeque<Function1<Boolean, Sequence<Int>>>> false depth = 3
2021-03-12 09:54:47,088 [main:43] - GENERATING CALL OF fun <T> nullsLast(comparator: kotlin.Comparator<ArrayDeque<Function1<Boolean, Sequence<Int>>>>): Comparator<ArrayDeque<Function1<Boolean, Sequence<Int>>>> = TODO()
2021-03-12 09:54:47,094 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsLast(comparator: kotlin.Comparator<ArrayDeque<Function1<Boolean, Sequence<Int>>>>): Comparator<ArrayDeque<Function1<Boolean, Sequence<Int>>>> = TODO()
2021-03-12 09:54:47,474 [main:302] - generating value of type = Comparator<ArrayDeque<Function1<Boolean, Sequence<Int>>>> false depth = 6
2021-03-12 09:54:47,677 [main:43] - GENERATING CALL OF fun <T> naturalOrder(): Comparator<ArrayDeque<Function1<Boolean, Sequence<Int>>>> = TODO()
2021-03-12 09:54:47,684 [main:61] - WITHOUT TYPE PARAMS = fun <T> naturalOrder(): Comparator<ArrayDeque<Function1<Boolean, Sequence<Int>>>> = TODO()
2021-03-12 09:54:47,865 [main:95] - GENERATED = naturalOrder<ArrayDeque<Function1<Boolean, Sequence<Int>>>>()
2021-03-12 09:54:47,865 [main:95] - GENERATED = nullsLast<ArrayDeque<Function1<Boolean, Sequence<Int>>>>(naturalOrder<ArrayDeque<Function1<Boolean, Sequence<Int>>>>())
2021-03-12 09:54:47,866 [main:95] - GENERATED = minOf<ArrayDeque<Function1<Boolean, Sequence<Int>>>>(ArrayDeque<Function1<Boolean, Sequence<Int>>>(1485007371), ArrayDeque<Function1<Boolean, Sequence<Int>>>(-28190999), nullsLast<ArrayDeque<Function1<Boolean, Sequence<Int>>>>(naturalOrder<ArrayDeque<Function1<Boolean, Sequence<Int>>>>()))
2021-03-12 09:54:47,866 [main:117] - GENERATED CALL = (Kla5.context).fold(run<Pair<UShort, Set<Long>>>({ Pair<UShort, Set<Long>>(4214.toUShort(), linkedSetOf<Long>())}), {a: R, b: Element -> })?.contains(minOf<ArrayDeque<Function1<Boolean, Sequence<Int>>>>(ArrayDeque<Function1<Boolean, Sequence<Int>>>(1485007371), ArrayDeque<Function1<Boolean, Sequence<Int>>>(-28190999), nullsLast<ArrayDeque<Function1<Boolean, Sequence<Int>>>>(naturalOrder<ArrayDeque<Function1<Boolean, Sequence<Int>>>>())))
2021-03-12 09:54:47,867 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]]
2021-03-12 09:54:47,867 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]
2021-03-12 09:54:48,035 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:54:48,035 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]
2021-03-12 09:54:48,035 [main:117] - GENERATED CALL = (Kla5.context).equals("frjfz").equals(Kla1().prope2)
2021-03-12 09:54:48,036 [main:113] - Case = [public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5cf50a6b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext.Element[DeserializedSimpleFunctionDescriptor@98d782d]]
2021-03-12 09:54:48,036 [main:149] - GENERATING call of type public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5cf50a6b]
2021-03-12 09:54:48,199 [main:302] - generating value of type = Key<E> false depth = 0
2021-03-12 09:54:48,412 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 09:54:48,419 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 09:54:49,048 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 09:54:49,048 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5cf50a6b]
2021-03-12 09:54:49,048 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70232b31]]
2021-03-12 09:54:49,048 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]
2021-03-12 09:54:49,049 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70232b31]
2021-03-12 09:54:49,049 [main:117] - GENERATED CALL = (Kla5.context).equals(Kla1().prope2).not()
2021-03-12 09:54:49,049 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6704d495]]
2021-03-12 09:54:49,049 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]
2021-03-12 09:54:49,217 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:54:49,217 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6704d495]
2021-03-12 09:54:49,217 [main:117] - GENERATED CALL = (Kla5.context).equals("xggep").and(Kla4().prope5)
2021-03-12 09:54:49,217 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]]
2021-03-12 09:54:49,217 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]
2021-03-12 09:54:49,218 [main:117] - GENERATED CALL = (Kla5.context).equals(Kla1().prope2)
2021-03-12 09:54:49,218 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ba63f8c]]
2021-03-12 09:54:49,218 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]
2021-03-12 09:54:49,389 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:54:49,389 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ba63f8c]
2021-03-12 09:54:49,390 [main:117] - GENERATED CALL = (Kla5.context).equals("omooy").or(Kla4().prope5)
2021-03-12 09:54:49,390 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4be1d672]]
2021-03-12 09:54:49,390 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]
2021-03-12 09:54:49,548 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:54:49,548 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4be1d672]
2021-03-12 09:54:49,724 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:54:49,729 [main:117] - GENERATED CALL = (Kla5.context).equals("gnqrb").xor(false)
2021-03-12 09:54:49,730 [main:113] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@54e8ab82], public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@a026d6]]
2021-03-12 09:54:49,730 [main:149] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@54e8ab82]
2021-03-12 09:54:49,897 [main:302] - generating value of type = R false depth = 0
2021-03-12 09:54:50,279 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->ArrayDeque<Kla7>): R = TODO()
2021-03-12 09:54:50,286 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->ArrayDeque<Kla7>): R = TODO()
2021-03-12 09:54:50,877 [main:302] - generating value of type = Any false depth = 3
2021-03-12 09:54:50,877 [main:302] - generating value of type = Function0<ArrayDeque<Kla7>> false depth = 3
2021-03-12 09:54:50,882 [main:302] - generating value of type = ArrayDeque<Kla7> false depth = 4
2021-03-12 09:54:51,043 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Kla7>): ArrayDeque<Kla7> = TODO()
2021-03-12 09:54:51,049 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Kla7>): ArrayDeque<Kla7> = TODO()
2021-03-12 09:54:51,471 [main:302] - generating value of type = Collection<Kla7> false depth = 7
2021-03-12 09:54:51,648 [main:43] - GENERATING CALL OF fun <T> mutableListOf(): Collection<Kla7> = TODO()
2021-03-12 09:54:51,655 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(): Collection<Kla7> = TODO()
2021-03-12 09:54:51,818 [main:95] - GENERATED = mutableListOf<Kla7>()
2021-03-12 09:54:51,818 [main:95] - GENERATED = ArrayDeque<Kla7>(mutableListOf<Kla7>())
2021-03-12 09:54:51,818 [main:95] - GENERATED = synchronized<ArrayDeque<Kla7>>("wvwsf", { ArrayDeque<Kla7>(mutableListOf<Kla7>())})
2021-03-12 09:54:51,994 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-12 09:54:51,999 [main:302] - generating value of type = R false depth = 1
2021-03-12 09:54:52,571 [main:43] - GENERATING CALL OF fun <R> run(block: ()->Kla2<ULong>): R = TODO()
2021-03-12 09:54:52,577 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->Kla2<ULong>): R = TODO()
2021-03-12 09:54:52,968 [main:302] - generating value of type = Function0<Kla2<ULong>> false depth = 4
2021-03-12 09:54:52,973 [main:302] - generating value of type = Kla2<ULong> false depth = 5
2021-03-12 09:54:52,978 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 09:54:53,594 [main:302] - generating value of type = Kla5 false depth = 7
2021-03-12 09:54:53,599 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}
2021-03-12 09:54:53,599 [main:95] - GENERATED = run<Kla2<ULong>>({ Kla5})
2021-03-12 09:54:53,600 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@a026d6]
2021-03-12 09:54:53,600 [main:117] - GENERATED CALL = (Kla5.context).fold(synchronized<ArrayDeque<Kla7>>("wvwsf", { ArrayDeque<Kla7>(mutableListOf<Kla7>())}), {a: R, b: Element -> run<Kla2<ULong>>({ Kla5})})?.equals(Kla1().prope2)
2021-03-12 09:54:53,600 [main:114] - replacement of prope14 of type Boolean is (Kla5.context).equals("omooy").or(Kla4().prope5)
2021-03-12 09:54:53,772 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:54:53,772 [main:66] - Compilation checking started
2021-03-12 09:54:54,217 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return prope10
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("leumq" + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != i) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.(Kla5.context).equals("omooy").or(Kla4().prope5) = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:54:54,219 [main:107] - replacing (Kla10(), Kla10)
2021-03-12 09:54:54,219 [main:50] - replacing Kla10() Kla10
2021-03-12 09:54:54,219 [main:54] - Getting value of type Kla10
2021-03-12 09:54:54,406 [main:302] - generating value of type = Kla10 false depth = 0
2021-03-12 09:54:54,411 [main:112] - generating klass Kla10 text = class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("leumq" + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}
2021-03-12 09:54:54,411 [main:58] - GENERATED VALUE OF TYPE Kla10 = Kla10()
2021-03-12 09:54:54,411 [main:61] - GENERATED IS CALL =true
2021-03-12 09:54:54,822 [main:67] - randomType = Sequence<Double>
2021-03-12 09:54:54,823 [main:106] - GETTING Kla10 from CoroutineContext
2021-03-12 09:54:54,832 [main:106] - GETTING Kla10 from Function0<Unit>
2021-03-12 09:54:54,845 [main:106] - GETTING Kla10 from String
2021-03-12 09:54:54,876 [main:106] - GETTING Kla10 from EmptyCoroutineContext
2021-03-12 09:54:54,899 [main:106] - GETTING Kla10 from CoroutineContext
2021-03-12 09:54:54,899 [main:106] - GETTING Kla10 from Continuation<ArrayList<Int?>>
2021-03-12 09:54:54,909 [main:106] - GETTING Kla10 from Any?
2021-03-12 09:54:54,913 [main:106] - GETTING Kla10 from Any
2021-03-12 09:54:54,918 [main:106] - GETTING Kla10 from String
2021-03-12 09:54:54,918 [main:106] - GETTING Kla10 from String
2021-03-12 09:54:54,919 [main:106] - GETTING Kla10 from Boolean
2021-03-12 09:54:54,933 [main:106] - GETTING Kla10 from String
2021-03-12 09:54:54,934 [main:106] - GETTING Kla10 from CoroutineContext
2021-03-12 09:54:54,934 [main:106] - GETTING Kla10 from Continuation<Any?>
2021-03-12 09:54:54,942 [main:114] - replacement of Kla10() of type Kla10 is Kla10()
2021-03-12 09:54:55,132 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:54:55,134 [main:107] - replacing (prope11, Result<Any?>)
2021-03-12 09:54:55,135 [main:50] - replacing prope11 Result<Any?>
2021-03-12 09:54:55,135 [main:54] - Getting value of type Result<Any?>
2021-03-12 09:54:55,316 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 09:54:55,498 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 09:54:55,505 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 09:54:55,887 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 09:54:55,893 [main:95] - GENERATED = runCatching<Any?>({ null})
2021-03-12 09:54:55,893 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ null})
2021-03-12 09:54:55,893 [main:61] - GENERATED IS CALL =true
2021-03-12 09:54:55,903 [main:67] - randomType = Char
2021-03-12 09:54:56,067 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:54:56,099 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 09:54:56,119 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 09:54:56,120 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 09:54:56,121 [main:106] - GETTING Result<Any?> from Function0<Unit>
2021-03-12 09:54:56,136 [main:106] - GETTING Result<Any?> from Boolean
2021-03-12 09:54:56,149 [main:106] - GETTING Result<Any?> from EmptyCoroutineContext
2021-03-12 09:54:56,175 [main:106] - GETTING Result<Any?> from String
2021-03-12 09:54:56,204 [main:106] - GETTING Result<Any?> from String
2021-03-12 09:54:56,205 [main:106] - GETTING Result<Any?> from String
2021-03-12 09:54:56,207 [main:106] - GETTING Result<Any?> from String
2021-03-12 09:54:56,208 [main:106] - GETTING Result<Any?> from Any
2021-03-12 09:54:56,214 [main:106] - GETTING Result<Any?> from Any?
2021-03-12 09:54:56,220 [main:106] - GETTING Result<Any?> from Continuation<ArrayList<Int?>>
2021-03-12 09:54:56,232 [main:106] - GETTING Result<Any?> from Continuation<Any?>
2021-03-12 09:54:56,242 [main:114] - replacement of prope11 of type Result<Any?> is runCatching<Any?>({ null})
2021-03-12 09:54:56,398 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:54:56,398 [main:66] - Compilation checking started
2021-03-12 09:54:57,074 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return prope10
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("leumq" + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != i) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:54:57,076 [main:107] - replacing (prope11.isSuccess, Boolean)
2021-03-12 09:54:57,076 [main:50] - replacing prope11.isSuccess Boolean
2021-03-12 09:54:57,076 [main:54] - Getting value of type Boolean
2021-03-12 09:54:57,254 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:54:57,260 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 09:54:57,260 [main:61] - GENERATED IS CALL =false
2021-03-12 09:54:57,458 [main:67] - randomType = Byte
2021-03-12 09:54:57,640 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:54:57,702 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6fbcbd62]
2021-03-12 09:54:57,702 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4563cc3c]
2021-03-12 09:54:57,702 [main:78] - Generated call from random type = (50).toChar().isSurrogate()
2021-03-12 09:54:57,702 [main:114] - replacement of prope11.isSuccess of type Boolean is (50).toChar().isSurrogate()
2021-03-12 09:54:57,880 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:54:57,882 [main:107] - replacing (prope14, Boolean)
2021-03-12 09:54:57,883 [main:50] - replacing prope14 Boolean
2021-03-12 09:54:57,883 [main:54] - Getting value of type Boolean
2021-03-12 09:54:58,051 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:54:58,056 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 09:54:58,057 [main:61] - GENERATED IS CALL =false
2021-03-12 09:54:58,078 [main:67] - randomType = Kla0
2021-03-12 09:54:58,250 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 09:54:58,255 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}
2021-03-12 09:54:58,413 [main:194] - Type params = []
2021-03-12 09:54:58,614 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 09:54:58,818 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:54:58,825 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:54:59,272 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 09:54:59,514 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:54:59,521 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:55:00,182 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 09:55:00,468 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:55:00,479 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:55:01,257 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:55:01,257 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:55:01,257 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:55:01,281 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@1c9015d4]
2021-03-12 09:55:01,281 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]
2021-03-12 09:55:01,281 [main:78] - Generated call from random type = (Kla0()).equals(Kla1().prope2).equals(Kla1().prope2)
2021-03-12 09:55:01,282 [main:106] - GETTING Boolean from EmptyCoroutineContext
2021-03-12 09:55:01,310 [main:113] - Case = [public open fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@e3e56e1], public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@a026d6]]
2021-03-12 09:55:01,310 [main:149] - GENERATING call of type public open fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@e3e56e1]
2021-03-12 09:55:01,499 [main:302] - generating value of type = R false depth = 0
2021-03-12 09:55:02,153 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->Array<Short>): R = TODO()
2021-03-12 09:55:02,159 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->Array<Short>): R = TODO()
2021-03-12 09:55:02,818 [main:302] - generating value of type = Any false depth = 3
2021-03-12 09:55:02,818 [main:302] - generating value of type = Function0<Array<Short>> false depth = 3
2021-03-12 09:55:02,823 [main:302] - generating value of type = Array<Short> false depth = 4
2021-03-12 09:55:03,021 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<Short> = TODO()
2021-03-12 09:55:03,031 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<Short> = TODO()
2021-03-12 09:55:03,228 [main:95] - GENERATED = enumValues<Short>()
2021-03-12 09:55:03,228 [main:95] - GENERATED = synchronized<Array<Short>>("oskwh", { enumValues<Short>()})
2021-03-12 09:55:03,401 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-12 09:55:03,406 [main:302] - generating value of type = R false depth = 1
2021-03-12 09:55:04,812 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Array<Triple<Long, Set<Kla0>, Char>>, block: T.()->ArrayDeque<Kla7>): R = TODO()
2021-03-12 09:55:04,818 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Array<Triple<Long, Set<Kla0>, Char>>, block: T.()->ArrayDeque<Kla7>): R = TODO()
2021-03-12 09:55:05,235 [main:302] - generating value of type = Array<Triple<Long, Set<Kla0>, Char>> false depth = 4
2021-03-12 09:55:05,428 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Triple<Long, Set<Kla0>, Char>> = TODO()
2021-03-12 09:55:05,435 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Triple<Long, Set<Kla0>, Char>> = TODO()
2021-03-12 09:55:05,632 [main:95] - GENERATED = emptyArray<Triple<Long, Set<Kla0>, Char>>()
2021-03-12 09:55:05,633 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<T, ArrayDeque<Kla7>> false depth = 4
2021-03-12 09:55:05,638 [main:302] - generating value of type = ArrayDeque<Kla7> false depth = 5
2021-03-12 09:55:05,815 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Kla7> = TODO()
2021-03-12 09:55:05,821 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Kla7> = TODO()
2021-03-12 09:55:06,033 [main:95] - GENERATED = ArrayDeque<Kla7>()
2021-03-12 09:55:06,033 [main:95] - GENERATED = with<Array<Triple<Long, Set<Kla0>, Char>>, ArrayDeque<Kla7>>(emptyArray<Triple<Long, Set<Kla0>, Char>>(), { ArrayDeque<Kla7>()})
2021-03-12 09:55:06,034 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@a026d6]
2021-03-12 09:55:06,034 [main:117] - GENERATED CALL = (Kla1().context).fold(synchronized<Array<Short>>("oskwh", { enumValues<Short>()}), {a: R, b: Element -> with<Array<Triple<Long, Set<Kla0>, Char>>, ArrayDeque<Kla7>>(emptyArray<Triple<Long, Set<Kla0>, Char>>(), { ArrayDeque<Kla7>()})})?.equals(Kla1().prope2)
2021-03-12 09:55:06,034 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@64c6e6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6704d495]]
2021-03-12 09:55:06,034 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@64c6e6]
2021-03-12 09:55:06,214 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6704d495]
2021-03-12 09:55:06,215 [main:117] - GENERATED CALL = (Kla1().context).equals(null).and(Kla4().prope5)
2021-03-12 09:55:06,215 [main:113] - Case = [public open fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@e3e56e1], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@46bed5b4]]
2021-03-12 09:55:06,215 [main:149] - GENERATING call of type public open fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@e3e56e1]
2021-03-12 09:55:06,404 [main:302] - generating value of type = R false depth = 0
2021-03-12 09:55:07,078 [main:43] - GENERATING CALL OF fun <R> run(block: ()->Function2<Kla4, Boolean, Kla12>): R = TODO()
2021-03-12 09:55:07,085 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->Function2<Kla4, Boolean, Kla12>): R = TODO()
2021-03-12 09:55:07,517 [main:302] - generating value of type = Function0<Function2<Kla4, Boolean, Kla12>> false depth = 3
2021-03-12 09:55:07,522 [main:302] - generating value of type = Function2<Kla4, Boolean, Kla12> false depth = 4
2021-03-12 09:55:07,528 [main:302] - generating value of type = Kla12 false depth = 5
2021-03-12 09:55:07,533 [main:112] - generating klass Kla12 text = object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}
2021-03-12 09:55:07,534 [main:95] - GENERATED = run<Function2<Kla4, Boolean, Kla12>>({ {a: Kla4, b: Boolean -> Kla12}})
2021-03-12 09:55:07,726 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-12 09:55:07,731 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@46bed5b4]
2021-03-12 09:55:07,914 [main:302] - generating value of type = T false depth = 0
2021-03-12 09:55:09,331 [main:43] - GENERATING CALL OF fun <T> minOf(a: Kla9<Function2<UShort, UInt, Kla3>>?, b: Kla9<Function2<UShort, UInt, Kla3>>?, comparator: kotlin.Comparator<Kla9<Function2<UShort, UInt, Kla3>>?>): T = TODO()
2021-03-12 09:55:09,338 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Kla9<Function2<UShort, UInt, Kla3>>?, b: Kla9<Function2<UShort, UInt, Kla3>>?, comparator: kotlin.Comparator<Kla9<Function2<UShort, UInt, Kla3>>?>): T = TODO()
2021-03-12 09:55:09,766 [main:302] - generating value of type = Kla9<Function2<UShort, UInt, Kla3>> false depth = 3
2021-03-12 09:55:09,771 [main:112] - generating klass Kla9 text = abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-12 09:55:10,679 [main:302] - generating value of type = Kla12 false depth = 5
2021-03-12 09:55:10,685 [main:112] - generating klass Kla12 text = object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}
2021-03-12 09:55:10,686 [main:302] - generating value of type = Kla9<Function2<UShort, UInt, Kla3>> false depth = 3
2021-03-12 09:55:10,691 [main:112] - generating klass Kla9 text = abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-12 09:55:11,547 [main:302] - generating value of type = Kla12 false depth = 5
2021-03-12 09:55:11,552 [main:112] - generating klass Kla12 text = object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}
2021-03-12 09:55:11,552 [main:302] - generating value of type = Comparator<Kla9<Function2<UShort, UInt, Kla3>>?> false depth = 3
2021-03-12 09:55:11,727 [main:43] - GENERATING CALL OF fun <T> naturalOrder(): Comparator<Kla9<Function2<UShort, UInt, Kla3>>?> = TODO()
2021-03-12 09:55:11,733 [main:61] - WITHOUT TYPE PARAMS = fun <T> naturalOrder(): Comparator<Kla9<Function2<UShort, UInt, Kla3>>?> = TODO()
2021-03-12 09:55:11,966 [main:95] - GENERATED = naturalOrder<Kla9<Function2<UShort, UInt, Kla3>>?>()
2021-03-12 09:55:11,966 [main:95] - GENERATED = minOf<Kla9<Function2<UShort, UInt, Kla3>>?>(Kla12, Kla12, naturalOrder<Kla9<Function2<UShort, UInt, Kla3>>?>())
2021-03-12 09:55:11,967 [main:117] - GENERATED CALL = (Kla1().context).fold(run<Function2<Kla4, Boolean, Kla12>>({ {a: Kla4, b: Boolean -> Kla12}}), {a: R, b: Element -> null})?.contains(minOf<Kla9<Function2<UShort, UInt, Kla3>>?>(Kla12, Kla12, naturalOrder<Kla9<Function2<UShort, UInt, Kla3>>?>()))
2021-03-12 09:55:11,967 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@64c6e6]]
2021-03-12 09:55:11,967 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@64c6e6]
2021-03-12 09:55:12,149 [main:117] - GENERATED CALL = (Kla1().context).equals(null)
2021-03-12 09:55:12,149 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@64c6e6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70232b31]]
2021-03-12 09:55:12,149 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@64c6e6]
2021-03-12 09:55:12,149 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70232b31]
2021-03-12 09:55:12,149 [main:117] - GENERATED CALL = (Kla1().context).equals(Kla1().prope2).not()
2021-03-12 09:55:12,149 [main:113] - Case = [public open fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@1441e68], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext.Element[DeserializedSimpleFunctionDescriptor@98d782d]]
2021-03-12 09:55:12,149 [main:149] - GENERATING call of type public open fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@1441e68]
2021-03-12 09:55:12,332 [main:302] - generating value of type = Key<E> false depth = 0
2021-03-12 09:55:12,517 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 09:55:12,524 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 09:55:13,196 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 09:55:13,196 [main:158] - CANT GENERATE PARAMS FOR public open fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@1441e68]
2021-03-12 09:55:13,196 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@64c6e6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4be1d672]]
2021-03-12 09:55:13,196 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@64c6e6]
2021-03-12 09:55:13,196 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4be1d672]
2021-03-12 09:55:13,365 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:55:13,370 [main:117] - GENERATED CALL = (Kla1().context).equals(Kla1().prope2).xor(true)
2021-03-12 09:55:13,370 [main:113] - Case = [public open fun minusKey(key: kotlin.coroutines.CoroutineContext.Key<*>): kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@26febc6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]]
2021-03-12 09:55:13,370 [main:149] - GENERATING call of type public open fun minusKey(key: kotlin.coroutines.CoroutineContext.Key<*>): kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@26febc6]
2021-03-12 09:55:13,562 [main:302] - generating value of type = Key<*> false depth = 0
2021-03-12 09:55:13,760 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:55:13,766 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:55:14,424 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 3
2021-03-12 09:55:14,621 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:55:14,628 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:55:15,291 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 6
2021-03-12 09:55:15,492 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:55:15,499 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:55:16,196 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:55:16,196 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:55:16,197 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:55:16,197 [main:158] - CANT GENERATE PARAMS FOR public open fun minusKey(key: kotlin.coroutines.CoroutineContext.Key<*>): kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@26febc6]
2021-03-12 09:55:16,197 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@64c6e6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]]
2021-03-12 09:55:16,197 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@64c6e6]
2021-03-12 09:55:16,380 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:55:16,381 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]
2021-03-12 09:55:16,381 [main:117] - GENERATED CALL = (Kla1().context).equals("pfxxp").equals(Kla1().prope2)
2021-03-12 09:55:16,381 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@64c6e6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ba63f8c]]
2021-03-12 09:55:16,381 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@64c6e6]
2021-03-12 09:55:16,381 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ba63f8c]
2021-03-12 09:55:16,381 [main:117] - GENERATED CALL = (Kla1().context).equals(Kla1().prope2).or(Kla4().prope5)
2021-03-12 09:55:16,381 [main:114] - replacement of prope14 of type Boolean is (Kla1().context).equals(Kla1().prope2).xor(true)
2021-03-12 09:55:16,568 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:55:16,568 [main:66] - Compilation checking started
2021-03-12 09:55:17,321 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return prope10
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("leumq" + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != i) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:55:17,323 [main:107] - replacing (prope11, Result<Ty1>)
2021-03-12 09:55:17,323 [main:50] - replacing prope11 Result<Ty1>
2021-03-12 09:55:17,323 [main:54] - Getting value of type Result<Ty1>
2021-03-12 09:55:17,526 [main:302] - generating value of type = Result<Ty1> false depth = 0
2021-03-12 09:55:17,713 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 09:55:17,719 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 09:55:18,145 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 09:55:18,145 [main:58] - GENERATED VALUE OF TYPE Result<Ty1> = 
2021-03-12 09:55:18,907 [main:67] - randomType = LinkedHashSet<Pair<Char, MutableMap<Kla10, Kla11>>>
2021-03-12 09:55:19,082 [main:302] - generating value of type = LinkedHashSet<Pair<Char, MutableMap<Kla10, Kla11>>> false depth = 0
2021-03-12 09:55:19,287 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(elements: kotlin.collections.Collection<Pair<Char, MutableMap<Kla10, Kla11>>>): LinkedHashSet<Pair<Char, MutableMap<Kla10, Kla11>>> = TODO()
2021-03-12 09:55:19,295 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(elements: kotlin.collections.Collection<Pair<Char, MutableMap<Kla10, Kla11>>>): LinkedHashSet<Pair<Char, MutableMap<Kla10, Kla11>>> = TODO()
2021-03-12 09:55:19,734 [main:302] - generating value of type = Collection<Pair<Char, MutableMap<Kla10, Kla11>>> false depth = 3
2021-03-12 09:55:19,911 [main:43] - GENERATING CALL OF fun ULongArray(size: kotlin.Int): Collection<Pair<Char, MutableMap<Kla10, Kla11>>> = TODO()
2021-03-12 09:55:19,918 [main:61] - WITHOUT TYPE PARAMS = fun ULongArray(size: kotlin.Int): Collection<Pair<Char, MutableMap<Kla10, Kla11>>> = TODO()
2021-03-12 09:55:20,344 [main:302] - generating value of type = Int true depth = 6
2021-03-12 09:55:20,351 [main:95] - GENERATED = ULongArray(-1040029998)
2021-03-12 09:55:20,351 [main:95] - GENERATED = LinkedHashSet<Pair<Char, MutableMap<Kla10, Kla11>>>(ULongArray(-1040029998))
2021-03-12 09:55:20,616 [main:106] - GETTING Result<Ty1> from Any
2021-03-12 09:55:20,622 [main:106] - GETTING Result<Ty1> from Any?
2021-03-12 09:55:20,630 [main:106] - GETTING Result<Ty1> from String
2021-03-12 09:55:20,663 [main:106] - GETTING Result<Ty1> from Boolean
2021-03-12 09:55:20,679 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 09:55:20,687 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 09:55:20,688 [main:106] - GETTING Result<Ty1> from Continuation<Any?>
2021-03-12 09:55:20,698 [main:106] - GETTING Result<Ty1> from String
2021-03-12 09:55:20,699 [main:106] - GETTING Result<Ty1> from EmptyCoroutineContext
2021-03-12 09:55:20,719 [main:106] - GETTING Result<Ty1> from Continuation<ArrayList<Int?>>
2021-03-12 09:55:20,730 [main:106] - GETTING Result<Ty1> from Function0<Unit>
2021-03-12 09:55:20,743 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 09:55:20,745 [main:106] - GETTING Result<Ty1> from String
2021-03-12 09:55:20,746 [main:106] - GETTING Result<Ty1> from String
2021-03-12 09:55:20,746 [main:111] - Cant find and generate replacement for prope11 type Result<Ty1>
2021-03-12 09:55:20,746 [main:107] - replacing ("leumq" + " has state-machine " +
                prope12.joinToString(separator = "\n"), String)
2021-03-12 09:55:20,746 [main:50] - replacing "leumq" + " has state-machine " +
                prope12.joinToString(separator = "\n") String
2021-03-12 09:55:20,746 [main:54] - Getting value of type String
2021-03-12 09:55:20,932 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:55:20,937 [main:58] - GENERATED VALUE OF TYPE String = "lxbve"
2021-03-12 09:55:20,937 [main:61] - GENERATED IS CALL =false
2021-03-12 09:55:20,958 [main:67] - randomType = Kla8
2021-03-12 09:55:21,142 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 09:55:21,147 [main:112] - generating klass Kla8 text = class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}
2021-03-12 09:55:21,169 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@58f0bd05]
2021-03-12 09:55:21,169 [main:78] - Generated call from random type = (Kla8()).prope11?.toString()!!
2021-03-12 09:55:21,169 [main:106] - GETTING String from String
2021-03-12 09:55:21,196 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6897e324]]
2021-03-12 09:55:21,196 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6897e324]
2021-03-12 09:55:21,196 [main:117] - GENERATED CALL = (foo()).trimIndent()
2021-03-12 09:55:21,196 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9a9268]]
2021-03-12 09:55:21,196 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9a9268]
2021-03-12 09:55:21,377 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:55:21,383 [main:117] - GENERATED CALL = (foo()).substringAfter('⥊', foo("zmfpg"))
2021-03-12 09:55:21,383 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bbbb64c]]
2021-03-12 09:55:21,383 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bbbb64c]
2021-03-12 09:55:21,554 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:55:21,761 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:55:21,767 [main:117] - GENERATED CALL = (foo()).commonSuffixWith("supyr", false)
2021-03-12 09:55:21,767 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7154703a]]
2021-03-12 09:55:21,768 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7154703a]
2021-03-12 09:55:21,968 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:55:21,975 [main:117] - GENERATED CALL = (foo()).replaceBefore('剂', foo(), prope2)
2021-03-12 09:55:21,975 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1620633d]]
2021-03-12 09:55:21,975 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1620633d]
2021-03-12 09:55:21,975 [main:117] - GENERATED CALL = (foo()).lowercase()
2021-03-12 09:55:21,976 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73b02395]]
2021-03-12 09:55:21,976 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73b02395]
2021-03-12 09:55:22,165 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 09:55:22,170 [main:302] - generating value of type = Char true depth = 1
2021-03-12 09:55:22,178 [main:117] - GENERATED CALL = (foo()).replaceFirstChar({a: Char -> '㏿'})
2021-03-12 09:55:22,178 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e75d52a]]
2021-03-12 09:55:22,178 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e75d52a]
2021-03-12 09:55:22,178 [main:117] - GENERATED CALL = (foo()).concat(foo())
2021-03-12 09:55:22,178 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b40f50a]]
2021-03-12 09:55:22,178 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b40f50a]
2021-03-12 09:55:22,358 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:55:22,364 [main:117] - GENERATED CALL = (foo()).substringAfterLast('඄', foo("zmfpg"))
2021-03-12 09:55:22,364 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2490f82e]]
2021-03-12 09:55:22,364 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2490f82e]
2021-03-12 09:55:22,554 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 09:55:22,748 [main:43] - GENERATING CALL OF fun <T> mutableListOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 09:55:22,755 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 09:55:22,951 [main:302] - generating value of type = Int true depth = 3
2021-03-12 09:55:22,956 [main:95] - GENERATED = mutableListOf<Int>(-1503967735)
2021-03-12 09:55:22,956 [main:117] - GENERATED CALL = (foo()).slice(mutableListOf<Int>(-1503967735))
2021-03-12 09:55:22,956 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55764e19]]
2021-03-12 09:55:22,956 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55764e19]
2021-03-12 09:55:23,127 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:55:23,132 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:55:23,137 [main:117] - GENERATED CALL = (foo()).filterNot({a: Char -> false})
2021-03-12 09:55:23,137 [main:114] - replacement of "leumq" + " has state-machine " +
                prope12.joinToString(separator = "\n") of type String is (foo()).substringAfter('⥊', foo("zmfpg"))
2021-03-12 09:55:23,334 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:55:23,335 [main:66] - Compilation checking started
2021-03-12 09:55:24,139 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return prope10
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != i) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:55:24,141 [main:107] - replacing (prope9.prope14, Boolean)
2021-03-12 09:55:24,141 [main:50] - replacing prope9.prope14 Boolean
2021-03-12 09:55:24,141 [main:54] - Getting value of type Boolean
2021-03-12 09:55:24,335 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:55:24,340 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 09:55:24,341 [main:61] - GENERATED IS CALL =false
2021-03-12 09:55:25,513 [main:67] - randomType = Function1<MutableMap<Kla5, Float?>?, Kla5>
2021-03-12 09:55:25,514 [main:106] - GETTING Boolean from String
2021-03-12 09:55:25,539 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]]
2021-03-12 09:55:25,539 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]
2021-03-12 09:55:25,699 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:25,859 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:55:26,046 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:26,218 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:26,223 [main:117] - GENERATED CALL = (foo("zmfpg")).regionMatches(-2097503318, "embfb", -97006040, 418275384, Kla4().prope5)
2021-03-12 09:55:26,224 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@235e080a]]
2021-03-12 09:55:26,224 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@235e080a]
2021-03-12 09:55:26,224 [main:117] - GENERATED CALL = (foo("zmfpg")).toBoolean()
2021-03-12 09:55:26,224 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]]
2021-03-12 09:55:26,224 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]
2021-03-12 09:55:26,224 [main:117] - GENERATED CALL = (foo("zmfpg")).isNotBlank()
2021-03-12 09:55:26,224 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]]
2021-03-12 09:55:26,224 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:55:26,398 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:26,563 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:26,569 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]
2021-03-12 09:55:26,749 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:26,923 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:55:27,103 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:27,270 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:27,275 [main:117] - GENERATED CALL = (foo("zmfpg")).subSequence(-1926427650, -1338095191).regionMatches(-117921343, StringBuilder(), -1956656140, -119820630, Kla4().prope5)
2021-03-12 09:55:27,275 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ef52922]]
2021-03-12 09:55:27,275 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:55:27,457 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:27,634 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:27,639 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ef52922]
2021-03-12 09:55:27,639 [main:117] - GENERATED CALL = (foo("zmfpg")).subSequence(-612868647, 493303421).isNotEmpty()
2021-03-12 09:55:27,639 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36baf748]]
2021-03-12 09:55:27,639 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36baf748]
2021-03-12 09:55:27,640 [main:117] - GENERATED CALL = (foo("zmfpg")).isEmpty()
2021-03-12 09:55:27,640 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6704d495]]
2021-03-12 09:55:27,640 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]
2021-03-12 09:55:27,640 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6704d495]
2021-03-12 09:55:27,640 [main:117] - GENERATED CALL = (foo("zmfpg")).equals(Kla1().prope2).and(Kla4().prope5)
2021-03-12 09:55:27,640 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@20d6a76b]]
2021-03-12 09:55:27,640 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:55:27,812 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:27,982 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:27,987 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@20d6a76b]
2021-03-12 09:55:27,987 [main:117] - GENERATED CALL = (foo("zmfpg")).subSequence(-292960537, 746311356).equals(Kla1().prope2)
2021-03-12 09:55:27,988 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1832b55f]]
2021-03-12 09:55:27,988 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:55:27,988 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1832b55f]
2021-03-12 09:55:27,988 [main:117] - GENERATED CALL = (foo("zmfpg")).compareTo(foo()).equals(Kla1().prope2)
2021-03-12 09:55:27,988 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76e01234]]
2021-03-12 09:55:27,988 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:55:28,170 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:28,345 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:28,350 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76e01234]
2021-03-12 09:55:28,522 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:55:28,527 [main:117] - GENERATED CALL = (foo("zmfpg")).subSequence(1949378815, -363880182).endsWith('됃', Kla4().prope5)
2021-03-12 09:55:28,527 [main:114] - replacement of prope9.prope14 of type Boolean is (foo("zmfpg")).subSequence(-1926427650, -1338095191).regionMatches(-117921343, StringBuilder(), -1956656140, -119820630, Kla4().prope5)
2021-03-12 09:55:28,689 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:55:28,689 [main:66] - Compilation checking started
2021-03-12 09:55:29,145 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return prope10
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != i) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            (foo("zmfpg")).subSequence(-1926427650, -1338095191).regionMatches(-117921343, StringBuilder(), -1956656140, -119820630, Kla4().prope5) = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:55:29,147 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-12 09:55:29,147 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-12 09:55:29,147 [main:54] - Getting value of type Boolean
2021-03-12 09:55:29,326 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:55:29,331 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 09:55:29,331 [main:61] - GENERATED IS CALL =false
2021-03-12 09:55:29,947 [main:67] - randomType = Kla2<Short?>
2021-03-12 09:55:30,135 [main:302] - generating value of type = Kla2<Short?> false depth = 0
2021-03-12 09:55:30,140 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 09:55:30,931 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-12 09:55:30,936 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}
2021-03-12 09:55:30,955 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla2[DeserializedSimpleFunctionDescriptor@a17fbce]
2021-03-12 09:55:30,956 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70232b31]
2021-03-12 09:55:30,956 [main:78] - Generated call from random type = (Kla5).equals(Kla1().prope2).not()
2021-03-12 09:55:30,956 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (Kla5).equals(Kla1().prope2).not()
2021-03-12 09:55:31,123 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:55:31,123 [main:66] - Compilation checking started
2021-03-12 09:55:31,825 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return prope10
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != i) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:55:31,827 [main:107] - replacing (prope10, String)
2021-03-12 09:55:31,827 [main:50] - replacing prope10 String
2021-03-12 09:55:31,827 [main:54] - Getting value of type String
2021-03-12 09:55:32,013 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:55:32,018 [main:58] - GENERATED VALUE OF TYPE String = "avihw"
2021-03-12 09:55:32,018 [main:61] - GENERATED IS CALL =false
2021-03-12 09:55:32,911 [main:67] - randomType = HashMap<ULong, HashMap<Double, String>>
2021-03-12 09:55:33,087 [main:302] - generating value of type = HashMap<ULong, HashMap<Double, String>> false depth = 0
2021-03-12 09:55:33,257 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<ULong, HashMap<Double, String>>): HashMap<ULong, HashMap<Double, Strg>> = TODO()
2021-03-12 09:55:33,263 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<ULong, HashMap<Double, String>>): HashMap<ULong, HashMap<Double, Strg>> = TODO()
2021-03-12 09:55:33,460 [main:302] - generating value of type = Pair<ULong, HashMap<Double, String>> false depth = 3
2021-03-12 09:55:33,637 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: ULong, second: HashMap<Double, String>): Pair<ULong, HashMap<Double, String>> = TODO()
2021-03-12 09:55:33,644 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: ULong, second: HashMap<Double, String>): Pair<ULong, HashMap<Double, String>> = TODO()
2021-03-12 09:55:33,826 [main:302] - generating value of type = ULong true depth = 6
2021-03-12 09:55:33,831 [main:302] - generating value of type = HashMap<Double, String> false depth = 6
2021-03-12 09:55:33,998 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<Double, Strg> = TODO()
2021-03-12 09:55:34,004 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<Double, Strg> = TODO()
2021-03-12 09:55:34,209 [main:95] - GENERATED = hashMapOf<Double, String>()
2021-03-12 09:55:34,209 [main:95] - GENERATED = Pair<ULong, HashMap<Double, String>>(3347845663542162936.toULong(), hashMapOf<Double, String>())
2021-03-12 09:55:34,209 [main:95] - GENERATED = linkedMapOf<ULong, HashMap<Double, String>>(Pair<ULong, HashMap<Double, String>>(3347845663542162936.toULong(), hashMapOf<Double, String>()))
2021-03-12 09:55:34,366 [main:149] - GENERATING call of type public open fun get(key: kotlin.ULong): kotlin.collections.HashMap<kotlin.Double, kotlin.String>? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@5f83da52]
2021-03-12 09:55:34,551 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 09:55:34,557 [main:149] - GENERATING call of type public open fun put(key: kotlin.Double, value: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@1a632f21]
2021-03-12 09:55:34,716 [main:302] - generating value of type = Double true depth = 0
2021-03-12 09:55:34,722 [main:78] - Generated call from random type = (linkedMapOf<ULong, HashMap<Double, String>>(Pair<ULong, HashMap<Double, String>>(3347845663542162936.toULong(), hashMapOf<Double, String>()))).get(3793185909026415635.toULong())?.put(0.6697504829951177, (foo()))!!
2021-03-12 09:55:34,722 [main:106] - GETTING String from String
2021-03-12 09:55:34,742 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73b02395]]
2021-03-12 09:55:34,743 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73b02395]
2021-03-12 09:55:34,923 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 09:55:34,928 [main:302] - generating value of type = Char true depth = 1
2021-03-12 09:55:34,934 [main:117] - GENERATED CALL = (foo("zmfpg")).replaceFirstChar({a: Char -> '쁔'})
2021-03-12 09:55:34,934 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b40f50a]]
2021-03-12 09:55:34,934 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b40f50a]
2021-03-12 09:55:35,102 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:55:35,282 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:55:35,287 [main:117] - GENERATED CALL = (foo("zmfpg")).substringAfterLast('軄', "kbtgq")
2021-03-12 09:55:35,288 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e45fdcb]]
2021-03-12 09:55:35,288 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e45fdcb]
2021-03-12 09:55:35,448 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:55:35,453 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:55:35,458 [main:117] - GENERATED CALL = (foo("zmfpg")).takeLastWhile({a: Char -> true})
2021-03-12 09:55:35,458 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d2bf30b]]
2021-03-12 09:55:35,458 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d2bf30b]
2021-03-12 09:55:35,638 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:55:35,643 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:55:35,649 [main:117] - GENERATED CALL = (foo("zmfpg")).filter({a: Char -> false})
2021-03-12 09:55:35,649 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfdc48e]]
2021-03-12 09:55:35,649 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfdc48e]
2021-03-12 09:55:35,817 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:55:35,822 [main:117] - GENERATED CALL = (foo("zmfpg")).replaceIndentByMargin("mzzgz", foo())
2021-03-12 09:55:35,822 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7872be90]]
2021-03-12 09:55:35,822 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7872be90]
2021-03-12 09:55:35,996 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:55:36,001 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:55:36,006 [main:117] - GENERATED CALL = (foo("zmfpg")).takeWhile({a: Char -> true})
2021-03-12 09:55:36,007 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7220aca3]]
2021-03-12 09:55:36,007 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:55:36,167 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:36,353 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:36,358 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7220aca3]
2021-03-12 09:55:36,525 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:55:36,534 [main:117] - GENERATED CALL = (foo("zmfpg")).subSequence(-261629698, 1595132699).commonPrefixWith("agxuc", Kla4().prope5)
2021-03-12 09:55:36,534 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]]
2021-03-12 09:55:36,534 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:55:36,534 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]
2021-03-12 09:55:36,706 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:36,711 [main:117] - GENERATED CALL = (foo("zmfpg")).compareTo((foo())).toString(1106454879)
2021-03-12 09:55:36,712 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ac01264]]
2021-03-12 09:55:36,712 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:55:36,871 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:36,876 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ac01264]
2021-03-12 09:55:36,876 [main:117] - GENERATED CALL = (foo("zmfpg")).get(-229118655).titlecase()
2021-03-12 09:55:36,876 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48bf8b9]]
2021-03-12 09:55:36,876 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48bf8b9]
2021-03-12 09:55:37,056 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:55:37,061 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:55:37,067 [main:117] - GENERATED CALL = (foo("zmfpg")).dropLastWhile({a: Char -> false})
2021-03-12 09:55:37,067 [main:114] - replacement of prope10 of type String is (foo("zmfpg")).filter({a: Char -> false})
2021-03-12 09:55:37,238 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:55:37,238 [main:66] - Compilation checking started
2021-03-12 09:55:37,934 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != i) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:55:37,936 [main:107] - replacing (i, Int)
2021-03-12 09:55:37,937 [main:50] - replacing i Int
2021-03-12 09:55:37,937 [main:54] - Getting value of type Int
2021-03-12 09:55:38,114 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:38,120 [main:58] - GENERATED VALUE OF TYPE Int = -103866189
2021-03-12 09:55:38,120 [main:61] - GENERATED IS CALL =false
2021-03-12 09:55:38,320 [main:67] - randomType = Long
2021-03-12 09:55:38,495 [main:302] - generating value of type = Long true depth = 0
2021-03-12 09:55:38,550 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@17f9477]
2021-03-12 09:55:38,550 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6b7b2d35]
2021-03-12 09:55:38,707 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:55:38,712 [main:78] - Generated call from random type = (5829592329932476459).toShort().minus(-38)
2021-03-12 09:55:38,713 [main:106] - GETTING Int from Any
2021-03-12 09:55:38,716 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@a026d6], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b881ccd]]
2021-03-12 09:55:38,717 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@a026d6]
2021-03-12 09:55:38,717 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b881ccd]
2021-03-12 09:55:38,717 [main:117] - GENERATED CALL = (fu0()).equals(Kla1().prope2).compareTo(Kla4().prope5)
2021-03-12 09:55:38,717 [main:114] - replacement of i of type Int is -103866189
2021-03-12 09:55:38,895 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 09:55:38,895 [main:66] - Compilation checking started
2021-03-12 09:55:39,614 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:55:39,616 [main:107] - replacing (prope14, Boolean)
2021-03-12 09:55:39,616 [main:50] - replacing prope14 Boolean
2021-03-12 09:55:39,616 [main:54] - Getting value of type Boolean
2021-03-12 09:55:39,803 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:55:39,809 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 09:55:39,809 [main:61] - GENERATED IS CALL =false
2021-03-12 09:55:40,028 [main:67] - randomType = Set<Boolean>
2021-03-12 09:55:40,029 [main:106] - GETTING Boolean from String
2021-03-12 09:55:40,051 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]]
2021-03-12 09:55:40,052 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]
2021-03-12 09:55:40,052 [main:117] - GENERATED CALL = ((foo())).isNotBlank()
2021-03-12 09:55:40,052 [main:113] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@425b151f]]
2021-03-12 09:55:40,052 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@425b151f]
2021-03-12 09:55:40,052 [main:117] - GENERATED CALL = ((foo())).matches(var prope2 =
2021-03-12 09:55:40,052 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56d70c33]]
2021-03-12 09:55:40,052 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56d70c33]
2021-03-12 09:55:40,223 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:55:40,228 [main:117] - GENERATED CALL = ((foo())).contains('웒', Kla4().prope5)
2021-03-12 09:55:40,228 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]]
2021-03-12 09:55:40,228 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:55:40,387 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:40,573 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:40,578 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]
2021-03-12 09:55:40,578 [main:117] - GENERATED CALL = ((foo())).subSequence(146231953, 795001531).isNotBlank()
2021-03-12 09:55:40,578 [main:113] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bff2b3a]]
2021-03-12 09:55:40,578 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bff2b3a]
2021-03-12 09:55:40,579 [main:117] - GENERATED CALL = ((foo())).isBlank()
2021-03-12 09:55:40,579 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ffe60f1]]
2021-03-12 09:55:40,579 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:55:40,748 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:40,754 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ffe60f1]
2021-03-12 09:55:40,926 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:55:40,931 [main:117] - GENERATED CALL = ((foo())).get(-425537574).equals('ꛚ', Kla4().prope5)
2021-03-12 09:55:40,931 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17b1288e]]
2021-03-12 09:55:40,931 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:55:41,090 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:41,096 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17b1288e]
2021-03-12 09:55:41,096 [main:117] - GENERATED CALL = ((foo())).get(632698050).isLowSurrogate()
2021-03-12 09:55:41,097 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@603a0fa7]]
2021-03-12 09:55:41,097 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:55:41,277 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:41,484 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:41,492 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@603a0fa7]
2021-03-12 09:55:41,692 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:55:41,699 [main:117] - GENERATED CALL = ((foo())).subSequence(-727666186, -158940456).startsWith('跻', Kla4().prope5)
2021-03-12 09:55:41,699 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]]
2021-03-12 09:55:41,699 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:55:41,879 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:42,110 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:42,118 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92824e9]
2021-03-12 09:55:42,314 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:42,528 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:55:42,729 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:42,946 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:42,952 [main:117] - GENERATED CALL = ((foo())).subSequence(773372818, -1269730).regionMatches(-1899631495, "qggxj", -1243615534, 1851487637, Kla4().prope5)
2021-03-12 09:55:42,952 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36baf748]]
2021-03-12 09:55:42,952 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:55:43,146 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:43,354 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:55:43,362 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36baf748]
2021-03-12 09:55:43,362 [main:117] - GENERATED CALL = ((foo())).subSequence(1669343850, 647118187).isEmpty()
2021-03-12 09:55:43,362 [main:114] - replacement of prope14 of type Boolean is ((foo())).subSequence(146231953, 795001531).isNotBlank()
2021-03-12 09:55:43,549 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:55:43,549 [main:66] - Compilation checking started
2021-03-12 09:55:44,458 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        throw exception
    }
}


2021-03-12 09:55:44,461 [main:107] - replacing (Exception(RuntimeException(NotImplementedError("tezqi")))!!, Throwable)
2021-03-12 09:55:44,461 [main:50] - replacing Exception(RuntimeException(NotImplementedError("tezqi")))!! Throwable
2021-03-12 09:55:44,461 [main:54] - Getting value of type Throwable
2021-03-12 09:55:44,661 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 09:55:44,877 [main:43] - GENERATING CALL OF fun Throwable(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 09:55:44,888 [main:61] - WITHOUT TYPE PARAMS = fun Throwable(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 09:55:45,297 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 09:55:45,529 [main:43] - GENERATING CALL OF fun CharacterCodingException(message: kotlin.String?): Throwable = TODO()
2021-03-12 09:55:45,536 [main:61] - WITHOUT TYPE PARAMS = fun CharacterCodingException(message: kotlin.String?): Throwable = TODO()
2021-03-12 09:55:45,949 [main:302] - generating value of type = String true depth = 6
2021-03-12 09:55:45,954 [main:95] - GENERATED = CharacterCodingException("afuql")
2021-03-12 09:55:45,955 [main:95] - GENERATED = Throwable(CharacterCodingException("afuql"))
2021-03-12 09:55:45,955 [main:58] - GENERATED VALUE OF TYPE Throwable = Throwable(CharacterCodingException("afuql"))
2021-03-12 09:55:45,955 [main:61] - GENERATED IS CALL =true
2021-03-12 09:55:46,157 [main:67] - randomType = Float
2021-03-12 09:55:46,348 [main:302] - generating value of type = Float true depth = 0
2021-03-12 09:55:46,403 [main:106] - GETTING Throwable from Any
2021-03-12 09:55:46,409 [main:106] - GETTING Throwable from EmptyCoroutineContext
2021-03-12 09:55:46,430 [main:106] - GETTING Throwable from String
2021-03-12 09:55:46,461 [main:106] - GETTING Throwable from String
2021-03-12 09:55:46,463 [main:106] - GETTING Throwable from Boolean
2021-03-12 09:55:46,478 [main:106] - GETTING Throwable from String
2021-03-12 09:55:46,480 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 09:55:46,488 [main:106] - GETTING Throwable from Function0<Unit>
2021-03-12 09:55:46,501 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 09:55:46,503 [main:106] - GETTING Throwable from Continuation<ArrayList<Int?>>
2021-03-12 09:55:46,514 [main:106] - GETTING Throwable from Continuation<Any?>
2021-03-12 09:55:46,526 [main:106] - GETTING Throwable from Any?
2021-03-12 09:55:46,532 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 09:55:46,533 [main:106] - GETTING Throwable from String
2021-03-12 09:55:46,533 [main:114] - replacement of Exception(RuntimeException(NotImplementedError("tezqi")))!! of type Throwable is Throwable(CharacterCodingException("afuql"))
2021-03-12 09:55:46,722 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:55:46,725 [main:107] - replacing (exception, Throwable)
2021-03-12 09:55:46,725 [main:50] - replacing exception Throwable
2021-03-12 09:55:46,725 [main:54] - Getting value of type Throwable
2021-03-12 09:55:46,895 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 09:55:47,080 [main:43] - GENERATING CALL OF fun UnsupportedOperationException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 09:55:47,086 [main:61] - WITHOUT TYPE PARAMS = fun UnsupportedOperationException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 09:55:47,741 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:55:47,747 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 09:55:47,927 [main:43] - GENERATING CALL OF fun ArithmeticException(message: kotlin.String?): Throwable = TODO()
2021-03-12 09:55:47,935 [main:61] - WITHOUT TYPE PARAMS = fun ArithmeticException(message: kotlin.String?): Throwable = TODO()
2021-03-12 09:55:48,395 [main:302] - generating value of type = String true depth = 6
2021-03-12 09:55:48,400 [main:95] - GENERATED = ArithmeticException("iaegl")
2021-03-12 09:55:48,401 [main:95] - GENERATED = UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
2021-03-12 09:55:48,401 [main:58] - GENERATED VALUE OF TYPE Throwable = UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
2021-03-12 09:55:48,401 [main:61] - GENERATED IS CALL =true
2021-03-12 09:55:49,073 [main:67] - randomType = Kla9<Float>
2021-03-12 09:55:49,257 [main:302] - generating value of type = Kla9<Float> false depth = 0
2021-03-12 09:55:49,262 [main:112] - generating klass Kla9 text = abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-12 09:55:50,131 [main:302] - generating value of type = Kla12 false depth = 2
2021-03-12 09:55:50,136 [main:112] - generating klass Kla12 text = object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw exception
    }
}
2021-03-12 09:55:50,158 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 09:55:50,167 [main:106] - GETTING Throwable from String
2021-03-12 09:55:50,208 [main:106] - GETTING Throwable from Any
2021-03-12 09:55:50,212 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 09:55:50,213 [main:106] - GETTING Throwable from Boolean
2021-03-12 09:55:50,228 [main:106] - GETTING Throwable from Function0<Unit>
2021-03-12 09:55:50,242 [main:106] - GETTING Throwable from Continuation<Any?>
2021-03-12 09:55:50,254 [main:106] - GETTING Throwable from EmptyCoroutineContext
2021-03-12 09:55:50,282 [main:106] - GETTING Throwable from String
2021-03-12 09:55:50,282 [main:106] - GETTING Throwable from String
2021-03-12 09:55:50,283 [main:106] - GETTING Throwable from String
2021-03-12 09:55:50,285 [main:106] - GETTING Throwable from Continuation<ArrayList<Int?>>
2021-03-12 09:55:50,297 [main:106] - GETTING Throwable from Any?
2021-03-12 09:55:50,304 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 09:55:50,304 [main:114] - replacement of exception of type Throwable is UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
2021-03-12 09:55:50,550 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:55:50,551 [main:66] - Compilation checking started
2021-03-12 09:55:51,404 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:55:51,406 [main:107] - replacing (true, Boolean)
2021-03-12 09:55:51,406 [main:50] - replacing true Boolean
2021-03-12 09:55:51,406 [main:54] - Getting value of type Boolean
2021-03-12 09:55:51,661 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:55:51,666 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 09:55:51,667 [main:61] - GENERATED IS CALL =false
2021-03-12 09:55:52,209 [main:67] - randomType = Collection<String?>
2021-03-12 09:55:52,211 [main:106] - GETTING Boolean from Continuation<ArrayList<Int?>>
2021-03-12 09:55:52,225 [main:113] - Case = [public abstract val context: kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.Continuation[DeserializedPropertyDescriptor@67d1d69d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]]
2021-03-12 09:55:52,226 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]
2021-03-12 09:55:52,454 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:55:52,454 [main:117] - GENERATED CALL = (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv")
2021-03-12 09:55:52,454 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70232b31]]
2021-03-12 09:55:52,454 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa]
2021-03-12 09:55:52,455 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70232b31]
2021-03-12 09:55:52,455 [main:117] - GENERATED CALL = (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals(Kla1().prope2).not()
2021-03-12 09:55:52,455 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6704d495]]
2021-03-12 09:55:52,455 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa]
2021-03-12 09:55:52,671 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:55:52,672 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6704d495]
2021-03-12 09:55:52,869 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:55:52,876 [main:117] - GENERATED CALL = (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals("gijod").and(true)
2021-03-12 09:55:52,876 [main:113] - Case = [public abstract fun resumeWith(result: kotlin.Result<kotlin.collections.ArrayList<kotlin.Int?>>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@2c53f9af], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3b47ee6a]]
2021-03-12 09:55:52,876 [main:149] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<kotlin.collections.ArrayList<kotlin.Int?>>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@2c53f9af]
2021-03-12 09:55:53,075 [main:302] - generating value of type = Result<ArrayList<Int?>> false depth = 0
2021-03-12 09:55:53,268 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->ArrayList<Int?>): Result<ArrayList<Int?>> = TODO()
2021-03-12 09:55:53,275 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->ArrayList<Int?>): Result<ArrayList<Int?>> = TODO()
2021-03-12 09:55:53,756 [main:302] - generating value of type = Function0<ArrayList<Int?>> false depth = 3
2021-03-12 09:55:53,763 [main:302] - generating value of type = ArrayList<Int?> false depth = 4
2021-03-12 09:55:53,966 [main:43] - GENERATING CALL OF fun <E> ArrayList(): ArrayList<Int?> = TODO()
2021-03-12 09:55:53,974 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(): ArrayList<Int?> = TODO()
2021-03-12 09:55:54,170 [main:95] - GENERATED = ArrayList<Int?>()
2021-03-12 09:55:54,170 [main:95] - GENERATED = runCatching<ArrayList<Int?>>({ ArrayList<Int?>()})
2021-03-12 09:55:54,170 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3b47ee6a]
2021-03-12 09:55:54,380 [main:117] - GENERATED CALL = (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).resumeWith(runCatching<ArrayList<Int?>>({ ArrayList<Int?>()})).equals(null)
2021-03-12 09:55:54,381 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ba63f8c]]
2021-03-12 09:55:54,381 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa]
2021-03-12 09:55:54,579 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:55:54,580 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ba63f8c]
2021-03-12 09:55:54,580 [main:117] - GENERATED CALL = (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals("czabd").or(Kla4().prope5)
2021-03-12 09:55:54,580 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4be1d672]]
2021-03-12 09:55:54,580 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa]
2021-03-12 09:55:54,581 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4be1d672]
2021-03-12 09:55:54,581 [main:117] - GENERATED CALL = (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals(Kla1().prope2).xor(Kla4().prope5)
2021-03-12 09:55:54,581 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]]
2021-03-12 09:55:54,581 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa]
2021-03-12 09:55:54,581 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]
2021-03-12 09:55:54,792 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:55:54,792 [main:117] - GENERATED CALL = (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals(Kla1().prope2).equals("jjbqn")
2021-03-12 09:55:54,792 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa]]
2021-03-12 09:55:54,792 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa]
2021-03-12 09:55:54,793 [main:117] - GENERATED CALL = (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals(Kla1().prope2)
2021-03-12 09:55:54,793 [main:114] - replacement of true of type Boolean is (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv")
2021-03-12 09:55:54,972 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:55:54,973 [main:66] - Compilation checking started
2021-03-12 09:55:55,758 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:55:55,760 [main:107] - replacing (prope15, Function0<Unit>)
2021-03-12 09:55:55,760 [main:50] - replacing prope15 Function0<Unit>
2021-03-12 09:55:55,760 [main:54] - Getting value of type Function0<Unit>
2021-03-12 09:55:55,978 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 09:55:55,985 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:55:56,202 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:55:56,210 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:55:56,886 [main:302] - generating value of type = Int true depth = 4
2021-03-12 09:55:56,893 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 09:55:56,899 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 09:55:57,102 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:55:57,113 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:55:57,819 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 09:55:57,825 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 09:55:57,832 [main:302] - generating value of type = Any false depth = 9
2021-03-12 09:55:57,832 [main:95] - GENERATED = check(false, { "wukws"})
2021-03-12 09:55:57,832 [main:95] - GENERATED = repeat(-218731064, {a: Int -> check(false, { "wukws"})})
2021-03-12 09:55:57,832 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-218731064, {a: Int -> check(false, { "wukws"})})}
2021-03-12 09:55:57,833 [main:61] - GENERATED IS CALL =false
2021-03-12 09:55:58,314 [main:67] - randomType = HashMap<Byte, String>
2021-03-12 09:55:58,485 [main:302] - generating value of type = HashMap<Byte, String> false depth = 0
2021-03-12 09:55:58,698 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Byte, Strg> = TODO()
2021-03-12 09:55:58,706 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Byte, Strg> = TODO()
2021-03-12 09:55:58,903 [main:95] - GENERATED = linkedMapOf<Byte, String>()
2021-03-12 09:55:59,045 [main:106] - GETTING Function0<Unit> from EmptyCoroutineContext
2021-03-12 09:55:59,070 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 09:55:59,082 [main:106] - GETTING Function0<Unit> from Any?
2021-03-12 09:55:59,087 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 09:55:59,088 [main:106] - GETTING Function0<Unit> from String
2021-03-12 09:55:59,122 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 09:55:59,129 [main:106] - GETTING Function0<Unit> from String
2021-03-12 09:55:59,130 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-12 09:55:59,146 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 09:55:59,148 [main:106] - GETTING Function0<Unit> from String
2021-03-12 09:55:59,149 [main:106] - GETTING Function0<Unit> from Continuation<ArrayList<Int?>>
2021-03-12 09:55:59,161 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 09:55:59,177 [main:114] - replacement of prope15 of type Function0<Unit> is { repeat(-218731064, {a: Int -> check(false, { "wukws"})})}
2021-03-12 09:55:59,353 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 09:55:59,354 [main:66] - Compilation checking started
2021-03-12 09:55:59,845 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        { repeat(-218731064, {a: Int -> check(false, { "wukws"})})}()
        if (checkFinished && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:55:59,847 [main:107] - replacing (getOrThrow(), Ty1)
2021-03-12 09:55:59,847 [main:50] - replacing getOrThrow() Ty1
2021-03-12 09:55:59,847 [main:54] - Getting value of type Ty1
2021-03-12 09:56:00,075 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 09:56:00,084 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 09:56:00,336 [main:67] - randomType = Short
2021-03-12 09:56:00,529 [main:302] - generating value of type = Short true depth = 0
2021-03-12 09:56:00,594 [main:106] - GETTING Ty1 from String
2021-03-12 09:56:00,625 [main:106] - GETTING Ty1 from EmptyCoroutineContext
2021-03-12 09:56:00,649 [main:106] - GETTING Ty1 from Continuation<ArrayList<Int?>>
2021-03-12 09:56:00,663 [main:106] - GETTING Ty1 from String
2021-03-12 09:56:00,664 [main:106] - GETTING Ty1 from Boolean
2021-03-12 09:56:00,679 [main:106] - GETTING Ty1 from Any
2021-03-12 09:56:00,683 [main:106] - GETTING Ty1 from Any?
2021-03-12 09:56:00,688 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 09:56:00,699 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 09:56:00,706 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 09:56:00,707 [main:106] - GETTING Ty1 from String
2021-03-12 09:56:00,708 [main:106] - GETTING Ty1 from String
2021-03-12 09:56:00,708 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 09:56:00,709 [main:106] - GETTING Ty1 from Continuation<Any?>
2021-03-12 09:56:00,718 [main:111] - Cant find and generate replacement for getOrThrow() type Ty1
2021-03-12 09:56:00,718 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 09:56:00,719 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 09:56:00,719 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 09:56:00,921 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 09:56:00,930 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 09:56:00,955 [main:67] - randomType = Kla5
2021-03-12 09:56:01,142 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 09:56:01,148 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}
2021-03-12 09:56:01,180 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 09:56:01,222 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 09:56:01,223 [main:106] - GETTING EmptyCoroutineContext from Any
2021-03-12 09:56:01,228 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 09:56:01,238 [main:106] - GETTING EmptyCoroutineContext from Any?
2021-03-12 09:56:01,244 [main:106] - GETTING EmptyCoroutineContext from Continuation<Any?>
2021-03-12 09:56:01,255 [main:106] - GETTING EmptyCoroutineContext from Function0<Unit>
2021-03-12 09:56:01,271 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 09:56:01,272 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 09:56:01,273 [main:106] - GETTING EmptyCoroutineContext from Continuation<ArrayList<Int?>>
2021-03-12 09:56:01,285 [main:106] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-12 09:56:01,313 [main:114] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla1().context
2021-03-12 09:56:01,495 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:56:01,496 [main:66] - Compilation checking started
2021-03-12 09:56:02,234 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:56:02,236 [main:107] - replacing (prope11.exceptionOrNull(), Throwable?)
2021-03-12 09:56:02,236 [main:50] - replacing prope11.exceptionOrNull() Throwable?
2021-03-12 09:56:02,236 [main:54] - Getting value of type Throwable?
2021-03-12 09:56:02,457 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 09:56:02,466 [main:58] - GENERATED VALUE OF TYPE Throwable? = UnsupportedOperationException()
2021-03-12 09:56:02,466 [main:61] - GENERATED IS CALL =true
2021-03-12 09:56:02,717 [main:67] - randomType = Kla7?
2021-03-12 09:56:02,910 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 09:56:02,916 [main:112] - generating klass Kla7 text = open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}
2021-03-12 09:56:03,102 [main:194] - Type params = []
2021-03-12 09:56:03,329 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 09:56:03,524 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:56:03,532 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:56:03,972 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 09:56:04,196 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:56:04,205 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:56:04,876 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 09:56:05,113 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:56:05,121 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:56:05,795 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:56:05,796 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:56:05,796 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:56:05,813 [main:106] - GETTING Throwable? from String
2021-03-12 09:56:05,834 [main:106] - GETTING Throwable? from Continuation<ArrayList<Int?>>
2021-03-12 09:56:05,844 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 09:56:05,850 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 09:56:05,850 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 09:56:05,851 [main:106] - GETTING Throwable? from String
2021-03-12 09:56:05,851 [main:106] - GETTING Throwable? from Boolean
2021-03-12 09:56:05,865 [main:106] - GETTING Throwable? from Function0<Unit>
2021-03-12 09:56:05,877 [main:106] - GETTING Throwable? from Any?
2021-03-12 09:56:05,881 [main:106] - GETTING Throwable? from String
2021-03-12 09:56:05,882 [main:106] - GETTING Throwable? from String
2021-03-12 09:56:05,883 [main:106] - GETTING Throwable? from EmptyCoroutineContext
2021-03-12 09:56:05,911 [main:106] - GETTING Throwable? from Continuation<Any?>
2021-03-12 09:56:05,923 [main:106] - GETTING Throwable? from Any
2021-03-12 09:56:05,928 [main:114] - replacement of prope11.exceptionOrNull() of type Throwable? is UnsupportedOperationException()
2021-03-12 09:56:06,124 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:56:06,125 [main:66] - Compilation checking started
2021-03-12 09:56:06,925 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:56:06,928 [main:107] - replacing (prope13++, Int)
2021-03-12 09:56:06,928 [main:50] - replacing prope13++ Int
2021-03-12 09:56:06,928 [main:54] - Getting value of type Int
2021-03-12 09:56:07,144 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:56:07,150 [main:58] - GENERATED VALUE OF TYPE Int = 1823514569
2021-03-12 09:56:07,150 [main:61] - GENERATED IS CALL =false
2021-03-12 09:56:08,576 [main:67] - randomType = MutableMap<List<Sequence<Int?>>, Function1<Float, Kla7?>>
2021-03-12 09:56:08,577 [main:106] - GETTING Int from Continuation<Any?>
2021-03-12 09:56:08,587 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b881ccd]]
2021-03-12 09:56:08,587 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa]
2021-03-12 09:56:08,587 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b881ccd]
2021-03-12 09:56:08,759 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:56:08,766 [main:117] - GENERATED CALL = (fu3({a: Throwable -> check(true, { "fvgiu"})})).equals(Kla1().prope2).compareTo(true)
2021-03-12 09:56:08,766 [main:114] - replacement of prope13++ of type Int is 1823514569
2021-03-12 09:56:08,959 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 09:56:08,960 [main:66] - Compilation checking started
2021-03-12 09:56:09,770 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:56:09,774 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected ", String)
2021-03-12 09:56:09,774 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " String
2021-03-12 09:56:09,775 [main:54] - Getting value of type String
2021-03-12 09:56:10,002 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:56:10,008 [main:58] - GENERATED VALUE OF TYPE String = "rtytp"
2021-03-12 09:56:10,008 [main:61] - GENERATED IS CALL =false
2021-03-12 09:56:10,255 [main:67] - randomType = Set<String>
2021-03-12 09:56:10,255 [main:106] - GETTING String from String
2021-03-12 09:56:10,282 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73b02395]]
2021-03-12 09:56:10,282 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73b02395]
2021-03-12 09:56:10,472 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 09:56:10,479 [main:302] - generating value of type = Char true depth = 1
2021-03-12 09:56:10,485 [main:117] - GENERATED CALL = (foo("zmfpg")).replaceFirstChar({a: Char -> '嚮'})
2021-03-12 09:56:10,485 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7872be90]]
2021-03-12 09:56:10,485 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7872be90]
2021-03-12 09:56:10,657 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:56:10,664 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:56:10,670 [main:117] - GENERATED CALL = (foo("zmfpg")).takeWhile({a: Char -> false})
2021-03-12 09:56:10,670 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@322eded1]]
2021-03-12 09:56:10,670 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@322eded1]
2021-03-12 09:56:10,871 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:56:11,077 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:56:11,086 [main:117] - GENERATED CALL = (foo("zmfpg")).replaceAfterLast('ﻜ', foo(), "rmohx")
2021-03-12 09:56:11,086 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6855bae5]]
2021-03-12 09:56:11,086 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6855bae5]
2021-03-12 09:56:11,086 [main:117] - GENERATED CALL = (foo("zmfpg")).reversed()
2021-03-12 09:56:11,086 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7154703a]]
2021-03-12 09:56:11,086 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7154703a]
2021-03-12 09:56:11,289 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:56:11,475 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:56:11,483 [main:117] - GENERATED CALL = (foo("zmfpg")).replaceBefore('莀', "xiuig", (foo()))
2021-03-12 09:56:11,483 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@704e67ba]]
2021-03-12 09:56:11,483 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@704e67ba]
2021-03-12 09:56:11,702 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:56:11,711 [main:117] - GENERATED CALL = (foo("zmfpg")).takeLast(994384734)
2021-03-12 09:56:11,711 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70a40148]]
2021-03-12 09:56:11,711 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:56:11,898 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:56:11,905 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70a40148]
2021-03-12 09:56:11,905 [main:117] - GENERATED CALL = (foo("zmfpg")).get(661872328).lowercase()
2021-03-12 09:56:11,905 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34db013e]]
2021-03-12 09:56:11,905 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:56:12,096 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:56:12,280 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:56:12,286 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34db013e]
2021-03-12 09:56:12,484 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:56:12,490 [main:117] - GENERATED CALL = (foo("zmfpg")).subSequence(-1109406563, 862940731).repeat(-652509048)
2021-03-12 09:56:12,490 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfdc48e]]
2021-03-12 09:56:12,490 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfdc48e]
2021-03-12 09:56:12,672 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:56:12,867 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:56:12,874 [main:117] - GENERATED CALL = (foo("zmfpg")).replaceIndentByMargin("nypri", "byylg")
2021-03-12 09:56:12,874 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ceeeaf7]]
2021-03-12 09:56:12,874 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:56:13,053 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:56:13,060 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ceeeaf7]
2021-03-12 09:56:13,061 [main:117] - GENERATED CALL = (foo("zmfpg")).get(-603331416).uppercase()
2021-03-12 09:56:13,061 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " of type String is (foo("zmfpg")).reversed()
2021-03-12 09:56:13,228 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:56:13,228 [main:66] - Compilation checking started
2021-03-12 09:56:14,000 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error((foo("zmfpg")).reversed() + numberOfSuspensions + ", got " + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:56:14,003 [main:107] - replacing ({
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }, Unit?)
2021-03-12 09:56:14,003 [main:50] - replacing {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    } Unit?
2021-03-12 09:56:14,003 [main:54] - Getting value of type Unit?
2021-03-12 09:56:14,223 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 09:56:14,423 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 09:56:14,431 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 09:56:14,853 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 09:56:14,859 [main:95] - GENERATED = check(false)
2021-03-12 09:56:14,859 [main:58] - GENERATED VALUE OF TYPE Unit? = check(false)
2021-03-12 09:56:14,859 [main:61] - GENERATED IS CALL =true
2021-03-12 09:56:15,119 [main:67] - randomType = ULong
2021-03-12 09:56:15,314 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 09:56:15,363 [main:106] - GETTING Unit? from CoroutineContext
2021-03-12 09:56:15,370 [main:106] - GETTING Unit? from Continuation<Any?>
2021-03-12 09:56:15,397 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resume(value: T): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@6c77a801]]
2021-03-12 09:56:15,398 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resume(value: T): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@6c77a801]
2021-03-12 09:56:15,590 [main:302] - generating value of type = T false depth = 0
2021-03-12 09:56:16,042 [main:43] - GENERATING CALL OF fun <T> maxOf(a: List<Int>, b: List<Int>, c: List<Int>, comparator: kotlin.Comparator<List<Int>>): T = TODO()
2021-03-12 09:56:16,049 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: List<Int>, b: List<Int>, c: List<Int>, comparator: kotlin.Comparator<List<Int>>): T = TODO()
2021-03-12 09:56:16,501 [main:302] - generating value of type = List<Int> false depth = 3
2021-03-12 09:56:16,689 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(elements: Int): List<Int> = TODO()
2021-03-12 09:56:16,697 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(elements: Int): List<Int> = TODO()
2021-03-12 09:56:16,924 [main:302] - generating value of type = Int true depth = 6
2021-03-12 09:56:16,932 [main:95] - GENERATED = listOfNotNull<Int>(1728084934)
2021-03-12 09:56:16,932 [main:302] - generating value of type = List<Int> false depth = 3
2021-03-12 09:56:17,130 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): List<Int> = TODO()
2021-03-12 09:56:17,137 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): List<Int> = TODO()
2021-03-12 09:56:17,348 [main:95] - GENERATED = arrayListOf<Int>()
2021-03-12 09:56:17,349 [main:302] - generating value of type = List<Int> false depth = 3
2021-03-12 09:56:17,540 [main:43] - GENERATING CALL OF fun <T> listOf(elements: Int): List<Int> = TODO()
2021-03-12 09:56:17,547 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(elements: Int): List<Int> = TODO()
2021-03-12 09:56:17,786 [main:302] - generating value of type = Int true depth = 6
2021-03-12 09:56:17,793 [main:95] - GENERATED = listOf<Int>(1367868642)
2021-03-12 09:56:17,794 [main:302] - generating value of type = Comparator<List<Int>> false depth = 3
2021-03-12 09:56:17,989 [main:43] - GENERATING CALL OF fun <T> nullsFirst(comparator: kotlin.Comparator<List<Int>>): Comparator<List<Int>> = TODO()
2021-03-12 09:56:17,997 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsFirst(comparator: kotlin.Comparator<List<Int>>): Comparator<List<Int>> = TODO()
2021-03-12 09:56:18,429 [main:302] - generating value of type = Comparator<List<Int>> false depth = 6
2021-03-12 09:56:18,673 [main:43] - GENERATING CALL OF fun <T> nullsFirst(comparator: kotlin.Comparator<List<Int>>): Comparator<List<Int>> = TODO()
2021-03-12 09:56:18,681 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsFirst(comparator: kotlin.Comparator<List<Int>>): Comparator<List<Int>> = TODO()
2021-03-12 09:56:19,129 [main:302] - generating value of type = Comparator<List<Int>> false depth = 9
2021-03-12 09:56:19,337 [main:43] - GENERATING CALL OF fun <T, K> compareBy(comparator: kotlin.Comparator<Kla5>, selector: (List<Int>)->Kla5): Comparator<List<Int>> = TODO()
2021-03-12 09:56:19,344 [main:61] - WITHOUT TYPE PARAMS = fun <T, K> compareBy(comparator: kotlin.Comparator<Kla5>, selector: (List<Int>)->Kla5): Comparator<List<Int>> = TODO()
2021-03-12 09:56:20,085 [main:302] - generating value of type = Comparator<Kla5> false depth = 12
2021-03-12 09:56:20,273 [main:43] - GENERATING CALL OF fun <T> nullsFirst(): Comparator<Kla5> = TODO()
2021-03-12 09:56:20,281 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsFirst(): Comparator<Kla5> = TODO()
2021-03-12 09:56:20,523 [main:95] - GENERATED = nullsFirst<Kla5>()
2021-03-12 09:56:20,523 [main:302] - generating value of type = Function1<List<Int>, Kla5> false depth = 12
2021-03-12 09:56:20,530 [main:302] - generating value of type = Kla5 false depth = 13
2021-03-12 09:56:20,536 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}
2021-03-12 09:56:20,537 [main:95] - GENERATED = compareBy<List<Int>, Kla5>(nullsFirst<Kla5>(), {a: List<Int> -> Kla5})
2021-03-12 09:56:20,537 [main:95] - GENERATED = nullsFirst<List<Int>>(compareBy<List<Int>, Kla5>(nullsFirst<Kla5>(), {a: List<Int> -> Kla5}))
2021-03-12 09:56:20,537 [main:95] - GENERATED = nullsFirst<List<Int>>(nullsFirst<List<Int>>(compareBy<List<Int>, Kla5>(nullsFirst<Kla5>(), {a: List<Int> -> Kla5})))
2021-03-12 09:56:20,538 [main:95] - GENERATED = maxOf<List<Int>>(listOfNotNull<Int>(1728084934), arrayListOf<Int>(), listOf<Int>(1367868642), nullsFirst<List<Int>>(nullsFirst<List<Int>>(compareBy<List<Int>, Kla5>(nullsFirst<Kla5>(), {a: List<Int> -> Kla5}))))
2021-03-12 09:56:20,538 [main:117] - GENERATED CALL = (fu3({a: Throwable -> check(true, { "fvgiu"})}))?.resume(maxOf<List<Int>>(listOfNotNull<Int>(1728084934), arrayListOf<Int>(), listOf<Int>(1367868642), nullsFirst<List<Int>>(nullsFirst<List<Int>>(compareBy<List<Int>, Kla5>(nullsFirst<Kla5>(), {a: List<Int> -> Kla5})))))
2021-03-12 09:56:20,539 [main:113] - Case = [public abstract fun resumeWith(result: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3448ae4]]
2021-03-12 09:56:20,539 [main:149] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3448ae4]
2021-03-12 09:56:20,728 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 09:56:20,929 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 09:56:20,937 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 09:56:21,383 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 09:56:21,390 [main:95] - GENERATED = runCatching<Any?>({ null})
2021-03-12 09:56:21,391 [main:117] - GENERATED CALL = (fu3({a: Throwable -> check(true, { "fvgiu"})}))?.resumeWith(runCatching<Any?>({ null}))
2021-03-12 09:56:21,391 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resumeWithException(exception: kotlin.Throwable): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@694d33bc]]
2021-03-12 09:56:21,391 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resumeWithException(exception: kotlin.Throwable): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@694d33bc]
2021-03-12 09:56:21,582 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 09:56:21,784 [main:43] - GENERATING CALL OF fun NoWhenBranchMatchedException(message: kotlin.String?): Throwable = TODO()
2021-03-12 09:56:21,792 [main:61] - WITHOUT TYPE PARAMS = fun NoWhenBranchMatchedException(message: kotlin.String?): Throwable = TODO()
2021-03-12 09:56:22,197 [main:302] - generating value of type = String true depth = 3
2021-03-12 09:56:22,203 [main:95] - GENERATED = NoWhenBranchMatchedException("bsofa")
2021-03-12 09:56:22,203 [main:117] - GENERATED CALL = (fu3({a: Throwable -> check(true, { "fvgiu"})}))?.resumeWithException(NoWhenBranchMatchedException("bsofa"))
2021-03-12 09:56:22,203 [main:114] - replacement of {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    } of type Unit? is (fu3({a: Throwable -> check(true, { "fvgiu"})}))?.resumeWithException(NoWhenBranchMatchedException("bsofa"))
2021-03-12 09:56:22,368 [main:33] - Trying to replace BLOCK on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 09:56:22,369 [main:66] - Compilation checking started
2021-03-12 09:56:22,379 [main:71] - Wrong syntax or breaks conditions
2021-03-12 09:56:22,380 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) (fu3({a: Throwable -> check(true, { "fvgiu"})}))?.resumeWithException(NoWhenBranchMatchedException("bsofa"))
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error((foo("zmfpg")).reversed() + numberOfSuspensions + ", got " + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:56:22,382 [main:107] - replacing (checkFinished, Boolean)
2021-03-12 09:56:22,382 [main:50] - replacing checkFinished Boolean
2021-03-12 09:56:22,382 [main:54] - Getting value of type Boolean
2021-03-12 09:56:22,549 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:56:22,556 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 09:56:22,556 [main:61] - GENERATED IS CALL =false
2021-03-12 09:56:22,568 [main:67] - randomType = Boolean
2021-03-12 09:56:22,734 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:56:22,751 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@29528773]
2021-03-12 09:56:22,918 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:56:22,918 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ba63f8c]
2021-03-12 09:56:22,918 [main:78] - Generated call from random type = (false).equals("kzztz").or(Kla4().prope5)
2021-03-12 09:56:22,919 [main:106] - GETTING Boolean from CoroutineContext
2021-03-12 09:56:22,929 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]]
2021-03-12 09:56:22,929 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]
2021-03-12 09:56:23,096 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:56:23,097 [main:117] - GENERATED CALL = (Kla5.context).equals("yiysp")
2021-03-12 09:56:23,097 [main:113] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@54e8ab82], public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@a026d6]]
2021-03-12 09:56:23,097 [main:149] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@54e8ab82]
2021-03-12 09:56:23,277 [main:302] - generating value of type = R false depth = 0
2021-03-12 09:56:23,961 [main:43] - GENERATING CALL OF fun <R> run(block: ()->List<HashSet<Boolean>>): R = TODO()
2021-03-12 09:56:23,969 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->List<HashSet<Boolean>>): R = TODO()
2021-03-12 09:56:24,357 [main:302] - generating value of type = Function0<List<HashSet<Boolean>>> false depth = 3
2021-03-12 09:56:24,363 [main:302] - generating value of type = List<HashSet<Boolean>> false depth = 4
2021-03-12 09:56:24,543 [main:43] - GENERATING CALL OF fun <E> ArrayList(elements: kotlin.collections.Collection<HashSet<Boolean>>): List<HashSet<Boolean>> = TODO()
2021-03-12 09:56:24,550 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(elements: kotlin.collections.Collection<HashSet<Boolean>>): List<HashSet<Boolean>> = TODO()
2021-03-12 09:56:24,948 [main:302] - generating value of type = Collection<HashSet<Boolean>> false depth = 7
2021-03-12 09:56:25,126 [main:43] - GENERATING CALL OF fun <T> mutableListOf(): Collection<HashSet<Boolean>> = TODO()
2021-03-12 09:56:25,133 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(): Collection<HashSet<Boolean>> = TODO()
2021-03-12 09:56:25,317 [main:95] - GENERATED = mutableListOf<HashSet<Boolean>>()
2021-03-12 09:56:25,317 [main:95] - GENERATED = ArrayList<HashSet<Boolean>>(mutableListOf<HashSet<Boolean>>())
2021-03-12 09:56:25,317 [main:95] - GENERATED = run<List<HashSet<Boolean>>>({ ArrayList<HashSet<Boolean>>(mutableListOf<HashSet<Boolean>>())})
2021-03-12 09:56:25,486 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-12 09:56:25,493 [main:302] - generating value of type = R false depth = 1
2021-03-12 09:56:26,160 [main:43] - GENERATING CALL OF fun <R> run(block: ()->List<Byte>): R = TODO()
2021-03-12 09:56:26,169 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->List<Byte>): R = TODO()
2021-03-12 09:56:26,599 [main:302] - generating value of type = Function0<List<Byte>> false depth = 4
2021-03-12 09:56:26,605 [main:302] - generating value of type = List<Byte> false depth = 5
2021-03-12 09:56:26,820 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): List<Byte> = TODO()
2021-03-12 09:56:26,828 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): List<Byte> = TODO()
2021-03-12 09:56:27,047 [main:95] - GENERATED = arrayListOf<Byte>()
2021-03-12 09:56:27,047 [main:95] - GENERATED = run<List<Byte>>({ arrayListOf<Byte>()})
2021-03-12 09:56:27,047 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@a026d6]
2021-03-12 09:56:27,048 [main:117] - GENERATED CALL = (Kla5.context).fold(run<List<HashSet<Boolean>>>({ ArrayList<HashSet<Boolean>>(mutableListOf<HashSet<Boolean>>())}), {a: R, b: Element -> run<List<Byte>>({ arrayListOf<Byte>()})})?.equals(Kla1().prope2)
2021-03-12 09:56:27,048 [main:113] - Case = [public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5cf50a6b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext.Element[DeserializedSimpleFunctionDescriptor@98d782d]]
2021-03-12 09:56:27,048 [main:149] - GENERATING call of type public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5cf50a6b]
2021-03-12 09:56:27,255 [main:302] - generating value of type = Key<E> false depth = 0
2021-03-12 09:56:27,470 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 09:56:27,477 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 09:56:28,198 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 3
2021-03-12 09:56:28,391 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:56:28,398 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:56:29,101 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 6
2021-03-12 09:56:29,305 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:56:29,312 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:56:30,035 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 09:56:30,035 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:56:30,035 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 09:56:30,035 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5cf50a6b]
2021-03-12 09:56:30,035 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4be1d672]]
2021-03-12 09:56:30,035 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]
2021-03-12 09:56:30,035 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4be1d672]
2021-03-12 09:56:30,035 [main:117] - GENERATED CALL = (Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5)
2021-03-12 09:56:30,035 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ba63f8c]]
2021-03-12 09:56:30,035 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]
2021-03-12 09:56:30,036 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ba63f8c]
2021-03-12 09:56:30,036 [main:117] - GENERATED CALL = (Kla5.context).equals(Kla1().prope2).or(Kla4().prope5)
2021-03-12 09:56:30,036 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]]
2021-03-12 09:56:30,036 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]
2021-03-12 09:56:30,036 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]
2021-03-12 09:56:30,036 [main:117] - GENERATED CALL = (Kla5.context).equals(Kla1().prope2).equals(Kla1().prope2)
2021-03-12 09:56:30,036 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70232b31]]
2021-03-12 09:56:30,036 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]
2021-03-12 09:56:30,036 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70232b31]
2021-03-12 09:56:30,037 [main:117] - GENERATED CALL = (Kla5.context).equals(Kla1().prope2).not()
2021-03-12 09:56:30,037 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6704d495]]
2021-03-12 09:56:30,037 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]
2021-03-12 09:56:30,218 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:56:30,218 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6704d495]
2021-03-12 09:56:30,218 [main:117] - GENERATED CALL = (Kla5.context).equals("ruayx").and(Kla4().prope5)
2021-03-12 09:56:30,218 [main:113] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@54e8ab82], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@46bed5b4]]
2021-03-12 09:56:30,218 [main:149] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@54e8ab82]
2021-03-12 09:56:30,428 [main:302] - generating value of type = R false depth = 0
2021-03-12 09:56:30,958 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->Double): R = TODO()
2021-03-12 09:56:30,966 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->Double): R = TODO()
2021-03-12 09:56:31,716 [main:302] - generating value of type = Any false depth = 3
2021-03-12 09:56:31,717 [main:302] - generating value of type = Function0<Double> false depth = 3
2021-03-12 09:56:31,723 [main:302] - generating value of type = Double true depth = 4
2021-03-12 09:56:31,730 [main:95] - GENERATED = synchronized<Double>("yqxcl", { 0.03494814458592821})
2021-03-12 09:56:31,958 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-12 09:56:31,964 [main:302] - generating value of type = R false depth = 1
2021-03-12 09:56:32,726 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Kla12?, block: T.()->Char): R = TODO()
2021-03-12 09:56:32,737 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Kla12?, block: T.()->Char): R = TODO()
2021-03-12 09:56:33,213 [main:302] - generating value of type = Kla12 false depth = 4
2021-03-12 09:56:33,219 [main:112] - generating klass Kla12 text = object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}
2021-03-12 09:56:33,220 [main:385] - Cant generate call of fun <T, R> with(receiver: Kla12?, block: T.()->Char): R = TODO()
2021-03-12 09:56:33,220 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@46bed5b4]
2021-03-12 09:56:33,430 [main:302] - generating value of type = T false depth = 0
2021-03-12 09:56:34,629 [main:43] - GENERATING CALL OF fun <T> minOf(a: Function2<UShort, Kla1?, Long>, b: Function2<UShort, Kla1?, Long>, c: Function2<UShort, Kla1?, Long>, comparator: kotlin.Comparator<Function2<UShort, Kla1?, Long>>): T = TODO()
2021-03-12 09:56:34,637 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Function2<UShort, Kla1?, Long>, b: Function2<UShort, Kla1?, Long>, c: Function2<UShort, Kla1?, Long>, comparator: kotlin.Comparator<Function2<UShort, Kla1?, Long>>): T = TODO()
2021-03-12 09:56:35,149 [main:302] - generating value of type = Function2<UShort, Kla1?, Long> false depth = 3
2021-03-12 09:56:35,157 [main:302] - generating value of type = Long true depth = 4
2021-03-12 09:56:35,163 [main:302] - generating value of type = Function2<UShort, Kla1?, Long> false depth = 3
2021-03-12 09:56:35,170 [main:302] - generating value of type = Long true depth = 4
2021-03-12 09:56:35,180 [main:302] - generating value of type = Function2<UShort, Kla1?, Long> false depth = 3
2021-03-12 09:56:35,191 [main:302] - generating value of type = Long true depth = 4
2021-03-12 09:56:35,200 [main:302] - generating value of type = Comparator<Function2<UShort, Kla1?, Long>> false depth = 3
2021-03-12 09:56:35,497 [main:43] - GENERATING CALL OF fun <T> naturalOrder(): Comparator<Function2<UShort, Kla1?, Long>> = TODO()
2021-03-12 09:56:35,506 [main:61] - WITHOUT TYPE PARAMS = fun <T> naturalOrder(): Comparator<Function2<UShort, Kla1?, Long>> = TODO()
2021-03-12 09:56:35,729 [main:95] - GENERATED = naturalOrder<Function2<UShort, Kla1?, Long>>()
2021-03-12 09:56:35,730 [main:95] - GENERATED = minOf<Function2<UShort, Kla1?, Long>>({a: UShort, b: Kla1? -> -5481291614928763091}, {a: UShort, b: Kla1? -> -5563830249604533354}, {a: UShort, b: Kla1? -> 7755874698638302932}, naturalOrder<Function2<UShort, Kla1?, Long>>())
2021-03-12 09:56:35,730 [main:117] - GENERATED CALL = (Kla5.context).fold(synchronized<Double>("yqxcl", { 0.03494814458592821}), {a: R, b: Element -> })?.contains(minOf<Function2<UShort, Kla1?, Long>>({a: UShort, b: Kla1? -> -5481291614928763091}, {a: UShort, b: Kla1? -> -5563830249604533354}, {a: UShort, b: Kla1? -> 7755874698638302932}, naturalOrder<Function2<UShort, Kla1?, Long>>()))
2021-03-12 09:56:35,730 [main:114] - replacement of checkFinished of type Boolean is (Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5)
2021-03-12 09:56:35,926 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:56:35,927 [main:66] - Compilation checking started
2021-03-12 09:56:36,706 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error((foo("zmfpg")).reversed() + numberOfSuspensions + ", got " + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5) && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:56:36,708 [main:107] - replacing (prope11.getOrThrow(), Ty1)
2021-03-12 09:56:36,708 [main:50] - replacing prope11.getOrThrow() Ty1
2021-03-12 09:56:36,708 [main:54] - Getting value of type Ty1
2021-03-12 09:56:36,913 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 09:56:36,922 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 09:56:37,618 [main:67] - randomType = Kla9<UShort?>
2021-03-12 09:56:37,824 [main:302] - generating value of type = Kla9<UShort?> false depth = 0
2021-03-12 09:56:37,831 [main:112] - generating klass Kla9 text = abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-12 09:56:38,511 [main:302] - generating value of type = Kla12 false depth = 2
2021-03-12 09:56:38,517 [main:112] - generating klass Kla12 text = object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}
2021-03-12 09:56:38,536 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 09:56:38,548 [main:106] - GETTING Ty1 from Boolean
2021-03-12 09:56:38,560 [main:106] - GETTING Ty1 from Continuation<Any?>
2021-03-12 09:56:38,568 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 09:56:38,578 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 09:56:38,578 [main:106] - GETTING Ty1 from String
2021-03-12 09:56:38,598 [main:106] - GETTING Ty1 from Any
2021-03-12 09:56:38,601 [main:106] - GETTING Ty1 from String
2021-03-12 09:56:38,602 [main:106] - GETTING Ty1 from Any?
2021-03-12 09:56:38,608 [main:106] - GETTING Ty1 from EmptyCoroutineContext
2021-03-12 09:56:38,627 [main:106] - GETTING Ty1 from Continuation<ArrayList<Int?>>
2021-03-12 09:56:38,637 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 09:56:38,638 [main:106] - GETTING Ty1 from String
2021-03-12 09:56:38,639 [main:106] - GETTING Ty1 from String
2021-03-12 09:56:38,639 [main:111] - Cant find and generate replacement for prope11.getOrThrow() type Ty1
2021-03-12 09:56:38,639 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 09:56:38,639 [main:50] - replacing numberOfSuspensions Int
2021-03-12 09:56:38,639 [main:54] - Getting value of type Int
2021-03-12 09:56:38,871 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:56:38,877 [main:58] - GENERATED VALUE OF TYPE Int = -723123815
2021-03-12 09:56:38,877 [main:61] - GENERATED IS CALL =false
2021-03-12 09:56:39,133 [main:67] - randomType = Kla0?
2021-03-12 09:56:39,331 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 09:56:39,338 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}
2021-03-12 09:56:39,522 [main:194] - Type params = []
2021-03-12 09:56:39,726 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 09:56:39,934 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:56:39,943 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:56:40,389 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 09:56:40,620 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:56:40,628 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:56:41,524 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-12 09:56:41,732 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:56:41,741 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:56:42,463 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:56:42,463 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:56:42,463 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:56:42,481 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@2ffa172d]
2021-03-12 09:56:42,482 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b881ccd]
2021-03-12 09:56:42,674 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:56:42,680 [main:78] - Generated call from random type = (Kla0())?.equals(Kla1().prope2).compareTo(true)
2021-03-12 09:56:42,680 [main:114] - replacement of numberOfSuspensions of type Int is (Kla0())?.equals(Kla1().prope2).compareTo(true)
2021-03-12 09:56:42,896 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:56:42,896 [main:66] - Compilation checking started
2021-03-12 09:56:43,683 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error((foo("zmfpg")).reversed() + (Kla0())?.equals(Kla1().prope2).compareTo(true) + ", got " + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5) && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:56:43,686 [main:107] - replacing (1, Int)
2021-03-12 09:56:43,687 [main:50] - replacing 1 Int
2021-03-12 09:56:43,687 [main:54] - Getting value of type Int
2021-03-12 09:56:43,886 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:56:43,893 [main:58] - GENERATED VALUE OF TYPE Int = -1460709986
2021-03-12 09:56:43,893 [main:61] - GENERATED IS CALL =false
2021-03-12 09:56:43,907 [main:67] - randomType = Boolean
2021-03-12 09:56:44,097 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:56:44,117 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b881ccd]
2021-03-12 09:56:44,117 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27cd355a]
2021-03-12 09:56:44,314 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:56:44,320 [main:78] - Generated call from random type = (true).compareTo(Kla4().prope5).compareTo(16)
2021-03-12 09:56:44,322 [main:106] - GETTING Int from Continuation<ArrayList<Int?>>
2021-03-12 09:56:44,333 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b881ccd]]
2021-03-12 09:56:44,333 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6cb2ddfa]
2021-03-12 09:56:44,519 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:56:44,519 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b881ccd]
2021-03-12 09:56:44,519 [main:117] - GENERATED CALL = (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals("yfike").compareTo(Kla4().prope5)
2021-03-12 09:56:44,519 [main:114] - replacement of 1 of type Int is (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals("yfike").compareTo(Kla4().prope5)
2021-03-12 09:56:44,713 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:56:44,713 [main:66] - Compilation checking started
2021-03-12 09:56:45,526 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals("yfike").compareTo(Kla4().prope5)..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error((foo("zmfpg")).reversed() + (Kla0())?.equals(Kla1().prope2).compareTo(true) + ", got " + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5) && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:56:45,528 [main:107] - replacing (getOrThrow(), Ty1)
2021-03-12 09:56:45,528 [main:50] - replacing getOrThrow() Ty1
2021-03-12 09:56:45,528 [main:54] - Getting value of type Ty1
2021-03-12 09:56:45,729 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 09:56:45,739 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 09:56:45,976 [main:67] - randomType = Long
2021-03-12 09:56:46,173 [main:302] - generating value of type = Long true depth = 0
2021-03-12 09:56:46,234 [main:106] - GETTING Ty1 from Any?
2021-03-12 09:56:46,241 [main:106] - GETTING Ty1 from String
2021-03-12 09:56:46,272 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 09:56:46,282 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 09:56:46,282 [main:106] - GETTING Ty1 from String
2021-03-12 09:56:46,283 [main:106] - GETTING Ty1 from Boolean
2021-03-12 09:56:46,298 [main:106] - GETTING Ty1 from Continuation<Any?>
2021-03-12 09:56:46,310 [main:106] - GETTING Ty1 from String
2021-03-12 09:56:46,311 [main:106] - GETTING Ty1 from String
2021-03-12 09:56:46,311 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 09:56:46,327 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 09:56:46,328 [main:106] - GETTING Ty1 from Continuation<ArrayList<Int?>>
2021-03-12 09:56:46,340 [main:106] - GETTING Ty1 from EmptyCoroutineContext
2021-03-12 09:56:46,368 [main:106] - GETTING Ty1 from Any
2021-03-12 09:56:46,372 [main:111] - Cant find and generate replacement for getOrThrow() type Ty1
2021-03-12 09:56:46,372 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 09:56:46,372 [main:50] - replacing {} Function0<Unit>
2021-03-12 09:56:46,372 [main:54] - Getting value of type Function0<Unit>
2021-03-12 09:56:46,569 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 09:56:46,575 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:56:46,775 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 09:56:46,784 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 09:56:47,259 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 09:56:47,265 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 09:56:47,276 [main:95] - GENERATED = contract({ println()})
2021-03-12 09:56:47,276 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ println()})}
2021-03-12 09:56:47,276 [main:61] - GENERATED IS CALL =false
2021-03-12 09:56:48,370 [main:67] - randomType = Pair<MutableMap<Float, Kla0>, Kla1?>
2021-03-12 09:56:48,559 [main:302] - generating value of type = Pair<MutableMap<Float, Kla0>, Kla1?> false depth = 0
2021-03-12 09:56:48,803 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: MutableMap<Float, Kla0>, second: Kla1?): Pair<MutableMap<Float, Kla0>, Kla1?> = TODO()
2021-03-12 09:56:48,816 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: MutableMap<Float, Kla0>, second: Kla1?): Pair<MutableMap<Float, Kla0>, Kla1?> = TODO()
2021-03-12 09:56:49,108 [main:302] - generating value of type = MutableMap<Float, Kla0> false depth = 3
2021-03-12 09:56:49,334 [main:43] - GENERATING CALL OF fun <K, V> mutableMapOf(): MutableMap<Float, Kla0> = TODO()
2021-03-12 09:56:49,346 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mutableMapOf(): MutableMap<Float, Kla0> = TODO()
2021-03-12 09:56:49,598 [main:95] - GENERATED = mutableMapOf<Float, Kla0>()
2021-03-12 09:56:49,599 [main:95] - GENERATED = Pair<MutableMap<Float, Kla0>, Kla1?>(mutableMapOf<Float, Kla0>(), null)
2021-03-12 09:56:49,628 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 09:56:49,641 [main:106] - GETTING Function0<Unit> from Continuation<Any?>
2021-03-12 09:56:49,657 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 09:56:49,659 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-12 09:56:49,676 [main:106] - GETTING Function0<Unit> from EmptyCoroutineContext
2021-03-12 09:56:49,710 [main:106] - GETTING Function0<Unit> from String
2021-03-12 09:56:49,751 [main:106] - GETTING Function0<Unit> from Any
2021-03-12 09:56:49,759 [main:106] - GETTING Function0<Unit> from String
2021-03-12 09:56:49,760 [main:106] - GETTING Function0<Unit> from Any?
2021-03-12 09:56:49,768 [main:106] - GETTING Function0<Unit> from String
2021-03-12 09:56:49,770 [main:106] - GETTING Function0<Unit> from String
2021-03-12 09:56:49,770 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 09:56:49,811 [main:114] - replacement of {} of type Function0<Unit> is { contract({ println()})}
2021-03-12 09:56:50,006 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 09:56:50,007 [main:66] - Compilation checking started
2021-03-12 09:56:50,554 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = { contract({ println()})}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals("yfike").compareTo(Kla4().prope5)..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error((foo("zmfpg")).reversed() + (Kla0())?.equals(Kla1().prope2).compareTo(true) + ", got " + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5) && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:56:50,558 [main:107] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-12 09:56:50,559 [main:50] - replacing c !is CoroutineStackFrame Boolean
2021-03-12 09:56:50,559 [main:54] - Getting value of type Boolean
2021-03-12 09:56:50,767 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:56:50,773 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 09:56:50,773 [main:61] - GENERATED IS CALL =false
2021-03-12 09:56:51,018 [main:67] - randomType = Float
2021-03-12 09:56:51,223 [main:302] - generating value of type = Float true depth = 0
2021-03-12 09:56:51,283 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3de49870]
2021-03-12 09:56:51,284 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@62efa1c3]
2021-03-12 09:56:51,284 [main:78] - Generated call from random type = (0.1871047f).toDouble().equals(Kla1().prope2)
2021-03-12 09:56:51,285 [main:106] - GETTING Boolean from String
2021-03-12 09:56:51,318 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7555e4a8]]
2021-03-12 09:56:51,318 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:56:51,506 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:56:51,512 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7555e4a8]
2021-03-12 09:56:51,513 [main:117] - GENERATED CALL = (foo()).get(110667335).isDigit()
2021-03-12 09:56:51,513 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e81170]]
2021-03-12 09:56:51,513 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:56:51,725 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:56:51,933 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:56:51,943 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23e81170]
2021-03-12 09:56:51,943 [main:117] - GENERATED CALL = (foo()).subSequence(1354198758, 1279817884).none()
2021-03-12 09:56:51,943 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]]
2021-03-12 09:56:51,943 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:56:52,157 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:56:52,360 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:56:52,366 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39dd01b6]
2021-03-12 09:56:52,367 [main:117] - GENERATED CALL = (foo()).subSequence(198831953, -287195195).isNotBlank()
2021-03-12 09:56:52,367 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6704d495]]
2021-03-12 09:56:52,367 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]
2021-03-12 09:56:52,593 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:56:52,594 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6704d495]
2021-03-12 09:56:52,594 [main:117] - GENERATED CALL = (foo()).equals("xkrwy").and(Kla4().prope5)
2021-03-12 09:56:52,594 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd2cf85]]
2021-03-12 09:56:52,594 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:56:52,787 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:56:52,794 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd2cf85]
2021-03-12 09:56:52,794 [main:117] - GENERATED CALL = (foo()).get(-585270786).isWhitespace()
2021-03-12 09:56:52,794 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65ea5d55]]
2021-03-12 09:56:52,794 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:56:52,996 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:56:53,003 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65ea5d55]
2021-03-12 09:56:53,003 [main:117] - GENERATED CALL = (foo()).get(831739289).isDefined()
2021-03-12 09:56:53,004 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]]
2021-03-12 09:56:53,004 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]
2021-03-12 09:56:53,183 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:56:53,183 [main:117] - GENERATED CALL = (foo()).equals("izxek")
2021-03-12 09:56:53,183 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]]
2021-03-12 09:56:53,184 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@41fa9c41]
2021-03-12 09:56:53,358 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:56:53,358 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]
2021-03-12 09:56:53,359 [main:117] - GENERATED CALL = (foo()).equals("emwgu").equals(Kla1().prope2)
2021-03-12 09:56:53,359 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ef52922]]
2021-03-12 09:56:53,359 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:56:53,559 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:56:53,755 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:56:53,763 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ef52922]
2021-03-12 09:56:53,764 [main:117] - GENERATED CALL = (foo()).subSequence(1710472143, -1250780019).isNotEmpty()
2021-03-12 09:56:53,764 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71b52a09]]
2021-03-12 09:56:53,764 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:56:53,980 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:56:53,989 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71b52a09]
2021-03-12 09:56:53,990 [main:117] - GENERATED CALL = (foo()).get(-22565706).isTitleCase()
2021-03-12 09:56:53,990 [main:114] - replacement of c !is CoroutineStackFrame of type Boolean is (foo()).get(110667335).isDigit()
2021-03-12 09:56:54,177 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:56:54,177 [main:66] - Compilation checking started
2021-03-12 09:56:54,694 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return fu15()
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if ((foo()).get(110667335).isDigit()) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals("yfike").compareTo(Kla4().prope5)..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error((foo("zmfpg")).reversed() + (Kla0())?.equals(Kla1().prope2).compareTo(true) + ", got " + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5) && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:56:54,697 [main:107] - replacing (fu15(), String)
2021-03-12 09:56:54,698 [main:50] - replacing fu15() String
2021-03-12 09:56:54,698 [main:54] - Getting value of type String
2021-03-12 09:56:54,899 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:56:54,905 [main:58] - GENERATED VALUE OF TYPE String = "rpjpq"
2021-03-12 09:56:54,905 [main:61] - GENERATED IS CALL =false
2021-03-12 09:56:56,092 [main:67] - randomType = ArrayList<Array<UInt?>>?
2021-03-12 09:56:56,284 [main:302] - generating value of type = ArrayList<Array<UInt?>> false depth = 0
2021-03-12 09:56:56,481 [main:43] - GENERATING CALL OF fun <E> ArrayList(): ArrayList<Array<UInt?>> = TODO()
2021-03-12 09:56:56,489 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(): ArrayList<Array<UInt?>> = TODO()
2021-03-12 09:56:56,750 [main:95] - GENERATED = ArrayList<Array<UInt?>>()
2021-03-12 09:56:56,974 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]
2021-03-12 09:56:57,208 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:56:57,215 [main:78] - Generated call from random type = (ArrayList<Array<UInt?>>())?.size.toString(-1087957616)
2021-03-12 09:56:57,216 [main:106] - GETTING String from Function0<Unit>
2021-03-12 09:56:57,231 [main:106] - GETTING String from CoroutineContext
2021-03-12 09:56:57,242 [main:106] - GETTING String from Any
2021-03-12 09:56:57,247 [main:106] - GETTING String from String
2021-03-12 09:56:57,276 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58a36d97]]
2021-03-12 09:56:57,276 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58a36d97]
2021-03-12 09:56:57,277 [main:117] - GENERATED CALL = ((foo())).decapitalize()
2021-03-12 09:56:57,277 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7220aca3]]
2021-03-12 09:56:57,277 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7220aca3]
2021-03-12 09:56:57,458 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:56:57,690 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 09:56:57,698 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 09:56:58,146 [main:302] - generating value of type = Int true depth = 3
2021-03-12 09:56:58,153 [main:95] - GENERATED = StringBuilder(-1609040207)
2021-03-12 09:56:58,153 [main:117] - GENERATED CALL = ((foo())).commonPrefixWith(StringBuilder(-1609040207), Kla4().prope5)
2021-03-12 09:56:58,153 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@667cae1c]]
2021-03-12 09:56:58,153 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@667cae1c]
2021-03-12 09:56:58,333 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:56:58,546 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:56:58,554 [main:117] - GENERATED CALL = ((foo())).padStart(-513481396, '쳌')
2021-03-12 09:56:58,554 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284b784c]]
2021-03-12 09:56:58,554 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284b784c]
2021-03-12 09:56:58,749 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:56:58,755 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:56:58,762 [main:117] - GENERATED CALL = ((foo())).dropWhile({a: Char -> false})
2021-03-12 09:56:58,762 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ac01264]]
2021-03-12 09:56:58,762 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:56:58,963 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:56:58,970 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ac01264]
2021-03-12 09:56:58,970 [main:117] - GENERATED CALL = ((foo())).get(635804953).titlecase()
2021-03-12 09:56:58,970 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b0422e5]]
2021-03-12 09:56:58,970 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b0422e5]
2021-03-12 09:56:59,170 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:56:59,394 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:56:59,400 [main:117] - GENERATED CALL = ((foo())).replaceFirst('䒥', '㔜', Kla4().prope5)
2021-03-12 09:56:59,400 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6af2203]]
2021-03-12 09:56:59,400 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6af2203]
2021-03-12 09:56:59,401 [main:117] - GENERATED CALL = ((foo())).plus(Kla1().prope2)
2021-03-12 09:56:59,401 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfdc48e]]
2021-03-12 09:56:59,401 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfdc48e]
2021-03-12 09:56:59,591 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:56:59,598 [main:117] - GENERATED CALL = ((foo())).replaceIndentByMargin("vsxkm", var prope2 =
2021-03-12 09:56:59,598 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6897e324]]
2021-03-12 09:56:59,598 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6897e324]
2021-03-12 09:56:59,598 [main:117] - GENERATED CALL = ((foo())).trimIndent()
2021-03-12 09:56:59,598 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55517531]]
2021-03-12 09:56:59,598 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55517531]
2021-03-12 09:56:59,807 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:56:59,814 [main:117] - GENERATED CALL = ((foo())).dropLast(1761375139)
2021-03-12 09:56:59,814 [main:114] - replacement of fu15() of type String is ((foo())).dropWhile({a: Char -> false})
2021-03-12 09:56:59,998 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:56:59,998 [main:66] - Compilation checking started
2021-03-12 09:57:00,754 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return ((foo())).dropWhile({a: Char -> false})
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals("yfike").compareTo(Kla4().prope5)..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error((foo("zmfpg")).reversed() + (Kla0())?.equals(Kla1().prope2).compareTo(true) + ", got " + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5) && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:57:00,757 [main:107] - replacing (prope9.prope14, Boolean)
2021-03-12 09:57:00,757 [main:50] - replacing prope9.prope14 Boolean
2021-03-12 09:57:00,757 [main:54] - Getting value of type Boolean
2021-03-12 09:57:00,973 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:57:00,980 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 09:57:00,980 [main:61] - GENERATED IS CALL =false
2021-03-12 09:57:00,995 [main:67] - randomType = Boolean
2021-03-12 09:57:01,199 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:57:01,219 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b881ccd]
2021-03-12 09:57:01,454 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:57:01,461 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1832b55f]
2021-03-12 09:57:01,461 [main:78] - Generated call from random type = (true).compareTo(false).equals(Kla1().prope2)
2021-03-12 09:57:01,462 [main:106] - GETTING Boolean from CoroutineContext
2021-03-12 09:57:01,472 [main:113] - Case = [public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5cf50a6b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext.Element[DeserializedSimpleFunctionDescriptor@98d782d]]
2021-03-12 09:57:01,473 [main:149] - GENERATING call of type public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5cf50a6b]
2021-03-12 09:57:01,662 [main:302] - generating value of type = Key<E> false depth = 0
2021-03-12 09:57:01,893 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 09:57:01,901 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 09:57:02,602 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 09:57:02,603 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5cf50a6b]
2021-03-12 09:57:02,603 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ba63f8c]]
2021-03-12 09:57:02,603 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]
2021-03-12 09:57:02,811 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:57:02,811 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ba63f8c]
2021-03-12 09:57:02,811 [main:117] - GENERATED CALL = (Kla5.context).equals("dbevq").or(Kla4().prope5)
2021-03-12 09:57:02,812 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]]
2021-03-12 09:57:02,812 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]
2021-03-12 09:57:02,812 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4c9749bb]
2021-03-12 09:57:02,812 [main:117] - GENERATED CALL = (Kla5.context).equals(Kla1().prope2).equals(Kla1().prope2)
2021-03-12 09:57:02,812 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]]
2021-03-12 09:57:02,812 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]
2021-03-12 09:57:03,006 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:57:03,007 [main:117] - GENERATED CALL = (Kla5.context).equals("dibjs")
2021-03-12 09:57:03,007 [main:113] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@54e8ab82], public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@a026d6]]
2021-03-12 09:57:03,007 [main:149] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@54e8ab82]
2021-03-12 09:57:03,222 [main:302] - generating value of type = R false depth = 0
2021-03-12 09:57:03,438 [main:43] - GENERATING CALL OF fun <R> run(block: ()->Kla10): R = TODO()
2021-03-12 09:57:03,446 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->Kla10): R = TODO()
2021-03-12 09:57:03,912 [main:302] - generating value of type = Function0<Kla10> false depth = 3
2021-03-12 09:57:03,918 [main:302] - generating value of type = Kla10 false depth = 4
2021-03-12 09:57:03,925 [main:112] - generating klass Kla10 text = class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}
2021-03-12 09:57:03,925 [main:95] - GENERATED = run<Kla10>({ Kla10()})
2021-03-12 09:57:04,121 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-12 09:57:04,128 [main:302] - generating value of type = R false depth = 1
2021-03-12 09:57:05,098 [main:43] - GENERATING CALL OF fun <R> run(block: ()->Pair<UByte, Double>): R = TODO()
2021-03-12 09:57:05,107 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->Pair<UByte, Double>): R = TODO()
2021-03-12 09:57:05,571 [main:302] - generating value of type = Function0<Pair<UByte, Double>> false depth = 4
2021-03-12 09:57:05,577 [main:302] - generating value of type = Pair<UByte, Double> false depth = 5
2021-03-12 09:57:05,782 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UByte, second: Double): Pair<UByte, Double> = TODO()
2021-03-12 09:57:05,790 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UByte, second: Double): Pair<UByte, Double> = TODO()
2021-03-12 09:57:06,000 [main:302] - generating value of type = UByte true depth = 8
2021-03-12 09:57:06,007 [main:302] - generating value of type = Double true depth = 8
2021-03-12 09:57:06,013 [main:95] - GENERATED = Pair<UByte, Double>(25.toUByte(), 0.3686068806427739)
2021-03-12 09:57:06,014 [main:95] - GENERATED = run<Pair<UByte, Double>>({ Pair<UByte, Double>(25.toUByte(), 0.3686068806427739)})
2021-03-12 09:57:06,014 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@a026d6]
2021-03-12 09:57:06,014 [main:117] - GENERATED CALL = (Kla5.context).fold(run<Kla10>({ Kla10()}), {a: R, b: Element -> run<Pair<UByte, Double>>({ Pair<UByte, Double>(25.toUByte(), 0.3686068806427739)})})?.equals(Kla1().prope2)
2021-03-12 09:57:06,014 [main:113] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@54e8ab82], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@46bed5b4]]
2021-03-12 09:57:06,014 [main:149] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@54e8ab82]
2021-03-12 09:57:06,415 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-12 09:57:06,421 [main:302] - generating value of type = R false depth = 1
2021-03-12 09:57:08,110 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->Function2<Long, Pair<Int, Long>, List<Short>>): R = TODO()
2021-03-12 09:57:08,117 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->Function2<Long, Pair<Int, Long>, List<Short>>): R = TODO()
2021-03-12 09:57:08,850 [main:302] - generating value of type = Any false depth = 4
2021-03-12 09:57:08,851 [main:302] - generating value of type = Function0<Function2<Long, Pair<Int, Long>, List<Short>>> false depth = 4
2021-03-12 09:57:08,857 [main:302] - generating value of type = Function2<Long, Pair<Int, Long>, List<Short>> false depth = 5
2021-03-12 09:57:08,863 [main:302] - generating value of type = List<Short> false depth = 6
2021-03-12 09:57:09,056 [main:43] - GENERATING CALL OF fun <E> ArrayList(initialCapacity: kotlin.Int): List<Short> = TODO()
2021-03-12 09:57:09,063 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(initialCapacity: kotlin.Int): List<Short> = TODO()
2021-03-12 09:57:09,532 [main:302] - generating value of type = Int true depth = 9
2021-03-12 09:57:09,540 [main:95] - GENERATED = ArrayList<Short>(1281970454)
2021-03-12 09:57:09,540 [main:95] - GENERATED = synchronized<Function2<Long, Pair<Int, Long>, List<Short>>>("vollr", { {a: Long, b: Pair<Int, Long> -> ArrayList<Short>(1281970454)}})
2021-03-12 09:57:09,541 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@46bed5b4]
2021-03-12 09:57:09,757 [main:302] - generating value of type = T false depth = 0
2021-03-12 09:57:09,969 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Comparable<T>, b: Comparable<T>, c: Comparable<T>): T = TODO()
2021-03-12 09:57:09,976 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Comparable<T>, b: Comparable<T>, c: Comparable<T>): T = TODO()
2021-03-12 09:57:10,212 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-12 09:57:10,223 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-12 09:57:10,234 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-12 09:57:10,246 [main:95] - GENERATED = maxOf<Comparable<T>>(1870393271.toUInt(), 498880582.toUInt(), '攚')
2021-03-12 09:57:10,247 [main:117] - GENERATED CALL = (Kla5.context).fold(null, {a: R, b: Element -> synchronized<Function2<Long, Pair<Int, Long>, List<Short>>>("vollr", { {a: Long, b: Pair<Int, Long> -> ArrayList<Short>(1281970454)}})})?.contains(maxOf<Comparable<T>>(1870393271.toUInt(), 498880582.toUInt(), '攚'))
2021-03-12 09:57:10,247 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6704d495]]
2021-03-12 09:57:10,247 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]
2021-03-12 09:57:10,443 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:57:10,443 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6704d495]
2021-03-12 09:57:10,643 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:57:10,650 [main:117] - GENERATED CALL = (Kla5.context).equals("dhvup").and(true)
2021-03-12 09:57:10,650 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4be1d672]]
2021-03-12 09:57:10,650 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]
2021-03-12 09:57:10,650 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4be1d672]
2021-03-12 09:57:10,833 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:57:10,840 [main:117] - GENERATED CALL = (Kla5.context).equals(Kla1().prope2).xor(false)
2021-03-12 09:57:10,840 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70232b31]]
2021-03-12 09:57:10,840 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5c551a09]
2021-03-12 09:57:11,039 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:57:11,039 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70232b31]
2021-03-12 09:57:11,039 [main:117] - GENERATED CALL = (Kla5.context).equals("nblmf").not()
2021-03-12 09:57:11,039 [main:114] - replacement of prope9.prope14 of type Boolean is (Kla5.context).equals("dbevq").or(Kla4().prope5)
2021-03-12 09:57:11,229 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:57:11,229 [main:66] - Compilation checking started
2021-03-12 09:57:11,877 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return ((foo())).dropWhile({a: Char -> false})
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals("yfike").compareTo(Kla4().prope5)..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error((foo("zmfpg")).reversed() + (Kla0())?.equals(Kla1().prope2).compareTo(true) + ", got " + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5) && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            (Kla5.context).equals("dbevq").or(Kla4().prope5) = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:57:11,881 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 09:57:11,883 [main:50] - replacing getOrThrow() Any?
2021-03-12 09:57:11,883 [main:54] - Getting value of type Any?
2021-03-12 09:57:12,150 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:57:12,150 [main:58] - GENERATED VALUE OF TYPE Any? = "qpbdq"
2021-03-12 09:57:12,151 [main:61] - GENERATED IS CALL =false
2021-03-12 09:57:13,451 [main:67] - randomType = Function1<Sequence<ArrayDeque<UByte>>, Kla12>
2021-03-12 09:57:13,452 [main:106] - GETTING Any? from Any
2021-03-12 09:57:13,458 [main:114] - replacement of getOrThrow() of type Any? is "qpbdq"
2021-03-12 09:57:13,675 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 09:57:13,676 [main:66] - Compilation checking started
2021-03-12 09:57:14,265 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return ((foo())).dropWhile({a: Char -> false})
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope11 = prope11."qpbdq"
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals("yfike").compareTo(Kla4().prope5)..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error((foo("zmfpg")).reversed() + (Kla0())?.equals(Kla1().prope2).compareTo(true) + ", got " + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5) && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:57:14,268 [main:107] - replacing (prope11.getOrThrow(), Ty1)
2021-03-12 09:57:14,268 [main:50] - replacing prope11.getOrThrow() Ty1
2021-03-12 09:57:14,268 [main:54] - Getting value of type Ty1
2021-03-12 09:57:14,481 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 09:57:14,492 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 09:57:15,228 [main:67] - randomType = Kla2<UInt>
2021-03-12 09:57:15,465 [main:302] - generating value of type = Kla2<UInt> false depth = 0
2021-03-12 09:57:15,472 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 09:57:16,401 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-12 09:57:16,409 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}
2021-03-12 09:57:16,432 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 09:57:16,442 [main:106] - GETTING Ty1 from Any
2021-03-12 09:57:16,447 [main:106] - GETTING Ty1 from EmptyCoroutineContext
2021-03-12 09:57:16,470 [main:106] - GETTING Ty1 from String
2021-03-12 09:57:16,500 [main:106] - GETTING Ty1 from Continuation<Any?>
2021-03-12 09:57:16,512 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 09:57:16,513 [main:106] - GETTING Ty1 from String
2021-03-12 09:57:16,513 [main:106] - GETTING Ty1 from Boolean
2021-03-12 09:57:16,528 [main:106] - GETTING Ty1 from Any?
2021-03-12 09:57:16,533 [main:106] - GETTING Ty1 from Continuation<ArrayList<Int?>>
2021-03-12 09:57:16,546 [main:106] - GETTING Ty1 from String
2021-03-12 09:57:16,546 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 09:57:16,547 [main:106] - GETTING Ty1 from String
2021-03-12 09:57:16,548 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 09:57:16,562 [main:111] - Cant find and generate replacement for prope11.getOrThrow() type Ty1
2021-03-12 09:57:16,563 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 09:57:16,563 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 09:57:16,563 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 09:57:16,764 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 09:57:16,774 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 09:57:17,009 [main:67] - randomType = Char?
2021-03-12 09:57:17,246 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:57:17,282 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 09:57:17,314 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 09:57:17,323 [main:106] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-12 09:57:17,347 [main:114] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla1().context
2021-03-12 09:57:17,540 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:57:17,542 [main:107] - replacing ("Continuation ", String)
2021-03-12 09:57:17,543 [main:50] - replacing "Continuation " String
2021-03-12 09:57:17,543 [main:54] - Getting value of type String
2021-03-12 09:57:17,744 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:57:17,750 [main:58] - GENERATED VALUE OF TYPE String = "nkbca"
2021-03-12 09:57:17,750 [main:61] - GENERATED IS CALL =false
2021-03-12 09:57:18,230 [main:67] - randomType = Kla2<Short>
2021-03-12 09:57:18,424 [main:302] - generating value of type = Kla2<Short> false depth = 0
2021-03-12 09:57:18,431 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 09:57:19,606 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-12 09:57:19,613 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}
2021-03-12 09:57:19,636 [main:106] - GETTING String from String
2021-03-12 09:57:19,668 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1620633d]]
2021-03-12 09:57:19,668 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1620633d]
2021-03-12 09:57:19,668 [main:117] - GENERATED CALL = (foo("zmfpg")).lowercase()
2021-03-12 09:57:19,668 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b0422e5]]
2021-03-12 09:57:19,668 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b0422e5]
2021-03-12 09:57:19,847 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:57:20,057 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:57:20,257 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:57:20,264 [main:117] - GENERATED CALL = (foo("zmfpg")).replaceFirst('ꭡ', '峐', false)
2021-03-12 09:57:20,264 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfdc48e]]
2021-03-12 09:57:20,264 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfdc48e]
2021-03-12 09:57:20,264 [main:117] - GENERATED CALL = (foo("zmfpg")).replaceIndentByMargin(foo(), prope2)
2021-03-12 09:57:20,264 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d45bf2b]]
2021-03-12 09:57:20,264 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d45bf2b]
2021-03-12 09:57:20,468 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:57:20,474 [main:117] - GENERATED CALL = (foo("zmfpg")).replaceAfter('㍳', var prope2 =
2021-03-12 09:57:20,475 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55517531]]
2021-03-12 09:57:20,475 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55517531]
2021-03-12 09:57:20,667 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:57:20,675 [main:117] - GENERATED CALL = (foo("zmfpg")).dropLast(1863380985)
2021-03-12 09:57:20,675 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284b784c]]
2021-03-12 09:57:20,675 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284b784c]
2021-03-12 09:57:20,853 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:57:20,859 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:57:20,867 [main:117] - GENERATED CALL = (foo("zmfpg")).dropWhile({a: Char -> true})
2021-03-12 09:57:20,867 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ad21b1]]
2021-03-12 09:57:20,867 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ad21b1]
2021-03-12 09:57:21,092 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:57:21,102 [main:117] - GENERATED CALL = (foo("zmfpg")).prependIndent("bqehz")
2021-03-12 09:57:21,102 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58a36d97]]
2021-03-12 09:57:21,102 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58a36d97]
2021-03-12 09:57:21,102 [main:117] - GENERATED CALL = (foo("zmfpg")).decapitalize()
2021-03-12 09:57:21,102 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3da3d0f5]]
2021-03-12 09:57:21,102 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3da3d0f5]
2021-03-12 09:57:21,303 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:57:21,512 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 09:57:21,521 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 09:57:21,971 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 09:57:22,171 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 09:57:22,180 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 09:57:22,613 [main:302] - generating value of type = Int true depth = 6
2021-03-12 09:57:22,619 [main:95] - GENERATED = StringBuilder(836426628)
2021-03-12 09:57:22,620 [main:95] - GENERATED = StringBuilder(StringBuilder(836426628))
2021-03-12 09:57:22,620 [main:117] - GENERATED CALL = (foo("zmfpg")).removeSurrounding(StringBuilder(StringBuilder(836426628)))
2021-03-12 09:57:22,620 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43cadd6c]]
2021-03-12 09:57:22,620 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43cadd6c]
2021-03-12 09:57:22,620 [main:117] - GENERATED CALL = (foo("zmfpg")).trimEnd()
2021-03-12 09:57:22,620 [main:114] - replacement of "Continuation " of type String is (foo("zmfpg")).replaceFirst('ꭡ', '峐', false)
2021-03-12 09:57:22,848 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:57:22,848 [main:66] - Compilation checking started
2021-03-12 09:57:23,929 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return ((foo())).dropWhile({a: Char -> false})
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((foo("zmfpg")).replaceFirst('ꭡ', '峐', false) + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals("yfike").compareTo(Kla4().prope5)..(foo("zmfpg")).length.ushr(-1799458520)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error((foo("zmfpg")).reversed() + (Kla0())?.equals(Kla1().prope2).compareTo(true) + ", got " + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5) && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:57:23,932 [main:107] - replacing ((fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals("yfike").compareTo(Kla4().prope5)..(foo("zmfpg")).length.ushr(-1799458520), IntRange)
2021-03-12 09:57:23,932 [main:50] - replacing (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals("yfike").compareTo(Kla4().prope5)..(foo("zmfpg")).length.ushr(-1799458520) IntRange
2021-03-12 09:57:23,932 [main:54] - Getting value of type IntRange
2021-03-12 09:57:24,185 [main:302] - generating value of type = IntRange false depth = 0
2021-03-12 09:57:24,404 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 09:57:24,412 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 09:57:25,151 [main:302] - generating value of type = Int true depth = 3
2021-03-12 09:57:25,158 [main:302] - generating value of type = Int true depth = 3
2021-03-12 09:57:25,165 [main:95] - GENERATED = IntRange(818366177, 1387734745)
2021-03-12 09:57:25,165 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(818366177, 1387734745)
2021-03-12 09:57:25,165 [main:61] - GENERATED IS CALL =true
2021-03-12 09:57:25,194 [main:67] - randomType = Kla10
2021-03-12 09:57:25,406 [main:302] - generating value of type = Kla10 false depth = 0
2021-03-12 09:57:25,414 [main:112] - generating klass Kla10 text = class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((foo("zmfpg")).replaceFirst('ꭡ', '峐', false) + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}
2021-03-12 09:57:25,423 [main:106] - GETTING IntRange from String
2021-03-12 09:57:25,455 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@54584f9]]
2021-03-12 09:57:25,455 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@54584f9]
2021-03-12 09:57:25,672 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:57:25,682 [main:117] - GENERATED CALL = ((foo())).length.until(25)
2021-03-12 09:57:25,682 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1fbdd357]]
2021-03-12 09:57:25,682 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:57:25,683 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1fbdd357]
2021-03-12 09:57:25,914 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:57:25,922 [main:117] - GENERATED CALL = ((foo())).compareTo(foo()).rangeTo(-95)
2021-03-12 09:57:25,922 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@6c5fd830]]
2021-03-12 09:57:25,922 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:57:26,154 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:57:26,365 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:57:26,373 [main:117] - GENERATED CALL = ((foo())).subSequence(1846987729, -2130111379).indices
2021-03-12 09:57:26,374 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@54584f9]]
2021-03-12 09:57:26,374 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:57:26,374 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@54584f9]
2021-03-12 09:57:26,618 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:57:26,629 [main:117] - GENERATED CALL = ((foo())).compareTo(var prope2 =.until(22)
2021-03-12 09:57:26,629 [main:113] - Case = [public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@6c5fd830]]
2021-03-12 09:57:26,629 [main:117] - GENERATED CALL = ((foo())).indices
2021-03-12 09:57:26,629 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1fbdd357]]
2021-03-12 09:57:26,630 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1fbdd357]
2021-03-12 09:57:26,889 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 09:57:26,899 [main:117] - GENERATED CALL = ((foo())).length.rangeTo(-23)
2021-03-12 09:57:26,899 [main:114] - replacement of (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).equals("yfike").compareTo(Kla4().prope5)..(foo("zmfpg")).length.ushr(-1799458520) of type IntRange is ((foo())).compareTo(foo()).rangeTo(-95)
2021-03-12 09:57:27,134 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:57:27,134 [main:66] - Compilation checking started
2021-03-12 09:57:28,059 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return ((foo())).dropWhile({a: Char -> false})
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((foo("zmfpg")).replaceFirst('ꭡ', '峐', false) + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in ((foo())).compareTo(foo()).rangeTo(-95)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error((foo("zmfpg")).reversed() + (Kla0())?.equals(Kla1().prope2).compareTo(true) + ", got " + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5) && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:57:28,063 [main:107] - replacing ((foo("zmfpg")).replaceFirst('ꭡ', '峐', false) + c, String)
2021-03-12 09:57:28,063 [main:50] - replacing (foo("zmfpg")).replaceFirst('ꭡ', '峐', false) + c String
2021-03-12 09:57:28,063 [main:54] - Getting value of type String
2021-03-12 09:57:28,257 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:57:28,263 [main:58] - GENERATED VALUE OF TYPE String = "koplu"
2021-03-12 09:57:28,264 [main:61] - GENERATED IS CALL =false
2021-03-12 09:57:28,517 [main:67] - randomType = Float
2021-03-12 09:57:28,733 [main:302] - generating value of type = Float true depth = 0
2021-03-12 09:57:28,790 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@259d2707]
2021-03-12 09:57:28,791 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ceeeaf7]
2021-03-12 09:57:28,791 [main:78] - Generated call from random type = (0.32795388f).toChar().uppercase()
2021-03-12 09:57:28,791 [main:106] - GETTING String from String
2021-03-12 09:57:28,817 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ad21b1]]
2021-03-12 09:57:28,817 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ad21b1]
2021-03-12 09:57:29,027 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:57:29,034 [main:117] - GENERATED CALL = ((foo())).prependIndent("yzjyo")
2021-03-12 09:57:29,034 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60e957e9]]
2021-03-12 09:57:29,034 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60e957e9]
2021-03-12 09:57:29,226 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:57:29,237 [main:117] - GENERATED CALL = ((foo())).removeSuffix("dtsuj")
2021-03-12 09:57:29,237 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]]
2021-03-12 09:57:29,237 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6449a24b]
2021-03-12 09:57:29,237 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]
2021-03-12 09:57:29,447 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:57:29,455 [main:117] - GENERATED CALL = ((foo())).compareTo(prope2).toString(-1873834080)
2021-03-12 09:57:29,456 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6da58910]]
2021-03-12 09:57:29,456 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6da58910]
2021-03-12 09:57:29,667 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 09:57:29,675 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:57:29,682 [main:117] - GENERATED CALL = ((foo())).filterIndexed({a: Int, b: Char -> true})
2021-03-12 09:57:29,682 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6bff3]]
2021-03-12 09:57:29,682 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6bff3]
2021-03-12 09:57:29,883 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:57:29,890 [main:117] - GENERATED CALL = ((foo())).substring(-535742958)
2021-03-12 09:57:29,890 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34db013e]]
2021-03-12 09:57:29,890 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:57:30,074 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:57:30,258 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:57:30,264 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34db013e]
2021-03-12 09:57:30,471 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:57:30,477 [main:117] - GENERATED CALL = ((foo())).subSequence(276924384, -996130549).repeat(-1023496768)
2021-03-12 09:57:30,477 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48bf8b9]]
2021-03-12 09:57:30,478 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48bf8b9]
2021-03-12 09:57:30,672 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:57:30,678 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:57:30,686 [main:117] - GENERATED CALL = ((foo())).dropLastWhile({a: Char -> false})
2021-03-12 09:57:30,686 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73b02395]]
2021-03-12 09:57:30,686 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73b02395]
2021-03-12 09:57:30,884 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 09:57:30,891 [main:302] - generating value of type = Char true depth = 1
2021-03-12 09:57:30,897 [main:117] - GENERATED CALL = ((foo())).replaceFirstChar({a: Char -> '쐚'})
2021-03-12 09:57:30,897 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@667cae1c]]
2021-03-12 09:57:30,897 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@667cae1c]
2021-03-12 09:57:31,082 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:57:31,280 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:57:31,287 [main:117] - GENERATED CALL = ((foo())).padStart(-1306223861, '뉼')
2021-03-12 09:57:31,287 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7220aca3]]
2021-03-12 09:57:31,287 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:57:31,487 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:57:31,697 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:57:31,705 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7220aca3]
2021-03-12 09:57:31,906 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:57:31,915 [main:117] - GENERATED CALL = ((foo())).subSequence(1020898912, 767897566).commonPrefixWith("fxaat", Kla4().prope5)
2021-03-12 09:57:31,915 [main:114] - replacement of (foo("zmfpg")).replaceFirst('ꭡ', '峐', false) + c of type String is ((foo())).compareTo(prope2).toString(-1873834080)
2021-03-12 09:57:32,102 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:57:32,103 [main:66] - Compilation checking started
2021-03-12 09:57:32,858 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return ((foo())).dropWhile({a: Char -> false})
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((foo())).compareTo(prope2).toString(-1873834080) + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in ((foo())).compareTo(foo()).rangeTo(-95)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != numberOfSuspensions)
            error((foo("zmfpg")).reversed() + (Kla0())?.equals(Kla1().prope2).compareTo(true) + ", got " + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5) && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:57:32,860 [main:107] - replacing (c, Continuation<*>)
2021-03-12 09:57:32,861 [main:50] - replacing c Continuation<*>
2021-03-12 09:57:32,861 [main:54] - Getting value of type Continuation<*>
2021-03-12 09:57:33,068 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 09:57:33,274 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 09:57:33,282 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 09:57:34,026 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 09:57:34,231 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:57:34,240 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:57:34,695 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 09:57:34,933 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:57:34,941 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:57:35,660 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 09:57:35,909 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:57:35,918 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:57:36,627 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 09:57:36,627 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:57:36,627 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:57:36,627 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 09:57:36,627 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 09:57:37,455 [main:67] - randomType = LinkedHashSet<ULong?>
2021-03-12 09:57:37,693 [main:302] - generating value of type = LinkedHashSet<ULong?> false depth = 0
2021-03-12 09:57:37,975 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: ULong?): LkedHashSet<ULong?> = TODO()
2021-03-12 09:57:37,987 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: ULong?): LkedHashSet<ULong?> = TODO()
2021-03-12 09:57:38,237 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 09:57:38,244 [main:95] - GENERATED = linkedSetOf<ULong?>(1477828218418375910.toULong())
2021-03-12 09:57:38,518 [main:106] - GETTING Continuation<*> from String
2021-03-12 09:57:38,562 [main:106] - GETTING Continuation<*> from String
2021-03-12 09:57:38,564 [main:106] - GETTING Continuation<*> from Function0<Unit>
2021-03-12 09:57:38,585 [main:106] - GETTING Continuation<*> from Continuation<ArrayList<Int?>>
2021-03-12 09:57:38,603 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 09:57:38,615 [main:106] - GETTING Continuation<*> from Any
2021-03-12 09:57:38,621 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 09:57:38,622 [main:106] - GETTING Continuation<*> from Any?
2021-03-12 09:57:38,628 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 09:57:38,629 [main:106] - GETTING Continuation<*> from Boolean
2021-03-12 09:57:38,645 [main:106] - GETTING Continuation<*> from String
2021-03-12 09:57:38,646 [main:106] - GETTING Continuation<*> from String
2021-03-12 09:57:38,647 [main:106] - GETTING Continuation<*> from Continuation<Any?>
2021-03-12 09:57:38,659 [main:106] - GETTING Continuation<*> from EmptyCoroutineContext
2021-03-12 09:57:38,687 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 09:57:38,687 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 09:57:38,687 [main:50] - replacing numberOfSuspensions Int
2021-03-12 09:57:38,687 [main:54] - Getting value of type Int
2021-03-12 09:57:38,882 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:57:38,890 [main:58] - GENERATED VALUE OF TYPE Int = 1461953873
2021-03-12 09:57:38,890 [main:61] - GENERATED IS CALL =false
2021-03-12 09:57:38,915 [main:67] - randomType = Kla1
2021-03-12 09:57:39,146 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 09:57:39,153 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 09:57:39,177 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Any?.hashCode(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@cdb0574]
2021-03-12 09:57:39,177 [main:78] - Generated call from random type = (Kla1()).prope2?.hashCode()!!
2021-03-12 09:57:39,178 [main:106] - GETTING Int from Function0<Unit>
2021-03-12 09:57:39,193 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@4eeac1d1], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b881ccd]]
2021-03-12 09:57:39,193 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@4eeac1d1]
2021-03-12 09:57:39,393 [main:302] - generating value of type = Any false depth = 0
2021-03-12 09:57:39,393 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b881ccd]
2021-03-12 09:57:39,632 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 09:57:39,642 [main:117] - GENERATED CALL = (Kla4().prope6).equals("vgwnp").compareTo(true)
2021-03-12 09:57:39,642 [main:114] - replacement of numberOfSuspensions of type Int is (Kla1()).prope2?.hashCode()!!
2021-03-12 09:57:39,907 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-12 09:57:39,907 [main:66] - Compilation checking started
2021-03-12 09:57:40,769 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return ((foo())).dropWhile({a: Char -> false})
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((foo())).compareTo(prope2).toString(-1873834080) + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in ((foo())).compareTo(foo()).rangeTo(-95)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != (Kla1()).prope2?.hashCode()!!)
            error((foo("zmfpg")).reversed() + (Kla0())?.equals(Kla1().prope2).compareTo(true) + ", got " + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5) && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:57:40,772 [main:107] - replacing (c, SuspendFunction0<Unit>)
2021-03-12 09:57:40,774 [main:50] - replacing c SuspendFunction0<Unit>
2021-03-12 09:57:40,774 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 09:57:41,038 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 09:57:41,047 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:57:41,285 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:57:41,293 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:57:42,061 [main:302] - generating value of type = Int true depth = 4
2021-03-12 09:57:42,068 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 09:57:42,074 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 09:57:42,337 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:57:42,350 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:57:43,358 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 09:57:43,366 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 09:57:43,375 [main:302] - generating value of type = Any false depth = 9
2021-03-12 09:57:43,375 [main:95] - GENERATED = require(false, { "fnkvt"})
2021-03-12 09:57:43,376 [main:95] - GENERATED = repeat(-754317282, {a: Int -> require(false, { "fnkvt"})})
2021-03-12 09:57:43,376 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { repeat(-754317282, {a: Int -> require(false, { "fnkvt"})})}
2021-03-12 09:57:43,376 [main:61] - GENERATED IS CALL =false
2021-03-12 09:57:43,665 [main:67] - randomType = Kla12
2021-03-12 09:57:43,890 [main:302] - generating value of type = Kla12 false depth = 0
2021-03-12 09:57:43,896 [main:112] - generating klass Kla12 text = object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}
2021-03-12 09:57:43,931 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 09:57:43,964 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 09:57:43,965 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 09:57:43,966 [main:106] - GETTING SuspendFunction0<Unit> from EmptyCoroutineContext
2021-03-12 09:57:43,998 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 09:57:44,012 [main:106] - GETTING SuspendFunction0<Unit> from Any
2021-03-12 09:57:44,019 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 09:57:44,020 [main:106] - GETTING SuspendFunction0<Unit> from Any?
2021-03-12 09:57:44,026 [main:106] - GETTING SuspendFunction0<Unit> from Boolean
2021-03-12 09:57:44,042 [main:106] - GETTING SuspendFunction0<Unit> from Continuation<ArrayList<Int?>>
2021-03-12 09:57:44,058 [main:106] - GETTING SuspendFunction0<Unit> from Function0<Unit>
2021-03-12 09:57:44,075 [main:106] - GETTING SuspendFunction0<Unit> from Continuation<Any?>
2021-03-12 09:57:44,089 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 09:57:44,091 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 09:57:44,091 [main:114] - replacement of c of type SuspendFunction0<Unit> is { repeat(-754317282, {a: Int -> require(false, { "fnkvt"})})}
2021-03-12 09:57:44,350 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 09:57:44,351 [main:66] - Compilation checking started
2021-03-12 09:57:45,070 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return ((foo())).dropWhile({a: Char -> false})
}

fun fu12(c: suspend () -> Unit) {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
{ repeat(-754317282, {a: Int -> require(false, { "fnkvt"})})}.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((foo())).compareTo(prope2).toString(-1873834080) + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in ((foo())).compareTo(foo()).rangeTo(-95)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != (Kla1()).prope2?.hashCode()!!)
            error((foo("zmfpg")).reversed() + (Kla0())?.equals(Kla1().prope2).compareTo(true) + ", got " + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5) && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:57:45,073 [main:107] - replacing (prope11.getOrThrow(), Ty1)
2021-03-12 09:57:45,073 [main:50] - replacing prope11.getOrThrow() Ty1
2021-03-12 09:57:45,073 [main:54] - Getting value of type Ty1
2021-03-12 09:57:45,288 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 09:57:45,297 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 09:57:46,599 [main:67] - randomType = Kla9<HashMap<Kla10?, Float>?>
2021-03-12 09:57:46,788 [main:302] - generating value of type = Kla9<HashMap<Kla10?, Float>?> false depth = 0
2021-03-12 09:57:46,795 [main:112] - generating klass Kla9 text = abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-12 09:57:48,534 [main:302] - generating value of type = Kla12 false depth = 2
2021-03-12 09:57:48,541 [main:112] - generating klass Kla12 text = object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}
2021-03-12 09:57:48,569 [main:106] - GETTING Ty1 from Boolean
2021-03-12 09:57:48,585 [main:106] - GETTING Ty1 from String
2021-03-12 09:57:48,617 [main:106] - GETTING Ty1 from String
2021-03-12 09:57:48,618 [main:106] - GETTING Ty1 from EmptyCoroutineContext
2021-03-12 09:57:48,644 [main:106] - GETTING Ty1 from Any
2021-03-12 09:57:48,649 [main:106] - GETTING Ty1 from String
2021-03-12 09:57:48,650 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 09:57:48,665 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 09:57:48,676 [main:106] - GETTING Ty1 from Any?
2021-03-12 09:57:48,685 [main:106] - GETTING Ty1 from Continuation<ArrayList<Int?>>
2021-03-12 09:57:48,698 [main:106] - GETTING Ty1 from Continuation<Any?>
2021-03-12 09:57:48,710 [main:106] - GETTING Ty1 from String
2021-03-12 09:57:48,711 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 09:57:48,712 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 09:57:48,712 [main:111] - Cant find and generate replacement for prope11.getOrThrow() type Ty1
2021-03-12 09:57:48,712 [main:107] - replacing ((foo("zmfpg")).reversed() + (Kla0())?.equals(Kla1().prope2).compareTo(true) + ", got ", String)
2021-03-12 09:57:48,712 [main:50] - replacing (foo("zmfpg")).reversed() + (Kla0())?.equals(Kla1().prope2).compareTo(true) + ", got " String
2021-03-12 09:57:48,713 [main:54] - Getting value of type String
2021-03-12 09:57:48,904 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:57:48,910 [main:58] - GENERATED VALUE OF TYPE String = "wurvk"
2021-03-12 09:57:48,911 [main:61] - GENERATED IS CALL =false
2021-03-12 09:57:50,991 [main:67] - randomType = Function2<Kla9<HashSet<UShort?>?>, Kla11, List<String>>
2021-03-12 09:57:50,993 [main:106] - GETTING String from Function0<Unit>
2021-03-12 09:57:51,012 [main:106] - GETTING String from Any?
2021-03-12 09:57:51,018 [main:113] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@58f0bd05]]
2021-03-12 09:57:51,018 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@58f0bd05]
2021-03-12 09:57:51,018 [main:117] - GENERATED CALL = (Kla1().prope2).toString()
2021-03-12 09:57:51,018 [main:114] - replacement of (foo("zmfpg")).reversed() + (Kla0())?.equals(Kla1().prope2).compareTo(true) + ", got " of type String is "wurvk"
2021-03-12 09:57:51,277 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 09:57:51,278 [main:66] - Compilation checking started
2021-03-12 09:57:52,327 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return ((foo())).dropWhile({a: Char -> false})
}

fun fu12(c: suspend () -> Unit) {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((foo())).compareTo(prope2).toString(-1873834080) + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in ((foo())).compareTo(foo()).rangeTo(-95)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != (Kla1()).prope2?.hashCode()!!)
            error("wurvk" + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5) && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:57:52,330 [main:107] - replacing (prope11, Result<Any?>)
2021-03-12 09:57:52,330 [main:50] - replacing prope11 Result<Any?>
2021-03-12 09:57:52,330 [main:54] - Getting value of type Result<Any?>
2021-03-12 09:57:52,630 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 09:57:52,958 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 09:57:52,972 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 09:57:53,581 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 09:57:53,589 [main:302] - generating value of type = Any false depth = 4
2021-03-12 09:57:53,590 [main:95] - GENERATED = runCatching<Any?>({ "pmbcl"})
2021-03-12 09:57:53,590 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "pmbcl"})
2021-03-12 09:57:53,590 [main:61] - GENERATED IS CALL =true
2021-03-12 09:57:53,605 [main:67] - randomType = Char
2021-03-12 09:57:53,863 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:57:53,911 [main:106] - GETTING Result<Any?> from Continuation<ArrayList<Int?>>
2021-03-12 09:57:53,927 [main:106] - GETTING Result<Any?> from Any
2021-03-12 09:57:53,935 [main:106] - GETTING Result<Any?> from String
2021-03-12 09:57:53,988 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 09:57:54,005 [main:106] - GETTING Result<Any?> from EmptyCoroutineContext
2021-03-12 09:57:54,047 [main:106] - GETTING Result<Any?> from String
2021-03-12 09:57:54,050 [main:106] - GETTING Result<Any?> from String
2021-03-12 09:57:54,052 [main:106] - GETTING Result<Any?> from String
2021-03-12 09:57:54,056 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 09:57:54,059 [main:106] - GETTING Result<Any?> from Continuation<Any?>
2021-03-12 09:57:54,077 [main:106] - GETTING Result<Any?> from Boolean
2021-03-12 09:57:54,100 [main:106] - GETTING Result<Any?> from Function0<Unit>
2021-03-12 09:57:54,121 [main:106] - GETTING Result<Any?> from Any?
2021-03-12 09:57:54,128 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 09:57:54,129 [main:114] - replacement of prope11 of type Result<Any?> is runCatching<Any?>({ "pmbcl"})
2021-03-12 09:57:54,409 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:57:54,409 [main:66] - Compilation checking started
2021-03-12 09:57:55,392 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return ((foo())).dropWhile({a: Char -> false})
}

fun fu12(c: suspend () -> Unit) {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope11 = runCatching<Any?>({ "pmbcl"}).getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((foo())).compareTo(prope2).toString(-1873834080) + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in ((foo())).compareTo(foo()).rangeTo(-95)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != (Kla1()).prope2?.hashCode()!!)
            error("wurvk" + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5) && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:57:55,396 [main:107] - replacing ((foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n"), String)
2021-03-12 09:57:55,396 [main:50] - replacing (foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n") String
2021-03-12 09:57:55,396 [main:54] - Getting value of type String
2021-03-12 09:57:55,651 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:57:55,659 [main:58] - GENERATED VALUE OF TYPE String = "mkxgp"
2021-03-12 09:57:55,659 [main:61] - GENERATED IS CALL =false
2021-03-12 09:57:55,935 [main:67] - randomType = Double
2021-03-12 09:57:56,212 [main:302] - generating value of type = Double true depth = 0
2021-03-12 09:57:56,281 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6768cc1]
2021-03-12 09:57:56,281 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a23df8]
2021-03-12 09:57:56,499 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:57:56,508 [main:78] - Generated call from random type = (0.6560535932124372).toShort().toString(-673225507)
2021-03-12 09:57:56,509 [main:106] - GETTING String from Any
2021-03-12 09:57:56,513 [main:106] - GETTING String from Any?
2021-03-12 09:57:56,516 [main:113] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@58f0bd05]]
2021-03-12 09:57:56,516 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@58f0bd05]
2021-03-12 09:57:56,516 [main:117] - GENERATED CALL = (Kla1().prope2).toString()
2021-03-12 09:57:56,516 [main:114] - replacement of (foo()).trimStart() + " has no state-machine " +
                prope12.joinToString(separator = "\n") of type String is (0.6560535932124372).toShort().toString(-673225507)
2021-03-12 09:57:56,762 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 09:57:56,763 [main:66] - Compilation checking started
2021-03-12 09:57:57,801 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return ((foo())).dropWhile({a: Char -> false})
}

fun fu12(c: suspend () -> Unit) {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope11 = runCatching<Any?>({ "pmbcl"}).getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((foo())).compareTo(prope2).toString(-1873834080) + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((0.6560535932124372).toShort().toString(-673225507))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in ((foo())).compareTo(foo()).rangeTo(-95)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != (Kla1()).prope2?.hashCode()!!)
            error("wurvk" + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5) && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:57:57,804 [main:107] - replacing (" is not subtype of CoroutineStackFrame", String)
2021-03-12 09:57:57,804 [main:50] - replacing " is not subtype of CoroutineStackFrame" String
2021-03-12 09:57:57,804 [main:54] - Getting value of type String
2021-03-12 09:57:58,040 [main:302] - generating value of type = String true depth = 0
2021-03-12 09:57:58,046 [main:58] - GENERATED VALUE OF TYPE String = "alxoa"
2021-03-12 09:57:58,047 [main:61] - GENERATED IS CALL =false
2021-03-12 09:57:58,076 [main:67] - randomType = Kla1
2021-03-12 09:57:58,296 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 09:57:58,305 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 09:57:58,332 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@58f0bd05]
2021-03-12 09:57:58,332 [main:78] - Generated call from random type = (Kla1()).prope2?.toString()!!
2021-03-12 09:57:58,333 [main:106] - GETTING String from Any
2021-03-12 09:57:58,338 [main:106] - GETTING String from String
2021-03-12 09:57:58,378 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d45bf2b]]
2021-03-12 09:57:58,378 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d45bf2b]
2021-03-12 09:57:58,671 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:57:58,680 [main:117] - GENERATED CALL = (foo()).replaceAfter('ኔ', foo(), var prope2 =
2021-03-12 09:57:58,681 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9f36c40]]
2021-03-12 09:57:58,681 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9f36c40]
2021-03-12 09:57:58,681 [main:117] - GENERATED CALL = (foo()).trimMargin(prope2)
2021-03-12 09:57:58,681 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bbbb64c]]
2021-03-12 09:57:58,681 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bbbb64c]
2021-03-12 09:57:58,882 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 09:57:58,892 [main:117] - GENERATED CALL = (foo()).commonSuffixWith("nkwkt", Kla4().prope5)
2021-03-12 09:57:58,892 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3b5ab6fe], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]]
2021-03-12 09:57:58,892 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52b9f698]
2021-03-12 09:57:59,128 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:57:59,136 [main:117] - GENERATED CALL = (foo()).length.toString(1621047873)
2021-03-12 09:57:59,136 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ac01264]]
2021-03-12 09:57:59,136 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 09:57:59,328 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:57:59,334 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ac01264]
2021-03-12 09:57:59,335 [main:117] - GENERATED CALL = (foo()).get(-369862762).titlecase()
2021-03-12 09:57:59,335 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284b784c]]
2021-03-12 09:57:59,335 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284b784c]
2021-03-12 09:57:59,528 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 09:57:59,535 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 09:57:59,541 [main:117] - GENERATED CALL = (foo()).dropWhile({a: Char -> true})
2021-03-12 09:57:59,541 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a97bc42]]
2021-03-12 09:57:59,541 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a97bc42]
2021-03-12 09:57:59,542 [main:117] - GENERATED CALL = (foo()).trim()
2021-03-12 09:57:59,542 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34db013e]]
2021-03-12 09:57:59,542 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:57:59,718 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:57:59,896 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:57:59,902 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34db013e]
2021-03-12 09:58:00,096 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:58:00,103 [main:117] - GENERATED CALL = (foo()).subSequence(-349422665, 656966103).repeat(447791653)
2021-03-12 09:58:00,103 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@745254a0]]
2021-03-12 09:58:00,103 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@745254a0]
2021-03-12 09:58:00,103 [main:117] - GENERATED CALL = (foo()).trimStart()
2021-03-12 09:58:00,103 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9a9268]]
2021-03-12 09:58:00,103 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a9a9268]
2021-03-12 09:58:00,289 [main:302] - generating value of type = Char true depth = 0
2021-03-12 09:58:00,299 [main:117] - GENERATED CALL = (foo()).substringAfter('뺯', prope2)
2021-03-12 09:58:00,299 [main:114] - replacement of " is not subtype of CoroutineStackFrame" of type String is foo()
2021-03-12 09:58:00,523 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(CALL_EXPRESSION)
2021-03-12 09:58:00,523 [main:66] - Compilation checking started
2021-03-12 09:58:01,321 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return ((foo())).dropWhile({a: Char -> false})
}

fun fu12(c: suspend () -> Unit) {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope11 = runCatching<Any?>({ "pmbcl"}).getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((foo())).compareTo(prope2).toString(-1873834080) + foo())
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((0.6560535932124372).toShort().toString(-673225507))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in ((foo())).compareTo(foo()).rangeTo(-95)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != (Kla1()).prope2?.hashCode()!!)
            error("wurvk" + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5) && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            prope9.prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:58:01,324 [main:107] - replacing (it, Continuation<Unit>)
2021-03-12 09:58:01,324 [main:50] - replacing it Continuation<Unit>
2021-03-12 09:58:01,324 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 09:58:01,523 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 09:58:01,728 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 09:58:01,738 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 09:58:02,454 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 09:58:02,662 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:58:02,675 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:58:03,128 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 09:58:03,359 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:58:03,367 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:58:04,094 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:58:04,094 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:58:04,095 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 09:58:04,095 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 09:58:04,373 [main:67] - randomType = Short?
2021-03-12 09:58:04,613 [main:302] - generating value of type = Short true depth = 0
2021-03-12 09:58:04,689 [main:106] - GETTING Continuation<Unit> from Boolean
2021-03-12 09:58:04,706 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 09:58:04,743 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 09:58:04,744 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 09:58:04,745 [main:106] - GETTING Continuation<Unit> from CoroutineContext
2021-03-12 09:58:04,758 [main:106] - GETTING Continuation<Unit> from CoroutineContext
2021-03-12 09:58:04,759 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 09:58:04,760 [main:106] - GETTING Continuation<Unit> from Any
2021-03-12 09:58:04,767 [main:106] - GETTING Continuation<Unit> from Continuation<ArrayList<Int?>>
2021-03-12 09:58:04,781 [main:106] - GETTING Continuation<Unit> from CoroutineContext
2021-03-12 09:58:04,782 [main:106] - GETTING Continuation<Unit> from Any?
2021-03-12 09:58:04,790 [main:106] - GETTING Continuation<Unit> from Function0<Unit>
2021-03-12 09:58:04,819 [main:106] - GETTING Continuation<Unit> from Continuation<Any?>
2021-03-12 09:58:04,832 [main:106] - GETTING Continuation<Unit> from EmptyCoroutineContext
2021-03-12 09:58:04,862 [main:111] - Cant find and generate replacement for it type Continuation<Unit>
2021-03-12 09:58:04,862 [main:107] - replacing (prope9, Kla11)
2021-03-12 09:58:04,862 [main:50] - replacing prope9 Kla11
2021-03-12 09:58:04,862 [main:54] - Getting value of type Kla11
2021-03-12 09:58:05,074 [main:302] - generating value of type = Kla11 false depth = 0
2021-03-12 09:58:05,081 [main:112] - generating klass Kla11 text = class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in ((foo())).compareTo(foo()).rangeTo(-95)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != (Kla1()).prope2?.hashCode()!!)
            error("wurvk" + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5) && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 09:58:05,081 [main:58] - GENERATED VALUE OF TYPE Kla11 = Kla11()
2021-03-12 09:58:05,082 [main:61] - GENERATED IS CALL =true
2021-03-12 09:58:05,110 [main:67] - randomType = Kla10
2021-03-12 09:58:05,313 [main:302] - generating value of type = Kla10 false depth = 0
2021-03-12 09:58:05,320 [main:112] - generating klass Kla10 text = class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((foo())).compareTo(prope2).toString(-1873834080) + foo())
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((0.6560535932124372).toShort().toString(-673225507))
    }
}
2021-03-12 09:58:05,329 [main:106] - GETTING Kla11 from String
2021-03-12 09:58:05,365 [main:106] - GETTING Kla11 from String
2021-03-12 09:58:05,366 [main:106] - GETTING Kla11 from CoroutineContext
2021-03-12 09:58:05,378 [main:106] - GETTING Kla11 from CoroutineContext
2021-03-12 09:58:05,379 [main:106] - GETTING Kla11 from Continuation<ArrayList<Int?>>
2021-03-12 09:58:05,392 [main:106] - GETTING Kla11 from Any
2021-03-12 09:58:05,396 [main:106] - GETTING Kla11 from CoroutineContext
2021-03-12 09:58:05,396 [main:106] - GETTING Kla11 from Function0<Unit>
2021-03-12 09:58:05,412 [main:106] - GETTING Kla11 from String
2021-03-12 09:58:05,413 [main:106] - GETTING Kla11 from EmptyCoroutineContext
2021-03-12 09:58:05,439 [main:106] - GETTING Kla11 from Any?
2021-03-12 09:58:05,443 [main:106] - GETTING Kla11 from String
2021-03-12 09:58:05,444 [main:106] - GETTING Kla11 from Continuation<Any?>
2021-03-12 09:58:05,456 [main:106] - GETTING Kla11 from Boolean
2021-03-12 09:58:05,469 [main:114] - replacement of prope9 of type Kla11 is Kla11()
2021-03-12 09:58:05,697 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:58:05,698 [main:66] - Compilation checking started
2021-03-12 09:58:06,689 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return ((foo())).dropWhile({a: Char -> false})
}

fun fu12(c: suspend () -> Unit) {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope11 = runCatching<Any?>({ "pmbcl"}).getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((foo())).compareTo(prope2).toString(-1873834080) + foo())
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((0.6560535932124372).toShort().toString(-673225507))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in ((foo())).compareTo(foo()).rangeTo(-95)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != (Kla1()).prope2?.hashCode()!!)
            error("wurvk" + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5) && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            Kla11().prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:58:06,692 [main:107] - replacing (x, Function1<Ty1, Unit>)
2021-03-12 09:58:06,692 [main:50] - replacing x Function1<Ty1, Unit>
2021-03-12 09:58:06,692 [main:54] - Getting value of type Function1<Ty1, Unit>
2021-03-12 09:58:06,972 [main:302] - generating value of type = Function1<Ty1, Unit> false depth = 0
2021-03-12 09:58:06,978 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:58:07,214 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 09:58:07,222 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 09:58:07,756 [main:302] - generating value of type = Any false depth = 4
2021-03-12 09:58:07,757 [main:95] - GENERATED = println("isqxp")
2021-03-12 09:58:07,757 [main:58] - GENERATED VALUE OF TYPE Function1<Ty1, Unit> = {a: Ty1 -> println("isqxp")}
2021-03-12 09:58:07,757 [main:61] - GENERATED IS CALL =false
2021-03-12 09:58:07,786 [main:67] - randomType = Kla1
2021-03-12 09:58:07,988 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 09:58:07,995 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 09:58:08,019 [main:106] - GETTING Function1<Ty1, Unit> from Boolean
2021-03-12 09:58:08,032 [main:106] - GETTING Function1<Ty1, Unit> from Function0<Unit>
2021-03-12 09:58:08,045 [main:106] - GETTING Function1<Ty1, Unit> from CoroutineContext
2021-03-12 09:58:08,057 [main:106] - GETTING Function1<Ty1, Unit> from CoroutineContext
2021-03-12 09:58:08,058 [main:106] - GETTING Function1<Ty1, Unit> from String
2021-03-12 09:58:08,091 [main:106] - GETTING Function1<Ty1, Unit> from String
2021-03-12 09:58:08,092 [main:106] - GETTING Function1<Ty1, Unit> from String
2021-03-12 09:58:08,093 [main:106] - GETTING Function1<Ty1, Unit> from Any
2021-03-12 09:58:08,100 [main:106] - GETTING Function1<Ty1, Unit> from String
2021-03-12 09:58:08,101 [main:106] - GETTING Function1<Ty1, Unit> from EmptyCoroutineContext
2021-03-12 09:58:08,126 [main:106] - GETTING Function1<Ty1, Unit> from Continuation<ArrayList<Int?>>
2021-03-12 09:58:08,139 [main:106] - GETTING Function1<Ty1, Unit> from Continuation<Any?>
2021-03-12 09:58:08,152 [main:106] - GETTING Function1<Ty1, Unit> from CoroutineContext
2021-03-12 09:58:08,153 [main:106] - GETTING Function1<Ty1, Unit> from Any?
2021-03-12 09:58:08,158 [main:114] - replacement of x of type Function1<Ty1, Unit> is {a: Ty1 -> println("isqxp")}
2021-03-12 09:58:08,349 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 09:58:08,349 [main:66] - Compilation checking started
2021-03-12 09:58:08,887 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return ((foo())).dropWhile({a: Char -> false})
}

fun fu12(c: suspend () -> Unit) {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
{a: Ty1 -> println("isqxp")}(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope11 = runCatching<Any?>({ "pmbcl"}).getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((foo())).compareTo(prope2).toString(-1873834080) + foo())
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((0.6560535932124372).toShort().toString(-673225507))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in ((foo())).compareTo(foo()).rangeTo(-95)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != (Kla1()).prope2?.hashCode()!!)
            error("wurvk" + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5) && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            Kla11().prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:58:08,889 [main:107] - replacing (let(x), Unit?)
2021-03-12 09:58:08,889 [main:50] - replacing let(x) Unit?
2021-03-12 09:58:08,889 [main:54] - Getting value of type Unit?
2021-03-12 09:58:09,115 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 09:58:09,312 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:58:09,321 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 09:58:10,004 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 09:58:10,010 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-12 09:58:10,017 [main:302] - generating value of type = Any false depth = 4
2021-03-12 09:58:10,017 [main:95] - GENERATED = check(true, { "jjxrt"})
2021-03-12 09:58:10,017 [main:58] - GENERATED VALUE OF TYPE Unit? = check(true, { "jjxrt"})
2021-03-12 09:58:10,017 [main:61] - GENERATED IS CALL =true
2021-03-12 09:58:10,249 [main:67] - randomType = Long
2021-03-12 09:58:10,447 [main:302] - generating value of type = Long true depth = 0
2021-03-12 09:58:10,512 [main:106] - GETTING Unit? from CoroutineContext
2021-03-12 09:58:10,523 [main:106] - GETTING Unit? from String
2021-03-12 09:58:10,554 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ae5e849]]
2021-03-12 09:58:10,554 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ae5e849]
2021-03-12 09:58:10,738 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 09:58:10,745 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:58:10,755 [main:117] - GENERATED CALL = (foo())?.forEachIndexed({a: Int, b: Char -> println()})
2021-03-12 09:58:10,755 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ae5e849]]
2021-03-12 09:58:10,755 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:58:10,955 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:58:11,158 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:58:11,164 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ae5e849]
2021-03-12 09:58:11,385 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 09:58:11,395 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:58:11,599 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 09:58:11,607 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 09:58:12,048 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 09:58:12,056 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 09:58:12,254 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:58:12,263 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:58:13,018 [main:302] - generating value of type = Int true depth = 8
2021-03-12 09:58:13,024 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 09:58:13,031 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 09:58:13,238 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:58:13,247 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 09:58:13,966 [main:302] - generating value of type = Int true depth = 12
2021-03-12 09:58:13,973 [main:302] - generating value of type = Function1<Int, Unit> false depth = 12
2021-03-12 09:58:13,980 [main:302] - generating value of type = Unit false depth = 13
2021-03-12 09:58:13,990 [main:95] - GENERATED = repeat(-122177520, {a: Int -> println()})
2021-03-12 09:58:13,991 [main:95] - GENERATED = repeat(-1083808639, {a: Int -> repeat(-122177520, {a: Int -> println()})})
2021-03-12 09:58:13,991 [main:95] - GENERATED = contract({ repeat(-1083808639, {a: Int -> repeat(-122177520, {a: Int -> println()})})})
2021-03-12 09:58:13,991 [main:117] - GENERATED CALL = (foo())?.subSequence(-188278240, 1412119230).forEachIndexed({a: Int, b: Char -> contract({ repeat(-1083808639, {a: Int -> repeat(-122177520, {a: Int -> println()})})})})
2021-03-12 09:58:13,991 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4babdaa3]]
2021-03-12 09:58:13,991 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4babdaa3]
2021-03-12 09:58:14,184 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 09:58:14,190 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:58:14,202 [main:117] - GENERATED CALL = (foo())?.forEach({a: Char -> println()})
2021-03-12 09:58:14,202 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4babdaa3]]
2021-03-12 09:58:14,202 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@455cd236]
2021-03-12 09:58:14,409 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:58:14,614 [main:302] - generating value of type = Int true depth = 0
2021-03-12 09:58:14,622 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4babdaa3]
2021-03-12 09:58:14,800 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 09:58:14,807 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 09:58:15,020 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 09:58:15,028 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 09:58:15,479 [main:302] - generating value of type = Any false depth = 4
2021-03-12 09:58:15,479 [main:95] - GENERATED = println("bjduu")
2021-03-12 09:58:15,480 [main:117] - GENERATED CALL = (foo())?.subSequence(1177357657, -1679721256).forEach({a: Char -> println("bjduu")})
2021-03-12 09:58:15,480 [main:114] - replacement of let(x) of type Unit? is (foo())?.forEach({a: Char -> println()})
2021-03-12 09:58:15,662 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 09:58:15,662 [main:66] - Compilation checking started
2021-03-12 09:58:16,177 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return ((foo())).dropWhile({a: Char -> false})
}

fun fu12(c: suspend () -> Unit) {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.(foo())?.forEach({a: Char -> println()})
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope11 = runCatching<Any?>({ "pmbcl"}).getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((foo())).compareTo(prope2).toString(-1873834080) + foo())
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((0.6560535932124372).toShort().toString(-673225507))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in ((foo())).compareTo(foo()).rangeTo(-95)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != (Kla1()).prope2?.hashCode()!!)
            error("wurvk" + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5) && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            Kla11().prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


2021-03-12 09:58:16,180 [main:107] - replacing (prope11, Result<Ty1>)
2021-03-12 09:58:16,180 [main:50] - replacing prope11 Result<Ty1>
2021-03-12 09:58:16,180 [main:54] - Getting value of type Result<Ty1>
2021-03-12 09:58:16,414 [main:302] - generating value of type = Result<Ty1> false depth = 0
2021-03-12 09:58:16,614 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 09:58:16,622 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 09:58:17,056 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 09:58:17,056 [main:58] - GENERATED VALUE OF TYPE Result<Ty1> = 
2021-03-12 09:58:17,082 [main:67] - randomType = Kla0
2021-03-12 09:58:17,283 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 09:58:17,290 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}
2021-03-12 09:58:17,477 [main:194] - Type params = []
2021-03-12 09:58:17,665 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 09:58:17,868 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:58:17,876 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:58:18,363 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 09:58:18,567 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:58:18,576 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:58:19,307 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 09:58:19,307 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 09:58:19,328 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 09:58:19,340 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 09:58:19,341 [main:106] - GETTING Result<Ty1> from EmptyCoroutineContext
2021-03-12 09:58:19,368 [main:106] - GETTING Result<Ty1> from Continuation<Any?>
2021-03-12 09:58:19,381 [main:106] - GETTING Result<Ty1> from String
2021-03-12 09:58:19,415 [main:106] - GETTING Result<Ty1> from Boolean
2021-03-12 09:58:19,430 [main:106] - GETTING Result<Ty1> from Function0<Unit>
2021-03-12 09:58:19,446 [main:106] - GETTING Result<Ty1> from Any?
2021-03-12 09:58:19,453 [main:106] - GETTING Result<Ty1> from String
2021-03-12 09:58:19,454 [main:106] - GETTING Result<Ty1> from String
2021-03-12 09:58:19,455 [main:106] - GETTING Result<Ty1> from Any
2021-03-12 09:58:19,462 [main:106] - GETTING Result<Ty1> from Continuation<ArrayList<Int?>>
2021-03-12 09:58:19,475 [main:106] - GETTING Result<Ty1> from String
2021-03-12 09:58:19,477 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 09:58:19,477 [main:111] - Cant find and generate replacement for prope11 type Result<Ty1>
2021-03-12 09:58:19,477 [main:107] - replacing (this, Kla8)
2021-03-12 09:58:19,477 [main:50] - replacing this Kla8
2021-03-12 09:58:19,477 [main:54] - Getting value of type Kla8
2021-03-12 09:58:19,668 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 09:58:19,687 [main:112] - generating klass Kla8 text = class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope11 = runCatching<Any?>({ "pmbcl"}).getOrThrow()
    }

    var prope11: Any? = null
}
2021-03-12 09:58:19,687 [main:58] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-12 09:58:19,687 [main:61] - GENERATED IS CALL =true
2021-03-12 09:58:20,639 [main:67] - randomType = Function1<Array<UByte>, Float>
2021-03-12 09:58:20,640 [main:106] - GETTING Kla8 from String
2021-03-12 09:58:20,673 [main:106] - GETTING Kla8 from Continuation<ArrayList<Int?>>
2021-03-12 09:58:20,686 [main:106] - GETTING Kla8 from Function0<Unit>
2021-03-12 09:58:20,702 [main:106] - GETTING Kla8 from String
2021-03-12 09:58:20,703 [main:106] - GETTING Kla8 from EmptyCoroutineContext
2021-03-12 09:58:20,732 [main:106] - GETTING Kla8 from Any
2021-03-12 09:58:20,738 [main:106] - GETTING Kla8 from CoroutineContext
2021-03-12 09:58:20,748 [main:106] - GETTING Kla8 from Any?
2021-03-12 09:58:20,755 [main:106] - GETTING Kla8 from String
2021-03-12 09:58:20,755 [main:106] - GETTING Kla8 from CoroutineContext
2021-03-12 09:58:20,756 [main:106] - GETTING Kla8 from CoroutineContext
2021-03-12 09:58:20,757 [main:106] - GETTING Kla8 from Boolean
2021-03-12 09:58:20,787 [main:106] - GETTING Kla8 from Continuation<Any?>
2021-03-12 09:58:20,800 [main:106] - GETTING Kla8 from String
2021-03-12 09:58:20,800 [main:114] - replacement of this of type Kla8 is Kla8()
2021-03-12 09:58:20,988 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 09:58:20,988 [main:66] - Compilation checking started
2021-03-12 09:58:21,747 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun foo(s: String = "O") = s

fun box() = foo() + foo("K")

suspend fun fu0(): Any = suspendCoroutineUninterceptedOrReturn { x ->}

fun fu1(c: suspend () -> Unit) {
    try {
        c.createCoroutine(Kla0).resumeWithException(RuntimeException("OK"))
    }
    catch(e: Exception) {
        if ((foo())?.get(-1354381132).lowercase() != (foo("kznso")).trimStart()) {
            throw UnsupportedOperationException(AssertionError(null, IndexOutOfBoundsException()))
        }
        return
    }

    throw IllegalArgumentException("xauso")
}

fun box531(): String {
    var prope2 = "OK"
    fu1 {
        "hvbxi"
        prope2 = "fail 1"
    }

    fu1 { repeat(0, {a: Int -> repeat(1432564565, {a: Int -> require(true, { "azqke"})})})}

    return (foo()).dropWhile({a: Char -> true})
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        ConcurrentModificationException("aclyd")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        (Kla1()).prope2
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "fgnui"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            resumeWithException(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("gpwwp")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((foo("kznso")).get((foo("kznso")).length.toInt()).uppercase() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu8(method: String) {
        prope3.find { true} ?: error((foo()).commonSuffixWith("uymqk", false))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = (foo("kznso")).length.toInt()
    var prope5 = (foo("kznso")).subSequence(-87713372, (foo("kznso")).length).equals("aqaey")

    var prope6: () -> Unit = { check((foo("kznso")).get(1429351121).isSurrogate(), { "zijak"})}

    fun fu9() {
        prope4 = 0
        prope5 = (foo("kznso")).isNotEmpty()
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("nmbjc")}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (foo()).hasSurrogatePairAt(-1082142554)) {
        for (i in (foo()).indices) {
            if ((foo()).subSequence(1520358765, 1463605311).endsWith('䶑', (foo("kznso")).isNotEmpty())) error((foo("kznso")).filter({a: Char -> (foo()).hasSurrogatePairAt(-1082142554)}) + prope4)
            prope6()
        }
        if ((foo()).get(1463605311).equals('꛾', true))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (foo()).subSequence(prope4, prope4).substring(865310824, (foo("kznso")).length.toInt()) + (foo("kznso")).length.times(104))
        if ((foo("kznso")).get(1158517373).isUpperCase()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((foo("kznso")).get((foo("kznso")).length).isSurrogate()) error((foo("kznso")).trimStart())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw NotImplementedError("symik")
    }
}

suspend fun fu11(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
suspend fun fu15(): String {
        suspend fun fu15(): String {
            suspend fun fu15(): String {
                suspend fun fu15(): String {
                    suspend fun fu15(): String {
                        return "OK"
                    }
                    return fu15()
                }
                return fu15()
            }
            return fu15()
        }
        return fu15()
    }
    return ((foo())).dropWhile({a: Char -> false})
}

fun fu12(c: suspend () -> Unit) {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun box538(): String {
    var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
var prope10 = "rrqxv"
    fu12 { check(true, { "pqjni"})}
    return (foo("zmfpg")).filter({a: Char -> false})
}

fun <Ty1> fu13(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope11.getOrThrow())
    }
}

fun fu14(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
UnsupportedOperationException()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
Kla8().prope11 = runCatching<Any?>({ "pmbcl"}).getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu16(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu16(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu18() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu18(it)
    }

    fun fu18(c: Continuation<*>) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((foo())).compareTo(prope2).toString(-1873834080) + foo())
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu19(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == (fu2<ArrayList<Int?>>({a: ArrayList<Int?> -> require(true, { "suzln"})})).context.equals("egysv") }?.let { error((foo()).substringAfter('⥊', foo("zmfpg"))) }
    }

    fun fu20(method: String) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope12.find { (Kla5).equals(Kla1().prope2).not() } ?: error((0.6560535932124372).toShort().toString(-673225507))
    }
}

val prope8 = Kla10()

class Kla11 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu21() {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu22() = suspendCoroutine<Unit> { c ->
        1823514569
        prope15 = { c.resume(Unit) }
    }

    fun fu23(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in ((foo())).compareTo(foo()).rangeTo(-95)) {
            if ((Kla5.context).equals(Kla1().prope2).compareTo(true) != -103866189) error("fypus" + prope13)
            prope15()
        }
        if ((Kla7()).equals("luwrj").compareTo(Kla4().prope5) != (Kla1()).prope2?.hashCode()!!)
            error("wurvk" + prope13)
        if (((foo())).subSequence(146231953, 795001531).isNotBlank()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((Kla5.context).equals(Kla1().prope2).xor(Kla4().prope5) && !(Kla1().context).equals(Kla1().prope2).xor(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope9 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
prope9.prope15 = {
            Kla11().prope14 = true
        }
    }

    override fun fu16(exception: Throwable) {
        var prope2 = "OK"
val prope0 = Kla3()
val prope1 = Kla4()
throw UnsupportedOperationException("cqdon", ArithmeticException("iaegl"))
    }
}


