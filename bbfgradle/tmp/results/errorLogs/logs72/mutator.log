2021-03-12 03:21:05,421 [main:66] - Compilation checking started
2021-03-12 03:21:07,069 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 03:21:07,071 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 03:21:07,514 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 03:21:07,533 [main:66] - Compilation checking started
2021-03-12 03:21:08,452 [main:53] - Result = true
Text:
import java.lang.reflect.Method
import kotlin.test.assertEquals

@Retention(AnnotationRetention.RUNTIME)
annotation class Ann(val x: String)

fun foo0(block: () -> Unit = { println()}) = block.javaClass
fun foo1(block: (String) -> Unit) = block.javaClass

fun testMethod(method: Method, name: String) {
    assertEquals("OK", method.getAnnotation(Ann::class.java).x, "On method of test named `$name`")

    for ((index, annotations) in method.getParameterAnnotations().withIndex()) {
        val ann = annotations.filterIsInstance<Ann>().single()
        assertEquals("OK$index", ann.x, "On parameter $index of test named `$name`")
    }
}

fun testClass(clazz: Class<*>, name: String) {
    val invokes = clazz.getDeclaredMethods().single() { !it.isBridge() }
    testMethod(invokes, name)
}

fun box(): String {
    testClass(foo0( @Ann("OK") fun() {} ), "1")
    testClass(foo1( @Ann("OK") fun(@Ann("OK0") x: String) {} ), "2")
    return "OK"
}
2021-03-12 03:21:08,453 [main:50] - replacing block: (String) -> Unit Function1<String, Unit>
2021-03-12 03:21:08,453 [main:54] - Getting value of type Function1<String, Unit>
2021-03-12 03:21:08,612 [main:302] - generating value of type = Function1<String, Unit> false depth = 0
2021-03-12 03:21:08,613 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 03:21:08,809 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 03:21:08,819 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 03:21:09,182 [main:302] - generating value of type = Any false depth = 4
2021-03-12 03:21:09,185 [main:95] - GENERATED = println("zhjem")
2021-03-12 03:21:09,185 [main:58] - GENERATED VALUE OF TYPE Function1<String, Unit> = {a: String -> println("zhjem")}
2021-03-12 03:21:09,185 [main:61] - GENERATED IS CALL =false
2021-03-12 03:21:09,373 [main:67] - randomType = Int
2021-03-12 03:21:09,556 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:21:09,725 [main:106] - GETTING Function1<String, Unit> from Function0<Unit>
2021-03-12 03:21:09,743 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 03:21:09,744 [main:66] - Compilation checking started
2021-03-12 03:21:10,441 [main:53] - Result = true
Text:
import java.lang.reflect.Method
import kotlin.test.assertEquals

@Retention(AnnotationRetention.RUNTIME)
annotation class Ann(val x: String)

fun foo0(block: () -> Unit = { println()}) = block.javaClass
fun foo1(block: (String) -> Unit = {a: String -> println("zhjem")}) = block.javaClass

fun testMethod(method: Method, name: String) {
    assertEquals("OK", method.getAnnotation(Ann::class.java).x, "On method of test named `$name`")

    for ((index, annotations) in method.getParameterAnnotations().withIndex()) {
        val ann = annotations.filterIsInstance<Ann>().single()
        assertEquals("OK$index", ann.x, "On parameter $index of test named `$name`")
    }
}

fun testClass(clazz: Class<*>, name: String) {
    val invokes = clazz.getDeclaredMethods().single() { !it.isBridge() }
    testMethod(invokes, name)
}

fun box(): String {
    testClass(foo0( @Ann("OK") fun() {} ), "1")
    testClass(foo1( @Ann("OK") fun(@Ann("OK0") x: String) {} ), "2")
    return "OK"
}


2021-03-12 03:21:10,441 [main:302] - generating value of type = [ERROR : Method] false depth = 0
2021-03-12 03:21:10,578 [main:309] - RECREATED ERROR TYPE = Method
2021-03-12 03:21:10,578 [main:302] - generating value of type = Method false depth = 0
2021-03-12 03:21:10,583 [main:50] - replacing name: String String
2021-03-12 03:21:10,584 [main:54] - Getting value of type String
2021-03-12 03:21:10,716 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:21:10,717 [main:58] - GENERATED VALUE OF TYPE String = "yppkx"
2021-03-12 03:21:10,718 [main:61] - GENERATED IS CALL =false
2021-03-12 03:21:10,991 [main:67] - randomType = HashSet<Ann>
2021-03-12 03:21:11,123 [main:302] - generating value of type = HashSet<Ann> false depth = 0
2021-03-12 03:21:11,246 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Ann): HashSet<Ann> = TODO()
2021-03-12 03:21:11,250 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Ann): HashSet<Ann> = TODO()
2021-03-12 03:21:11,403 [main:302] - generating value of type = Ann false depth = 3
2021-03-12 03:21:11,404 [main:112] - generating klass Ann text = @Retention(AnnotationRetention.RUNTIME)
annotation class Ann(val x: String)
2021-03-12 03:21:11,404 [main:385] - Cant generate call of fun <T> linkedSetOf(elements: Ann): HashSet<Ann> = TODO()
2021-03-12 03:21:11,590 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@2c359ef0]
2021-03-12 03:21:11,591 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@653d1d7c]
2021-03-12 03:21:11,591 [main:78] - Generated call from random type = ().toArray().contentDeepToString()
2021-03-12 03:21:11,592 [main:106] - GETTING String from Function0<Unit>
2021-03-12 03:21:11,605 [main:106] - GETTING String from Function1<String, Unit>
2021-03-12 03:21:11,620 [main:106] - GETTING String from [ERROR : Method]
2021-03-12 03:21:11,626 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 03:21:11,626 [main:66] - Compilation checking started
2021-03-12 03:21:11,629 [main:71] - Wrong syntax or breaks conditions
2021-03-12 03:21:11,630 [main:49] - Result = false
Text:
import java.lang.reflect.Method
import kotlin.test.assertEquals

@Retention(AnnotationRetention.RUNTIME)
annotation class Ann(val x: String)

fun foo0(block: () -> Unit = { println()}) = block.javaClass
fun foo1(block: (String) -> Unit = {a: String -> println("zhjem")}) = block.javaClass

fun testMethod(method: Method, name: String = ().toArray().contentDeepToString()) {
    assertEquals("OK", method.getAnnotation(Ann::class.java).x, "On method of test named `$name`")

    for ((index, annotations) in method.getParameterAnnotations().withIndex()) {
        val ann = annotations.filterIsInstance<Ann>().single()
        assertEquals("OK$index", ann.x, "On parameter $index of test named `$name`")
    }
}

fun testClass(clazz: Class<*>, name: String) {
    val invokes = clazz.getDeclaredMethods().single() { !it.isBridge() }
    testMethod(invokes, name)
}

fun box(): String {
    testClass(foo0( @Ann("OK") fun() {} ), "1")
    testClass(foo1( @Ann("OK") fun(@Ann("OK0") x: String) {} ), "2")
    return "OK"
}


2021-03-12 03:21:11,631 [main:50] - replacing clazz: Class<*> [ERROR : Class<*>]<out [ERROR : *]>
2021-03-12 03:21:11,631 [main:54] - Getting value of type [ERROR : Class<*>]<out [ERROR : *]>
2021-03-12 03:21:11,785 [main:302] - generating value of type = [ERROR : Class<*>]<out [ERROR : *]> false depth = 0
2021-03-12 03:21:11,786 [main:309] - RECREATED ERROR TYPE = null
2021-03-12 03:21:11,786 [main:58] - GENERATED VALUE OF TYPE [ERROR : Class<*>]<out [ERROR : *]> = 
2021-03-12 03:21:12,546 [main:67] - randomType = Function1<Triple<UInt, Boolean?, Double>, Ann>
