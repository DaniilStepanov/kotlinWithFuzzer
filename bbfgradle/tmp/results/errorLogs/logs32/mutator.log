2021-03-11 20:33:21,663 [main:66] - Compilation checking started
2021-03-11 20:33:22,906 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:33:22,908 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:33:22,942 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:33:22,943 [main:66] - Compilation checking started
2021-03-11 20:33:23,603 [main:53] - Result = true
Text:


import kotlin.contracts.*
interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit = { println()}) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}


2021-03-11 20:33:23,604 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:33:23,605 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:33:23,772 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:33:23,775 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:33:24,071 [main:302] - generating value of type = Any false depth = 4
2021-03-11 20:33:24,075 [main:95] - GENERATED = println("tvdus")
2021-03-11 20:33:24,075 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:33:24,076 [main:66] - Compilation checking started
2021-03-11 20:33:24,692 [main:53] - Result = true
Text:


import kotlin.contracts.*
interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit = { println()}) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit = { println("tvdus")}) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}


2021-03-11 20:33:24,693 [main:302] - generating value of type = SomeOutputScreenCallbacks false depth = 0
2021-03-11 20:33:24,693 [main:112] - generating klass SomeOutputScreenCallbacks text = interface SomeOutputScreenCallbacks {
    fun ontest()
}
2021-03-11 20:33:24,953 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:33:24,953 [main:66] - Compilation checking started
2021-03-11 20:33:25,625 [main:53] - Result = true
Text:


import kotlin.contracts.*
interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks = TODO()) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit = { println()}) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit = { println("tvdus")}) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}


2021-03-11 20:33:25,846 [main:112] - generating klass SomeOutputScreenCallbacks text = interface SomeOutputScreenCallbacks {
    fun ontest()
}
2021-03-11 20:33:26,082 [main:112] - generating klass OutputWorkScreenView text = class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}
2021-03-11 20:33:26,223 [main:194] - Type params = []
2021-03-11 20:33:26,330 [main:302] - generating value of type = SomeOutputScreenCallbacks false depth = 1
2021-03-11 20:33:26,330 [main:112] - generating klass SomeOutputScreenCallbacks text = interface SomeOutputScreenCallbacks {
    fun ontest()
}
2021-03-11 20:33:26,626 [main:112] - generating klass null text = object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    }
2021-03-11 20:33:26,870 [main:43] - GENERATING CALL OF inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}
2021-03-11 20:33:26,870 [main:61] - WITHOUT TYPE PARAMS = inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}
2021-03-11 20:33:27,124 [main:302] - generating value of type = Function0<Unit> false depth = 1
2021-03-11 20:33:27,125 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 20:33:27,238 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:33:27,240 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:33:27,590 [main:302] - generating value of type = Boolean true depth = 5
2021-03-11 20:33:27,591 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-11 20:33:27,591 [main:302] - generating value of type = Any false depth = 6
2021-03-11 20:33:27,592 [main:95] - GENERATED = require(true, { "gvfom"})
2021-03-11 20:33:27,592 [main:95] - GENERATED = vBox({ require(true, { "gvfom"})})
2021-03-11 20:33:27,692 [main:43] - GENERATING CALL OF inline fun button(onAction: () -> Unit) {
    onAction()
}
2021-03-11 20:33:27,692 [main:61] - WITHOUT TYPE PARAMS = inline fun button(onAction: () -> Unit) {
    onAction()
}
2021-03-11 20:33:27,913 [main:302] - generating value of type = Function0<Unit> false depth = 1
2021-03-11 20:33:27,913 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 20:33:28,021 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:33:28,023 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:33:28,388 [main:302] - generating value of type = Int true depth = 5
2021-03-11 20:33:28,389 [main:302] - generating value of type = Function1<Int, Unit> false depth = 5
2021-03-11 20:33:28,389 [main:302] - generating value of type = Unit false depth = 6
2021-03-11 20:33:28,504 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:33:28,506 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:33:28,720 [main:302] - generating value of type = Boolean true depth = 9
2021-03-11 20:33:28,720 [main:95] - GENERATED = require(false)
2021-03-11 20:33:28,721 [main:95] - GENERATED = repeat(-1786513712, {a: Int -> require(false)})
2021-03-11 20:33:28,721 [main:95] - GENERATED = button({ repeat(-1786513712, {a: Int -> require(false)})})
2021-03-11 20:33:28,830 [main:45] - Trying to change 15 nodes
2021-03-11 20:33:28,832 [main:53] - replacing ({
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }, [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit>)
2021-03-11 20:33:28,833 [main:50] - replacing {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    } [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit>
2021-03-11 20:33:28,833 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit>
2021-03-11 20:33:28,947 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 0
2021-03-11 20:33:28,947 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:33:29,051 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:33:29,053 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:33:29,234 [main:302] - generating value of type = Any false depth = 4
2021-03-11 20:33:29,235 [main:95] - GENERATED = print("tdhtk")
2021-03-11 20:33:29,235 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> = { print("tdhtk")}
2021-03-11 20:33:29,236 [main:61] - GENERATED IS CALL =false
2021-03-11 20:33:29,468 [main:67] - randomType = Array<SomeOutputScreenCallbacks>
2021-03-11 20:33:29,572 [main:302] - generating value of type = Array<SomeOutputScreenCallbacks> false depth = 0
2021-03-11 20:33:29,683 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: SomeOutputScreenCallbacks): Array<SomeOutputScreenCallbacks> = TODO()
2021-03-11 20:33:29,684 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: SomeOutputScreenCallbacks): Array<SomeOutputScreenCallbacks> = TODO()
2021-03-11 20:33:29,793 [main:302] - generating value of type = SomeOutputScreenCallbacks false depth = 3
2021-03-11 20:33:29,793 [main:112] - generating klass SomeOutputScreenCallbacks text = interface SomeOutputScreenCallbacks {
    fun ontest()
}
2021-03-11 20:33:29,974 [main:95] - GENERATED = arrayOf<SomeOutputScreenCallbacks>(TODO())
2021-03-11 20:33:30,020 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> from Function0<Unit>
2021-03-11 20:33:30,043 [main:61] - replacement of {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    } of type [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> is { print("tdhtk")}
2021-03-11 20:33:30,128 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:33:30,129 [main:66] - Compilation checking started
2021-03-11 20:33:30,356 [main:49] - Result = false
Text:


import kotlin.contracts.*
interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract { print("tdhtk")}
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}


2021-03-11 20:33:30,357 [main:53] - replacing (action, Function0<Unit>)
2021-03-11 20:33:30,357 [main:50] - replacing action Function0<Unit>
2021-03-11 20:33:30,357 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:33:30,443 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:33:30,443 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:33:30,447 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 20:33:30,448 [main:61] - GENERATED IS CALL =false
2021-03-11 20:33:30,639 [main:67] - randomType = HashMap<UShort, String>
2021-03-11 20:33:30,744 [main:302] - generating value of type = HashMap<UShort, String> false depth = 0
2021-03-11 20:33:30,872 [main:43] - GENERATING CALL OF fun <K, V> HashMap(initialCapacity: kotlin.Int): HashMap<UShort, String> = TODO()
2021-03-11 20:33:30,874 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(initialCapacity: kotlin.Int): HashMap<UShort, String> = TODO()
2021-03-11 20:33:31,100 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:33:31,101 [main:95] - GENERATED = HashMap<UShort, String>(-1329463989)
2021-03-11 20:33:31,303 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 20:33:31,318 [main:61] - replacement of action of type Function0<Unit> is action
2021-03-11 20:33:31,414 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:33:31,416 [main:53] - replacing ({
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }, [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit>)
2021-03-11 20:33:31,419 [main:50] - replacing {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    } [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit>
2021-03-11 20:33:31,419 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit>
2021-03-11 20:33:31,509 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 0
2021-03-11 20:33:31,510 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:33:31,623 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:33:31,624 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:33:31,940 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:33:31,940 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 20:33:31,940 [main:302] - generating value of type = Any false depth = 5
2021-03-11 20:33:31,941 [main:95] - GENERATED = require(false, { "fbdik"})
2021-03-11 20:33:31,941 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> = { require(false, { "fbdik"})}
2021-03-11 20:33:31,941 [main:61] - GENERATED IS CALL =false
2021-03-11 20:33:32,045 [main:67] - randomType = UShort
2021-03-11 20:33:32,157 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 20:33:32,221 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> from Function0<Unit>
2021-03-11 20:33:32,234 [main:61] - replacement of {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    } of type [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> is { require(false, { "fbdik"})}
2021-03-11 20:33:32,370 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:33:32,371 [main:66] - Compilation checking started
2021-03-11 20:33:32,594 [main:49] - Result = false
Text:


import kotlin.contracts.*
interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract { require(false, { "fbdik"})}
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}


2021-03-11 20:33:32,595 [main:53] - replacing (callbacks::ontest, KFunction0<Unit>)
2021-03-11 20:33:32,595 [main:50] - replacing callbacks::ontest KFunction0<Unit>
2021-03-11 20:33:32,595 [main:54] - Getting value of type KFunction0<Unit>
2021-03-11 20:33:32,713 [main:302] - generating value of type = KFunction0<Unit> false depth = 0
2021-03-11 20:33:32,797 [main:58] - GENERATED VALUE OF TYPE KFunction0<Unit> = 
2021-03-11 20:33:32,898 [main:67] - randomType = Float
2021-03-11 20:33:32,991 [main:302] - generating value of type = Float true depth = 0
2021-03-11 20:33:33,074 [main:58] - Cant find and generate replacement for callbacks::ontest type KFunction0<Unit>
2021-03-11 20:33:33,075 [main:53] - replacing (action, Function0<Unit>)
2021-03-11 20:33:33,075 [main:50] - replacing action Function0<Unit>
2021-03-11 20:33:33,076 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:33:33,207 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:33:33,208 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:33:33,325 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:33:33,327 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:33:33,642 [main:302] - generating value of type = Int true depth = 4
2021-03-11 20:33:33,643 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 20:33:33,643 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 20:33:33,735 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:33:33,737 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:33:33,981 [main:302] - generating value of type = Any false depth = 8
2021-03-11 20:33:33,982 [main:95] - GENERATED = println("ywgly")
2021-03-11 20:33:33,983 [main:95] - GENERATED = repeat(418774271, {a: Int -> println("ywgly")})
2021-03-11 20:33:33,983 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(418774271, {a: Int -> println("ywgly")})}
2021-03-11 20:33:33,983 [main:61] - GENERATED IS CALL =false
2021-03-11 20:33:34,117 [main:67] - randomType = UByte
2021-03-11 20:33:34,253 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 20:33:34,322 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 20:33:34,334 [main:61] - replacement of action of type Function0<Unit> is { repeat(418774271, {a: Int -> println("ywgly")})}
2021-03-11 20:33:34,430 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:33:34,430 [main:66] - Compilation checking started
2021-03-11 20:33:34,629 [main:49] - Result = false
Text:


import kotlin.contracts.*
interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace({ repeat(418774271, {a: Int -> println("ywgly")})}, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}


2021-03-11 20:33:34,630 [main:53] - replacing (callbacks, SomeOutputScreenCallbacks)
2021-03-11 20:33:34,630 [main:50] - replacing callbacks SomeOutputScreenCallbacks
2021-03-11 20:33:34,630 [main:54] - Getting value of type SomeOutputScreenCallbacks
2021-03-11 20:33:34,726 [main:302] - generating value of type = SomeOutputScreenCallbacks false depth = 0
2021-03-11 20:33:34,726 [main:112] - generating klass SomeOutputScreenCallbacks text = interface SomeOutputScreenCallbacks {
    fun ontest()
}
2021-03-11 20:33:34,940 [main:58] - GENERATED VALUE OF TYPE SomeOutputScreenCallbacks = TODO()
2021-03-11 20:33:34,940 [main:61] - GENERATED IS CALL =true
2021-03-11 20:33:35,032 [main:67] - randomType = UInt
2021-03-11 20:33:35,136 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 20:33:35,201 [main:61] - replacement of callbacks of type SomeOutputScreenCallbacks is TODO()
2021-03-11 20:33:35,302 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:33:35,303 [main:66] - Compilation checking started
2021-03-11 20:33:35,491 [main:49] - Result = false
Text:


import kotlin.contracts.*
interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(TODO()::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}


2021-03-11 20:33:35,492 [main:53] - replacing (action, Function0<Unit>)
2021-03-11 20:33:35,492 [main:50] - replacing action Function0<Unit>
2021-03-11 20:33:35,492 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:33:35,583 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:33:35,584 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:33:35,679 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:33:35,680 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:33:35,869 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:33:35,869 [main:95] - GENERATED = require(true)
2021-03-11 20:33:35,870 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 20:33:35,870 [main:61] - GENERATED IS CALL =false
2021-03-11 20:33:35,983 [main:67] - randomType = ULong
2021-03-11 20:33:36,096 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 20:33:36,149 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 20:33:36,160 [main:61] - replacement of action of type Function0<Unit> is action
2021-03-11 20:33:36,250 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:33:36,251 [main:53] - replacing (callbacks::ontest, KFunction0<Unit>)
2021-03-11 20:33:36,252 [main:50] - replacing callbacks::ontest KFunction0<Unit>
2021-03-11 20:33:36,252 [main:54] - Getting value of type KFunction0<Unit>
2021-03-11 20:33:36,347 [main:302] - generating value of type = KFunction0<Unit> false depth = 0
2021-03-11 20:33:36,446 [main:58] - GENERATED VALUE OF TYPE KFunction0<Unit> = 
2021-03-11 20:33:36,633 [main:67] - randomType = Char?
2021-03-11 20:33:36,714 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:33:36,758 [main:58] - Cant find and generate replacement for callbacks::ontest type KFunction0<Unit>
2021-03-11 20:33:36,758 [main:53] - replacing ({
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }, [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit>)
2021-03-11 20:33:36,758 [main:50] - replacing {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    } [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit>
2021-03-11 20:33:36,758 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit>
2021-03-11 20:33:36,838 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 0
2021-03-11 20:33:36,838 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:33:36,924 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:33:36,926 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:33:37,220 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:33:37,220 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 20:33:37,220 [main:302] - generating value of type = Any false depth = 5
2021-03-11 20:33:37,221 [main:95] - GENERATED = check(false, { "cdraj"})
2021-03-11 20:33:37,221 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> = { check(false, { "cdraj"})}
2021-03-11 20:33:37,221 [main:61] - GENERATED IS CALL =false
2021-03-11 20:33:37,324 [main:67] - randomType = Char
2021-03-11 20:33:37,412 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:33:37,449 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> from Function0<Unit>
2021-03-11 20:33:37,464 [main:61] - replacement of {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    } of type [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> is { check(false, { "cdraj"})}
2021-03-11 20:33:37,559 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:33:37,560 [main:66] - Compilation checking started
2021-03-11 20:33:37,763 [main:49] - Result = false
Text:


import kotlin.contracts.*
interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract { check(false, { "cdraj"})}
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}


2021-03-11 20:33:37,864 [main:41] - AFTER TRY 0 res = 

import kotlin.contracts.*
interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}


2021-03-11 20:33:38,024 [main:112] - generating klass SomeOutputScreenCallbacks text = interface SomeOutputScreenCallbacks {
    fun ontest()
}
2021-03-11 20:33:38,187 [main:112] - generating klass OutputWorkScreenView text = class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}
2021-03-11 20:33:38,276 [main:194] - Type params = []
2021-03-11 20:33:38,369 [main:302] - generating value of type = SomeOutputScreenCallbacks false depth = 1
2021-03-11 20:33:38,369 [main:112] - generating klass SomeOutputScreenCallbacks text = interface SomeOutputScreenCallbacks {
    fun ontest()
}
2021-03-11 20:33:38,569 [main:112] - generating klass null text = object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    }
2021-03-11 20:33:38,790 [main:43] - GENERATING CALL OF inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}
2021-03-11 20:33:38,790 [main:61] - WITHOUT TYPE PARAMS = inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}
2021-03-11 20:33:38,994 [main:302] - generating value of type = Function0<Unit> false depth = 1
2021-03-11 20:33:38,994 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 20:33:39,092 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:33:39,093 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:33:39,279 [main:302] - generating value of type = Boolean true depth = 5
2021-03-11 20:33:39,279 [main:95] - GENERATED = check(false)
2021-03-11 20:33:39,279 [main:95] - GENERATED = vBox({ check(false)})
2021-03-11 20:33:39,375 [main:43] - GENERATING CALL OF inline fun button(onAction: () -> Unit) {
    onAction()
}
2021-03-11 20:33:39,375 [main:61] - WITHOUT TYPE PARAMS = inline fun button(onAction: () -> Unit) {
    onAction()
}
2021-03-11 20:33:39,620 [main:302] - generating value of type = Function0<Unit> false depth = 1
2021-03-11 20:33:39,620 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 20:33:39,734 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:33:39,736 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:33:39,975 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 5
2021-03-11 20:33:39,976 [main:302] - generating value of type = Unit false depth = 6
2021-03-11 20:33:40,075 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:33:40,077 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:33:40,265 [main:302] - generating value of type = Boolean true depth = 9
2021-03-11 20:33:40,266 [main:95] - GENERATED = check(true)
2021-03-11 20:33:40,266 [main:95] - GENERATED = contract({ check(true)})
2021-03-11 20:33:40,266 [main:95] - GENERATED = button({ contract({ check(true)})})
2021-03-11 20:33:40,372 [main:43] - Try №0
2021-03-11 20:33:54,148 [main:48] - Already checked
2021-03-11 20:33:58,013 [main:69] - Trying to insert fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}
2021-03-11 20:33:58,122 [main:66] - Compilation checking started
2021-03-11 20:33:59,292 [main:103] - Trying to change 172 nodes
2021-03-11 20:33:59,293 [main:107] - replacing (i, Int)
2021-03-11 20:33:59,294 [main:50] - replacing i Int
2021-03-11 20:33:59,294 [main:54] - Getting value of type Int
2021-03-11 20:33:59,509 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:33:59,511 [main:58] - GENERATED VALUE OF TYPE Int = -908406215
2021-03-11 20:33:59,511 [main:61] - GENERATED IS CALL =false
2021-03-11 20:33:59,668 [main:67] - randomType = Long
2021-03-11 20:33:59,843 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:33:59,924 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@398d1b9b]
2021-03-11 20:33:59,924 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72225e34]
2021-03-11 20:33:59,925 [main:78] - Generated call from random type = (-9117344221375709486).toInt().takeLowestOneBit()
2021-03-11 20:33:59,926 [main:106] - GETTING Int from OutputWorkScreenView
2021-03-11 20:33:59,935 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3a87ff62]]
2021-03-11 20:33:59,935 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:34:00,120 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:34:00,120 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3a87ff62]
2021-03-11 20:34:00,306 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:34:00,309 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)
2021-03-11 20:34:00,310 [main:114] - replacement of i of type Int is (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)
2021-03-11 20:34:00,472 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:34:00,472 [main:66] - Compilation checking started
2021-03-11 20:34:01,161 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 {
        prope4 = fu1(prope2, prope3) { firstValue: Int, secondValue: Int -> firstValue + secondValue }.fu5()
    }
    return if (prope4 == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:34:01,164 [main:107] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-11 20:34:01,165 [main:50] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-11 20:34:01,165 [main:54] - Getting value of type Function0<Boolean>
2021-03-11 20:34:01,358 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 20:34:01,362 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:34:01,365 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-11 20:34:01,366 [main:61] - GENERATED IS CALL =false
2021-03-11 20:34:01,606 [main:67] - randomType = ULong
2021-03-11 20:34:01,791 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 20:34:01,861 [main:106] - GETTING Function0<Boolean> from OutputWorkScreenView
2021-03-11 20:34:01,872 [main:114] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { true}
2021-03-11 20:34:02,055 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:34:02,055 [main:66] - Compilation checking started
2021-03-11 20:34:02,743 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 {
        prope4 = fu1(prope2, prope3) { firstValue: Int, secondValue: Int -> firstValue + secondValue }.fu5()
    }
    return if (prope4 == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:34:02,746 [main:107] - replacing (zipper(source1.fu5(), source2.fu5()), Ty3)
2021-03-11 20:34:02,747 [main:50] - replacing zipper(source1.fu5(), source2.fu5()) Ty3
2021-03-11 20:34:02,747 [main:54] - Getting value of type Ty3
2021-03-11 20:34:02,952 [main:302] - generating value of type = Ty3 false depth = 0
2021-03-11 20:34:02,961 [main:58] - GENERATED VALUE OF TYPE Ty3 = 
2021-03-11 20:34:03,301 [main:67] - randomType = Short?
2021-03-11 20:34:03,471 [main:302] - generating value of type = Short true depth = 0
2021-03-11 20:34:03,546 [main:106] - GETTING Ty3 from OutputWorkScreenView
2021-03-11 20:34:03,555 [main:111] - Cant find and generate replacement for zipper(source1.fu5(), source2.fu5()) type Ty3
2021-03-11 20:34:03,555 [main:107] - replacing (let(x), Unit?)
2021-03-11 20:34:03,556 [main:50] - replacing let(x) Unit?
2021-03-11 20:34:03,556 [main:54] - Getting value of type Unit?
2021-03-11 20:34:03,739 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 20:34:03,923 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:34:03,927 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:34:04,484 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:34:04,486 [main:302] - generating value of type = Function1<Int, Unit> false depth = 3
2021-03-11 20:34:04,488 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 20:34:04,494 [main:95] - GENERATED = repeat(-1525211617, {a: Int -> println()})
2021-03-11 20:34:04,495 [main:58] - GENERATED VALUE OF TYPE Unit? = repeat(-1525211617, {a: Int -> println()})
2021-03-11 20:34:04,495 [main:61] - GENERATED IS CALL =true
2021-03-11 20:34:04,677 [main:67] - randomType = UInt
2021-03-11 20:34:04,827 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 20:34:04,887 [main:106] - GETTING Unit? from OutputWorkScreenView
2021-03-11 20:34:04,897 [main:113] - Case = [public final val root: kotlin.Unit defined in OutputWorkScreenView[PropertyDescriptorImpl@7ba92dcc]]
2021-03-11 20:34:04,898 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    }))?.root
2021-03-11 20:34:04,898 [main:114] - replacement of let(x) of type Unit? is (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    }))?.root
2021-03-11 20:34:05,078 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 20:34:05,078 [main:66] - Compilation checking started
2021-03-11 20:34:05,491 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 {
        prope4 = fu1(prope2, prope3) { firstValue: Int, secondValue: Int -> firstValue + secondValue }.fu5()
    }
    return if (prope4 == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.(OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    }))?.root
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:34:05,493 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected ", String)
2021-03-11 20:34:05,494 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " String
2021-03-11 20:34:05,494 [main:54] - Getting value of type String
2021-03-11 20:34:05,689 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:34:05,694 [main:58] - GENERATED VALUE OF TYPE String = "fwefj"
2021-03-11 20:34:05,694 [main:61] - GENERATED IS CALL =false
2021-03-11 20:34:05,911 [main:67] - randomType = UInt
2021-03-11 20:34:06,083 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 20:34:06,146 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3bff3a94]
2021-03-11 20:34:06,147 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f01e3de]
2021-03-11 20:34:06,301 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:34:06,305 [main:78] - Generated call from random type = (1675511461.toUInt()).toUShort().toString(-2106964249)
2021-03-11 20:34:06,306 [main:106] - GETTING String from OutputWorkScreenView
2021-03-11 20:34:06,314 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " of type String is (1675511461.toUInt()).toUShort().toString(-2106964249)
2021-03-11 20:34:06,481 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:34:06,482 [main:66] - Compilation checking started
2021-03-11 20:34:07,194 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 {
        prope4 = fu1(prope2, prope3) { firstValue: Int, secondValue: Int -> firstValue + secondValue }.fu5()
    }
    return if (prope4 == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error((1675511461.toUInt()).toUShort().toString(-2106964249) + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:34:07,198 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-11 20:34:07,199 [main:50] - replacing getOrThrow() Ty0
2021-03-11 20:34:07,199 [main:54] - Getting value of type Ty0
2021-03-11 20:34:07,423 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 20:34:07,431 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 20:34:07,924 [main:67] - randomType = HashMap<Int, UByte>
2021-03-11 20:34:08,127 [main:302] - generating value of type = HashMap<Int, UByte> false depth = 0
2021-03-11 20:34:08,292 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<Int, UByte> = TODO()
2021-03-11 20:34:08,296 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<Int, UByte> = TODO()
2021-03-11 20:34:08,530 [main:95] - GENERATED = hashMapOf<Int, UByte>()
2021-03-11 20:34:08,677 [main:106] - GETTING Ty0 from OutputWorkScreenView
2021-03-11 20:34:08,683 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-11 20:34:08,683 [main:107] - replacing (prope4, Int)
2021-03-11 20:34:08,684 [main:50] - replacing prope4 Int
2021-03-11 20:34:08,684 [main:54] - Getting value of type Int
2021-03-11 20:34:08,846 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:34:08,849 [main:58] - GENERATED VALUE OF TYPE Int = 1135855243
2021-03-11 20:34:08,849 [main:61] - GENERATED IS CALL =false
2021-03-11 20:34:09,206 [main:67] - randomType = HashSet<Kla0<Kla4>>
2021-03-11 20:34:09,347 [main:302] - generating value of type = HashSet<Kla0<Kla4>> false depth = 0
2021-03-11 20:34:09,517 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Kla0<Kla4>): HashSet<Kla0<Kla4>> = TODO()
2021-03-11 20:34:09,522 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Kla0<Kla4>): HashSet<Kla0<Kla4>> = TODO()
2021-03-11 20:34:09,679 [main:302] - generating value of type = Kla0<Kla4> false depth = 3
2021-03-11 20:34:09,681 [main:112] - generating klass Kla0 text = class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}
2021-03-11 20:34:10,433 [main:194] - Type params = [Kla4]
2021-03-11 20:34:10,944 [main:302] - generating value of type = SuspendFunction0<Kla4> false depth = 5
2021-03-11 20:34:10,948 [main:302] - generating value of type = Kla4 false depth = 6
2021-03-11 20:34:10,951 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 20:34:10,953 [main:95] - GENERATED = hashSetOf<Kla0<Kla4>>(Kla0<Kla4>({ Kla4()}))
2021-03-11 20:34:11,169 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@29a03a6e]
2021-03-11 20:34:11,169 [main:149] - GENERATING call of type @kotlin.jvm.JvmName public fun kotlin.Array<out kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@f23b785]
2021-03-11 20:34:11,170 [main:78] - Generated call from random type = (hashSetOf<Kla0<Kla4>>(Kla0<Kla4>({ Kla4()}))).toArray().sum()
2021-03-11 20:34:11,170 [main:114] - replacement of prope4 of type Int is (hashSetOf<Kla0<Kla4>>(Kla0<Kla4>({ Kla4()}))).toArray().sum()
2021-03-11 20:34:11,405 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:34:11,406 [main:66] - Compilation checking started
2021-03-11 20:34:11,978 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 {
        prope4 = fu1(prope2, prope3) { firstValue: Int, secondValue: Int -> firstValue + secondValue }.fu5()
    }
    return if ((hashSetOf<Kla0<Kla4>>(Kla0<Kla4>({ Kla4()}))).toArray().sum() == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error((1675511461.toUInt()).toUShort().toString(-2106964249) + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:34:11,982 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 20:34:11,983 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 20:34:11,983 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:34:12,154 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:34:12,156 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:34:12,163 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 20:34:12,163 [main:61] - GENERATED IS CALL =false
2021-03-11 20:34:12,332 [main:67] - randomType = Float
2021-03-11 20:34:12,486 [main:302] - generating value of type = Float true depth = 0
2021-03-11 20:34:12,539 [main:106] - GETTING Function0<Unit> from OutputWorkScreenView
2021-03-11 20:34:12,544 [main:114] - replacement of prope8 of type Function0<Unit> is { println()}
2021-03-11 20:34:12,717 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:34:12,718 [main:66] - Compilation checking started
2021-03-11 20:34:13,128 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 {
        prope4 = fu1(prope2, prope3) { firstValue: Int, secondValue: Int -> firstValue + secondValue }.fu5()
    }
    return if (prope4 == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        { println()} = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error((1675511461.toUInt()).toUShort().toString(-2106964249) + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:34:13,130 [main:107] - replacing ((1675511461.toUInt()).toUShort().toString(-2106964249) + i + ", got " + prope6, String)
2021-03-11 20:34:13,130 [main:50] - replacing (1675511461.toUInt()).toUShort().toString(-2106964249) + i + ", got " + prope6 String
2021-03-11 20:34:13,130 [main:54] - Getting value of type String
2021-03-11 20:34:13,295 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:34:13,299 [main:58] - GENERATED VALUE OF TYPE String = "uqbxr"
2021-03-11 20:34:13,299 [main:61] - GENERATED IS CALL =false
2021-03-11 20:34:13,307 [main:67] - randomType = UShort
2021-03-11 20:34:13,514 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 20:34:13,581 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@6df9253a]
2021-03-11 20:34:13,581 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1045824d]
2021-03-11 20:34:13,745 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:34:13,748 [main:78] - Generated call from random type = (23339.toUShort()).toUByte().toString(-941642786)
2021-03-11 20:34:13,749 [main:106] - GETTING String from OutputWorkScreenView
2021-03-11 20:34:13,756 [main:114] - replacement of (1675511461.toUInt()).toUShort().toString(-2106964249) + i + ", got " + prope6 of type String is "uqbxr"
2021-03-11 20:34:13,892 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:34:13,893 [main:66] - Compilation checking started
2021-03-11 20:34:14,558 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 {
        prope4 = fu1(prope2, prope3) { firstValue: Int, secondValue: Int -> firstValue + secondValue }.fu5()
    }
    return if (prope4 == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:34:14,560 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-11 20:34:14,560 [main:50] - replacing numberOfSuspensions Int
2021-03-11 20:34:14,560 [main:54] - Getting value of type Int
2021-03-11 20:34:14,721 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:34:14,723 [main:58] - GENERATED VALUE OF TYPE Int = -498694663
2021-03-11 20:34:14,724 [main:61] - GENERATED IS CALL =false
2021-03-11 20:34:14,870 [main:67] - randomType = Kla4?
2021-03-11 20:34:15,023 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 20:34:15,026 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 20:34:15,033 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@48b03ec]
2021-03-11 20:34:15,157 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:34:15,158 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3a87ff62]
2021-03-11 20:34:15,306 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:34:15,309 [main:78] - Generated call from random type = (Kla4())?.equals("obdtm").compareTo(true)
2021-03-11 20:34:15,310 [main:106] - GETTING Int from OutputWorkScreenView
2021-03-11 20:34:15,318 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3a87ff62]]
2021-03-11 20:34:15,318 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:34:15,446 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:34:15,446 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3a87ff62]
2021-03-11 20:34:15,604 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:34:15,607 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("maucr").compareTo(true)
2021-03-11 20:34:15,607 [main:114] - replacement of numberOfSuspensions of type Int is (Kla4())?.equals("obdtm").compareTo(true)
2021-03-11 20:34:15,730 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:34:15,730 [main:66] - Compilation checking started
2021-03-11 20:34:16,365 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 {
        prope4 = fu1(prope2, prope3) { firstValue: Int, secondValue: Int -> firstValue + secondValue }.fu5()
    }
    return if (prope4 == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:34:16,368 [main:107] - replacing (x, Function1<Throwable, Unit>)
2021-03-11 20:34:16,368 [main:50] - replacing x Function1<Throwable, Unit>
2021-03-11 20:34:16,368 [main:54] - Getting value of type Function1<Throwable, Unit>
2021-03-11 20:34:16,574 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 0
2021-03-11 20:34:16,578 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:34:16,742 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:34:16,746 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:34:17,131 [main:302] - generating value of type = Any false depth = 4
2021-03-11 20:34:17,131 [main:95] - GENERATED = println("lafvb")
2021-03-11 20:34:17,131 [main:58] - GENERATED VALUE OF TYPE Function1<Throwable, Unit> = {a: Throwable -> println("lafvb")}
2021-03-11 20:34:17,132 [main:61] - GENERATED IS CALL =false
2021-03-11 20:34:17,470 [main:67] - randomType = Long?
2021-03-11 20:34:17,605 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:34:17,664 [main:106] - GETTING Function1<Throwable, Unit> from OutputWorkScreenView
2021-03-11 20:34:17,670 [main:114] - replacement of x of type Function1<Throwable, Unit> is {a: Throwable -> println("lafvb")}
2021-03-11 20:34:17,827 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:34:17,828 [main:66] - Compilation checking started
2021-03-11 20:34:18,482 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 {
        prope4 = fu1(prope2, prope3) { firstValue: Int, secondValue: Int -> firstValue + secondValue }.fu5()
    }
    return if (prope4 == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:34:18,485 [main:107] - replacing (1, Int)
2021-03-11 20:34:18,485 [main:50] - replacing 1 Int
2021-03-11 20:34:18,485 [main:54] - Getting value of type Int
2021-03-11 20:34:18,663 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:34:18,667 [main:58] - GENERATED VALUE OF TYPE Int = 1340013305
2021-03-11 20:34:18,668 [main:61] - GENERATED IS CALL =false
2021-03-11 20:34:19,160 [main:67] - randomType = ArrayList<UByte?>
2021-03-11 20:34:19,322 [main:302] - generating value of type = ArrayList<UByte?> false depth = 0
2021-03-11 20:34:19,455 [main:43] - GENERATING CALL OF fun <E> ArrayList(elements: kotlin.collections.Collection<UByte?>): ArrayList<UByte?> = TODO()
2021-03-11 20:34:19,459 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(elements: kotlin.collections.Collection<UByte?>): ArrayList<UByte?> = TODO()
2021-03-11 20:34:19,763 [main:302] - generating value of type = Collection<UByte?> false depth = 3
2021-03-11 20:34:19,926 [main:43] - GENERATING CALL OF fun UShortArray(size: kotlin.Int): Collection<UByte?> = TODO()
2021-03-11 20:34:19,930 [main:61] - WITHOUT TYPE PARAMS = fun UShortArray(size: kotlin.Int): Collection<UByte?> = TODO()
2021-03-11 20:34:20,272 [main:302] - generating value of type = Int true depth = 6
2021-03-11 20:34:20,275 [main:95] - GENERATED = UShortArray(-188282900)
2021-03-11 20:34:20,275 [main:95] - GENERATED = ArrayList<UByte?>(UShortArray(-188282900))
2021-03-11 20:34:20,475 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@325a9cbb]
2021-03-11 20:34:20,476 [main:149] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.indexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@19cc4b7c]
2021-03-11 20:34:20,627 [main:302] - generating value of type = T false depth = 0
2021-03-11 20:34:21,102 [main:43] - GENERATING CALL OF fun <T> requireNotNull(value: Triple<Int, OutputWorkScreenView, Kla6>, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 20:34:21,106 [main:61] - WITHOUT TYPE PARAMS = fun <T> requireNotNull(value: Triple<Int, OutputWorkScreenView, Kla6>, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 20:34:21,405 [main:302] - generating value of type = Triple<Int, OutputWorkScreenView, Kla6> false depth = 3
2021-03-11 20:34:21,560 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Int, second: OutputWorkScreenView, third: Kla6): Triple<Int, OutputWorkScreenView, Kla6> = TODO()
2021-03-11 20:34:21,564 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Int, second: OutputWorkScreenView, third: Kla6): Triple<Int, OutputWorkScreenView, Kla6> = TODO()
2021-03-11 20:34:21,704 [main:302] - generating value of type = Int true depth = 6
2021-03-11 20:34:21,706 [main:302] - generating value of type = OutputWorkScreenView false depth = 6
2021-03-11 20:34:21,709 [main:112] - generating klass OutputWorkScreenView text = class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}
2021-03-11 20:34:21,866 [main:194] - Type params = []
2021-03-11 20:34:21,991 [main:302] - generating value of type = SomeOutputScreenCallbacks false depth = 8
2021-03-11 20:34:21,993 [main:112] - generating klass SomeOutputScreenCallbacks text = interface SomeOutputScreenCallbacks {
    fun ontest()
}
2021-03-11 20:34:22,285 [main:302] - generating value of type = Kla6 false depth = 6
2021-03-11 20:34:22,288 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:34:22,288 [main:95] - GENERATED = Triple<Int, OutputWorkScreenView, Kla6>(2083995865, OutputWorkScreenView(TODO()), Kla6)
2021-03-11 20:34:22,288 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-11 20:34:22,291 [main:302] - generating value of type = Any false depth = 4
2021-03-11 20:34:22,291 [main:95] - GENERATED = requireNotNull<Triple<Int, OutputWorkScreenView, Kla6>>(Triple<Int, OutputWorkScreenView, Kla6>(2083995865, OutputWorkScreenView(TODO()), Kla6), { "gfuqb"})
2021-03-11 20:34:22,291 [main:78] - Generated call from random type = (ArrayList<UByte?>(UShortArray(-188282900))).toArray().indexOf(requireNotNull<Triple<Int, OutputWorkScreenView, Kla6>>(Triple<Int, OutputWorkScreenView, Kla6>(2083995865, OutputWorkScreenView(TODO()), Kla6), { "gfuqb"}))
2021-03-11 20:34:22,292 [main:106] - GETTING Int from OutputWorkScreenView
2021-03-11 20:34:22,299 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3a87ff62]]
2021-03-11 20:34:22,299 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:34:22,446 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:34:22,446 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3a87ff62]
2021-03-11 20:34:22,569 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:34:22,572 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oscns").compareTo(true)
2021-03-11 20:34:22,572 [main:114] - replacement of 1 of type Int is (ArrayList<UByte?>(UShortArray(-188282900))).toArray().indexOf(requireNotNull<Triple<Int, OutputWorkScreenView, Kla6>>(Triple<Int, OutputWorkScreenView, Kla6>(2083995865, OutputWorkScreenView(TODO()), Kla6), { "gfuqb"}))
2021-03-11 20:34:22,712 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:34:22,713 [main:66] - Compilation checking started
2021-03-11 20:34:23,149 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { (ArrayList<UByte?>(UShortArray(-188282900))).toArray().indexOf(requireNotNull<Triple<Int, OutputWorkScreenView, Kla6>>(Triple<Int, OutputWorkScreenView, Kla6>(2083995865, OutputWorkScreenView(TODO()), Kla6), { "gfuqb"})) }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 {
        prope4 = fu1(prope2, prope3) { firstValue: Int, secondValue: Int -> firstValue + secondValue }.fu5()
    }
    return if (prope4 == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:34:23,151 [main:107] - replacing (prope6, Int)
2021-03-11 20:34:23,151 [main:50] - replacing prope6 Int
2021-03-11 20:34:23,151 [main:54] - Getting value of type Int
2021-03-11 20:34:23,339 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:34:23,342 [main:58] - GENERATED VALUE OF TYPE Int = 66765136
2021-03-11 20:34:23,342 [main:61] - GENERATED IS CALL =false
2021-03-11 20:34:23,684 [main:67] - randomType = UByte?
2021-03-11 20:34:23,825 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 20:34:23,875 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@78738441]
2021-03-11 20:34:24,028 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 20:34:24,031 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1153ee42]
2021-03-11 20:34:24,180 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:34:24,182 [main:78] - Generated call from random type = (37.toUByte())?.compareTo(32.toUByte()).rotateRight(-759240761)
2021-03-11 20:34:24,183 [main:106] - GETTING Int from OutputWorkScreenView
2021-03-11 20:34:24,190 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3a87ff62]]
2021-03-11 20:34:24,190 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:34:24,330 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:34:24,331 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3a87ff62]
2021-03-11 20:34:24,470 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:34:24,472 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("mppzo").compareTo(false)
2021-03-11 20:34:24,473 [main:114] - replacement of prope6 of type Int is (37.toUByte())?.compareTo(32.toUByte()).rotateRight(-759240761)
2021-03-11 20:34:24,624 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:34:24,625 [main:66] - Compilation checking started
2021-03-11 20:34:25,022 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 {
        prope4 = fu1(prope2, prope3) { firstValue: Int, secondValue: Int -> firstValue + secondValue }.fu5()
    }
    return if (prope4 == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
(37.toUByte())?.compareTo(32.toUByte()).rotateRight(-759240761) = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:34:25,024 [main:107] - replacing (fu5(), Ty1)
2021-03-11 20:34:25,024 [main:50] - replacing fu5() Ty1
2021-03-11 20:34:25,024 [main:54] - Getting value of type Ty1
2021-03-11 20:34:25,168 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-11 20:34:25,174 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-11 20:34:29,477 [main:67] - randomType = Map<Map<UByte, Function1<MutableMap<Kla3<Int>, Map<String, List<Char>>>, Kla0<Pair<Float?, Int>?>>>, Kla2?>
2021-03-11 20:34:29,479 [main:106] - GETTING Ty1 from OutputWorkScreenView
2021-03-11 20:34:29,485 [main:111] - Cant find and generate replacement for fu5() type Ty1
2021-03-11 20:34:29,485 [main:107] - replacing (false, Boolean)
2021-03-11 20:34:29,486 [main:50] - replacing false Boolean
2021-03-11 20:34:29,486 [main:54] - Getting value of type Boolean
2021-03-11 20:34:29,608 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:34:29,611 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:34:29,611 [main:61] - GENERATED IS CALL =false
2021-03-11 20:34:30,277 [main:67] - randomType = ArrayDeque<HashSet<Long>>?
2021-03-11 20:34:30,400 [main:302] - generating value of type = ArrayDeque<HashSet<Long>> false depth = 0
2021-03-11 20:34:30,522 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<HashSet<Long>> = TODO()
2021-03-11 20:34:30,526 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<HashSet<Long>> = TODO()
2021-03-11 20:34:30,785 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:34:30,787 [main:95] - GENERATED = ArrayDeque<HashSet<Long>>(278442175)
2021-03-11 20:34:31,040 [main:149] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.collections.HashSet<kotlin.Long>> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@6f9c571b]
2021-03-11 20:34:31,177 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:34:31,300 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:34:31,303 [main:149] - GENERATING call of type public abstract fun add(element: kotlin.collections.HashSet<kotlin.Long>): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@393ade8b]
2021-03-11 20:34:31,424 [main:302] - generating value of type = HashSet<Long> false depth = 0
2021-03-11 20:34:31,548 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<Long> = TODO()
2021-03-11 20:34:31,551 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<Long> = TODO()
2021-03-11 20:34:31,677 [main:95] - GENERATED = linkedSetOf<Long>()
2021-03-11 20:34:31,678 [main:78] - Generated call from random type = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())
2021-03-11 20:34:31,678 [main:114] - replacement of false of type Boolean is (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())
2021-03-11 20:34:31,801 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:34:31,801 [main:66] - Compilation checking started
2021-03-11 20:34:32,417 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 {
        prope4 = fu1(prope2, prope3) { firstValue: Int, secondValue: Int -> firstValue + secondValue }.fu5()
    }
    return if (prope4 == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:34:32,420 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 20:34:32,421 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 20:34:32,421 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:34:32,570 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:34:32,574 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:34:32,715 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:34:32,718 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:34:33,078 [main:302] - generating value of type = Any false depth = 4
2021-03-11 20:34:33,079 [main:95] - GENERATED = println("hqgnp")
2021-03-11 20:34:33,079 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("hqgnp")}
2021-03-11 20:34:33,079 [main:61] - GENERATED IS CALL =false
2021-03-11 20:34:33,247 [main:67] - randomType = Boolean?
2021-03-11 20:34:33,399 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:34:33,418 [main:106] - GETTING Function0<Unit> from OutputWorkScreenView
2021-03-11 20:34:33,423 [main:114] - replacement of prope8 of type Function0<Unit> is { println("hqgnp")}
2021-03-11 20:34:33,571 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:34:33,572 [main:66] - Compilation checking started
2021-03-11 20:34:34,009 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 {
        prope4 = fu1(prope2, prope3) { firstValue: Int, secondValue: Int -> firstValue + secondValue }.fu5()
    }
    return if (prope4 == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        { println("hqgnp")}()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:34:34,011 [main:107] - replacing (prope4.exceptionOrNull()!!, Throwable)
2021-03-11 20:34:34,012 [main:50] - replacing prope4.exceptionOrNull()!! Throwable
2021-03-11 20:34:34,012 [main:54] - Getting value of type Throwable
2021-03-11 20:34:34,168 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 20:34:34,313 [main:43] - GENERATING CALL OF fun UnsupportedOperationException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 20:34:34,318 [main:61] - WITHOUT TYPE PARAMS = fun UnsupportedOperationException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 20:34:34,623 [main:302] - generating value of type = Throwable false depth = 3
2021-03-11 20:34:34,772 [main:43] - GENERATING CALL OF fun NotImplementedError(message: kotlin.String): Throwable = TODO()
2021-03-11 20:34:34,776 [main:61] - WITHOUT TYPE PARAMS = fun NotImplementedError(message: kotlin.String): Throwable = TODO()
2021-03-11 20:34:35,088 [main:302] - generating value of type = String true depth = 6
2021-03-11 20:34:35,091 [main:95] - GENERATED = NotImplementedError("mtmbo")
2021-03-11 20:34:35,091 [main:95] - GENERATED = UnsupportedOperationException(NotImplementedError("mtmbo"))
2021-03-11 20:34:35,092 [main:58] - GENERATED VALUE OF TYPE Throwable = UnsupportedOperationException(NotImplementedError("mtmbo"))
2021-03-11 20:34:35,092 [main:61] - GENERATED IS CALL =true
2021-03-11 20:34:35,467 [main:67] - randomType = Function1<Double, Kla5>
2021-03-11 20:34:35,469 [main:106] - GETTING Throwable from OutputWorkScreenView
2021-03-11 20:34:35,476 [main:114] - replacement of prope4.exceptionOrNull()!! of type Throwable is UnsupportedOperationException(NotImplementedError("mtmbo"))
2021-03-11 20:34:35,607 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:34:35,607 [main:66] - Compilation checking started
2021-03-11 20:34:36,239 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 {
        prope4 = fu1(prope2, prope3) { firstValue: Int, secondValue: Int -> firstValue + secondValue }.fu5()
    }
    return if (prope4 == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:34:36,242 [main:107] - replacing ("tail-call optimization hit: method " + method, String)
2021-03-11 20:34:36,242 [main:50] - replacing "tail-call optimization hit: method " + method String
2021-03-11 20:34:36,242 [main:54] - Getting value of type String
2021-03-11 20:34:36,447 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:34:36,450 [main:58] - GENERATED VALUE OF TYPE String = "ojvru"
2021-03-11 20:34:36,450 [main:61] - GENERATED IS CALL =false
2021-03-11 20:34:36,589 [main:67] - randomType = ULong
2021-03-11 20:34:36,735 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 20:34:36,793 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@3b510fa9]
2021-03-11 20:34:36,793 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d001a18]
2021-03-11 20:34:36,928 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:34:36,931 [main:78] - Generated call from random type = (8906448177133138502.toULong()).toLong().toString(-355222025)
2021-03-11 20:34:36,932 [main:106] - GETTING String from OutputWorkScreenView
2021-03-11 20:34:36,939 [main:114] - replacement of "tail-call optimization hit: method " + method of type String is "ojvru"
2021-03-11 20:34:37,126 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:34:37,127 [main:66] - Compilation checking started
2021-03-11 20:34:37,741 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 {
        prope4 = fu1(prope2, prope3) { firstValue: Int, secondValue: Int -> firstValue + secondValue }.fu5()
    }
    return if (prope4 == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:34:37,744 [main:107] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-11 20:34:37,745 [main:50] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-11 20:34:37,745 [main:54] - Getting value of type String
2021-03-11 20:34:37,905 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:34:37,908 [main:58] - GENERATED VALUE OF TYPE String = "yvwpa"
2021-03-11 20:34:37,908 [main:61] - GENERATED IS CALL =false
2021-03-11 20:34:38,071 [main:67] - randomType = Short
2021-03-11 20:34:38,219 [main:302] - generating value of type = Short true depth = 0
2021-03-11 20:34:38,300 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@14904b5e]
2021-03-11 20:34:38,300 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@836cc5d]
2021-03-11 20:34:38,301 [main:78] - Generated call from random type = (-10605).toChar().plus(var res =
2021-03-11 20:34:38,301 [main:114] - replacement of "Wrong state-machine generated: it is finished early" of type String is (-10605).toChar().plus(var res =
2021-03-11 20:34:38,447 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(BINARY_EXPRESSION)
2021-03-11 20:34:38,448 [main:66] - Compilation checking started
2021-03-11 20:34:38,454 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:34:38,455 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 {
        prope4 = fu1(prope2, prope3) { firstValue: Int, secondValue: Int -> firstValue + secondValue }.fu5()
    }
    return if (prope4 == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error((-10605).toChar().plus(var res =)
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:34:38,457 [main:107] - replacing (it, Continuation<Unit>)
2021-03-11 20:34:38,457 [main:50] - replacing it Continuation<Unit>
2021-03-11 20:34:38,457 [main:54] - Getting value of type Continuation<Unit>
2021-03-11 20:34:38,608 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 20:34:38,762 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 20:34:38,766 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 20:34:39,257 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 20:34:39,440 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:34:39,445 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:34:39,797 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 20:34:39,933 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:34:39,937 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:34:40,443 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-11 20:34:40,587 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:34:40,590 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:34:41,090 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:34:41,091 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:34:41,091 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:34:41,091 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 20:34:41,091 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 20:34:41,441 [main:67] - randomType = LinkedHashSet<Long?>
2021-03-11 20:34:41,602 [main:302] - generating value of type = LinkedHashSet<Long?> false depth = 0
2021-03-11 20:34:41,752 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Long?> = TODO()
2021-03-11 20:34:41,756 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Long?> = TODO()
2021-03-11 20:34:41,923 [main:95] - GENERATED = linkedSetOf<Long?>()
2021-03-11 20:34:42,084 [main:106] - GETTING Continuation<Unit> from OutputWorkScreenView
2021-03-11 20:34:42,089 [main:111] - Cant find and generate replacement for it type Continuation<Unit>
2021-03-11 20:34:42,089 [main:107] - replacing (prope4, Int)
2021-03-11 20:34:42,089 [main:50] - replacing prope4 Int
2021-03-11 20:34:42,090 [main:54] - Getting value of type Int
2021-03-11 20:34:42,226 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:34:42,229 [main:58] - GENERATED VALUE OF TYPE Int = -35560254
2021-03-11 20:34:42,229 [main:61] - GENERATED IS CALL =false
2021-03-11 20:34:42,416 [main:67] - randomType = Kla6
2021-03-11 20:34:42,557 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 20:34:42,559 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:34:42,601 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla6[DeserializedSimpleFunctionDescriptor@77e446fc]
2021-03-11 20:34:42,730 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:34:42,731 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3a87ff62]
2021-03-11 20:34:42,889 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:34:42,892 [main:78] - Generated call from random type = (Kla6).equals("spptx").compareTo(false)
2021-03-11 20:34:42,892 [main:114] - replacement of prope4 of type Int is (Kla6).equals("spptx").compareTo(false)
2021-03-11 20:34:43,021 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:34:43,021 [main:66] - Compilation checking started
2021-03-11 20:34:43,377 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 {
        (Kla6).equals("spptx").compareTo(false) = fu1(prope2, prope3) { firstValue: Int, secondValue: Int -> firstValue + secondValue }.fu5()
    }
    return if (prope4 == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:34:43,380 [main:107] - replacing (checkFinished && !prope7, Boolean)
2021-03-11 20:34:43,381 [main:50] - replacing checkFinished && !prope7 Boolean
2021-03-11 20:34:43,381 [main:54] - Getting value of type Boolean
2021-03-11 20:34:43,544 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:34:43,547 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:34:43,547 [main:61] - GENERATED IS CALL =false
2021-03-11 20:34:43,686 [main:67] - randomType = Kla6
2021-03-11 20:34:43,829 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 20:34:43,832 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:34:43,863 [main:149] - GENERATING call of type public open fun resumeWith(prope4: kotlin.Result<kotlin.Unit>): kotlin.Unit defined in Kla3[SimpleFunctionDescriptorImpl@301a75f0]
2021-03-11 20:34:43,997 [main:302] - generating value of type = Result<Unit> false depth = 0
2021-03-11 20:34:44,156 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Unit): Result<Unit> = TODO()
2021-03-11 20:34:44,159 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Unit): Result<Unit> = TODO()
2021-03-11 20:34:44,476 [main:302] - generating value of type = Function0<Unit> false depth = 3
2021-03-11 20:34:44,487 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 20:34:44,620 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:34:44,623 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:34:45,144 [main:302] - generating value of type = Boolean true depth = 7
2021-03-11 20:34:45,147 [main:302] - generating value of type = Function0<Any> false depth = 7
2021-03-11 20:34:45,149 [main:302] - generating value of type = Any false depth = 8
2021-03-11 20:34:45,149 [main:95] - GENERATED = require(false, { "ojnja"})
2021-03-11 20:34:45,150 [main:95] - GENERATED = runCatching<Unit>({ require(false, { "ojnja"})})
2021-03-11 20:34:45,150 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]
2021-03-11 20:34:45,287 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:34:45,287 [main:78] - Generated call from random type = (Kla6).resumeWith(runCatching<Unit>({ require(false, { "ojnja"})})).equals("fnsoc")
2021-03-11 20:34:45,288 [main:106] - GETTING Boolean from OutputWorkScreenView
2021-03-11 20:34:45,295 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]]
2021-03-11 20:34:45,296 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:34:45,442 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:34:45,442 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 20:34:45,602 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:34:45,605 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)
2021-03-11 20:34:45,605 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]]
2021-03-11 20:34:45,605 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:34:45,757 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:34:45,757 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]
2021-03-11 20:34:45,890 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:34:45,894 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("mkaye").or(false)
2021-03-11 20:34:45,894 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]]
2021-03-11 20:34:45,894 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:34:46,032 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:34:46,032 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]
2021-03-11 20:34:46,184 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:34:46,185 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("vsrdv").equals("fwtcb")
2021-03-11 20:34:46,185 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]]
2021-03-11 20:34:46,185 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:34:46,320 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:34:46,321 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]
2021-03-11 20:34:46,465 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:34:46,468 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("jwton").xor(true)
2021-03-11 20:34:46,468 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]]
2021-03-11 20:34:46,468 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:34:46,602 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals(null)
2021-03-11 20:34:46,602 [main:113] - Case = [public final val root: kotlin.Unit defined in OutputWorkScreenView[PropertyDescriptorImpl@7ba92dcc], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]]
2021-03-11 20:34:46,602 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]
2021-03-11 20:34:46,741 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:34:46,741 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).root.equals("epopg")
2021-03-11 20:34:46,741 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]]
2021-03-11 20:34:46,741 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:34:46,880 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:34:46,881 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]
2021-03-11 20:34:46,881 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("mcqmx").not()
2021-03-11 20:34:46,881 [main:114] - replacement of checkFinished && !prope7 of type Boolean is (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)
2021-03-11 20:34:47,019 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:34:47,019 [main:66] - Compilation checking started
2021-03-11 20:34:47,611 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 {
        prope4 = fu1(prope2, prope3) { firstValue: Int, secondValue: Int -> firstValue + secondValue }.fu5()
    }
    return if (prope4 == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:34:47,613 [main:107] - replacing (prope4, Int)
2021-03-11 20:34:47,614 [main:50] - replacing prope4 Int
2021-03-11 20:34:47,614 [main:54] - Getting value of type Int
2021-03-11 20:34:47,757 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:34:47,760 [main:58] - GENERATED VALUE OF TYPE Int = -1010182458
2021-03-11 20:34:47,760 [main:61] - GENERATED IS CALL =false
2021-03-11 20:34:48,723 [main:67] - randomType = Function2<Byte, Short, List<UShort>>
2021-03-11 20:34:48,724 [main:106] - GETTING Int from OutputWorkScreenView
2021-03-11 20:34:48,730 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3a87ff62]]
2021-03-11 20:34:48,730 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:34:48,855 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:34:48,855 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3a87ff62]
2021-03-11 20:34:49,019 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:34:49,022 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("cexrk").compareTo(true)
2021-03-11 20:34:49,022 [main:114] - replacement of prope4 of type Int is (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("cexrk").compareTo(true)
2021-03-11 20:34:49,156 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:34:49,156 [main:66] - Compilation checking started
2021-03-11 20:34:49,162 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:34:49,162 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 {
        prope4 = fu1(prope2, prope3) { firstValue: Int, secondValue: Int -> firstValue + secondValue }.fu5()
    }
    return if (prope4 == 3) "OK" else "FAIL $(OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("cexrk").compareTo(true)"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:34:49,164 [main:107] - replacing ({
        prope4 = fu1(prope2, prope3) { firstValue: Int, secondValue: Int -> firstValue + secondValue }.fu5()
    }, SuspendFunction0<Unit>)
2021-03-11 20:34:49,164 [main:50] - replacing {
        prope4 = fu1(prope2, prope3) { firstValue: Int, secondValue: Int -> firstValue + secondValue }.fu5()
    } SuspendFunction0<Unit>
2021-03-11 20:34:49,164 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-11 20:34:49,301 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 20:34:49,304 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:34:49,310 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { println()}
2021-03-11 20:34:49,310 [main:61] - GENERATED IS CALL =false
2021-03-11 20:34:49,315 [main:67] - randomType = Int
2021-03-11 20:34:49,481 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:34:49,516 [main:106] - GETTING SuspendFunction0<Unit> from OutputWorkScreenView
2021-03-11 20:34:49,520 [main:114] - replacement of {
        prope4 = fu1(prope2, prope3) { firstValue: Int, secondValue: Int -> firstValue + secondValue }.fu5()
    } of type SuspendFunction0<Unit> is { println()}
2021-03-11 20:34:49,655 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:34:49,655 [main:66] - Compilation checking started
2021-03-11 20:34:50,277 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if (prope4 == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:34:50,280 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 20:34:50,280 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 20:34:50,280 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 20:34:50,465 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 20:34:50,473 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 20:34:51,131 [main:67] - randomType = Triple<SomeOutputScreenCallbacks?, Long, Char?>
2021-03-11 20:34:51,268 [main:302] - generating value of type = Triple<SomeOutputScreenCallbacks?, Long, Char?> false depth = 0
2021-03-11 20:34:51,415 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: SomeOutputScreenCallbacks?, second: Long, third: Char?): Triple<SomeOutputScreenCallbacks?, Long, Char?> = TODO()
2021-03-11 20:34:51,419 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: SomeOutputScreenCallbacks?, second: Long, third: Char?): Triple<SomeOutputScreenCallbacks?, Long, Char?> = TODO()
2021-03-11 20:34:51,564 [main:302] - generating value of type = SomeOutputScreenCallbacks false depth = 3
2021-03-11 20:34:51,567 [main:112] - generating klass SomeOutputScreenCallbacks text = interface SomeOutputScreenCallbacks {
    fun ontest()
}
2021-03-11 20:34:51,856 [main:302] - generating value of type = Long true depth = 3
2021-03-11 20:34:51,859 [main:302] - generating value of type = Char true depth = 3
2021-03-11 20:34:51,862 [main:95] - GENERATED = Triple<SomeOutputScreenCallbacks?, Long, Char?>(TODO(), 829164405833665158, '㟣')
2021-03-11 20:34:51,882 [main:106] - GETTING EmptyCoroutineContext from OutputWorkScreenView
2021-03-11 20:34:51,888 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 20:34:51,888 [main:107] - replacing (getOrThrow(), Any?)
2021-03-11 20:34:51,889 [main:50] - replacing getOrThrow() Any?
2021-03-11 20:34:51,889 [main:54] - Getting value of type Any?
2021-03-11 20:34:52,033 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:34:52,034 [main:58] - GENERATED VALUE OF TYPE Any? = "iwijz"
2021-03-11 20:34:52,034 [main:61] - GENERATED IS CALL =false
2021-03-11 20:34:52,345 [main:67] - randomType = ULong?
2021-03-11 20:34:52,482 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 20:34:52,523 [main:106] - GETTING Any? from OutputWorkScreenView
2021-03-11 20:34:52,527 [main:114] - replacement of getOrThrow() of type Any? is "iwijz"
2021-03-11 20:34:52,663 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:34:52,663 [main:66] - Compilation checking started
2021-03-11 20:34:53,028 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if (prope4 == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4."iwijz"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:34:53,030 [main:107] - replacing (prope4, Int)
2021-03-11 20:34:53,031 [main:50] - replacing prope4 Int
2021-03-11 20:34:53,031 [main:54] - Getting value of type Int
2021-03-11 20:34:53,188 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:34:53,191 [main:58] - GENERATED VALUE OF TYPE Int = -2090947766
2021-03-11 20:34:53,192 [main:61] - GENERATED IS CALL =false
2021-03-11 20:34:53,201 [main:67] - randomType = OutputWorkScreenView
2021-03-11 20:34:53,336 [main:302] - generating value of type = OutputWorkScreenView false depth = 0
2021-03-11 20:34:53,339 [main:112] - generating klass OutputWorkScreenView text = class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}
2021-03-11 20:34:53,477 [main:194] - Type params = []
2021-03-11 20:34:53,612 [main:302] - generating value of type = SomeOutputScreenCallbacks false depth = 2
2021-03-11 20:34:53,615 [main:112] - generating klass SomeOutputScreenCallbacks text = interface SomeOutputScreenCallbacks {
    fun ontest()
}
2021-03-11 20:34:53,916 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@4d05031]
2021-03-11 20:34:54,059 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:34:54,059 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3a87ff62]
2021-03-11 20:34:54,192 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:34:54,195 [main:78] - Generated call from random type = (OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)
2021-03-11 20:34:54,195 [main:114] - replacement of prope4 of type Int is (OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)
2021-03-11 20:34:54,326 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:34:54,327 [main:66] - Compilation checking started
2021-03-11 20:34:54,940 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:34:54,942 [main:107] - replacing (exception, Throwable)
2021-03-11 20:34:54,943 [main:50] - replacing exception Throwable
2021-03-11 20:34:54,943 [main:54] - Getting value of type Throwable
2021-03-11 20:34:55,092 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 20:34:55,263 [main:43] - GENERATING CALL OF fun ConcurrentModificationException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 20:34:55,266 [main:61] - WITHOUT TYPE PARAMS = fun ConcurrentModificationException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 20:34:55,774 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:34:55,777 [main:302] - generating value of type = Throwable false depth = 3
2021-03-11 20:34:55,926 [main:43] - GENERATING CALL OF fun ConcurrentModificationException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 20:34:55,930 [main:61] - WITHOUT TYPE PARAMS = fun ConcurrentModificationException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 20:34:56,378 [main:302] - generating value of type = String true depth = 6
2021-03-11 20:34:56,381 [main:302] - generating value of type = Throwable false depth = 6
2021-03-11 20:34:56,516 [main:43] - GENERATING CALL OF fun IllegalStateException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 20:34:56,519 [main:61] - WITHOUT TYPE PARAMS = fun IllegalStateException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 20:34:57,006 [main:302] - generating value of type = String true depth = 9
2021-03-11 20:34:57,010 [main:302] - generating value of type = Throwable false depth = 9
2021-03-11 20:34:57,017 [main:95] - GENERATED = IllegalStateException("wksnp", NumberFormatException())
2021-03-11 20:34:57,018 [main:95] - GENERATED = ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException()))
2021-03-11 20:34:57,018 [main:95] - GENERATED = ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
2021-03-11 20:34:57,018 [main:58] - GENERATED VALUE OF TYPE Throwable = ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
2021-03-11 20:34:57,018 [main:61] - GENERATED IS CALL =true
2021-03-11 20:34:57,370 [main:67] - randomType = Kla0<OutputWorkScreenView>
2021-03-11 20:34:57,505 [main:302] - generating value of type = Kla0<OutputWorkScreenView> false depth = 0
2021-03-11 20:34:57,508 [main:112] - generating klass Kla0 text = class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}
2021-03-11 20:34:58,000 [main:194] - Type params = [OutputWorkScreenView]
2021-03-11 20:34:58,298 [main:302] - generating value of type = SuspendFunction0<OutputWorkScreenView> false depth = 2
2021-03-11 20:34:58,301 [main:302] - generating value of type = OutputWorkScreenView false depth = 3
2021-03-11 20:34:58,304 [main:112] - generating klass OutputWorkScreenView text = class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}
2021-03-11 20:34:58,473 [main:194] - Type params = []
2021-03-11 20:34:58,632 [main:302] - generating value of type = SomeOutputScreenCallbacks false depth = 5
2021-03-11 20:34:58,635 [main:112] - generating klass SomeOutputScreenCallbacks text = interface SomeOutputScreenCallbacks {
    fun ontest()
}
2021-03-11 20:34:58,961 [main:106] - GETTING Throwable from OutputWorkScreenView
2021-03-11 20:34:58,968 [main:114] - replacement of exception of type Throwable is ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
2021-03-11 20:34:59,104 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:34:59,104 [main:66] - Compilation checking started
2021-03-11 20:34:59,722 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:34:59,724 [main:107] - replacing ("tail-call optimization miss: method at " + it, String)
2021-03-11 20:34:59,725 [main:50] - replacing "tail-call optimization miss: method at " + it String
2021-03-11 20:34:59,725 [main:54] - Getting value of type String
2021-03-11 20:34:59,861 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:34:59,863 [main:58] - GENERATED VALUE OF TYPE String = "qfbgs"
2021-03-11 20:34:59,864 [main:61] - GENERATED IS CALL =false
2021-03-11 20:34:59,869 [main:67] - randomType = Long
2021-03-11 20:35:00,004 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:35:00,037 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@398d1b9b]
2021-03-11 20:35:00,038 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70fd890c]
2021-03-11 20:35:00,192 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:35:00,196 [main:78] - Generated call from random type = (5257160859784768157).toInt().toString(-1759982160)
2021-03-11 20:35:00,196 [main:114] - replacement of "tail-call optimization miss: method at " + it of type String is (5257160859784768157).toInt().toString(-1759982160)
2021-03-11 20:35:00,345 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:35:00,345 [main:66] - Compilation checking started
2021-03-11 20:35:00,920 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        zipper(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith(method) == true }?.let { error((5257160859784768157).toInt().toString(-1759982160) + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:00,922 [main:107] - replacing (zipper, Function2<Ty1, Ty2, Ty3>)
2021-03-11 20:35:00,922 [main:50] - replacing zipper Function2<Ty1, Ty2, Ty3>
2021-03-11 20:35:00,922 [main:54] - Getting value of type Function2<Ty1, Ty2, Ty3>
2021-03-11 20:35:01,064 [main:302] - generating value of type = Function2<Ty1, Ty2, Ty3> false depth = 0
2021-03-11 20:35:01,067 [main:302] - generating value of type = Ty3 false depth = 1
2021-03-11 20:35:01,073 [main:58] - GENERATED VALUE OF TYPE Function2<Ty1, Ty2, Ty3> = {a: Ty1, b: Ty2 -> }
2021-03-11 20:35:01,073 [main:61] - GENERATED IS CALL =false
2021-03-11 20:35:02,369 [main:67] - randomType = Triple<MutableMap<Sequence<Boolean?>, UByte?>?, OutputWorkScreenView, ArrayList<Kla4>>
2021-03-11 20:35:02,503 [main:302] - generating value of type = Triple<MutableMap<Sequence<Boolean?>, UByte?>?, OutputWorkScreenView, ArrayList<Kla4>> false depth = 0
2021-03-11 20:35:02,658 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: MutableMap<Sequence<Boolean?>, UByte?>?, second: OutputWorkScreenView, third: ArrayList<Kla4>): Triple<MutableMap<Sequence<Boolean?>, UByte?>?, OutputWorkScreenView, ArrayList<Kla4>> = TODO()
2021-03-11 20:35:02,662 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: MutableMap<Sequence<Boolean?>, UByte?>?, second: OutputWorkScreenView, third: ArrayList<Kla4>): Triple<MutableMap<Sequence<Boolean?>, UByte?>?, OutputWorkScreenView, ArrayList<Kla4>> = TODO()
2021-03-11 20:35:02,822 [main:302] - generating value of type = MutableMap<Sequence<Boolean?>, UByte?> false depth = 3
2021-03-11 20:35:02,979 [main:43] - GENERATING CALL OF fun <K, V> HashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): MutableMap<Sequence<Boolean?>, UByte?> = TODO()
2021-03-11 20:35:02,983 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): MutableMap<Sequence<Boolean?>, UByte?> = TODO()
2021-03-11 20:35:03,452 [main:302] - generating value of type = Int true depth = 6
2021-03-11 20:35:03,454 [main:302] - generating value of type = Float true depth = 6
2021-03-11 20:35:03,457 [main:95] - GENERATED = HashMap<Sequence<Boolean?>, UByte?>(298762721, 0.16206098f)
2021-03-11 20:35:03,457 [main:302] - generating value of type = OutputWorkScreenView false depth = 3
2021-03-11 20:35:03,459 [main:112] - generating klass OutputWorkScreenView text = class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}
2021-03-11 20:35:03,614 [main:194] - Type params = []
2021-03-11 20:35:03,753 [main:302] - generating value of type = SomeOutputScreenCallbacks false depth = 5
2021-03-11 20:35:03,755 [main:112] - generating klass SomeOutputScreenCallbacks text = interface SomeOutputScreenCallbacks {
    fun ontest()
}
2021-03-11 20:35:04,043 [main:302] - generating value of type = ArrayList<Kla4> false depth = 3
2021-03-11 20:35:04,195 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Kla4> = TODO()
2021-03-11 20:35:04,199 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Kla4> = TODO()
2021-03-11 20:35:04,351 [main:95] - GENERATED = arrayListOf<Kla4>()
2021-03-11 20:35:04,352 [main:95] - GENERATED = Triple<MutableMap<Sequence<Boolean?>, UByte?>?, OutputWorkScreenView, ArrayList<Kla4>>(HashMap<Sequence<Boolean?>, UByte?>(298762721, 0.16206098f), OutputWorkScreenView(TODO()), arrayListOf<Kla4>())
2021-03-11 20:35:04,381 [main:106] - GETTING Function2<Ty1, Ty2, Ty3> from OutputWorkScreenView
2021-03-11 20:35:04,385 [main:114] - replacement of zipper of type Function2<Ty1, Ty2, Ty3> is {a: Ty1, b: Ty2 -> }
2021-03-11 20:35:04,523 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:35:04,524 [main:66] - Compilation checking started
2021-03-11 20:35:05,176 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith(method) == true }?.let { error((5257160859784768157).toInt().toString(-1759982160) + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:05,179 [main:107] - replacing (prope4, Any?)
2021-03-11 20:35:05,179 [main:50] - replacing prope4 Any?
2021-03-11 20:35:05,179 [main:54] - Getting value of type Any?
2021-03-11 20:35:05,347 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:05,348 [main:58] - GENERATED VALUE OF TYPE Any? = "ydtzn"
2021-03-11 20:35:05,348 [main:61] - GENERATED IS CALL =false
2021-03-11 20:35:05,353 [main:67] - randomType = Boolean
2021-03-11 20:35:05,509 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:35:05,526 [main:106] - GETTING Any? from OutputWorkScreenView
2021-03-11 20:35:05,533 [main:114] - replacement of prope4 of type Any? is "ydtzn"
2021-03-11 20:35:05,670 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:35:05,671 [main:66] - Compilation checking started
2021-03-11 20:35:06,077 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this."ydtzn" = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith(method) == true }?.let { error((5257160859784768157).toInt().toString(-1759982160) + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:06,080 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-11 20:35:06,080 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-11 20:35:06,080 [main:54] - Getting value of type String
2021-03-11 20:35:06,227 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:35:06,230 [main:58] - GENERATED VALUE OF TYPE String = "nocrd"
2021-03-11 20:35:06,230 [main:61] - GENERATED IS CALL =false
2021-03-11 20:35:06,554 [main:67] - randomType = LinkedHashSet<Boolean?>
2021-03-11 20:35:06,698 [main:302] - generating value of type = LinkedHashSet<Boolean?> false depth = 0
2021-03-11 20:35:06,845 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): LinkedHashSet<Boolean?> = TODO()
2021-03-11 20:35:06,849 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): LinkedHashSet<Boolean?> = TODO()
2021-03-11 20:35:06,993 [main:95] - GENERATED = LinkedHashSet<Boolean?>()
2021-03-11 20:35:07,116 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@4bdce4fc]
2021-03-11 20:35:07,116 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7e010bc2]
2021-03-11 20:35:07,117 [main:78] - Generated call from random type = (LinkedHashSet<Boolean?>()).toArray().contentDeepToString()
2021-03-11 20:35:07,117 [main:106] - GETTING String from OutputWorkScreenView
2021-03-11 20:35:07,122 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is "nocrd"
2021-03-11 20:35:07,255 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:35:07,255 [main:66] - Compilation checking started
2021-03-11 20:35:07,862 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith(method) == true }?.let { error((5257160859784768157).toInt().toString(-1759982160) + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:07,864 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 20:35:07,865 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 20:35:07,865 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:35:08,000 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:35:08,003 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:35:08,155 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:35:08,159 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:35:08,463 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 20:35:08,466 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 20:35:08,638 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:35:08,642 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:35:08,952 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 20:35:08,955 [main:95] - GENERATED = require(true)
2021-03-11 20:35:08,955 [main:95] - GENERATED = contract({ require(true)})
2021-03-11 20:35:08,955 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ require(true)})}
2021-03-11 20:35:08,955 [main:61] - GENERATED IS CALL =false
2021-03-11 20:35:09,113 [main:67] - randomType = Long?
2021-03-11 20:35:09,248 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:35:09,309 [main:106] - GETTING Function0<Unit> from OutputWorkScreenView
2021-03-11 20:35:09,314 [main:114] - replacement of prope8 of type Function0<Unit> is { contract({ require(true)})}
2021-03-11 20:35:09,440 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:35:09,440 [main:66] - Compilation checking started
2021-03-11 20:35:09,815 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith(method) == true }?.let { error((5257160859784768157).toInt().toString(-1759982160) + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.{ contract({ require(true)})} = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:09,817 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 20:35:09,817 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 20:35:09,817 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:35:09,955 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:35:09,958 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:35:10,095 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:35:10,098 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:35:10,421 [main:302] - generating value of type = Any false depth = 4
2021-03-11 20:35:10,422 [main:95] - GENERATED = print("cqmfo")
2021-03-11 20:35:10,422 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("cqmfo")}
2021-03-11 20:35:10,422 [main:61] - GENERATED IS CALL =false
2021-03-11 20:35:10,911 [main:67] - randomType = Kla3<UShort>
2021-03-11 20:35:11,046 [main:302] - generating value of type = Kla3<UShort> false depth = 0
2021-03-11 20:35:11,049 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 20:35:11,673 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 20:35:11,676 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}
2021-03-11 20:35:11,697 [main:106] - GETTING Function0<Unit> from OutputWorkScreenView
2021-03-11 20:35:11,702 [main:114] - replacement of prope8 of type Function0<Unit> is { print("cqmfo")}
2021-03-11 20:35:11,835 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:35:11,835 [main:66] - Compilation checking started
2021-03-11 20:35:12,235 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith(method) == true }?.let { error((5257160859784768157).toInt().toString(-1759982160) + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        { print("cqmfo")}()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:12,238 [main:107] - replacing ({ error((5257160859784768157).toInt().toString(-1759982160) + " has state-machine " +
                prope5.joinToString(separator = "\n")) }, Function0<Nothing>)
2021-03-11 20:35:12,238 [main:50] - replacing { error((5257160859784768157).toInt().toString(-1759982160) + " has state-machine " +
                prope5.joinToString(separator = "\n")) } Function0<Nothing>
2021-03-11 20:35:12,238 [main:54] - Getting value of type Function0<Nothing>
2021-03-11 20:35:12,402 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-11 20:35:12,405 [main:302] - generating value of type = Nothing false depth = 1
2021-03-11 20:35:12,552 [main:43] - GENERATING CALL OF fun error(message: kotlin.Any): Nothg = TODO()
2021-03-11 20:35:12,555 [main:61] - WITHOUT TYPE PARAMS = fun error(message: kotlin.Any): Nothg = TODO()
2021-03-11 20:35:12,860 [main:302] - generating value of type = Any false depth = 4
2021-03-11 20:35:12,860 [main:95] - GENERATED = error("lwdnk")
2021-03-11 20:35:12,861 [main:58] - GENERATED VALUE OF TYPE Function0<Nothing> = { error("lwdnk")}
2021-03-11 20:35:12,861 [main:61] - GENERATED IS CALL =false
2021-03-11 20:35:13,177 [main:67] - randomType = LinkedHashSet<Kla5?>
2021-03-11 20:35:13,318 [main:302] - generating value of type = LinkedHashSet<Kla5?> false depth = 0
2021-03-11 20:35:13,456 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): LinkedHashSet<Kla5?> = TODO()
2021-03-11 20:35:13,459 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): LinkedHashSet<Kla5?> = TODO()
2021-03-11 20:35:13,604 [main:95] - GENERATED = LinkedHashSet<Kla5?>()
2021-03-11 20:35:13,795 [main:106] - GETTING Function0<Nothing> from OutputWorkScreenView
2021-03-11 20:35:13,800 [main:114] - replacement of { error((5257160859784768157).toInt().toString(-1759982160) + " has state-machine " +
                prope5.joinToString(separator = "\n")) } of type Function0<Nothing> is { error("lwdnk")}
2021-03-11 20:35:13,939 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:35:13,940 [main:66] - Compilation checking started
2021-03-11 20:35:14,548 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:14,550 [main:107] - replacing ({ c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-11 20:35:14,550 [main:50] - replacing { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-11 20:35:14,550 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-11 20:35:14,698 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-11 20:35:14,701 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:35:14,851 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:35:14,854 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:35:15,302 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:35:15,305 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 20:35:15,308 [main:302] - generating value of type = Any false depth = 5
2021-03-11 20:35:15,308 [main:95] - GENERATED = require(true, { "etbhc"})
2021-03-11 20:35:15,308 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> require(true, { "etbhc"})}
2021-03-11 20:35:15,308 [main:61] - GENERATED IS CALL =false
2021-03-11 20:35:15,318 [main:67] - randomType = SomeOutputScreenCallbacks
2021-03-11 20:35:15,321 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from OutputWorkScreenView
2021-03-11 20:35:15,327 [main:114] - replacement of { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> require(true, { "etbhc"})}
2021-03-11 20:35:15,460 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:35:15,460 [main:66] - Compilation checking started
2021-03-11 20:35:16,007 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:16,010 [main:107] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-11 20:35:16,010 [main:50] - replacing c !is CoroutineStackFrame Boolean
2021-03-11 20:35:16,011 [main:54] - Getting value of type Boolean
2021-03-11 20:35:16,165 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:35:16,168 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:35:16,168 [main:61] - GENERATED IS CALL =false
2021-03-11 20:35:16,856 [main:67] - randomType = Kla3<UInt?>?
2021-03-11 20:35:17,006 [main:302] - generating value of type = Kla3<UInt?> false depth = 0
2021-03-11 20:35:17,009 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 20:35:18,068 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 20:35:18,070 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}
2021-03-11 20:35:18,090 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@662dbf82]
2021-03-11 20:35:18,225 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:18,226 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]
2021-03-11 20:35:18,379 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:35:18,382 [main:78] - Generated call from random type = (Kla6)?.equals("wzfon").or(true)
2021-03-11 20:35:18,383 [main:106] - GETTING Boolean from OutputWorkScreenView
2021-03-11 20:35:18,388 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]]
2021-03-11 20:35:18,389 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:18,531 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:18,531 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]
2021-03-11 20:35:18,677 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:35:18,680 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("zqgjv").or(true)
2021-03-11 20:35:18,680 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]]
2021-03-11 20:35:18,680 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:18,826 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:18,826 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]
2021-03-11 20:35:18,985 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:35:18,988 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("qyorh").xor(false)
2021-03-11 20:35:18,989 [main:113] - Case = [public final val root: kotlin.Unit defined in OutputWorkScreenView[PropertyDescriptorImpl@7ba92dcc], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]]
2021-03-11 20:35:18,989 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]
2021-03-11 20:35:19,122 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:19,123 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).root.equals("fegct")
2021-03-11 20:35:19,123 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]]
2021-03-11 20:35:19,123 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:19,262 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:19,263 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]
2021-03-11 20:35:19,263 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("koiew").not()
2021-03-11 20:35:19,263 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]]
2021-03-11 20:35:19,263 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:19,391 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:19,391 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("fbymz")
2021-03-11 20:35:19,391 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]]
2021-03-11 20:35:19,391 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:19,528 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:19,529 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 20:35:19,663 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:35:19,666 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("rytje").and(true)
2021-03-11 20:35:19,667 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]]
2021-03-11 20:35:19,667 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:19,801 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:19,801 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]
2021-03-11 20:35:19,953 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:19,954 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("dyzmc").equals("xondt")
2021-03-11 20:35:19,954 [main:114] - replacement of c !is CoroutineStackFrame of type Boolean is true
2021-03-11 20:35:20,086 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 20:35:20,086 [main:66] - Compilation checking started
2021-03-11 20:35:20,451 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (true) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:20,454 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 20:35:20,454 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 20:35:20,454 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 20:35:20,607 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 20:35:20,616 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 20:35:20,790 [main:67] - randomType = Sequence<OutputWorkScreenView>
2021-03-11 20:35:20,791 [main:106] - GETTING EmptyCoroutineContext from OutputWorkScreenView
2021-03-11 20:35:20,798 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 20:35:20,798 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 20:35:20,798 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 20:35:20,798 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:35:20,928 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:35:20,931 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:35:21,073 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:35:21,077 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:35:21,564 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:35:21,566 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 20:35:21,569 [main:302] - generating value of type = Any false depth = 5
2021-03-11 20:35:21,569 [main:95] - GENERATED = require(false, { "gfqyc"})
2021-03-11 20:35:21,569 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false, { "gfqyc"})}
2021-03-11 20:35:21,569 [main:61] - GENERATED IS CALL =false
2021-03-11 20:35:21,575 [main:67] - randomType = Long
2021-03-11 20:35:21,709 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:35:21,742 [main:106] - GETTING Function0<Unit> from OutputWorkScreenView
2021-03-11 20:35:21,747 [main:114] - replacement of prope8 of type Function0<Unit> is { require(false, { "gfqyc"})}
2021-03-11 20:35:21,878 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:35:21,879 [main:66] - Compilation checking started
2021-03-11 20:35:22,264 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.{ require(false, { "gfqyc"})} = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:22,266 [main:107] - replacing ({
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }, Unit?)
2021-03-11 20:35:22,266 [main:50] - replacing {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    } Unit?
2021-03-11 20:35:22,266 [main:54] - Getting value of type Unit?
2021-03-11 20:35:22,412 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 20:35:22,549 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:35:22,553 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:35:23,012 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:35:23,015 [main:302] - generating value of type = Function1<Int, Unit> false depth = 3
2021-03-11 20:35:23,017 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 20:35:23,155 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:35:23,159 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:35:23,664 [main:302] - generating value of type = Int true depth = 7
2021-03-11 20:35:23,667 [main:302] - generating value of type = Function1<Int, Unit> false depth = 7
2021-03-11 20:35:23,670 [main:302] - generating value of type = Unit false depth = 8
2021-03-11 20:35:23,815 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:35:23,819 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:35:24,130 [main:302] - generating value of type = Boolean true depth = 11
2021-03-11 20:35:24,133 [main:95] - GENERATED = check(false)
2021-03-11 20:35:24,133 [main:95] - GENERATED = repeat(-1861255603, {a: Int -> check(false)})
2021-03-11 20:35:24,133 [main:95] - GENERATED = repeat(-187502729, {a: Int -> repeat(-1861255603, {a: Int -> check(false)})})
2021-03-11 20:35:24,133 [main:58] - GENERATED VALUE OF TYPE Unit? = repeat(-187502729, {a: Int -> repeat(-1861255603, {a: Int -> check(false)})})
2021-03-11 20:35:24,133 [main:61] - GENERATED IS CALL =true
2021-03-11 20:35:24,143 [main:67] - randomType = Kla4
2021-03-11 20:35:24,274 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 20:35:24,277 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 20:35:24,283 [main:149] - GENERATING call of type public final fun fu10(method: kotlin.String): kotlin.Unit defined in Kla4[SimpleFunctionDescriptorImpl@50637cff]
2021-03-11 20:35:24,284 [main:78] - Generated call from random type = (Kla4()).fu10(var res =
2021-03-11 20:35:24,284 [main:114] - replacement of {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    } of type Unit? is (Kla4()).fu10(var res =
2021-03-11 20:35:24,422 [main:33] - Trying to replace BLOCK on Element(BINARY_EXPRESSION)
2021-03-11 20:35:24,423 [main:66] - Compilation checking started
2021-03-11 20:35:24,427 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:35:24,428 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) (Kla4()).fu10(var res =
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:24,430 [main:107] - replacing ("Continuation " + c + " is not subtype of CoroutineStackFrame", String)
2021-03-11 20:35:24,430 [main:50] - replacing "Continuation " + c + " is not subtype of CoroutineStackFrame" String
2021-03-11 20:35:24,430 [main:54] - Getting value of type String
2021-03-11 20:35:24,574 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:35:24,577 [main:58] - GENERATED VALUE OF TYPE String = "gepls"
2021-03-11 20:35:24,577 [main:61] - GENERATED IS CALL =false
2021-03-11 20:35:25,030 [main:67] - randomType = Collection<UInt>
2021-03-11 20:35:25,031 [main:106] - GETTING String from OutputWorkScreenView
2021-03-11 20:35:25,038 [main:114] - replacement of "Continuation " + c + " is not subtype of CoroutineStackFrame" of type String is "gepls"
2021-03-11 20:35:25,192 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:35:25,193 [main:66] - Compilation checking started
2021-03-11 20:35:25,785 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:25,787 [main:107] - replacing (false, Boolean)
2021-03-11 20:35:25,787 [main:50] - replacing false Boolean
2021-03-11 20:35:25,787 [main:54] - Getting value of type Boolean
2021-03-11 20:35:25,921 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:35:25,924 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:35:25,924 [main:61] - GENERATED IS CALL =false
2021-03-11 20:35:26,231 [main:67] - randomType = List<Collection<Long>>
2021-03-11 20:35:26,233 [main:106] - GETTING Boolean from OutputWorkScreenView
2021-03-11 20:35:26,239 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]]
2021-03-11 20:35:26,239 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:26,369 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:26,370 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]
2021-03-11 20:35:26,517 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:26,518 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("asabo").equals("iihwj")
2021-03-11 20:35:26,518 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]]
2021-03-11 20:35:26,518 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:26,660 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:26,660 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]
2021-03-11 20:35:26,792 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:35:26,795 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("eyzlk").or(true)
2021-03-11 20:35:26,795 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]]
2021-03-11 20:35:26,795 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:26,926 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:26,927 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 20:35:27,043 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:35:27,045 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
2021-03-11 20:35:27,045 [main:113] - Case = [public final val root: kotlin.Unit defined in OutputWorkScreenView[PropertyDescriptorImpl@7ba92dcc], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]]
2021-03-11 20:35:27,046 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]
2021-03-11 20:35:27,179 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:27,179 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).root.equals("sqjmu")
2021-03-11 20:35:27,179 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]]
2021-03-11 20:35:27,179 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:27,311 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:27,311 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]
2021-03-11 20:35:27,426 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:35:27,429 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lpmzi").xor(true)
2021-03-11 20:35:27,429 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]]
2021-03-11 20:35:27,429 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:27,560 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:27,561 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]
2021-03-11 20:35:27,561 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("wwcbn").not()
2021-03-11 20:35:27,561 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]]
2021-03-11 20:35:27,561 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:27,703 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:27,704 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("qheoe")
2021-03-11 20:35:27,704 [main:114] - replacement of false of type Boolean is (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
2021-03-11 20:35:27,842 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:35:27,842 [main:66] - Compilation checking started
2021-03-11 20:35:28,401 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:28,404 [main:107] - replacing (method, String)
2021-03-11 20:35:28,404 [main:50] - replacing method String
2021-03-11 20:35:28,405 [main:54] - Getting value of type String
2021-03-11 20:35:28,563 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:35:28,566 [main:58] - GENERATED VALUE OF TYPE String = "qdzih"
2021-03-11 20:35:28,566 [main:61] - GENERATED IS CALL =false
2021-03-11 20:35:28,724 [main:67] - randomType = Float
2021-03-11 20:35:28,858 [main:302] - generating value of type = Float true depth = 0
2021-03-11 20:35:28,898 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@16809640]
2021-03-11 20:35:28,898 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bbce403]
2021-03-11 20:35:29,034 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:35:29,036 [main:78] - Generated call from random type = (0.60687107f).toShort().toString(2035466723)
2021-03-11 20:35:29,037 [main:106] - GETTING String from OutputWorkScreenView
2021-03-11 20:35:29,044 [main:114] - replacement of method of type String is "qdzih"
2021-03-11 20:35:29,175 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:35:29,176 [main:66] - Compilation checking started
2021-03-11 20:35:29,738 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith("qdzih") == true }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:29,740 [main:107] - replacing (prope7, Boolean)
2021-03-11 20:35:29,740 [main:50] - replacing prope7 Boolean
2021-03-11 20:35:29,740 [main:54] - Getting value of type Boolean
2021-03-11 20:35:29,870 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:35:29,873 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:35:29,873 [main:61] - GENERATED IS CALL =false
2021-03-11 20:35:30,040 [main:67] - randomType = Collection<Kla2>
2021-03-11 20:35:30,041 [main:106] - GETTING Boolean from OutputWorkScreenView
2021-03-11 20:35:30,046 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]]
2021-03-11 20:35:30,046 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:30,183 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:30,184 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]
2021-03-11 20:35:30,317 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:35:30,320 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("bnoln").xor(false)
2021-03-11 20:35:30,320 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]]
2021-03-11 20:35:30,320 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:30,437 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:30,437 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]
2021-03-11 20:35:30,438 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("eatlg").not()
2021-03-11 20:35:30,438 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]]
2021-03-11 20:35:30,438 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:30,572 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:30,572 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]
2021-03-11 20:35:30,705 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:30,705 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("wkheb").equals("kgrlz")
2021-03-11 20:35:30,705 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]]
2021-03-11 20:35:30,705 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:30,822 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:30,823 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 20:35:30,958 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:35:30,962 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("bumsc").and(true)
2021-03-11 20:35:30,962 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]]
2021-03-11 20:35:30,962 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:31,096 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:31,096 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("kpcli")
2021-03-11 20:35:31,097 [main:113] - Case = [public final val root: kotlin.Unit defined in OutputWorkScreenView[PropertyDescriptorImpl@7ba92dcc], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]]
2021-03-11 20:35:31,097 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]
2021-03-11 20:35:31,215 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:31,215 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).root.equals("bsnbn")
2021-03-11 20:35:31,215 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]]
2021-03-11 20:35:31,215 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:31,355 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:31,355 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]
2021-03-11 20:35:31,487 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:35:31,490 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("szujb").or(true)
2021-03-11 20:35:31,490 [main:114] - replacement of prope7 of type Boolean is (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("wkheb").equals("kgrlz")
2021-03-11 20:35:31,654 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:35:31,655 [main:66] - Compilation checking started
2021-03-11 20:35:32,197 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith("qdzih") == true }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.(OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("wkheb").equals("kgrlz") = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:32,200 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 20:35:32,201 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 20:35:32,201 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:35:32,341 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:35:32,344 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:35:32,486 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:35:32,489 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:35:32,969 [main:302] - generating value of type = Int true depth = 4
2021-03-11 20:35:32,972 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 20:35:32,974 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 20:35:32,980 [main:95] - GENERATED = repeat(-1815359547, {a: Int -> println()})
2021-03-11 20:35:32,980 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-1815359547, {a: Int -> println()})}
2021-03-11 20:35:32,980 [main:61] - GENERATED IS CALL =false
2021-03-11 20:35:33,144 [main:67] - randomType = Byte
2021-03-11 20:35:33,278 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:35:33,320 [main:106] - GETTING Function0<Unit> from OutputWorkScreenView
2021-03-11 20:35:33,326 [main:114] - replacement of prope8 of type Function0<Unit> is { repeat(-1815359547, {a: Int -> println()})}
2021-03-11 20:35:33,471 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:35:33,472 [main:66] - Compilation checking started
2021-03-11 20:35:33,839 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith("qdzih") == true }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            { repeat(-1815359547, {a: Int -> println()})}()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:33,841 [main:107] - replacing (source1, Kla0<Ty1>)
2021-03-11 20:35:33,841 [main:50] - replacing source1 Kla0<Ty1>
2021-03-11 20:35:33,841 [main:54] - Getting value of type Kla0<Ty1>
2021-03-11 20:35:33,978 [main:302] - generating value of type = Kla0<Ty1> false depth = 0
2021-03-11 20:35:33,981 [main:112] - generating klass Kla0 text = class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}
2021-03-11 20:35:34,316 [main:194] - Type params = [Long]
2021-03-11 20:35:34,594 [main:302] - generating value of type = SuspendFunction0<Long> false depth = 2
2021-03-11 20:35:34,597 [main:302] - generating value of type = Long true depth = 3
2021-03-11 20:35:34,599 [main:58] - GENERATED VALUE OF TYPE Kla0<Ty1> = Kla0<Long>({ 8134634812550918859})
2021-03-11 20:35:34,599 [main:61] - GENERATED IS CALL =true
2021-03-11 20:35:34,609 [main:67] - randomType = Kla2
2021-03-11 20:35:34,744 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 20:35:34,746 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-11 20:35:34,765 [main:106] - GETTING Kla0<Ty1> from OutputWorkScreenView
2021-03-11 20:35:34,771 [main:114] - replacement of source1 of type Kla0<Ty1> is Kla0<Long>({ 8134634812550918859})
2021-03-11 20:35:34,901 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:35:34,901 [main:66] - Compilation checking started
2021-03-11 20:35:35,268 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(Kla0<Long>({ 8134634812550918859}).fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith("qdzih") == true }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:35,270 [main:107] - replacing ("ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n"), String)
2021-03-11 20:35:35,270 [main:50] - replacing "ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n") String
2021-03-11 20:35:35,270 [main:54] - Getting value of type String
2021-03-11 20:35:35,405 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:35:35,407 [main:58] - GENERATED VALUE OF TYPE String = "zyqds"
2021-03-11 20:35:35,407 [main:61] - GENERATED IS CALL =false
2021-03-11 20:35:35,556 [main:67] - randomType = Byte
2021-03-11 20:35:35,695 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:35:35,749 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@60045681]
2021-03-11 20:35:35,879 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:35:35,882 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d001a18]
2021-03-11 20:35:36,022 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:35:36,025 [main:78] - Generated call from random type = (-69).div(2194467336091566778).toString(-1929473167)
2021-03-11 20:35:36,026 [main:106] - GETTING String from OutputWorkScreenView
2021-03-11 20:35:36,034 [main:114] - replacement of "ojvru" + " has no state-machine " +
                prope5.joinToString(separator = "\n") of type String is "zyqds"
2021-03-11 20:35:36,165 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:35:36,166 [main:66] - Compilation checking started
2021-03-11 20:35:36,669 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith("qdzih") == true }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:36,671 [main:107] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-11 20:35:36,671 [main:50] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-11 20:35:36,672 [main:54] - Getting value of type String
2021-03-11 20:35:36,839 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:35:36,842 [main:58] - GENERATED VALUE OF TYPE String = "jqrwr"
2021-03-11 20:35:36,842 [main:61] - GENERATED IS CALL =false
2021-03-11 20:35:37,504 [main:67] - randomType = Function1<Float?, Int?>
2021-03-11 20:35:37,505 [main:106] - GETTING String from OutputWorkScreenView
2021-03-11 20:35:37,512 [main:114] - replacement of "Wrong state-machine generated: it is finished early" of type String is "jqrwr"
2021-03-11 20:35:37,644 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:35:37,644 [main:66] - Compilation checking started
2021-03-11 20:35:38,145 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith("qdzih") == true }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:38,149 [main:107] - replacing (prope4.exceptionOrNull(), Throwable?)
2021-03-11 20:35:38,149 [main:50] - replacing prope4.exceptionOrNull() Throwable?
2021-03-11 20:35:38,149 [main:54] - Getting value of type Throwable?
2021-03-11 20:35:38,317 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 20:35:38,477 [main:43] - GENERATING CALL OF fun CharacterCodingException(message: kotlin.String?): Throwable = TODO()
2021-03-11 20:35:38,481 [main:61] - WITHOUT TYPE PARAMS = fun CharacterCodingException(message: kotlin.String?): Throwable = TODO()
2021-03-11 20:35:38,769 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:35:38,772 [main:95] - GENERATED = CharacterCodingException("coayd")
2021-03-11 20:35:38,772 [main:58] - GENERATED VALUE OF TYPE Throwable? = CharacterCodingException("coayd")
2021-03-11 20:35:38,772 [main:61] - GENERATED IS CALL =true
2021-03-11 20:35:39,237 [main:67] - randomType = Kla3<ArrayList<String>>?
2021-03-11 20:35:39,372 [main:302] - generating value of type = Kla3<ArrayList<String>> false depth = 0
2021-03-11 20:35:39,375 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 20:35:41,278 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 20:35:41,281 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}
2021-03-11 20:35:41,301 [main:106] - GETTING Throwable? from OutputWorkScreenView
2021-03-11 20:35:41,306 [main:114] - replacement of prope4.exceptionOrNull() of type Throwable? is CharacterCodingException("coayd")
2021-03-11 20:35:41,438 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:35:41,439 [main:66] - Compilation checking started
2021-03-11 20:35:41,784 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
CharacterCodingException("coayd")?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith("qdzih") == true }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:41,786 [main:107] - replacing (prope7, Boolean)
2021-03-11 20:35:41,786 [main:50] - replacing prope7 Boolean
2021-03-11 20:35:41,786 [main:54] - Getting value of type Boolean
2021-03-11 20:35:41,922 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:35:41,925 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:35:41,925 [main:61] - GENERATED IS CALL =false
2021-03-11 20:35:42,224 [main:67] - randomType = Byte?
2021-03-11 20:35:42,358 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:35:42,422 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@39053bab]
2021-03-11 20:35:42,422 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c1475f9]
2021-03-11 20:35:42,422 [main:78] - Generated call from random type = (-99)?.toChar().isSurrogate()
2021-03-11 20:35:42,422 [main:114] - replacement of prope7 of type Boolean is (-99)?.toChar().isSurrogate()
2021-03-11 20:35:42,567 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:35:42,567 [main:66] - Compilation checking started
2021-03-11 20:35:42,919 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith("qdzih") == true }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.(-99)?.toChar().isSurrogate() = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:42,921 [main:107] - replacing (fu5(), Ty2)
2021-03-11 20:35:42,921 [main:50] - replacing fu5() Ty2
2021-03-11 20:35:42,921 [main:54] - Getting value of type Ty2
2021-03-11 20:35:43,055 [main:302] - generating value of type = Ty2 false depth = 0
2021-03-11 20:35:43,061 [main:58] - GENERATED VALUE OF TYPE Ty2 = 
2021-03-11 20:35:43,371 [main:67] - randomType = Sequence<UByte>
2021-03-11 20:35:43,372 [main:106] - GETTING Ty2 from OutputWorkScreenView
2021-03-11 20:35:43,379 [main:111] - Cant find and generate replacement for fu5() type Ty2
2021-03-11 20:35:43,379 [main:107] - replacing (c, Continuation<*>)
2021-03-11 20:35:43,380 [main:50] - replacing c Continuation<*>
2021-03-11 20:35:43,380 [main:54] - Getting value of type Continuation<*>
2021-03-11 20:35:43,512 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 20:35:43,635 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:35:43,639 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:35:44,104 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 20:35:44,240 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:35:44,244 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:35:44,551 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 20:35:44,696 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:35:44,700 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:35:45,155 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:35:45,155 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:35:45,155 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:35:45,155 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 20:35:45,632 [main:67] - randomType = Map<Kla0<Long>, Kla5>
2021-03-11 20:35:45,633 [main:106] - GETTING Continuation<*> from OutputWorkScreenView
2021-03-11 20:35:45,639 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 20:35:45,639 [main:107] - replacing (c, Continuation<*>)
2021-03-11 20:35:45,639 [main:50] - replacing c Continuation<*>
2021-03-11 20:35:45,639 [main:54] - Getting value of type Continuation<*>
2021-03-11 20:35:45,771 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 20:35:45,893 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:35:45,897 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:35:46,388 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 20:35:46,526 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:35:46,529 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:35:46,822 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 20:35:46,971 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:35:46,974 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:35:47,466 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:35:47,467 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:35:47,467 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:35:47,467 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 20:35:47,621 [main:67] - randomType = Double
2021-03-11 20:35:47,751 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:35:47,800 [main:106] - GETTING Continuation<*> from OutputWorkScreenView
2021-03-11 20:35:47,808 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 20:35:47,808 [main:107] - replacing (prope1.prope8, Function0<Unit>)
2021-03-11 20:35:47,808 [main:50] - replacing prope1.prope8 Function0<Unit>
2021-03-11 20:35:47,808 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:35:47,956 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:35:47,958 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:35:48,096 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:35:48,099 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:35:48,534 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:35:48,537 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 20:35:48,539 [main:302] - generating value of type = Any false depth = 5
2021-03-11 20:35:48,540 [main:95] - GENERATED = require(true, { "bmcxf"})
2021-03-11 20:35:48,540 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true, { "bmcxf"})}
2021-03-11 20:35:48,540 [main:61] - GENERATED IS CALL =false
2021-03-11 20:35:48,864 [main:67] - randomType = MutableMap<OutputWorkScreenView, Kla2?>
2021-03-11 20:35:48,865 [main:106] - GETTING Function0<Unit> from OutputWorkScreenView
2021-03-11 20:35:48,871 [main:114] - replacement of prope1.prope8 of type Function0<Unit> is { require(true, { "bmcxf"})}
2021-03-11 20:35:48,988 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:35:48,988 [main:66] - Compilation checking started
2021-03-11 20:35:49,330 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith("qdzih") == true }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
{ require(true, { "bmcxf"})} = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:49,332 [main:107] - replacing (fu5(), Ty2)
2021-03-11 20:35:49,332 [main:50] - replacing fu5() Ty2
2021-03-11 20:35:49,332 [main:54] - Getting value of type Ty2
2021-03-11 20:35:49,471 [main:302] - generating value of type = Ty2 false depth = 0
2021-03-11 20:35:49,477 [main:58] - GENERATED VALUE OF TYPE Ty2 = 
2021-03-11 20:35:49,626 [main:67] - randomType = Kla6
2021-03-11 20:35:49,764 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 20:35:49,767 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}
2021-03-11 20:35:49,790 [main:106] - GETTING Ty2 from OutputWorkScreenView
2021-03-11 20:35:49,795 [main:111] - Cant find and generate replacement for fu5() type Ty2
2021-03-11 20:35:49,796 [main:107] - replacing (prope4.isSuccess, Boolean)
2021-03-11 20:35:49,796 [main:50] - replacing prope4.isSuccess Boolean
2021-03-11 20:35:49,796 [main:54] - Getting value of type Boolean
2021-03-11 20:35:49,946 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:35:49,948 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:35:49,949 [main:61] - GENERATED IS CALL =false
2021-03-11 20:35:51,194 [main:67] - randomType = MutableMap<String, Function1<Kla3<Char>, Map<Byte, UInt>>>
2021-03-11 20:35:51,195 [main:106] - GETTING Boolean from OutputWorkScreenView
2021-03-11 20:35:51,201 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]]
2021-03-11 20:35:51,201 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:51,330 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:51,330 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 20:35:51,448 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:35:51,451 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("wlrqy").and(true)
2021-03-11 20:35:51,451 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]]
2021-03-11 20:35:51,451 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:51,586 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:51,586 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]
2021-03-11 20:35:51,717 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:35:51,719 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ohmei").xor(true)
2021-03-11 20:35:51,720 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]]
2021-03-11 20:35:51,720 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:51,849 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]
2021-03-11 20:35:51,850 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals(null).not()
2021-03-11 20:35:51,850 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]]
2021-03-11 20:35:51,850 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:51,986 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:51,986 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]
2021-03-11 20:35:52,117 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:52,118 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ybvse").equals("rsbwf")
2021-03-11 20:35:52,118 [main:113] - Case = [public final val root: kotlin.Unit defined in OutputWorkScreenView[PropertyDescriptorImpl@7ba92dcc], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]]
2021-03-11 20:35:52,118 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]
2021-03-11 20:35:52,239 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:52,239 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).root.equals("vtlen")
2021-03-11 20:35:52,239 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]]
2021-03-11 20:35:52,239 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:52,375 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals(null)
2021-03-11 20:35:52,375 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]]
2021-03-11 20:35:52,375 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:35:52,510 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:52,511 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]
2021-03-11 20:35:52,636 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:35:52,638 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("kqzze").or(true)
2021-03-11 20:35:52,640 [main:114] - replacement of prope4.isSuccess of type Boolean is (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("wlrqy").and(true)
2021-03-11 20:35:52,776 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:35:52,778 [main:107] - replacing (t, SuspendFunction0<Ty0>)
2021-03-11 20:35:52,778 [main:50] - replacing t SuspendFunction0<Ty0>
2021-03-11 20:35:52,778 [main:54] - Getting value of type SuspendFunction0<Ty0>
2021-03-11 20:35:52,908 [main:302] - generating value of type = SuspendFunction0<Ty0> false depth = 0
2021-03-11 20:35:52,911 [main:302] - generating value of type = Ty0 false depth = 1
2021-03-11 20:35:52,916 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Ty0> = { }
2021-03-11 20:35:52,916 [main:61] - GENERATED IS CALL =false
2021-03-11 20:35:53,202 [main:67] - randomType = UByte?
2021-03-11 20:35:53,331 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 20:35:53,378 [main:106] - GETTING SuspendFunction0<Ty0> from OutputWorkScreenView
2021-03-11 20:35:53,385 [main:114] - replacement of t of type SuspendFunction0<Ty0> is { }
2021-03-11 20:35:53,542 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:35:53,542 [main:66] - Compilation checking started
2021-03-11 20:35:53,897 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = { }()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith("qdzih") == true }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:53,899 [main:107] - replacing (prope4, Any?)
2021-03-11 20:35:53,899 [main:50] - replacing prope4 Any?
2021-03-11 20:35:53,899 [main:54] - Getting value of type Any?
2021-03-11 20:35:54,030 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:35:54,030 [main:58] - GENERATED VALUE OF TYPE Any? = "fmvnw"
2021-03-11 20:35:54,030 [main:61] - GENERATED IS CALL =false
2021-03-11 20:35:54,176 [main:67] - randomType = Byte
2021-03-11 20:35:54,294 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:35:54,335 [main:106] - GETTING Any? from OutputWorkScreenView
2021-03-11 20:35:54,339 [main:114] - replacement of prope4 of type Any? is "fmvnw"
2021-03-11 20:35:54,469 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:35:54,470 [main:66] - Compilation checking started
2021-03-11 20:35:54,821 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this."fmvnw" = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith("qdzih") == true }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:54,823 [main:107] - replacing (let({a: Throwable -> println("lafvb")}), Unit?)
2021-03-11 20:35:54,823 [main:50] - replacing let({a: Throwable -> println("lafvb")}) Unit?
2021-03-11 20:35:54,823 [main:54] - Getting value of type Unit?
2021-03-11 20:35:54,953 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 20:35:55,089 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:35:55,092 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:35:55,516 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 20:35:55,519 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-11 20:35:55,522 [main:302] - generating value of type = Any false depth = 4
2021-03-11 20:35:55,522 [main:95] - GENERATED = check(false, { "njpfx"})
2021-03-11 20:35:55,522 [main:58] - GENERATED VALUE OF TYPE Unit? = check(false, { "njpfx"})
2021-03-11 20:35:55,522 [main:61] - GENERATED IS CALL =true
2021-03-11 20:35:55,532 [main:67] - randomType = Kla2
2021-03-11 20:35:55,648 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 20:35:55,651 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-11 20:35:55,678 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resume(value: T): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@33255547]
2021-03-11 20:35:55,825 [main:302] - generating value of type = T false depth = 0
2021-03-11 20:35:55,973 [main:43] - GENERATING CALL OF fun <T> enumValueOf(name: kotlin.String): T = TODO()
2021-03-11 20:35:55,978 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValueOf(name: kotlin.String): T = TODO()
2021-03-11 20:35:56,260 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:35:56,263 [main:95] - GENERATED = enumValueOf<Enum<T>>("izjsm")
2021-03-11 20:35:56,263 [main:78] - Generated call from random type = (Kla2()).resume(enumValueOf<Enum<T>>("izjsm"))
2021-03-11 20:35:56,265 [main:106] - GETTING Unit? from OutputWorkScreenView
2021-03-11 20:35:56,270 [main:113] - Case = [public final val root: kotlin.Unit defined in OutputWorkScreenView[PropertyDescriptorImpl@7ba92dcc]]
2021-03-11 20:35:56,270 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    }))?.root
2021-03-11 20:35:56,270 [main:114] - replacement of let({a: Throwable -> println("lafvb")}) of type Unit? is check(false, { "njpfx"})
2021-03-11 20:35:56,398 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:35:56,399 [main:66] - Compilation checking started
2021-03-11 20:35:56,751 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0(block)

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.check(false, { "njpfx"})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith("qdzih") == true }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:56,753 [main:107] - replacing (Kla5(), Kla5)
2021-03-11 20:35:56,753 [main:50] - replacing Kla5() Kla5
2021-03-11 20:35:56,753 [main:54] - Getting value of type Kla5
2021-03-11 20:35:56,884 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 20:35:56,886 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}
2021-03-11 20:35:56,886 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-11 20:35:56,887 [main:61] - GENERATED IS CALL =true
2021-03-11 20:35:57,336 [main:67] - randomType = Map<UInt, String?>
2021-03-11 20:35:57,337 [main:106] - GETTING Kla5 from OutputWorkScreenView
2021-03-11 20:35:57,342 [main:114] - replacement of Kla5() of type Kla5 is Kla5()
2021-03-11 20:35:57,470 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:35:57,473 [main:107] - replacing (source2.fu5(), Ty2)
2021-03-11 20:35:57,473 [main:50] - replacing source2.fu5() Ty2
2021-03-11 20:35:57,473 [main:54] - Getting value of type Ty2
2021-03-11 20:35:57,596 [main:302] - generating value of type = Ty2 false depth = 0
2021-03-11 20:35:57,602 [main:58] - GENERATED VALUE OF TYPE Ty2 = 
2021-03-11 20:35:57,752 [main:67] - randomType = UByte
2021-03-11 20:35:57,882 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 20:35:57,925 [main:106] - GETTING Ty2 from OutputWorkScreenView
2021-03-11 20:35:57,932 [main:111] - Cant find and generate replacement for source2.fu5() type Ty2
2021-03-11 20:35:57,932 [main:107] - replacing (block, SuspendFunction0<Ty0>)
2021-03-11 20:35:57,932 [main:50] - replacing block SuspendFunction0<Ty0>
2021-03-11 20:35:57,932 [main:54] - Getting value of type SuspendFunction0<Ty0>
2021-03-11 20:35:58,065 [main:302] - generating value of type = SuspendFunction0<Ty0> false depth = 0
2021-03-11 20:35:58,067 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Ty0> = { null}
2021-03-11 20:35:58,068 [main:61] - GENERATED IS CALL =false
2021-03-11 20:35:58,506 [main:67] - randomType = List<Collection<Int>>
2021-03-11 20:35:58,508 [main:106] - GETTING SuspendFunction0<Ty0> from OutputWorkScreenView
2021-03-11 20:35:58,514 [main:114] - replacement of block of type SuspendFunction0<Ty0> is { null}
2021-03-11 20:35:58,643 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:35:58,643 [main:66] - Compilation checking started
2021-03-11 20:35:59,171 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith("qdzih") == true }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:35:59,174 [main:107] - replacing (prope4, Result<Ty0>)
2021-03-11 20:35:59,174 [main:50] - replacing prope4 Result<Ty0>
2021-03-11 20:35:59,174 [main:54] - Getting value of type Result<Ty0>
2021-03-11 20:35:59,341 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 20:35:59,475 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 20:35:59,479 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 20:35:59,756 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 20:35:59,756 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 20:35:59,766 [main:67] - randomType = Kla2
2021-03-11 20:35:59,894 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 20:35:59,897 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-11 20:35:59,921 [main:106] - GETTING Result<Ty0> from OutputWorkScreenView
2021-03-11 20:35:59,927 [main:111] - Cant find and generate replacement for prope4 type Result<Ty0>
2021-03-11 20:35:59,927 [main:107] - replacing (prope1.prope7, Boolean)
2021-03-11 20:35:59,927 [main:50] - replacing prope1.prope7 Boolean
2021-03-11 20:35:59,927 [main:54] - Getting value of type Boolean
2021-03-11 20:36:00,060 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:00,063 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:36:00,063 [main:61] - GENERATED IS CALL =false
2021-03-11 20:36:00,399 [main:67] - randomType = Kla3<OutputWorkScreenView?>
2021-03-11 20:36:00,514 [main:302] - generating value of type = Kla3<OutputWorkScreenView?> false depth = 0
2021-03-11 20:36:00,517 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 20:36:01,236 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 20:36:01,238 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}
2021-03-11 20:36:01,258 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@7c5829ad]
2021-03-11 20:36:01,372 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:01,372 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]
2021-03-11 20:36:01,372 [main:78] - Generated call from random type = (Kla6).equals("bkhwn").not()
2021-03-11 20:36:01,373 [main:106] - GETTING Boolean from OutputWorkScreenView
2021-03-11 20:36:01,378 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]]
2021-03-11 20:36:01,378 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:01,511 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:01,511 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]
2021-03-11 20:36:01,511 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("cvbxc").not()
2021-03-11 20:36:01,511 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]]
2021-03-11 20:36:01,511 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:01,649 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:01,649 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]
2021-03-11 20:36:01,764 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:01,766 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("sgldg").xor(true)
2021-03-11 20:36:01,766 [main:113] - Case = [public final val root: kotlin.Unit defined in OutputWorkScreenView[PropertyDescriptorImpl@7ba92dcc], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]]
2021-03-11 20:36:01,767 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]
2021-03-11 20:36:01,900 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:01,901 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).root.equals("rmdjs")
2021-03-11 20:36:01,901 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]]
2021-03-11 20:36:01,901 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:02,030 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:02,031 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]
2021-03-11 20:36:02,148 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:02,151 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ydqnf").or(true)
2021-03-11 20:36:02,151 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]]
2021-03-11 20:36:02,151 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:02,284 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:02,284 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 20:36:02,414 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:02,417 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ywcla").and(true)
2021-03-11 20:36:02,417 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]]
2021-03-11 20:36:02,417 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:02,532 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:02,532 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("nebdj")
2021-03-11 20:36:02,533 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]]
2021-03-11 20:36:02,533 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:02,665 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:02,665 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]
2021-03-11 20:36:02,795 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("umjkg").equals(null)
2021-03-11 20:36:02,795 [main:114] - replacement of prope1.prope7 of type Boolean is true
2021-03-11 20:36:02,910 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 20:36:02,911 [main:66] - Compilation checking started
2021-03-11 20:36:03,251 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith("qdzih") == true }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            true = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:36:03,253 [main:107] - replacing (true, Boolean)
2021-03-11 20:36:03,253 [main:50] - replacing true Boolean
2021-03-11 20:36:03,253 [main:54] - Getting value of type Boolean
2021-03-11 20:36:03,384 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:03,386 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:36:03,386 [main:61] - GENERATED IS CALL =false
2021-03-11 20:36:03,396 [main:67] - randomType = OutputWorkScreenView
2021-03-11 20:36:03,526 [main:302] - generating value of type = OutputWorkScreenView false depth = 0
2021-03-11 20:36:03,528 [main:112] - generating klass OutputWorkScreenView text = class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}
2021-03-11 20:36:03,644 [main:194] - Type params = []
2021-03-11 20:36:03,779 [main:302] - generating value of type = SomeOutputScreenCallbacks false depth = 2
2021-03-11 20:36:03,781 [main:112] - generating klass SomeOutputScreenCallbacks text = interface SomeOutputScreenCallbacks {
    fun ontest()
}
2021-03-11 20:36:04,043 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@1ed2c049]
2021-03-11 20:36:04,176 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:04,177 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]
2021-03-11 20:36:04,177 [main:78] - Generated call from random type = (OutputWorkScreenView(TODO())).equals("builr").not()
2021-03-11 20:36:04,178 [main:106] - GETTING Boolean from OutputWorkScreenView
2021-03-11 20:36:04,184 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]]
2021-03-11 20:36:04,184 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:04,313 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:04,314 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]
2021-03-11 20:36:04,429 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:04,431 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("yzrhu").or(true)
2021-03-11 20:36:04,432 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]]
2021-03-11 20:36:04,432 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:04,562 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:04,562 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("werxh")
2021-03-11 20:36:04,562 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]]
2021-03-11 20:36:04,562 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:04,699 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:04,700 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 20:36:04,814 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:04,817 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("qvwze").and(true)
2021-03-11 20:36:04,817 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]]
2021-03-11 20:36:04,817 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:04,948 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:04,949 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]
2021-03-11 20:36:05,080 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:05,080 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("tybdl").equals("euqqt")
2021-03-11 20:36:05,080 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]]
2021-03-11 20:36:05,080 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:05,196 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:05,196 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]
2021-03-11 20:36:05,197 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("snedw").not()
2021-03-11 20:36:05,197 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]]
2021-03-11 20:36:05,197 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:05,327 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:05,327 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]
2021-03-11 20:36:05,456 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:05,459 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("cqcpp").xor(false)
2021-03-11 20:36:05,459 [main:113] - Case = [public final val root: kotlin.Unit defined in OutputWorkScreenView[PropertyDescriptorImpl@7ba92dcc], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]]
2021-03-11 20:36:05,459 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]
2021-03-11 20:36:05,576 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).root.equals(null)
2021-03-11 20:36:05,576 [main:114] - replacement of true of type Boolean is (OutputWorkScreenView(TODO())).equals("builr").not()
2021-03-11 20:36:05,706 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:36:05,707 [main:66] - Compilation checking started
2021-03-11 20:36:06,274 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith("qdzih") == true }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:36:06,276 [main:107] - replacing (true, Boolean)
2021-03-11 20:36:06,276 [main:50] - replacing true Boolean
2021-03-11 20:36:06,276 [main:54] - Getting value of type Boolean
2021-03-11 20:36:06,412 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:06,415 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:36:06,415 [main:61] - GENERATED IS CALL =false
2021-03-11 20:36:06,705 [main:67] - randomType = Collection<List<Boolean>>
2021-03-11 20:36:06,706 [main:106] - GETTING Boolean from OutputWorkScreenView
2021-03-11 20:36:06,711 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]]
2021-03-11 20:36:06,711 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:06,849 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:06,849 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]
2021-03-11 20:36:06,981 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:06,981 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ahtdw").equals("fcyhf")
2021-03-11 20:36:06,981 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]]
2021-03-11 20:36:06,982 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:07,101 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:07,101 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 20:36:07,238 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:07,241 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("mhrlu").and(false)
2021-03-11 20:36:07,241 [main:113] - Case = [public final val root: kotlin.Unit defined in OutputWorkScreenView[PropertyDescriptorImpl@7ba92dcc], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]]
2021-03-11 20:36:07,241 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]
2021-03-11 20:36:07,374 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:07,375 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).root.equals("txcjb")
2021-03-11 20:36:07,375 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]]
2021-03-11 20:36:07,375 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:07,495 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:07,495 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]
2021-03-11 20:36:07,629 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:07,632 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("inzfi").xor(false)
2021-03-11 20:36:07,632 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]]
2021-03-11 20:36:07,632 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:07,773 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:07,773 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]
2021-03-11 20:36:07,894 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:07,897 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("egrfb").or(true)
2021-03-11 20:36:07,898 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]]
2021-03-11 20:36:07,898 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:08,030 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:08,030 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("fejqm")
2021-03-11 20:36:08,030 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]]
2021-03-11 20:36:08,030 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:08,174 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:08,175 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]
2021-03-11 20:36:08,175 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lepio").not()
2021-03-11 20:36:08,175 [main:114] - replacement of true of type Boolean is (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("inzfi").xor(false)
2021-03-11 20:36:08,295 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:36:08,296 [main:66] - Compilation checking started
2021-03-11 20:36:08,809 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0 { 1 }
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith("qdzih") == (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("inzfi").xor(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:36:08,811 [main:107] - replacing ({a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5()), Ty3)
2021-03-11 20:36:08,811 [main:50] - replacing {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5()) Ty3
2021-03-11 20:36:08,811 [main:54] - Getting value of type Ty3
2021-03-11 20:36:08,952 [main:302] - generating value of type = Ty3 false depth = 0
2021-03-11 20:36:08,958 [main:58] - GENERATED VALUE OF TYPE Ty3 = 
2021-03-11 20:36:09,259 [main:67] - randomType = Array<SomeOutputScreenCallbacks>
2021-03-11 20:36:09,398 [main:302] - generating value of type = Array<SomeOutputScreenCallbacks> false depth = 0
2021-03-11 20:36:09,546 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<SomeOutputScreenCallbacks> = TODO()
2021-03-11 20:36:09,550 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<SomeOutputScreenCallbacks> = TODO()
2021-03-11 20:36:09,679 [main:95] - GENERATED = emptyArray<SomeOutputScreenCallbacks>()
2021-03-11 20:36:09,696 [main:106] - GETTING Ty3 from OutputWorkScreenView
2021-03-11 20:36:09,703 [main:111] - Cant find and generate replacement for {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5()) type Ty3
2021-03-11 20:36:09,703 [main:107] - replacing (Kla0 { 1 }, Kla0<Int>)
2021-03-11 20:36:09,703 [main:50] - replacing Kla0 { 1 } Kla0<Int>
2021-03-11 20:36:09,703 [main:54] - Getting value of type Kla0<Int>
2021-03-11 20:36:09,845 [main:302] - generating value of type = Kla0<Int> false depth = 0
2021-03-11 20:36:09,848 [main:112] - generating klass Kla0 text = class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}
2021-03-11 20:36:10,284 [main:194] - Type params = [Int]
2021-03-11 20:36:10,565 [main:302] - generating value of type = SuspendFunction0<Int> false depth = 2
2021-03-11 20:36:10,568 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:36:10,572 [main:58] - GENERATED VALUE OF TYPE Kla0<Int> = Kla0<Int>({ -916515383})
2021-03-11 20:36:10,572 [main:61] - GENERATED IS CALL =true
2021-03-11 20:36:10,578 [main:67] - randomType = String
2021-03-11 20:36:10,719 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:36:10,749 [main:106] - GETTING Kla0<Int> from OutputWorkScreenView
2021-03-11 20:36:10,755 [main:114] - replacement of Kla0 { 1 } of type Kla0<Int> is Kla0<Int>({ -916515383})
2021-03-11 20:36:10,887 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:36:10,888 [main:66] - Compilation checking started
2021-03-11 20:36:11,418 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith("qdzih") == (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("inzfi").xor(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:36:11,420 [main:107] - replacing (prope7, Boolean)
2021-03-11 20:36:11,420 [main:50] - replacing prope7 Boolean
2021-03-11 20:36:11,420 [main:54] - Getting value of type Boolean
2021-03-11 20:36:11,567 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:11,570 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:36:11,570 [main:61] - GENERATED IS CALL =false
2021-03-11 20:36:12,034 [main:67] - randomType = Kla0<UInt>
2021-03-11 20:36:12,174 [main:302] - generating value of type = Kla0<UInt> false depth = 0
2021-03-11 20:36:12,177 [main:112] - generating klass Kla0 text = class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}
2021-03-11 20:36:12,758 [main:194] - Type params = [UInt]
2021-03-11 20:36:13,050 [main:302] - generating value of type = SuspendFunction0<UInt> false depth = 2
2021-03-11 20:36:13,053 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 20:36:13,071 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.SuspendFunction0[DeserializedSimpleFunctionDescriptor@6e5f4dea]
2021-03-11 20:36:13,190 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:13,190 [main:78] - Generated call from random type = (Kla0<UInt>({ 2103491076.toUInt()})).t.equals("jotay")
2021-03-11 20:36:13,190 [main:114] - replacement of prope7 of type Boolean is (Kla0<UInt>({ 2103491076.toUInt()})).t.equals("jotay")
2021-03-11 20:36:13,324 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:36:13,324 [main:66] - Compilation checking started
2021-03-11 20:36:13,743 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith("qdzih") == (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("inzfi").xor(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        (Kla0<UInt>({ 2103491076.toUInt()})).t.equals("jotay") = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:36:13,745 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 20:36:13,746 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 20:36:13,746 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 20:36:13,888 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 20:36:13,894 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 20:36:14,056 [main:67] - randomType = Float
2021-03-11 20:36:14,174 [main:302] - generating value of type = Float true depth = 0
2021-03-11 20:36:14,206 [main:106] - GETTING EmptyCoroutineContext from OutputWorkScreenView
2021-03-11 20:36:14,210 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 20:36:14,210 [main:107] - replacing (prope6, Int)
2021-03-11 20:36:14,210 [main:50] - replacing prope6 Int
2021-03-11 20:36:14,210 [main:54] - Getting value of type Int
2021-03-11 20:36:14,347 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:36:14,350 [main:58] - GENERATED VALUE OF TYPE Int = 1714562055
2021-03-11 20:36:14,350 [main:61] - GENERATED IS CALL =false
2021-03-11 20:36:14,512 [main:67] - randomType = OutputWorkScreenView?
2021-03-11 20:36:14,630 [main:302] - generating value of type = OutputWorkScreenView false depth = 0
2021-03-11 20:36:14,633 [main:112] - generating klass OutputWorkScreenView text = class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}
2021-03-11 20:36:14,773 [main:194] - Type params = []
2021-03-11 20:36:14,908 [main:302] - generating value of type = SomeOutputScreenCallbacks false depth = 2
2021-03-11 20:36:14,911 [main:112] - generating klass SomeOutputScreenCallbacks text = interface SomeOutputScreenCallbacks {
    fun ontest()
}
2021-03-11 20:36:15,197 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@caa2421]
2021-03-11 20:36:15,332 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3a87ff62]
2021-03-11 20:36:15,452 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:15,455 [main:78] - Generated call from random type = (OutputWorkScreenView(TODO()))?.equals(null).compareTo(true)
2021-03-11 20:36:15,456 [main:106] - GETTING Int from OutputWorkScreenView
2021-03-11 20:36:15,460 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3a87ff62]]
2021-03-11 20:36:15,460 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:15,602 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:15,602 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3a87ff62]
2021-03-11 20:36:15,736 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:15,739 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true)
2021-03-11 20:36:15,740 [main:114] - replacement of prope6 of type Int is (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true)
2021-03-11 20:36:15,864 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:36:15,864 [main:66] - Compilation checking started
2021-03-11 20:36:16,391 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { it?.methodName?.startsWith("qdzih") == (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("inzfi").xor(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:36:16,394 [main:107] - replacing (it?.methodName?.startsWith("qdzih") == (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("inzfi").xor(false), Boolean)
2021-03-11 20:36:16,394 [main:50] - replacing it?.methodName?.startsWith("qdzih") == (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("inzfi").xor(false) Boolean
2021-03-11 20:36:16,394 [main:54] - Getting value of type Boolean
2021-03-11 20:36:16,538 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:16,541 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:36:16,541 [main:61] - GENERATED IS CALL =false
2021-03-11 20:36:16,706 [main:67] - randomType = UInt
2021-03-11 20:36:16,831 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 20:36:16,864 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@6062b27d]
2021-03-11 20:36:17,003 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 20:36:17,006 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public operator fun kotlin.ranges.UIntRange.contains(value: kotlin.UByte): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@11c98558]
2021-03-11 20:36:17,150 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 20:36:17,153 [main:78] - Generated call from random type = (1144995278.toUInt()).rangeTo(839376820.toUInt()).contains(17.toUByte())
2021-03-11 20:36:17,154 [main:106] - GETTING Boolean from OutputWorkScreenView
2021-03-11 20:36:17,160 [main:113] - Case = [public final val root: kotlin.Unit defined in OutputWorkScreenView[PropertyDescriptorImpl@7ba92dcc], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]]
2021-03-11 20:36:17,161 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]
2021-03-11 20:36:17,283 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:17,283 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).root.equals("wdwno")
2021-03-11 20:36:17,283 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]]
2021-03-11 20:36:17,283 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:17,434 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:17,435 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]
2021-03-11 20:36:17,572 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:17,573 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("kfacq").equals("zjmfb")
2021-03-11 20:36:17,573 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]]
2021-03-11 20:36:17,573 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:17,698 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:17,699 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("svbkt")
2021-03-11 20:36:17,699 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]]
2021-03-11 20:36:17,699 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:17,839 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 20:36:17,974 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:17,977 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals(null).and(false)
2021-03-11 20:36:17,977 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]]
2021-03-11 20:36:17,977 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:18,108 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:18,108 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]
2021-03-11 20:36:18,265 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:18,268 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false)
2021-03-11 20:36:18,268 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]]
2021-03-11 20:36:18,268 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:18,402 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:18,403 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]
2021-03-11 20:36:18,523 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:18,526 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("rnzil").xor(true)
2021-03-11 20:36:18,526 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]]
2021-03-11 20:36:18,526 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:18,681 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:18,681 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]
2021-03-11 20:36:18,681 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("bjudi").not()
2021-03-11 20:36:18,681 [main:114] - replacement of it?.methodName?.startsWith("qdzih") == (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("inzfi").xor(false) of type Boolean is (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false)
2021-03-11 20:36:18,815 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:36:18,815 [main:66] - Compilation checking started
2021-03-11 20:36:19,340 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in 1..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:36:19,342 [main:107] - replacing (1, Int)
2021-03-11 20:36:19,343 [main:50] - replacing 1 Int
2021-03-11 20:36:19,343 [main:54] - Getting value of type Int
2021-03-11 20:36:19,528 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:36:19,531 [main:58] - GENERATED VALUE OF TYPE Int = -44343276
2021-03-11 20:36:19,531 [main:61] - GENERATED IS CALL =false
2021-03-11 20:36:19,708 [main:67] - randomType = Long?
2021-03-11 20:36:19,831 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:36:19,873 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@398d1b9b]
2021-03-11 20:36:19,873 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@40dfe4e0]
2021-03-11 20:36:19,873 [main:78] - Generated call from random type = (9208892766563778657)?.toInt().inv()
2021-03-11 20:36:19,874 [main:106] - GETTING Int from OutputWorkScreenView
2021-03-11 20:36:19,878 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3a87ff62]]
2021-03-11 20:36:19,878 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@49ec206c]
2021-03-11 20:36:20,014 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:20,014 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3a87ff62]
2021-03-11 20:36:20,149 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:20,152 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("elbsd").compareTo(true)
2021-03-11 20:36:20,152 [main:114] - replacement of 1 of type Int is -44343276
2021-03-11 20:36:20,278 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-11 20:36:20,278 [main:66] - Compilation checking started
2021-03-11 20:36:20,808 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:36:20,810 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 20:36:20,810 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 20:36:20,810 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:36:20,947 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:36:20,950 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:36:21,103 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:36:21,110 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:36:21,570 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:36:21,573 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 20:36:21,576 [main:302] - generating value of type = Any false depth = 5
2021-03-11 20:36:21,577 [main:95] - GENERATED = require(true, { "ahywv"})
2021-03-11 20:36:21,577 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true, { "ahywv"})}
2021-03-11 20:36:21,577 [main:61] - GENERATED IS CALL =false
2021-03-11 20:36:22,054 [main:67] - randomType = Triple<ULong, Int, LinkedHashSet<String>>
2021-03-11 20:36:22,175 [main:302] - generating value of type = Triple<ULong, Int, LinkedHashSet<String>> false depth = 0
2021-03-11 20:36:22,321 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: ULong, second: Int, third: LinkedHashSet<String>): Triple<ULong, Int, LinkedHashSet<String>> = TODO()
2021-03-11 20:36:22,325 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: ULong, second: Int, third: LinkedHashSet<String>): Triple<ULong, Int, LinkedHashSet<String>> = TODO()
2021-03-11 20:36:22,468 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 20:36:22,471 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:36:22,474 [main:302] - generating value of type = LinkedHashSet<String> false depth = 3
2021-03-11 20:36:22,605 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(elements: kotlin.collections.Collection<String>): LinkedHashSet<String> = TODO()
2021-03-11 20:36:22,608 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(elements: kotlin.collections.Collection<String>): LinkedHashSet<String> = TODO()
2021-03-11 20:36:22,920 [main:302] - generating value of type = Collection<String> false depth = 6
2021-03-11 20:36:23,046 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int): Collection<String> = TODO()
2021-03-11 20:36:23,050 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int): Collection<String> = TODO()
2021-03-11 20:36:23,359 [main:302] - generating value of type = Int true depth = 9
2021-03-11 20:36:23,362 [main:95] - GENERATED = HashSet<String>(-1941289738)
2021-03-11 20:36:23,362 [main:95] - GENERATED = LinkedHashSet<String>(HashSet<String>(-1941289738))
2021-03-11 20:36:23,362 [main:95] - GENERATED = Triple<ULong, Int, LinkedHashSet<String>>(7980967210079203254.toULong(), 730840744, LinkedHashSet<String>(HashSet<String>(-1941289738)))
2021-03-11 20:36:23,389 [main:106] - GETTING Function0<Unit> from OutputWorkScreenView
2021-03-11 20:36:23,395 [main:114] - replacement of prope8 of type Function0<Unit> is { require(true, { "ahywv"})}
2021-03-11 20:36:23,513 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:36:23,514 [main:66] - Compilation checking started
2021-03-11 20:36:23,878 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            { require(true, { "ahywv"})}()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:36:23,880 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 20:36:23,880 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 20:36:23,880 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 20:36:24,015 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 20:36:24,021 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 20:36:24,331 [main:67] - randomType = Kla0<Function1<Boolean, Long>>
2021-03-11 20:36:24,472 [main:302] - generating value of type = Kla0<Function1<Boolean, Long>> false depth = 0
2021-03-11 20:36:24,475 [main:112] - generating klass Kla0 text = class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}
2021-03-11 20:36:25,230 [main:194] - Type params = [Function1<Boolean, Long>]
2021-03-11 20:36:25,533 [main:302] - generating value of type = SuspendFunction0<Function1<Boolean, Long>> false depth = 2
2021-03-11 20:36:25,536 [main:302] - generating value of type = Function1<Boolean, Long> false depth = 3
2021-03-11 20:36:25,538 [main:302] - generating value of type = Long true depth = 4
2021-03-11 20:36:25,558 [main:106] - GETTING EmptyCoroutineContext from OutputWorkScreenView
2021-03-11 20:36:25,565 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 20:36:25,565 [main:107] - replacing (this, Kla2)
2021-03-11 20:36:25,565 [main:50] - replacing this Kla2
2021-03-11 20:36:25,565 [main:54] - Getting value of type Kla2
2021-03-11 20:36:25,684 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 20:36:25,687 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-11 20:36:25,687 [main:58] - GENERATED VALUE OF TYPE Kla2 = Kla2()
2021-03-11 20:36:25,687 [main:61] - GENERATED IS CALL =true
2021-03-11 20:36:26,001 [main:67] - randomType = List<UInt>
2021-03-11 20:36:26,002 [main:106] - GETTING Kla2 from OutputWorkScreenView
2021-03-11 20:36:26,009 [main:114] - replacement of this of type Kla2 is Kla2()
2021-03-11 20:36:26,132 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:36:26,132 [main:66] - Compilation checking started
2021-03-11 20:36:26,655 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:36:26,657 [main:107] - replacing (source1.fu5(), Ty1)
2021-03-11 20:36:26,657 [main:50] - replacing source1.fu5() Ty1
2021-03-11 20:36:26,657 [main:54] - Getting value of type Ty1
2021-03-11 20:36:26,810 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-11 20:36:26,816 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-11 20:36:30,818 [main:67] - randomType = Pair<Kla2, List<Triple<Function2<Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, Byte?, Double>, UInt, Kla4>>>
2021-03-11 20:36:30,936 [main:302] - generating value of type = Pair<Kla2, List<Triple<Function2<Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, Byte?, Double>, UInt, Kla4>>> false depth = 0
2021-03-11 20:36:31,100 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla2, second: List<Triple<Function2<Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, Byte?, Double>, UInt, Kla4>>): Pair<Kla2, List<Triple<Function2<Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, Byte?, Double>, UInt, Kla4>>> = TODO()
2021-03-11 20:36:31,105 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla2, second: List<Triple<Function2<Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, Byte?, Double>, UInt, Kla4>>): Pair<Kla2, List<Triple<Function2<Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, Byte?, Double>, UInt, Kla4>>> = TODO()
2021-03-11 20:36:31,254 [main:302] - generating value of type = Kla2 false depth = 3
2021-03-11 20:36:31,257 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-11 20:36:31,257 [main:302] - generating value of type = List<Triple<Function2<Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, Byte?, Double>, UInt, Kla4>> false depth = 3
2021-03-11 20:36:31,403 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(elements: Triple<Function2<Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, Byte?, Double>, UInt, Kla4>): List<Triple<Function2<Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, Byte?, Double>, UInt, Kla4>> = TODO()
2021-03-11 20:36:31,408 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(elements: Triple<Function2<Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, Byte?, Double>, UInt, Kla4>): List<Triple<Function2<Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, Byte?, Double>, UInt, Kla4>> = TODO()
2021-03-11 20:36:31,566 [main:302] - generating value of type = Triple<Function2<Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, Byte?, Double>, UInt, Kla4> false depth = 6
2021-03-11 20:36:31,719 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Function2<Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, Byte?, Double>, second: UInt, third: Kla4): Triple<Function2<Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, Byte?, Double>, UInt, Kla4> = TODO()
2021-03-11 20:36:31,722 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Function2<Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, Byte?, Double>, second: UInt, third: Kla4): Triple<Function2<Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, Byte?, Double>, UInt, Kla4> = TODO()
2021-03-11 20:36:31,857 [main:302] - generating value of type = Function2<Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, Byte?, Double> false depth = 9
2021-03-11 20:36:31,860 [main:302] - generating value of type = Double true depth = 10
2021-03-11 20:36:31,863 [main:302] - generating value of type = UInt true depth = 9
2021-03-11 20:36:31,865 [main:302] - generating value of type = Kla4 false depth = 9
2021-03-11 20:36:31,868 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}
2021-03-11 20:36:31,868 [main:95] - GENERATED = Triple<Function2<Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, Byte?, Double>, UInt, Kla4>({a: Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, b: Byte? -> 0.4189197668126168}, 1530349817.toUInt(), Kla4())
2021-03-11 20:36:31,869 [main:95] - GENERATED = listOfNotNull<Triple<Function2<Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, Byte?, Double>, UInt, Kla4>>(Triple<Function2<Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, Byte?, Double>, UInt, Kla4>({a: Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, b: Byte? -> 0.4189197668126168}, 1530349817.toUInt(), Kla4()))
2021-03-11 20:36:31,870 [main:95] - GENERATED = Pair<Kla2, List<Triple<Function2<Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, Byte?, Double>, UInt, Kla4>>>(Kla2(), listOfNotNull<Triple<Function2<Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, Byte?, Double>, UInt, Kla4>>(Triple<Function2<Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, Byte?, Double>, UInt, Kla4>({a: Function1<Triple<UShort, Function1<MutableMap<Sequence<Int>, Boolean>, Pair<Char, ULong>>, SomeOutputScreenCallbacks?>?, Triple<Kla0<Boolean>, Byte, Array<OutputWorkScreenView>>?>, b: Byte? -> 0.4189197668126168}, 1530349817.toUInt(), Kla4())))
2021-03-11 20:36:31,927 [main:106] - GETTING Ty1 from OutputWorkScreenView
2021-03-11 20:36:31,933 [main:111] - Cant find and generate replacement for source1.fu5() type Ty1
2021-03-11 20:36:31,934 [main:107] - replacing (fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    }, Kla0<Ty3>)
2021-03-11 20:36:31,934 [main:50] - replacing fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    } Kla0<Ty3>
2021-03-11 20:36:31,934 [main:54] - Getting value of type Kla0<Ty3>
2021-03-11 20:36:32,073 [main:302] - generating value of type = Kla0<Ty3> false depth = 0
2021-03-11 20:36:32,076 [main:112] - generating klass Kla0 text = class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}
2021-03-11 20:36:32,531 [main:194] - Type params = [List<Long>]
2021-03-11 20:36:32,807 [main:302] - generating value of type = SuspendFunction0<List<Long>> false depth = 2
2021-03-11 20:36:32,810 [main:302] - generating value of type = List<Long> false depth = 3
2021-03-11 20:36:32,955 [main:43] - GENERATING CALL OF fun <T> MutableList(size: kotlin.Int, init: (index: kotlin.Int)->Long): List<Long> = TODO()
2021-03-11 20:36:32,959 [main:61] - WITHOUT TYPE PARAMS = fun <T> MutableList(size: kotlin.Int, init: (index: kotlin.Int)->Long): List<Long> = TODO()
2021-03-11 20:36:33,413 [main:302] - generating value of type = Int true depth = 6
2021-03-11 20:36:33,416 [main:302] - generating value of type = Function1<[@kotlin.ParameterName] Int, Long> false depth = 6
2021-03-11 20:36:33,419 [main:302] - generating value of type = Long true depth = 7
2021-03-11 20:36:33,422 [main:95] - GENERATED = MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})
2021-03-11 20:36:33,422 [main:58] - GENERATED VALUE OF TYPE Kla0<Ty3> = Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})
2021-03-11 20:36:33,423 [main:61] - GENERATED IS CALL =true
2021-03-11 20:36:33,590 [main:67] - randomType = Kla5?
2021-03-11 20:36:33,713 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 20:36:33,716 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}
2021-03-11 20:36:33,727 [main:106] - GETTING Kla0<Ty3> from OutputWorkScreenView
2021-03-11 20:36:33,734 [main:114] - replacement of fu0 {
        {a: Ty1, b: Ty2 -> }(source1.fu5(), source2.fu5())
    } of type Kla0<Ty3> is Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})
2021-03-11 20:36:33,871 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:36:33,871 [main:66] - Compilation checking started
2021-03-11 20:36:34,459 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:36:34,461 [main:107] - replacing ({}, Function0<Unit>)
2021-03-11 20:36:34,461 [main:50] - replacing {} Function0<Unit>
2021-03-11 20:36:34,461 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:36:34,598 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:36:34,601 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:36:34,746 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:36:34,750 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:36:35,201 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:36:35,204 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 20:36:35,207 [main:302] - generating value of type = Any false depth = 5
2021-03-11 20:36:35,207 [main:95] - GENERATED = require(true, { "nqnav"})
2021-03-11 20:36:35,207 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true, { "nqnav"})}
2021-03-11 20:36:35,207 [main:61] - GENERATED IS CALL =false
2021-03-11 20:36:35,354 [main:67] - randomType = HashSet<String>
2021-03-11 20:36:35,492 [main:302] - generating value of type = HashSet<String> false depth = 0
2021-03-11 20:36:35,633 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: String): HashSet<Strg> = TODO()
2021-03-11 20:36:35,637 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: String): HashSet<Strg> = TODO()
2021-03-11 20:36:35,781 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:36:35,786 [main:95] - GENERATED = hashSetOf<String>("dzlfp")
2021-03-11 20:36:35,915 [main:106] - GETTING Function0<Unit> from OutputWorkScreenView
2021-03-11 20:36:35,919 [main:114] - replacement of {} of type Function0<Unit> is { require(true, { "nqnav"})}
2021-03-11 20:36:36,055 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:36:36,056 [main:66] - Compilation checking started
2021-03-11 20:36:36,607 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:36:36,609 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 20:36:36,610 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 20:36:36,610 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:36:36,747 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:36:36,750 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:36:36,891 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:36:36,895 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:36:37,186 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:36:37,189 [main:95] - GENERATED = require(false)
2021-03-11 20:36:37,189 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 20:36:37,189 [main:61] - GENERATED IS CALL =false
2021-03-11 20:36:37,655 [main:67] - randomType = Function2<UShort, Kla4, Boolean?>
2021-03-11 20:36:37,656 [main:106] - GETTING Function0<Unit> from OutputWorkScreenView
2021-03-11 20:36:37,661 [main:114] - replacement of prope8 of type Function0<Unit> is { require(false)}
2021-03-11 20:36:37,796 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:36:37,797 [main:66] - Compilation checking started
2021-03-11 20:36:38,153 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if (prope6 != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        { require(false)}()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:36:38,155 [main:107] - replacing (prope6, Int)
2021-03-11 20:36:38,155 [main:50] - replacing prope6 Int
2021-03-11 20:36:38,156 [main:54] - Getting value of type Int
2021-03-11 20:36:38,290 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:36:38,293 [main:58] - GENERATED VALUE OF TYPE Int = 545274002
2021-03-11 20:36:38,293 [main:61] - GENERATED IS CALL =false
2021-03-11 20:36:38,599 [main:67] - randomType = LinkedHashMap<Int, Char>
2021-03-11 20:36:38,737 [main:302] - generating value of type = LinkedHashMap<Int, Char> false depth = 0
2021-03-11 20:36:38,879 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashMap<Int, Char> = TODO()
2021-03-11 20:36:38,883 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashMap<Int, Char> = TODO()
2021-03-11 20:36:39,336 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:36:39,339 [main:302] - generating value of type = Float true depth = 3
2021-03-11 20:36:39,342 [main:95] - GENERATED = LinkedHashMap<Int, Char>(-585320179, 0.37917495f)
2021-03-11 20:36:39,485 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fb50dd8]
2021-03-11 20:36:39,624 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:36:39,627 [main:78] - Generated call from random type = (LinkedHashMap<Int, Char>(-585320179, 0.37917495f)).size.compareTo(-66)
2021-03-11 20:36:39,628 [main:114] - replacement of prope6 of type Int is (LinkedHashMap<Int, Char>(-585320179, 0.37917495f)).size.compareTo(-66)
2021-03-11 20:36:39,765 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:36:39,765 [main:66] - Compilation checking started
2021-03-11 20:36:40,397 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((LinkedHashMap<Int, Char>(-585320179, 0.37917495f)).size.compareTo(-66) != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:36:40,401 [main:107] - replacing (prope4, Result<Any?>)
2021-03-11 20:36:40,401 [main:50] - replacing prope4 Result<Any?>
2021-03-11 20:36:40,402 [main:54] - Getting value of type Result<Any?>
2021-03-11 20:36:40,601 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 20:36:40,744 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 20:36:40,748 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 20:36:41,043 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 20:36:41,046 [main:302] - generating value of type = Any false depth = 4
2021-03-11 20:36:41,047 [main:95] - GENERATED = runCatching<Any?>({ "dcqsf"})
2021-03-11 20:36:41,047 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "dcqsf"})
2021-03-11 20:36:41,047 [main:61] - GENERATED IS CALL =true
2021-03-11 20:36:41,213 [main:67] - randomType = Char?
2021-03-11 20:36:41,339 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:36:41,368 [main:106] - GETTING Result<Any?> from OutputWorkScreenView
2021-03-11 20:36:41,372 [main:114] - replacement of prope4 of type Result<Any?> is runCatching<Any?>({ "dcqsf"})
2021-03-11 20:36:41,525 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:36:41,526 [main:66] - Compilation checking started
2021-03-11 20:36:42,183 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
x(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((LinkedHashMap<Int, Char>(-585320179, 0.37917495f)).size.compareTo(-66) != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:36:42,186 [main:107] - replacing (x, Function1<Ty0, Unit>)
2021-03-11 20:36:42,187 [main:50] - replacing x Function1<Ty0, Unit>
2021-03-11 20:36:42,187 [main:54] - Getting value of type Function1<Ty0, Unit>
2021-03-11 20:36:42,350 [main:302] - generating value of type = Function1<Ty0, Unit> false depth = 0
2021-03-11 20:36:42,353 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:36:42,520 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:36:42,526 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:36:42,875 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:36:42,878 [main:95] - GENERATED = check(true)
2021-03-11 20:36:42,878 [main:58] - GENERATED VALUE OF TYPE Function1<Ty0, Unit> = {a: Ty0 -> check(true)}
2021-03-11 20:36:42,878 [main:61] - GENERATED IS CALL =false
2021-03-11 20:36:43,050 [main:67] - randomType = List<String>
2021-03-11 20:36:43,052 [main:106] - GETTING Function1<Ty0, Unit> from OutputWorkScreenView
2021-03-11 20:36:43,059 [main:114] - replacement of x of type Function1<Ty0, Unit> is {a: Ty0 -> check(true)}
2021-03-11 20:36:43,182 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:36:43,182 [main:66] - Compilation checking started
2021-03-11 20:36:43,728 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((LinkedHashMap<Int, Char>(-585320179, 0.37917495f)).size.compareTo(-66) != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:36:43,731 [main:107] - replacing (c, Continuation<*>)
2021-03-11 20:36:43,731 [main:50] - replacing c Continuation<*>
2021-03-11 20:36:43,731 [main:54] - Getting value of type Continuation<*>
2021-03-11 20:36:43,881 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 20:36:44,027 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:36:44,031 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:36:44,500 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 20:36:44,631 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:36:44,635 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:36:44,962 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 20:36:45,099 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:36:45,103 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:36:45,578 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:36:45,578 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:36:45,578 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:36:45,578 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 20:36:45,744 [main:67] - randomType = UInt
2021-03-11 20:36:45,884 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 20:36:45,928 [main:106] - GETTING Continuation<*> from OutputWorkScreenView
2021-03-11 20:36:45,934 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 20:36:45,934 [main:107] - replacing (prope9 != null, Boolean)
2021-03-11 20:36:45,934 [main:50] - replacing prope9 != null Boolean
2021-03-11 20:36:45,934 [main:54] - Getting value of type Boolean
2021-03-11 20:36:46,057 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:46,060 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:36:46,061 [main:61] - GENERATED IS CALL =false
2021-03-11 20:36:46,072 [main:67] - randomType = Kla5
2021-03-11 20:36:46,220 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 20:36:46,224 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((LinkedHashMap<Int, Char>(-585320179, 0.37917495f)).size.compareTo(-66) != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}
2021-03-11 20:36:46,234 [main:149] - GENERATING call of type public final fun fu11(): kotlin.Unit defined in Kla5[SimpleFunctionDescriptorImpl@651e9470]
2021-03-11 20:36:46,234 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]
2021-03-11 20:36:46,382 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:46,382 [main:78] - Generated call from random type = (Kla5()).fu11().equals("zpbif")
2021-03-11 20:36:46,382 [main:114] - replacement of prope9 != null of type Boolean is (Kla5()).fu11().equals("zpbif")
2021-03-11 20:36:46,507 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:36:46,507 [main:66] - Compilation checking started
2021-03-11 20:36:46,901 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while ((Kla5()).fu11().equals("zpbif")) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((LinkedHashMap<Int, Char>(-585320179, 0.37917495f)).size.compareTo(-66) != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:36:46,903 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 20:36:46,903 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 20:36:46,903 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:36:47,043 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:36:47,046 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:36:47,191 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:36:47,195 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:36:47,499 [main:302] - generating value of type = Any false depth = 4
2021-03-11 20:36:47,499 [main:95] - GENERATED = print("jgoto")
2021-03-11 20:36:47,499 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("jgoto")}
2021-03-11 20:36:47,499 [main:61] - GENERATED IS CALL =false
2021-03-11 20:36:48,158 [main:67] - randomType = Triple<OutputWorkScreenView, Byte, Kla0<UShort>>
2021-03-11 20:36:48,280 [main:302] - generating value of type = Triple<OutputWorkScreenView, Byte, Kla0<UShort>> false depth = 0
2021-03-11 20:36:48,430 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: OutputWorkScreenView, second: Byte, third: Kla0<UShort>): Triple<OutputWorkScreenView, Byte, Kla0<UShort>> = TODO()
2021-03-11 20:36:48,434 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: OutputWorkScreenView, second: Byte, third: Kla0<UShort>): Triple<OutputWorkScreenView, Byte, Kla0<UShort>> = TODO()
2021-03-11 20:36:48,581 [main:302] - generating value of type = OutputWorkScreenView false depth = 3
2021-03-11 20:36:48,584 [main:112] - generating klass OutputWorkScreenView text = class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}
2021-03-11 20:36:48,710 [main:194] - Type params = []
2021-03-11 20:36:48,857 [main:302] - generating value of type = SomeOutputScreenCallbacks false depth = 5
2021-03-11 20:36:48,859 [main:112] - generating klass SomeOutputScreenCallbacks text = interface SomeOutputScreenCallbacks {
    fun ontest()
}
2021-03-11 20:36:49,140 [main:302] - generating value of type = Byte true depth = 3
2021-03-11 20:36:49,143 [main:302] - generating value of type = Kla0<UShort> false depth = 3
2021-03-11 20:36:49,146 [main:112] - generating klass Kla0 text = class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}
2021-03-11 20:36:49,603 [main:194] - Type params = [UShort]
2021-03-11 20:36:49,901 [main:302] - generating value of type = SuspendFunction0<UShort> false depth = 5
2021-03-11 20:36:49,904 [main:302] - generating value of type = UShort true depth = 6
2021-03-11 20:36:49,907 [main:95] - GENERATED = Triple<OutputWorkScreenView, Byte, Kla0<UShort>>(OutputWorkScreenView(TODO()), 98, Kla0<UShort>({ 7114.toUShort()}))
2021-03-11 20:36:49,929 [main:106] - GETTING Function0<Unit> from OutputWorkScreenView
2021-03-11 20:36:49,935 [main:114] - replacement of prope8 of type Function0<Unit> is { print("jgoto")}
2021-03-11 20:36:50,059 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:36:50,060 [main:66] - Compilation checking started
2021-03-11 20:36:50,412 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((LinkedHashMap<Int, Char>(-585320179, 0.37917495f)).size.compareTo(-66) != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.{ print("jgoto")} = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:36:50,415 [main:107] - replacing ({
        prope4.getOrThrow()
    }, Any?)
2021-03-11 20:36:50,415 [main:50] - replacing {
        var res = "FAIL"
prope4.getOrThrow()
    } Any?
2021-03-11 20:36:50,415 [main:54] - Getting value of type Any?
2021-03-11 20:36:50,556 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:50,557 [main:58] - GENERATED VALUE OF TYPE Any? = "mlhyw"
2021-03-11 20:36:50,557 [main:61] - GENERATED IS CALL =false
2021-03-11 20:36:50,871 [main:67] - randomType = Kla3<Double>
2021-03-11 20:36:51,012 [main:302] - generating value of type = Kla3<Double> false depth = 0
2021-03-11 20:36:51,015 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 20:36:51,641 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 20:36:51,644 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}
2021-03-11 20:36:51,667 [main:106] - GETTING Any? from OutputWorkScreenView
2021-03-11 20:36:51,674 [main:114] - replacement of {
        var res = "FAIL"
prope4.getOrThrow()
    } of type Any? is "mlhyw"
2021-03-11 20:36:51,798 [main:33] - Trying to replace BLOCK on Element(STRING_TEMPLATE)
2021-03-11 20:36:51,799 [main:66] - Compilation checking started
2021-03-11 20:36:51,804 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:36:51,804 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) "mlhyw"
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((LinkedHashMap<Int, Char>(-585320179, 0.37917495f)).size.compareTo(-66) != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:36:51,806 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got ", String)
2021-03-11 20:36:51,807 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " String
2021-03-11 20:36:51,807 [main:54] - Getting value of type String
2021-03-11 20:36:51,946 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:36:51,949 [main:58] - GENERATED VALUE OF TYPE String = "boagh"
2021-03-11 20:36:51,949 [main:61] - GENERATED IS CALL =false
2021-03-11 20:36:52,114 [main:67] - randomType = Sequence<Boolean>
2021-03-11 20:36:52,115 [main:106] - GETTING String from OutputWorkScreenView
2021-03-11 20:36:52,121 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla4())?.equals("obdtm").compareTo(true) + ", got " of type String is "boagh"
2021-03-11 20:36:52,244 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:36:52,245 [main:66] - Compilation checking started
2021-03-11 20:36:52,821 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((LinkedHashMap<Int, Char>(-585320179, 0.37917495f)).size.compareTo(-66) != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:36:52,825 [main:107] - replacing (prope4, Any?)
2021-03-11 20:36:52,825 [main:50] - replacing prope4 Any?
2021-03-11 20:36:52,825 [main:54] - Getting value of type Any?
2021-03-11 20:36:52,982 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:52,983 [main:58] - GENERATED VALUE OF TYPE Any? = "xwtbz"
2021-03-11 20:36:52,983 [main:61] - GENERATED IS CALL =false
2021-03-11 20:36:52,989 [main:67] - randomType = Float
2021-03-11 20:36:53,128 [main:302] - generating value of type = Float true depth = 0
2021-03-11 20:36:53,179 [main:106] - GETTING Any? from OutputWorkScreenView
2021-03-11 20:36:53,186 [main:114] - replacement of prope4 of type Any? is "xwtbz"
2021-03-11 20:36:53,307 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:36:53,307 [main:66] - Compilation checking started
2021-03-11 20:36:53,667 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2()."xwtbz" = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((LinkedHashMap<Int, Char>(-585320179, 0.37917495f)).size.compareTo(-66) != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false)) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:36:53,669 [main:107] - replacing ((LinkedHashMap<Int, Char>(-585320179, 0.37917495f)).size.compareTo(-66) != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false), Boolean)
2021-03-11 20:36:53,669 [main:50] - replacing (LinkedHashMap<Int, Char>(-585320179, 0.37917495f)).size.compareTo(-66) != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false) Boolean
2021-03-11 20:36:53,669 [main:54] - Getting value of type Boolean
2021-03-11 20:36:53,813 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:53,816 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:36:53,816 [main:61] - GENERATED IS CALL =false
2021-03-11 20:36:53,976 [main:67] - randomType = UByte
2021-03-11 20:36:54,101 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 20:36:54,131 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@9fe8745]
2021-03-11 20:36:54,131 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2e36a937]
2021-03-11 20:36:54,271 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:54,271 [main:78] - Generated call from random type = (6.toUByte()).toUShort().equals("tnwpo")
2021-03-11 20:36:54,271 [main:114] - replacement of (LinkedHashMap<Int, Char>(-585320179, 0.37917495f)).size.compareTo(-66) != (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("lvbou").compareTo(false) of type Boolean is (6.toUByte()).toUShort().equals("tnwpo")
2021-03-11 20:36:54,410 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:36:54,410 [main:66] - Compilation checking started
2021-03-11 20:36:54,959 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:36:54,961 [main:107] - replacing (true, Boolean)
2021-03-11 20:36:54,961 [main:50] - replacing true Boolean
2021-03-11 20:36:54,961 [main:54] - Getting value of type Boolean
2021-03-11 20:36:55,106 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:55,109 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:36:55,109 [main:61] - GENERATED IS CALL =false
2021-03-11 20:36:55,121 [main:67] - randomType = Kla1
2021-03-11 20:36:55,258 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 20:36:55,261 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}
2021-03-11 20:36:55,383 [main:194] - Type params = []
2021-03-11 20:36:55,524 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 20:36:55,657 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:36:55,661 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:36:55,968 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 20:36:56,116 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:36:56,120 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:36:56,599 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-11 20:36:56,736 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:36:56,740 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:36:57,221 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-11 20:36:57,388 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:36:57,392 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:36:57,864 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:36:57,864 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:36:57,864 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:36:57,864 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:36:57,880 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@19b051da]
2021-03-11 20:36:58,007 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:36:58,008 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]
2021-03-11 20:36:58,138 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:36:58,141 [main:78] - Generated call from random type = (Kla1()).equals("vmrgv").or(true)
2021-03-11 20:36:58,141 [main:114] - replacement of true of type Boolean is (Kla1()).equals("vmrgv").or(true)
2021-03-11 20:36:58,260 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:36:58,261 [main:66] - Compilation checking started
2021-03-11 20:36:58,799 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or(true)
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:36:58,802 [main:107] - replacing (prope4.getOrThrow(), Ty0)
2021-03-11 20:36:58,802 [main:50] - replacing prope4.getOrThrow() Ty0
2021-03-11 20:36:58,802 [main:54] - Getting value of type Ty0
2021-03-11 20:36:58,962 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 20:36:58,970 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 20:36:59,771 [main:67] - randomType = Function2<String, Kla1?, Function1<UInt, UInt>>
2021-03-11 20:36:59,772 [main:106] - GETTING Ty0 from OutputWorkScreenView
2021-03-11 20:36:59,776 [main:111] - Cant find and generate replacement for prope4.getOrThrow() type Ty0
2021-03-11 20:36:59,776 [main:107] - replacing ({
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }, Unit?)
2021-03-11 20:36:59,777 [main:50] - replacing {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    } Unit?
2021-03-11 20:36:59,777 [main:54] - Getting value of type Unit?
2021-03-11 20:36:59,902 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 20:37:00,025 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:37:00,028 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:37:00,423 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:37:00,425 [main:302] - generating value of type = Function1<Int, Unit> false depth = 3
2021-03-11 20:37:00,428 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 20:37:00,567 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:37:00,570 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:37:00,845 [main:302] - generating value of type = Boolean true depth = 7
2021-03-11 20:37:00,848 [main:95] - GENERATED = check(true)
2021-03-11 20:37:00,849 [main:95] - GENERATED = repeat(1706927482, {a: Int -> check(true)})
2021-03-11 20:37:00,849 [main:58] - GENERATED VALUE OF TYPE Unit? = repeat(1706927482, {a: Int -> check(true)})
2021-03-11 20:37:00,849 [main:61] - GENERATED IS CALL =true
2021-03-11 20:37:00,988 [main:67] - randomType = UByte?
2021-03-11 20:37:01,106 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 20:37:01,138 [main:106] - GETTING Unit? from OutputWorkScreenView
2021-03-11 20:37:01,142 [main:113] - Case = [public final val root: kotlin.Unit defined in OutputWorkScreenView[PropertyDescriptorImpl@7ba92dcc]]
2021-03-11 20:37:01,142 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    }))?.root
2021-03-11 20:37:01,142 [main:114] - replacement of {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    } of type Unit? is repeat(1706927482, {a: Int -> check(true)})
2021-03-11 20:37:01,258 [main:33] - Trying to replace BLOCK on Element(CALL_EXPRESSION)
2021-03-11 20:37:01,259 [main:66] - Compilation checking started
2021-03-11 20:37:01,264 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:37:01,264 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) repeat(1706927482, {a: Int -> check(true)})
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or(true)
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:37:01,266 [main:107] - replacing (c, SuspendFunction0<Unit>)
2021-03-11 20:37:01,266 [main:50] - replacing c SuspendFunction0<Unit>
2021-03-11 20:37:01,266 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-11 20:37:01,383 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 20:37:01,386 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:37:01,516 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:37:01,520 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:37:01,912 [main:302] - generating value of type = Int true depth = 4
2021-03-11 20:37:01,915 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 20:37:01,918 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 20:37:02,040 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:37:02,044 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:37:02,323 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 20:37:02,326 [main:95] - GENERATED = require(true)
2021-03-11 20:37:02,326 [main:95] - GENERATED = repeat(-990202651, {a: Int -> require(true)})
2021-03-11 20:37:02,326 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { repeat(-990202651, {a: Int -> require(true)})}
2021-03-11 20:37:02,326 [main:61] - GENERATED IS CALL =false
2021-03-11 20:37:02,331 [main:67] - randomType = String
2021-03-11 20:37:02,464 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:37:02,488 [main:106] - GETTING SuspendFunction0<Unit> from OutputWorkScreenView
2021-03-11 20:37:02,494 [main:114] - replacement of c of type SuspendFunction0<Unit> is { repeat(-990202651, {a: Int -> require(true)})}
2021-03-11 20:37:02,630 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:37:02,630 [main:66] - Compilation checking started
2021-03-11 20:37:03,022 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
{ repeat(-990202651, {a: Int -> require(true)})}.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { true} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or(true)
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:37:03,147 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-11 20:37:03,265 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 20:37:03,265 [main:66] - Compilation checking started
2021-03-11 20:37:03,794 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1743466119, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or(true)
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:37:03,794 [main:141] - TRYING TO REPLACE CONSTANT 1743466119
2021-03-11 20:37:03,923 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:37:03,924 [main:66] - Compilation checking started
2021-03-11 20:37:04,530 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1688603679, 1688603679).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or(true)
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:37:04,531 [main:141] - TRYING TO REPLACE CONSTANT 1688603679
2021-03-11 20:37:04,649 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:37:04,649 [main:66] - Compilation checking started
2021-03-11 20:37:05,266 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(278442175))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or(true)
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:37:05,267 [main:141] - TRYING TO REPLACE CONSTANT 278442175
2021-03-11 20:37:05,384 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:37:05,385 [main:66] - Compilation checking started
2021-03-11 20:37:05,910 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or(true)
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:37:05,911 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-11 20:37:06,031 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:37:06,031 [main:66] - Compilation checking started
2021-03-11 20:37:06,380 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(prope4.isSuccess)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or(true)
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:37:06,381 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-11 20:37:06,499 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-11 20:37:06,499 [main:66] - Compilation checking started
2021-03-11 20:37:06,845 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or(true)
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:37:06,845 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-11 20:37:06,965 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:37:06,965 [main:66] - Compilation checking started
2021-03-11 20:37:07,325 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and(false)
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(prope4.isSuccess, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or(true)
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:37:07,326 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-11 20:37:07,467 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:37:07,467 [main:66] - Compilation checking started
2021-03-11 20:37:08,045 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or(true)
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:37:08,045 [main:141] - TRYING TO REPLACE CONSTANT null
2021-03-11 20:37:08,181 [main:33] - Trying to replace Element(NULL) on Element(NULL)
2021-03-11 20:37:08,182 [main:141] - TRYING TO REPLACE CONSTANT 916515383
2021-03-11 20:37:08,310 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:37:08,310 [main:66] - Compilation checking started
2021-03-11 20:37:08,691 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ prope6})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo(true) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or(true)
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:37:08,692 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-11 20:37:08,830 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:37:08,830 [main:66] - Compilation checking started
2021-03-11 20:37:09,415 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or(true)
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:37:09,415 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-11 20:37:09,559 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 20:37:09,559 [main:66] - Compilation checking started
2021-03-11 20:37:09,946 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(or(true)) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or(true)
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:37:09,946 [main:141] - TRYING TO REPLACE CONSTANT 44343276
2021-03-11 20:37:10,094 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:37:10,095 [main:66] - Compilation checking started
2021-03-11 20:37:10,485 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(1866506734, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo")))..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or(true)
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:37:10,485 [main:141] - TRYING TO REPLACE CONSTANT 1866506734
2021-03-11 20:37:10,638 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:37:10,639 [main:66] - Compilation checking started
2021-03-11 20:37:11,213 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or(true)
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:37:11,213 [main:141] - TRYING TO REPLACE CONSTANT 2873252555121437490
2021-03-11 20:37:11,363 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:37:11,363 [main:66] - Compilation checking started
2021-03-11 20:37:11,964 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-11 20:37:12,153 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:37:12,154 [main:66] - Compilation checking started
2021-03-11 20:37:12,559 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(isSuccess, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or(true)
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:37:12,559 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-11 20:37:12,719 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 20:37:12,720 [main:66] - Compilation checking started
2021-03-11 20:37:13,124 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(not())}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or(true)
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:37:13,124 [main:141] - TRYING TO REPLACE CONSTANT 6
2021-03-11 20:37:13,266 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:37:13,266 [main:66] - Compilation checking started
2021-03-11 20:37:13,838 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-11 20:37:13,991 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:37:13,991 [main:66] - Compilation checking started
2021-03-11 20:37:14,589 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:37:14,590 [main:41] - AFTER TRY 1 res = 

import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}


2021-03-11 20:37:14,917 [main:112] - generating klass SomeOutputScreenCallbacks text = interface SomeOutputScreenCallbacks {
    fun ontest()
}
2021-03-11 20:37:15,206 [main:112] - generating klass OutputWorkScreenView text = class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}
2021-03-11 20:37:15,341 [main:194] - Type params = []
2021-03-11 20:37:15,490 [main:302] - generating value of type = SomeOutputScreenCallbacks false depth = 1
2021-03-11 20:37:15,493 [main:112] - generating klass SomeOutputScreenCallbacks text = interface SomeOutputScreenCallbacks {
    fun ontest()
}
2021-03-11 20:37:15,778 [main:112] - generating klass Kla0 text = class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}
2021-03-11 20:37:16,086 [main:194] - Type params = [Long]
2021-03-11 20:37:16,391 [main:302] - generating value of type = SuspendFunction0<Long> false depth = 1
2021-03-11 20:37:16,394 [main:302] - generating value of type = Long true depth = 2
2021-03-11 20:37:16,397 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}
2021-03-11 20:37:16,525 [main:194] - Type params = []
2021-03-11 20:37:16,671 [main:302] - generating value of type = CoroutineContext false depth = 1
2021-03-11 20:37:16,821 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:37:16,825 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:37:17,139 [main:302] - generating value of type = Key<*> false depth = 4
2021-03-11 20:37:17,290 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:37:17,294 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:37:17,781 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 7
2021-03-11 20:37:17,918 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:37:17,922 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:37:18,415 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:37:18,415 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:37:18,415 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:37:18,415 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-11 20:37:18,415 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 20:37:18,911 [main:302] - generating value of type = Kla6 false depth = 1
2021-03-11 20:37:18,914 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}
2021-03-11 20:37:18,914 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}
2021-03-11 20:37:18,915 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}
2021-03-11 20:37:18,915 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}
2021-03-11 20:37:18,915 [main:112] - generating klass null text = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}
2021-03-11 20:37:18,915 [main:112] - generating klass null text = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}
2021-03-11 20:37:18,915 [main:112] - generating klass Kla7 text = companion object Kla7 : Kla1()
2021-03-11 20:37:18,915 [main:112] - generating klass null text = object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    }
2021-03-11 20:37:18,915 [main:112] - generating klass null text = object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    }
2021-03-11 20:37:18,915 [main:112] - generating klass null text = object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    }
2021-03-11 20:37:18,915 [main:112] - generating klass null text = object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    }
2021-03-11 20:37:18,915 [main:112] - generating klass null text = object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    }
2021-03-11 20:37:18,915 [main:112] - generating klass null text = object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    }
2021-03-11 20:37:18,916 [main:112] - generating klass null text = object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    }
2021-03-11 20:37:19,244 [main:43] - GENERATING CALL OF inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}
2021-03-11 20:37:19,247 [main:61] - WITHOUT TYPE PARAMS = inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}
2021-03-11 20:37:19,579 [main:302] - generating value of type = Function0<Unit> false depth = 1
2021-03-11 20:37:19,582 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 20:37:19,735 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:37:19,739 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:37:20,065 [main:302] - generating value of type = Boolean true depth = 5
2021-03-11 20:37:20,068 [main:95] - GENERATED = check(false)
2021-03-11 20:37:20,069 [main:95] - GENERATED = vBox({ check(false)})
2021-03-11 20:37:20,207 [main:43] - GENERATING CALL OF inline fun button(onAction: () -> Unit) {
    onAction()
}
2021-03-11 20:37:20,210 [main:61] - WITHOUT TYPE PARAMS = inline fun button(onAction: () -> Unit) {
    onAction()
}
2021-03-11 20:37:20,534 [main:302] - generating value of type = Function0<Unit> false depth = 1
2021-03-11 20:37:20,537 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 20:37:20,693 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:37:20,698 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:37:21,194 [main:302] - generating value of type = Boolean true depth = 5
2021-03-11 20:37:21,198 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-11 20:37:21,201 [main:302] - generating value of type = Any false depth = 6
2021-03-11 20:37:21,201 [main:95] - GENERATED = require(true, { "tlhmj"})
2021-03-11 20:37:21,201 [main:95] - GENERATED = button({ require(true, { "tlhmj"})})
2021-03-11 20:37:21,338 [main:43] - GENERATING CALL OF fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})
2021-03-11 20:37:21,510 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu0(block: suspend () -> Short) = Kla0({ null})
2021-03-11 20:37:21,818 [main:302] - generating value of type = SuspendFunction0<Short> false depth = 1
2021-03-11 20:37:21,821 [main:302] - generating value of type = Short true depth = 2
2021-03-11 20:37:21,824 [main:95] - GENERATED = fu0<Short>({ -6314})
2021-03-11 20:37:21,972 [main:43] - GENERATING CALL OF inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})
2021-03-11 20:37:22,497 [main:61] - WITHOUT TYPE PARAMS = inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Function1<ArrayDeque<Kla2>, Boolean>>, source2: Kla0<Boolean>, crossinline zipper: (Function1<ArrayDeque<Kla2>, Boolean>, Boolean) -> Long?) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})
2021-03-11 20:37:22,814 [main:302] - generating value of type = Kla0<Function1<ArrayDeque<Kla2>, Boolean>> false depth = 1
2021-03-11 20:37:22,817 [main:112] - generating klass Kla0 text = class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}
2021-03-11 20:37:23,306 [main:194] - Type params = [Function1<ArrayDeque<Kla2>, Boolean>]
2021-03-11 20:37:23,624 [main:302] - generating value of type = SuspendFunction0<Function1<ArrayDeque<Kla2>, Boolean>> false depth = 3
2021-03-11 20:37:23,627 [main:302] - generating value of type = Function1<ArrayDeque<Kla2>, Boolean> false depth = 4
2021-03-11 20:37:23,630 [main:302] - generating value of type = Boolean true depth = 5
2021-03-11 20:37:23,633 [main:302] - generating value of type = Kla0<Boolean> false depth = 1
2021-03-11 20:37:23,636 [main:112] - generating klass Kla0 text = class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}
2021-03-11 20:37:24,117 [main:194] - Type params = [Boolean]
2021-03-11 20:37:24,423 [main:302] - generating value of type = SuspendFunction0<Boolean> false depth = 3
2021-03-11 20:37:24,426 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:37:24,429 [main:302] - generating value of type = Function2<Function1<ArrayDeque<Kla2>, Boolean>, Boolean, Long?> false depth = 1
2021-03-11 20:37:24,432 [main:302] - generating value of type = Long true depth = 2
2021-03-11 20:37:24,436 [main:95] - GENERATED = fu1<Function1<ArrayDeque<Kla2>, Boolean>, Boolean, Long?>(Kla0<Function1<ArrayDeque<Kla2>, Boolean>>({ {a: ArrayDeque<Kla2> -> true}}), Kla0<Boolean>({ true}), {a: Function1<ArrayDeque<Kla2>, Boolean>, b: Boolean -> -5257177838353718093})
2021-03-11 20:37:24,577 [main:43] - GENERATING CALL OF fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}
2021-03-11 20:37:24,580 [main:61] - WITHOUT TYPE PARAMS = fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}
2021-03-11 20:37:24,887 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 1
2021-03-11 20:37:24,890 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 20:37:25,039 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:37:25,043 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:37:25,381 [main:302] - generating value of type = Any false depth = 5
2021-03-11 20:37:25,382 [main:95] - GENERATED = print("edfvg")
2021-03-11 20:37:25,383 [main:95] - GENERATED = fu2({ print("edfvg")})
2021-03-11 20:37:25,526 [main:43] - GENERATING CALL OF fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}
2021-03-11 20:37:25,685 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu3(x: (UByte?) -> Unit): Continuation<UByte?> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}
2021-03-11 20:37:26,012 [main:302] - generating value of type = Function1<UByte?, Unit> false depth = 1
2021-03-11 20:37:26,015 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 20:37:26,153 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:37:26,157 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:37:26,639 [main:302] - generating value of type = Boolean true depth = 5
2021-03-11 20:37:26,642 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-11 20:37:26,645 [main:302] - generating value of type = Any false depth = 6
2021-03-11 20:37:26,645 [main:95] - GENERATED = require(true, { "pxayf"})
2021-03-11 20:37:26,645 [main:95] - GENERATED = fu3<UByte?>({a: UByte? -> require(true, { "pxayf"})})
2021-03-11 20:37:26,798 [main:43] - GENERATING CALL OF fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}
2021-03-11 20:37:26,801 [main:61] - WITHOUT TYPE PARAMS = fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}
2021-03-11 20:37:27,111 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 1
2021-03-11 20:37:27,114 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 20:37:27,273 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:37:27,277 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:37:27,764 [main:302] - generating value of type = Boolean true depth = 5
2021-03-11 20:37:27,768 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-11 20:37:27,771 [main:302] - generating value of type = Any false depth = 6
2021-03-11 20:37:27,771 [main:95] - GENERATED = check(true, { "yzxal"})
2021-03-11 20:37:27,771 [main:95] - GENERATED = fu4({a: Throwable -> check(true, { "yzxal"})})
2021-03-11 20:37:27,963 [main:43] - Try №1
2021-03-11 20:37:33,785 [main:48] - Already checked
2021-03-11 20:37:36,529 [main:69] - Trying to insert override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }
2021-03-11 20:37:36,635 [main:66] - Compilation checking started
2021-03-11 20:37:37,903 [main:103] - Trying to change 150 nodes
2021-03-11 20:37:37,903 [main:107] - replacing ("tail-call optimization hit: method " + method + " has no state-machine ", String)
2021-03-11 20:37:37,904 [main:50] - replacing "tail-call optimization hit: method " + method + " has no state-machine " String
2021-03-11 20:37:37,904 [main:54] - Getting value of type String
2021-03-11 20:37:38,103 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:37:38,108 [main:58] - GENERATED VALUE OF TYPE String = "bkthx"
2021-03-11 20:37:38,109 [main:61] - GENERATED IS CALL =false
2021-03-11 20:37:38,348 [main:67] - randomType = Kla3<Kla14>
2021-03-11 20:37:38,545 [main:302] - generating value of type = Kla3<Kla14> false depth = 0
2021-03-11 20:37:38,550 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 20:37:39,633 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 20:37:39,639 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}
2021-03-11 20:37:39,658 [main:106] - GETTING String from Kla0<List<Long>>
2021-03-11 20:37:39,674 [main:106] - GETTING String from OutputWorkScreenView
2021-03-11 20:37:39,680 [main:106] - GETTING String from CoroutineContext
2021-03-11 20:37:39,689 [main:106] - GETTING String from Any?
2021-03-11 20:37:39,693 [main:113] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@7540dc57]]
2021-03-11 20:37:39,693 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@7540dc57]
2021-03-11 20:37:39,693 [main:117] - GENERATED CALL = (Kla2().prope4).toString()
2021-03-11 20:37:39,693 [main:114] - replacement of "tail-call optimization hit: method " + method + " has no state-machine " of type String is "bkthx"
2021-03-11 20:37:39,868 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:37:39,868 [main:66] - Compilation checking started
2021-03-11 20:37:40,623 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}

inline class Kla8(val s: Any)

interface Kla9<Ty4> {
    suspend fun fu17(): Ty4
}

class Kla10 : Kla9<Kla8> {
    override suspend fun fu17(): Kla8 = suspendCoroutine { it.resume(Kla8("OK")) }
}

fun fu14(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box355(): String {
    var prope12: String? = null
    fu14 {
        val prope19: Kla9<*> = Kla10()
        prope12 = (prope19.fu17() as Kla8).s as String
    }
    return prope12!!
}

fun <Ty4> fu15(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        x(prope13.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla13<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu18(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu18(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla14 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu20() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu20(it)
    }

    fun fu20(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu21(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu22(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("bkthx" +
                prope14.joinToString(separator = "\n"))
    }
}

val prope10 = Kla14()

class Kla15 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu23() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu24() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu25(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope11.prope17 = {
            prope11.prope16 = true
        }
    }

    override fun fu18(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:37:40,625 [main:107] - replacing (prope15 != i, Boolean)
2021-03-11 20:37:40,626 [main:50] - replacing prope15 != i Boolean
2021-03-11 20:37:40,626 [main:54] - Getting value of type Boolean
2021-03-11 20:37:40,828 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:37:40,834 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:37:40,834 [main:61] - GENERATED IS CALL =false
2021-03-11 20:37:40,855 [main:67] - randomType = Kla2
2021-03-11 20:37:41,048 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 20:37:41,053 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-11 20:37:41,075 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla2[DeserializedSimpleFunctionDescriptor@1c4dad68]
2021-03-11 20:37:41,076 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 20:37:41,076 [main:78] - Generated call from random type = (Kla2()).equals(Kla2().prope4).and(Kla5().prope7)
2021-03-11 20:37:41,077 [main:106] - GETTING Boolean from OutputWorkScreenView
2021-03-11 20:37:41,083 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]]
2021-03-11 20:37:41,083 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a]
2021-03-11 20:37:41,083 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]
2021-03-11 20:37:41,084 [main:117] - GENERATED CALL = (OutputWorkScreenView(TODO())).equals(Kla2().prope4).not()
2021-03-11 20:37:41,084 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a]]
2021-03-11 20:37:41,084 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a]
2021-03-11 20:37:41,084 [main:117] - GENERATED CALL = (OutputWorkScreenView(TODO())).equals(Kla2().prope4)
2021-03-11 20:37:41,084 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]]
2021-03-11 20:37:41,084 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a]
2021-03-11 20:37:41,084 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]
2021-03-11 20:37:41,085 [main:117] - GENERATED CALL = (OutputWorkScreenView(TODO())).equals(Kla2().prope4).xor((OutputWorkScreenView(TODO())).equals("rzbvt"))
2021-03-11 20:37:41,085 [main:113] - Case = [public final val root: kotlin.Unit defined in OutputWorkScreenView[PropertyDescriptorImpl@5a71d402], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]]
2021-03-11 20:37:41,085 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]
2021-03-11 20:37:41,085 [main:117] - GENERATED CALL = (OutputWorkScreenView(TODO())).root.equals(Kla2().prope4)
2021-03-11 20:37:41,085 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]]
2021-03-11 20:37:41,085 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a]
2021-03-11 20:37:41,085 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]
2021-03-11 20:37:41,086 [main:117] - GENERATED CALL = (OutputWorkScreenView(TODO())).equals(Kla2().prope4).or((OutputWorkScreenView(TODO())).equals("rzbvt"))
2021-03-11 20:37:41,086 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]]
2021-03-11 20:37:41,086 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a]
2021-03-11 20:37:41,086 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]
2021-03-11 20:37:41,087 [main:117] - GENERATED CALL = (OutputWorkScreenView(TODO())).equals(Kla2().prope4).equals(Kla2().prope4)
2021-03-11 20:37:41,087 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]]
2021-03-11 20:37:41,087 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a]
2021-03-11 20:37:41,087 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 20:37:41,087 [main:117] - GENERATED CALL = (OutputWorkScreenView(TODO())).equals(Kla2().prope4).and(Kla5().prope7)
2021-03-11 20:37:41,087 [main:114] - replacement of prope15 != i of type Boolean is (OutputWorkScreenView(TODO())).equals(Kla2().prope4).equals(Kla2().prope4)
2021-03-11 20:37:41,286 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:37:41,287 [main:66] - Compilation checking started
2021-03-11 20:37:42,080 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}

inline class Kla8(val s: Any)

interface Kla9<Ty4> {
    suspend fun fu17(): Ty4
}

class Kla10 : Kla9<Kla8> {
    override suspend fun fu17(): Kla8 = suspendCoroutine { it.resume(Kla8("OK")) }
}

fun fu14(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box355(): String {
    var prope12: String? = null
    fu14 {
        val prope19: Kla9<*> = Kla10()
        prope12 = (prope19.fu17() as Kla8).s as String
    }
    return prope12!!
}

fun <Ty4> fu15(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        x(prope13.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla13<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu18(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu18(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla14 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu20() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu20(it)
    }

    fun fu20(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu21(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu22(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("bkthx" +
                prope14.joinToString(separator = "\n"))
    }
}

val prope10 = Kla14()

class Kla15 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu23() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu24() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu25(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((OutputWorkScreenView(TODO())).equals(Kla2().prope4).equals(Kla2().prope4)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope11.prope17 = {
            prope11.prope16 = true
        }
    }

    override fun fu18(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:37:42,082 [main:107] - replacing ("tail-call optimization miss: method at " + it + " has state-machine ", String)
2021-03-11 20:37:42,083 [main:50] - replacing "tail-call optimization miss: method at " + it + " has state-machine " String
2021-03-11 20:37:42,083 [main:54] - Getting value of type String
2021-03-11 20:37:42,286 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:37:42,292 [main:58] - GENERATED VALUE OF TYPE String = "wvdvu"
2021-03-11 20:37:42,292 [main:61] - GENERATED IS CALL =false
2021-03-11 20:37:42,745 [main:67] - randomType = Short?
2021-03-11 20:37:42,935 [main:302] - generating value of type = Short true depth = 0
2021-03-11 20:37:42,990 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@14904b5e]
2021-03-11 20:37:42,991 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39bab7d9]
2021-03-11 20:37:42,991 [main:78] - Generated call from random type = (-29834)?.toChar().titlecase()
2021-03-11 20:37:42,992 [main:106] - GETTING String from EmptyCoroutineContext
2021-03-11 20:37:43,016 [main:106] - GETTING String from CoroutineContext
2021-03-11 20:37:43,022 [main:106] - GETTING String from Int
2021-03-11 20:37:43,052 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c17612a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39bab7d9]]
2021-03-11 20:37:43,052 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c17612a]
2021-03-11 20:37:43,052 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39bab7d9]
2021-03-11 20:37:43,052 [main:117] - GENERATED CALL = ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toChar().titlecase()
2021-03-11 20:37:43,052 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c17612a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a9406a3]]
2021-03-11 20:37:43,052 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c17612a]
2021-03-11 20:37:43,052 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a9406a3]
2021-03-11 20:37:43,052 [main:117] - GENERATED CALL = ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toChar().lowercase()
2021-03-11 20:37:43,053 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c17612a], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@836cc5d]]
2021-03-11 20:37:43,053 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c17612a]
2021-03-11 20:37:43,053 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@836cc5d]
2021-03-11 20:37:43,252 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:37:43,258 [main:117] - GENERATED CALL = ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toChar().plus("kdnqm")
2021-03-11 20:37:43,258 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4825c30b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fae2d97]]
2021-03-11 20:37:43,258 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4825c30b]
2021-03-11 20:37:43,258 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fae2d97]
2021-03-11 20:37:43,259 [main:117] - GENERATED CALL = ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toByte().toString((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false))
2021-03-11 20:37:43,259 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@31e86952], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70fd890c]]
2021-03-11 20:37:43,259 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@31e86952]
2021-03-11 20:37:43,259 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70fd890c]
2021-03-11 20:37:43,452 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:37:43,458 [main:117] - GENERATED CALL = ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).compareTo((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toString(777036959)
2021-03-11 20:37:43,458 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@52a44f2c], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d001a18]]
2021-03-11 20:37:43,458 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@52a44f2c]
2021-03-11 20:37:43,458 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d001a18]
2021-03-11 20:37:43,459 [main:117] - GENERATED CALL = ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).div(Kla0<Long>({ 8244165314496432951}).fu5()).toString(var prope4 = -1
2021-03-11 20:37:43,459 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@32bf0026], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bbce403]]
2021-03-11 20:37:43,459 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@32bf0026]
2021-03-11 20:37:43,459 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bbce403]
2021-03-11 20:37:43,459 [main:117] - GENERATED CALL = ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toShort().toString((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false))
2021-03-11 20:37:43,459 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@76e29136], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d001a18]]
2021-03-11 20:37:43,459 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@76e29136]
2021-03-11 20:37:43,459 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d001a18]
2021-03-11 20:37:43,460 [main:117] - GENERATED CALL = ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toLong().toString((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false))
2021-03-11 20:37:43,460 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70fd890c]]
2021-03-11 20:37:43,460 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70fd890c]
2021-03-11 20:37:43,628 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:37:43,634 [main:117] - GENERATED CALL = ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toString(-1875328712)
2021-03-11 20:37:43,634 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@398d1b9b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70fd890c]]
2021-03-11 20:37:43,634 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@398d1b9b]
2021-03-11 20:37:43,634 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70fd890c]
2021-03-11 20:37:43,833 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:37:43,838 [main:117] - GENERATED CALL = ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toInt().toString(-1168305726)
2021-03-11 20:37:43,838 [main:114] - replacement of "tail-call optimization miss: method at " + it + " has state-machine " of type String is ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toString(-1875328712)
2021-03-11 20:37:44,030 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:37:44,030 [main:66] - Compilation checking started
2021-03-11 20:37:44,779 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}

inline class Kla8(val s: Any)

interface Kla9<Ty4> {
    suspend fun fu17(): Ty4
}

class Kla10 : Kla9<Kla8> {
    override suspend fun fu17(): Kla8 = suspendCoroutine { it.resume(Kla8("OK")) }
}

fun fu14(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box355(): String {
    var prope12: String? = null
    fu14 {
        val prope19: Kla9<*> = Kla10()
        prope12 = (prope19.fu17() as Kla8).s as String
    }
    return prope12!!
}

fun <Ty4> fu15(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        x(prope13.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla13<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu18(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu18(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla14 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu20() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu20(it)
    }

    fun fu20(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu21(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error(((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toString(-1875328712) +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu22(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("bkthx" +
                prope14.joinToString(separator = "\n"))
    }
}

val prope10 = Kla14()

class Kla15 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu23() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu24() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu25(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((OutputWorkScreenView(TODO())).equals(Kla2().prope4).equals(Kla2().prope4)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope11.prope17 = {
            prope11.prope16 = true
        }
    }

    override fun fu18(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:37:44,781 [main:107] - replacing (Kla8("OK"), Kla8)
2021-03-11 20:37:44,781 [main:50] - replacing Kla8("OK") Kla8
2021-03-11 20:37:44,781 [main:54] - Getting value of type Kla8
2021-03-11 20:37:44,975 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 20:37:44,980 [main:112] - generating klass Kla8 text = inline class Kla8(val s: Any)
2021-03-11 20:37:45,166 [main:194] - Type params = []
2021-03-11 20:37:45,335 [main:302] - generating value of type = Any false depth = 2
2021-03-11 20:37:45,335 [main:58] - GENERATED VALUE OF TYPE Kla8 = Kla8("vgnrl")
2021-03-11 20:37:45,335 [main:61] - GENERATED IS CALL =true
2021-03-11 20:37:45,588 [main:67] - randomType = Kla3<Kla11>
2021-03-11 20:37:45,775 [main:302] - generating value of type = Kla3<Kla11> false depth = 0
2021-03-11 20:37:45,780 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 20:37:46,815 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 20:37:46,821 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}
2021-03-11 20:37:46,840 [main:106] - GETTING Kla8 from Function0<Unit>
2021-03-11 20:37:46,853 [main:106] - GETTING Kla8 from Continuation<UByte?>
2021-03-11 20:37:46,863 [main:106] - GETTING Kla8 from Kla0<Nothing?>
2021-03-11 20:37:46,879 [main:106] - GETTING Kla8 from Long
2021-03-11 20:37:46,930 [main:106] - GETTING Kla8 from OutputWorkScreenView
2021-03-11 20:37:46,937 [main:106] - GETTING Kla8 from Boolean
2021-03-11 20:37:46,949 [main:106] - GETTING Kla8 from Int
2021-03-11 20:37:46,999 [main:106] - GETTING Kla8 from Continuation<Any?>
2021-03-11 20:37:47,010 [main:106] - GETTING Kla8 from Boolean
2021-03-11 20:37:47,011 [main:106] - GETTING Kla8 from SuspendFunction0<Long>
2021-03-11 20:37:47,026 [main:106] - GETTING Kla8 from OutputWorkScreenView
2021-03-11 20:37:47,026 [main:106] - GETTING Kla8 from CoroutineContext
2021-03-11 20:37:47,036 [main:106] - GETTING Kla8 from OutputWorkScreenView
2021-03-11 20:37:47,037 [main:106] - GETTING Kla8 from Kla0<List<Long>>
2021-03-11 20:37:47,052 [main:106] - GETTING Kla8 from EmptyCoroutineContext
2021-03-11 20:37:47,077 [main:106] - GETTING Kla8 from CoroutineContext
2021-03-11 20:37:47,078 [main:106] - GETTING Kla8 from CoroutineContext
2021-03-11 20:37:47,078 [main:106] - GETTING Kla8 from Any?
2021-03-11 20:37:47,083 [main:114] - replacement of Kla8("OK") of type Kla8 is Kla8("vgnrl")
2021-03-11 20:37:47,272 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:37:47,273 [main:66] - Compilation checking started
2021-03-11 20:37:48,063 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}

inline class Kla8(val s: Any)

interface Kla9<Ty4> {
    suspend fun fu17(): Ty4
}

class Kla10 : Kla9<Kla8> {
    override suspend fun fu17(): Kla8 = suspendCoroutine { it.resume(Kla8("vgnrl")) }
}

fun fu14(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box355(): String {
    var prope12: String? = null
    fu14 {
        val prope19: Kla9<*> = Kla10()
        prope12 = (prope19.fu17() as Kla8).s as String
    }
    return prope12!!
}

fun <Ty4> fu15(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        x(prope13.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla13<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu18(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu18(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla14 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu20() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu20(it)
    }

    fun fu20(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu21(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error(((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toString(-1875328712) +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu22(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("bkthx" +
                prope14.joinToString(separator = "\n"))
    }
}

val prope10 = Kla14()

class Kla15 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu23() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu24() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu25(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((OutputWorkScreenView(TODO())).equals(Kla2().prope4).equals(Kla2().prope4)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope11.prope17 = {
            prope11.prope16 = true
        }
    }

    override fun fu18(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:37:48,065 [main:107] - replacing (this.prope13, Any?)
2021-03-11 20:37:48,066 [main:50] - replacing this.prope13 Any?
2021-03-11 20:37:48,066 [main:54] - Getting value of type Any?
2021-03-11 20:37:48,277 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:37:48,277 [main:58] - GENERATED VALUE OF TYPE Any? = "zccbz"
2021-03-11 20:37:48,277 [main:61] - GENERATED IS CALL =false
2021-03-11 20:37:48,496 [main:67] - randomType = Short
2021-03-11 20:37:48,664 [main:302] - generating value of type = Short true depth = 0
2021-03-11 20:37:48,701 [main:106] - GETTING Any? from Any?
2021-03-11 20:37:48,704 [main:106] - GETTING Any? from Kla0<List<Long>>
2021-03-11 20:37:48,715 [main:106] - GETTING Any? from Boolean
2021-03-11 20:37:48,724 [main:106] - GETTING Any? from OutputWorkScreenView
2021-03-11 20:37:48,729 [main:106] - GETTING Any? from OutputWorkScreenView
2021-03-11 20:37:48,729 [main:106] - GETTING Any? from CoroutineContext
2021-03-11 20:37:48,735 [main:106] - GETTING Any? from Int
2021-03-11 20:37:48,766 [main:106] - GETTING Any? from Continuation<UByte?>
2021-03-11 20:37:48,774 [main:106] - GETTING Any? from OutputWorkScreenView
2021-03-11 20:37:48,775 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-11 20:37:48,788 [main:106] - GETTING Any? from SuspendFunction0<Long>
2021-03-11 20:37:48,798 [main:106] - GETTING Any? from CoroutineContext
2021-03-11 20:37:48,798 [main:106] - GETTING Any? from Kla0<Nothing?>
2021-03-11 20:37:48,810 [main:106] - GETTING Any? from CoroutineContext
2021-03-11 20:37:48,811 [main:106] - GETTING Any? from Long
2021-03-11 20:37:48,841 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-11 20:37:48,848 [main:106] - GETTING Any? from Boolean
2021-03-11 20:37:48,849 [main:106] - GETTING Any? from Function0<Unit>
2021-03-11 20:37:48,857 [main:114] - replacement of this.prope13 of type Any? is "zccbz"
2021-03-11 20:37:49,044 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:37:49,045 [main:66] - Compilation checking started
2021-03-11 20:37:49,581 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}

inline class Kla8(val s: Any)

interface Kla9<Ty4> {
    suspend fun fu17(): Ty4
}

class Kla10 : Kla9<Kla8> {
    override suspend fun fu17(): Kla8 = suspendCoroutine { it.resume(Kla8("vgnrl")) }
}

fun fu14(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box355(): String {
    var prope12: String? = null
    fu14 {
        val prope19: Kla9<*> = Kla10()
        prope12 = (prope19.fu17() as Kla8).s as String
    }
    return prope12!!
}

fun <Ty4> fu15(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        x(prope13.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
"zccbz" = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla13<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu18(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu18(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla14 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu20() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu20(it)
    }

    fun fu20(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu21(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error(((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toString(-1875328712) +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu22(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("bkthx" +
                prope14.joinToString(separator = "\n"))
    }
}

val prope10 = Kla14()

class Kla15 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu23() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu24() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu25(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((OutputWorkScreenView(TODO())).equals(Kla2().prope4).equals(Kla2().prope4)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope11.prope17 = {
            prope11.prope16 = true
        }
    }

    override fun fu18(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:37:49,583 [main:107] - replacing (prope17, Function0<Unit>)
2021-03-11 20:37:49,583 [main:50] - replacing prope17 Function0<Unit>
2021-03-11 20:37:49,583 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:37:49,789 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:37:49,794 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:37:49,991 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:37:49,998 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:37:50,428 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 20:37:50,434 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 20:37:50,632 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:37:50,639 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:37:51,057 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 20:37:51,064 [main:95] - GENERATED = require(true)
2021-03-11 20:37:51,064 [main:95] - GENERATED = contract({ require(true)})
2021-03-11 20:37:51,064 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ require(true)})}
2021-03-11 20:37:51,064 [main:61] - GENERATED IS CALL =false
2021-03-11 20:37:51,075 [main:67] - randomType = String
2021-03-11 20:37:51,263 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:37:51,297 [main:106] - GETTING Function0<Unit> from SuspendFunction0<Long>
2021-03-11 20:37:51,312 [main:106] - GETTING Function0<Unit> from EmptyCoroutineContext
2021-03-11 20:37:51,338 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-11 20:37:51,348 [main:106] - GETTING Function0<Unit> from Long
2021-03-11 20:37:51,384 [main:106] - GETTING Function0<Unit> from OutputWorkScreenView
2021-03-11 20:37:51,389 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-11 20:37:51,398 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:37:51,429 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-11 20:37:51,430 [main:106] - GETTING Function0<Unit> from OutputWorkScreenView
2021-03-11 20:37:51,431 [main:106] - GETTING Function0<Unit> from Kla0<Nothing?>
2021-03-11 20:37:51,444 [main:106] - GETTING Function0<Unit> from Any?
2021-03-11 20:37:51,447 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 20:37:51,454 [main:114] - replacement of prope17 of type Function0<Unit> is { contract({ require(true)})}
2021-03-11 20:37:51,643 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:37:51,643 [main:66] - Compilation checking started
2021-03-11 20:37:52,178 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}

inline class Kla8(val s: Any)

interface Kla9<Ty4> {
    suspend fun fu17(): Ty4
}

class Kla10 : Kla9<Kla8> {
    override suspend fun fu17(): Kla8 = suspendCoroutine { it.resume(Kla8("vgnrl")) }
}

fun fu14(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box355(): String {
    var prope12: String? = null
    fu14 {
        val prope19: Kla9<*> = Kla10()
        prope12 = (prope19.fu17() as Kla8).s as String
    }
    return prope12!!
}

fun <Ty4> fu15(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        x(prope13.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla13<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu18(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu18(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla14 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu20() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu20(it)
    }

    fun fu20(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu21(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error(((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toString(-1875328712) +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu22(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error("bkthx" +
                prope14.joinToString(separator = "\n"))
    }
}

val prope10 = Kla14()

class Kla15 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu23() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu24() = suspendCoroutine<Unit> { c ->
        prope15++
        { contract({ require(true)})} = { c.resume(Unit) }
    }

    fun fu25(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((OutputWorkScreenView(TODO())).equals(Kla2().prope4).equals(Kla2().prope4)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope11.prope17 = {
            prope11.prope16 = true
        }
    }

    override fun fu18(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:37:52,180 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-11 20:37:52,180 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-11 20:37:52,180 [main:54] - Getting value of type Boolean
2021-03-11 20:37:52,369 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:37:52,375 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:37:52,375 [main:61] - GENERATED IS CALL =false
2021-03-11 20:37:52,599 [main:67] - randomType = Double
2021-03-11 20:37:52,767 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:37:52,801 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@14ad001c]
2021-03-11 20:37:52,801 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@438a098f]
2021-03-11 20:37:52,801 [main:78] - Generated call from random type = (0.2892320221306368).toChar().isHighSurrogate()
2021-03-11 20:37:52,802 [main:106] - GETTING Boolean from CoroutineContext
2021-03-11 20:37:52,807 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@327a85b0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]]
2021-03-11 20:37:52,807 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@327a85b0]
2021-03-11 20:37:52,807 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]
2021-03-11 20:37:52,808 [main:117] - GENERATED CALL = (Kla1().context).equals(Kla2().prope4).equals(Kla2().prope4)
2021-03-11 20:37:52,808 [main:113] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@e246c4], public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@566809db]]
2021-03-11 20:37:52,808 [main:149] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@e246c4]
2021-03-11 20:37:52,998 [main:302] - generating value of type = R false depth = 0
2021-03-11 20:37:55,943 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Function1<Function1<Triple<ULong?, Float, Int>?, Kla11>, HashMap<Function2<Float, Short, Kla11>, UByte>>, block: T.()->Boolean): R = TODO()
2021-03-11 20:37:55,950 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Function1<Function1<Triple<ULong?, Float, Int>?, Kla11>, HashMap<Function2<Float, Short, Kla11>, UByte>>, block: T.()->Boolean): R = TODO()
2021-03-11 20:37:56,365 [main:302] - generating value of type = Function1<Function1<Triple<ULong?, Float, Int>?, Kla11>, HashMap<Function2<Float, Short, Kla11>, UByte>> false depth = 3
2021-03-11 20:37:56,372 [main:302] - generating value of type = HashMap<Function2<Float, Short, Kla11>, UByte> false depth = 4
2021-03-11 20:37:56,568 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Function2<Float, Short, Kla11>, UByte>): HashMap<Function2<Float, Short, Kla11>, UByte> = TODO()
2021-03-11 20:37:56,575 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Function2<Float, Short, Kla11>, UByte>): HashMap<Function2<Float, Short, Kla11>, UByte> = TODO()
2021-03-11 20:37:56,756 [main:302] - generating value of type = Pair<Function2<Float, Short, Kla11>, UByte> false depth = 7
2021-03-11 20:37:56,959 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Function2<Float, Short, Kla11>, second: UByte): Pair<Function2<Float, Short, Kla11>, UByte> = TODO()
2021-03-11 20:37:56,967 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Function2<Float, Short, Kla11>, second: UByte): Pair<Function2<Float, Short, Kla11>, UByte> = TODO()
2021-03-11 20:37:57,167 [main:302] - generating value of type = Function2<Float, Short, Kla11> false depth = 10
2021-03-11 20:37:57,175 [main:302] - generating value of type = Kla11 false depth = 11
2021-03-11 20:37:57,183 [main:112] - generating klass Kla11 text = open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}
2021-03-11 20:37:57,356 [main:194] - Type params = []
2021-03-11 20:37:57,577 [main:302] - generating value of type = CoroutineContext false depth = 13
2021-03-11 20:37:57,778 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:37:57,785 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:37:58,219 [main:302] - generating value of type = Key<*> false depth = 16
2021-03-11 20:37:58,219 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:37:58,219 [main:302] - generating value of type = UByte true depth = 10
2021-03-11 20:37:58,225 [main:95] - GENERATED = Pair<Function2<Float, Short, Kla11>, UByte>({a: Float, b: Short -> Kla11()}, 90.toUByte())
2021-03-11 20:37:58,226 [main:95] - GENERATED = linkedMapOf<Function2<Float, Short, Kla11>, UByte>(Pair<Function2<Float, Short, Kla11>, UByte>({a: Float, b: Short -> Kla11()}, 90.toUByte()))
2021-03-11 20:37:58,226 [main:385] - Cant generate call of fun <T, R> with(receiver: Function1<Function1<Triple<ULong?, Float, Int>?, Kla11>, HashMap<Function2<Float, Short, Kla11>, UByte>>, block: T.()->Boolean): R = TODO()
2021-03-11 20:37:58,413 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-11 20:37:58,418 [main:302] - generating value of type = R false depth = 1
2021-03-11 20:37:59,478 [main:43] - GENERATING CALL OF fun <R> run(block: ()->HashSet<ArrayList<Double?>>): R = TODO()
2021-03-11 20:37:59,486 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->HashSet<ArrayList<Double?>>): R = TODO()
2021-03-11 20:37:59,916 [main:302] - generating value of type = Function0<HashSet<ArrayList<Double?>>> false depth = 4
2021-03-11 20:37:59,921 [main:302] - generating value of type = HashSet<ArrayList<Double?>> false depth = 5
2021-03-11 20:38:00,127 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<ArrayList<Double?>> = TODO()
2021-03-11 20:38:00,134 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<ArrayList<Double?>> = TODO()
2021-03-11 20:38:00,338 [main:95] - GENERATED = linkedSetOf<ArrayList<Double?>>()
2021-03-11 20:38:00,338 [main:95] - GENERATED = run<HashSet<ArrayList<Double?>>>({ linkedSetOf<ArrayList<Double?>>()})
2021-03-11 20:38:00,338 [main:158] - CANT GENERATE PARAMS FOR public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@e246c4]
2021-03-11 20:38:00,338 [main:113] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@e246c4], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5a77475d]]
2021-03-11 20:38:00,339 [main:149] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@e246c4]
2021-03-11 20:38:00,509 [main:302] - generating value of type = R false depth = 0
2021-03-11 20:38:03,838 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->Map<Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>, Char>): R = TODO()
2021-03-11 20:38:03,845 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->Map<Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>, Char>): R = TODO()
2021-03-11 20:38:04,562 [main:302] - generating value of type = Any false depth = 3
2021-03-11 20:38:04,562 [main:302] - generating value of type = Function0<Map<Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>, Char>> false depth = 3
2021-03-11 20:38:04,568 [main:302] - generating value of type = Map<Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>, Char> false depth = 4
2021-03-11 20:38:04,769 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>, Char>): Map<Triple<Float?, Kla8?, Kla3<Function1<LkedHashSet<SomeOutputScreenCallbacks>, Triple<LkedHashSet<UInt>, UShort?, Long>>>>, Char> = TODO()
2021-03-11 20:38:04,776 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>, Char>): Map<Triple<Float?, Kla8?, Kla3<Function1<LkedHashSet<SomeOutputScreenCallbacks>, Triple<LkedHashSet<UInt>, UShort?, Long>>>>, Char> = TODO()
2021-03-11 20:38:04,969 [main:302] - generating value of type = Pair<Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>, Char> false depth = 7
2021-03-11 20:38:05,185 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>, second: Char): Pair<Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>, Char> = TODO()
2021-03-11 20:38:05,193 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>, second: Char): Pair<Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>, Char> = TODO()
2021-03-11 20:38:05,396 [main:302] - generating value of type = Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>> false depth = 10
2021-03-11 20:38:05,581 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Float?, second: Kla8?, third: Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>): Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>> = TODO()
2021-03-11 20:38:05,588 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Float?, second: Kla8?, third: Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>): Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>> = TODO()
2021-03-11 20:38:05,813 [main:302] - generating value of type = Float true depth = 13
2021-03-11 20:38:05,819 [main:302] - generating value of type = Kla8 false depth = 13
2021-03-11 20:38:05,824 [main:112] - generating klass Kla8 text = inline class Kla8(val s: Any)
2021-03-11 20:38:06,017 [main:194] - Type params = []
2021-03-11 20:38:06,193 [main:302] - generating value of type = Any false depth = 15
2021-03-11 20:38:06,193 [main:302] - generating value of type = Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>> false depth = 13
2021-03-11 20:38:06,198 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 20:38:07,110 [main:302] - generating value of type = Kla6 false depth = 15
2021-03-11 20:38:07,116 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}
2021-03-11 20:38:07,116 [main:95] - GENERATED = Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>(0.77244145f, Kla8("ouoal"), Kla6)
2021-03-11 20:38:07,116 [main:302] - generating value of type = Char true depth = 10
2021-03-11 20:38:07,122 [main:95] - GENERATED = Pair<Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>, Char>(Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>(0.77244145f, Kla8("ouoal"), Kla6), '畩')
2021-03-11 20:38:07,123 [main:95] - GENERATED = linkedMapOf<Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>, Char>(Pair<Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>, Char>(Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>(0.77244145f, Kla8("ouoal"), Kla6), '畩'))
2021-03-11 20:38:07,123 [main:95] - GENERATED = synchronized<Map<Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>, Char>>("zkilm", { linkedMapOf<Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>, Char>(Pair<Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>, Char>(Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>(0.77244145f, Kla8("ouoal"), Kla6), '畩'))})
2021-03-11 20:38:07,331 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-11 20:38:07,339 [main:302] - generating value of type = R false depth = 1
2021-03-11 20:38:07,980 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Double?, block: T.()->String): R = TODO()
2021-03-11 20:38:07,987 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Double?, block: T.()->String): R = TODO()
2021-03-11 20:38:08,593 [main:302] - generating value of type = Double true depth = 4
2021-03-11 20:38:08,599 [main:385] - Cant generate call of fun <T, R> with(receiver: Double?, block: T.()->String): R = TODO()
2021-03-11 20:38:08,600 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5a77475d]
2021-03-11 20:38:08,764 [main:302] - generating value of type = T false depth = 0
2021-03-11 20:38:09,392 [main:43] - GENERATING CALL OF fun <T> suspendCoroutine(block: (kotlin.coroutines.Continuation<Sequence<Short>>)->kotlin.Unit): T = TODO()
2021-03-11 20:38:09,399 [main:61] - WITHOUT TYPE PARAMS = fun <T> suspendCoroutine(block: (kotlin.coroutines.Continuation<Sequence<Short>>)->kotlin.Unit): T = TODO()
2021-03-11 20:38:09,860 [main:302] - generating value of type = Function1<Continuation<Sequence<Short>>, Unit> false depth = 3
2021-03-11 20:38:09,865 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 20:38:10,040 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:38:10,047 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:38:10,493 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 7
2021-03-11 20:38:10,499 [main:302] - generating value of type = Unit false depth = 8
2021-03-11 20:38:10,675 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:38:10,682 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:38:11,159 [main:302] - generating value of type = Boolean true depth = 11
2021-03-11 20:38:11,165 [main:95] - GENERATED = require(true)
2021-03-11 20:38:11,165 [main:95] - GENERATED = contract({ require(true)})
2021-03-11 20:38:11,165 [main:95] - GENERATED = suspendCoroutine<Sequence<Short>>({a: Continuation<Sequence<Short>> -> contract({ require(true)})})
2021-03-11 20:38:11,166 [main:117] - GENERATED CALL = (Kla1().context).fold(synchronized<Map<Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>, Char>>("zkilm", { linkedMapOf<Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>, Char>(Pair<Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>, Char>(Triple<Float?, Kla8?, Kla3<Function1<LinkedHashSet<SomeOutputScreenCallbacks>, Triple<LinkedHashSet<UInt>, UShort?, Long>>>>(0.77244145f, Kla8("ouoal"), Kla6), '畩'))}), {a: R, b: Element -> })?.contains(suspendCoroutine<Sequence<Short>>({a: Continuation<Sequence<Short>> -> contract({ require(true)})}))
2021-03-11 20:38:11,166 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@327a85b0], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]]
2021-03-11 20:38:11,167 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@327a85b0]
2021-03-11 20:38:11,167 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]
2021-03-11 20:38:11,346 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:38:11,351 [main:117] - GENERATED CALL = (Kla1().context).equals(Kla2().prope4).xor(true)
2021-03-11 20:38:11,352 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@327a85b0], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]]
2021-03-11 20:38:11,352 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@327a85b0]
2021-03-11 20:38:11,352 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 20:38:11,352 [main:117] - GENERATED CALL = (Kla1().context).equals(Kla2().prope4).and((OutputWorkScreenView(TODO())).equals("rzbvt"))
2021-03-11 20:38:11,352 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@327a85b0]]
2021-03-11 20:38:11,352 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@327a85b0]
2021-03-11 20:38:11,353 [main:117] - GENERATED CALL = (Kla1().context).equals(Kla2().prope4)
2021-03-11 20:38:11,353 [main:113] - Case = [public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@6ca03776], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext.Element[DeserializedSimpleFunctionDescriptor@34688e19]]
2021-03-11 20:38:11,353 [main:149] - GENERATING call of type public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@6ca03776]
2021-03-11 20:38:11,543 [main:302] - generating value of type = Key<E> false depth = 0
2021-03-11 20:38:11,746 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-11 20:38:11,753 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-11 20:38:12,449 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 3
2021-03-11 20:38:12,630 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:38:12,637 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:38:13,380 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:38:13,380 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-11 20:38:13,380 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@6ca03776]
2021-03-11 20:38:13,380 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@327a85b0], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]]
2021-03-11 20:38:13,381 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@327a85b0]
2021-03-11 20:38:13,381 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]
2021-03-11 20:38:13,381 [main:117] - GENERATED CALL = (Kla1().context).equals(Kla2().prope4).not()
2021-03-11 20:38:13,381 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@327a85b0], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]]
2021-03-11 20:38:13,381 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@327a85b0]
2021-03-11 20:38:13,381 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]
2021-03-11 20:38:13,382 [main:117] - GENERATED CALL = (Kla1().context).equals(Kla2().prope4).or(Kla5().prope7)
2021-03-11 20:38:13,382 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (0.2892320221306368).toChar().isHighSurrogate()
2021-03-11 20:38:13,574 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:38:13,574 [main:66] - Compilation checking started
2021-03-11 20:38:14,344 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}

inline class Kla8(val s: Any)

interface Kla9<Ty4> {
    suspend fun fu17(): Ty4
}

class Kla10 : Kla9<Kla8> {
    override suspend fun fu17(): Kla8 = suspendCoroutine { it.resume(Kla8("vgnrl")) }
}

fun fu14(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box355(): String {
    var prope12: String? = null
    fu14 {
        val prope19: Kla9<*> = Kla10()
        prope12 = (prope19.fu17() as Kla8).s as String
    }
    return prope12!!
}

fun <Ty4> fu15(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        x(prope13.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla13<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu18(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu18(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla14 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu20() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu20(it)
    }

    fun fu20(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu21(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error(((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toString(-1875328712) +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu22(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { (0.2892320221306368).toChar().isHighSurrogate() } ?: error("bkthx" +
                prope14.joinToString(separator = "\n"))
    }
}

val prope10 = Kla14()

class Kla15 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu23() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu24() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu25(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((OutputWorkScreenView(TODO())).equals(Kla2().prope4).equals(Kla2().prope4)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope11.prope17 = {
            prope11.prope16 = true
        }
    }

    override fun fu18(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:38:14,346 [main:107] - replacing ((prope19.fu17() as Kla8), Kla8)
2021-03-11 20:38:14,347 [main:50] - replacing (prope19.fu17() as Kla8) Kla8
2021-03-11 20:38:14,347 [main:54] - Getting value of type Kla8
2021-03-11 20:38:14,539 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 20:38:14,545 [main:112] - generating klass Kla8 text = inline class Kla8(val s: Any)
2021-03-11 20:38:14,739 [main:194] - Type params = []
2021-03-11 20:38:14,912 [main:302] - generating value of type = Any false depth = 2
2021-03-11 20:38:14,912 [main:58] - GENERATED VALUE OF TYPE Kla8 = Kla8("pklwo")
2021-03-11 20:38:14,912 [main:61] - GENERATED IS CALL =true
2021-03-11 20:38:15,365 [main:67] - randomType = ArrayList<ULong>
2021-03-11 20:38:15,542 [main:302] - generating value of type = ArrayList<ULong> false depth = 0
2021-03-11 20:38:15,743 [main:43] - GENERATING CALL OF fun <E> ArrayList(): ArrayList<ULong> = TODO()
2021-03-11 20:38:15,750 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(): ArrayList<ULong> = TODO()
2021-03-11 20:38:15,949 [main:95] - GENERATED = ArrayList<ULong>()
2021-03-11 20:38:16,112 [main:106] - GETTING Kla8 from OutputWorkScreenView
2021-03-11 20:38:16,117 [main:106] - GETTING Kla8 from EmptyCoroutineContext
2021-03-11 20:38:16,131 [main:106] - GETTING Kla8 from CoroutineContext
2021-03-11 20:38:16,136 [main:106] - GETTING Kla8 from SuspendFunction0<Long>
2021-03-11 20:38:16,145 [main:106] - GETTING Kla8 from Function0<Unit>
2021-03-11 20:38:16,154 [main:106] - GETTING Kla8 from Continuation<Any?>
2021-03-11 20:38:16,161 [main:106] - GETTING Kla8 from Boolean
2021-03-11 20:38:16,169 [main:106] - GETTING Kla8 from Long
2021-03-11 20:38:16,198 [main:106] - GETTING Kla8 from Any?
2021-03-11 20:38:16,201 [main:106] - GETTING Kla8 from CoroutineContext
2021-03-11 20:38:16,202 [main:106] - GETTING Kla8 from OutputWorkScreenView
2021-03-11 20:38:16,202 [main:106] - GETTING Kla8 from Kla0<Nothing?>
2021-03-11 20:38:16,214 [main:106] - GETTING Kla8 from CoroutineContext
2021-03-11 20:38:16,215 [main:106] - GETTING Kla8 from Kla0<List<Long>>
2021-03-11 20:38:16,226 [main:106] - GETTING Kla8 from Continuation<UByte?>
2021-03-11 20:38:16,234 [main:106] - GETTING Kla8 from OutputWorkScreenView
2021-03-11 20:38:16,235 [main:106] - GETTING Kla8 from Boolean
2021-03-11 20:38:16,236 [main:106] - GETTING Kla8 from Int
2021-03-11 20:38:16,267 [main:114] - replacement of (prope19.fu17() as Kla8) of type Kla8 is Kla8("pklwo")
2021-03-11 20:38:16,459 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(CALL_EXPRESSION)
2021-03-11 20:38:16,460 [main:66] - Compilation checking started
2021-03-11 20:38:17,250 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}

inline class Kla8(val s: Any)

interface Kla9<Ty4> {
    suspend fun fu17(): Ty4
}

class Kla10 : Kla9<Kla8> {
    override suspend fun fu17(): Kla8 = suspendCoroutine { it.resume(Kla8("vgnrl")) }
}

fun fu14(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box355(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
var prope12: String? = null
    fu14 {
        val prope19: Kla9<*> = Kla10()
        prope12 = Kla8("pklwo").s as String
    }
    return prope12!!
}

fun <Ty4> fu15(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        x(prope13.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla13<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu18(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu18(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla14 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu20() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu20(it)
    }

    fun fu20(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu21(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error(((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toString(-1875328712) +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu22(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { (0.2892320221306368).toChar().isHighSurrogate() } ?: error("bkthx" +
                prope14.joinToString(separator = "\n"))
    }
}

val prope10 = Kla14()

class Kla15 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu23() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu24() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu25(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((OutputWorkScreenView(TODO())).equals(Kla2().prope4).equals(Kla2().prope4)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope11.prope17 = {
            prope11.prope16 = true
        }
    }

    override fun fu18(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:38:17,252 [main:107] - replacing (0, Int)
2021-03-11 20:38:17,254 [main:50] - replacing 0 Int
2021-03-11 20:38:17,254 [main:54] - Getting value of type Int
2021-03-11 20:38:17,459 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:38:17,464 [main:58] - GENERATED VALUE OF TYPE Int = 1864071840
2021-03-11 20:38:17,464 [main:61] - GENERATED IS CALL =false
2021-03-11 20:38:18,145 [main:67] - randomType = LinkedHashMap<Byte, Byte>
2021-03-11 20:38:18,337 [main:302] - generating value of type = LinkedHashMap<Byte, Byte> false depth = 0
2021-03-11 20:38:18,521 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Byte, Byte> = TODO()
2021-03-11 20:38:18,528 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Byte, Byte> = TODO()
2021-03-11 20:38:18,738 [main:95] - GENERATED = linkedMapOf<Byte, Byte>()
2021-03-11 20:38:18,890 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2abbc8ae]
2021-03-11 20:38:18,890 [main:78] - Generated call from random type = (linkedMapOf<Byte, Byte>()).size.coerceAtLeast((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false))
2021-03-11 20:38:18,890 [main:114] - replacement of 0 of type Int is (linkedMapOf<Byte, Byte>()).size.coerceAtLeast((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false))
2021-03-11 20:38:19,068 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:38:19,069 [main:66] - Compilation checking started
2021-03-11 20:38:19,889 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}

inline class Kla8(val s: Any)

interface Kla9<Ty4> {
    suspend fun fu17(): Ty4
}

class Kla10 : Kla9<Kla8> {
    override suspend fun fu17(): Kla8 = suspendCoroutine { it.resume(Kla8("vgnrl")) }
}

fun fu14(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box355(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
var prope12: String? = null
    fu14 {
        val prope19: Kla9<*> = Kla10()
        prope12 = Kla8("pklwo").s as String
    }
    return prope12!!
}

fun <Ty4> fu15(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        x(prope13.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla13<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu18(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu18(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla14 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu20() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu20(it)
    }

    fun fu20(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu21(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error(((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toString(-1875328712) +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu22(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { (0.2892320221306368).toChar().isHighSurrogate() } ?: error("bkthx" +
                prope14.joinToString(separator = "\n"))
    }
}

val prope10 = Kla14()

class Kla15 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu23() {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = (linkedMapOf<Byte, Byte>()).size.coerceAtLeast((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false))
        prope16 = false
        prope17 = {}
    }

    suspend fun fu24() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu25(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((OutputWorkScreenView(TODO())).equals(Kla2().prope4).equals(Kla2().prope4)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope11.prope17 = {
            prope11.prope16 = true
        }
    }

    override fun fu18(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:38:19,892 [main:107] - replacing (x, Function1<Ty4, Unit>)
2021-03-11 20:38:19,894 [main:50] - replacing x Function1<Ty4, Unit>
2021-03-11 20:38:19,894 [main:54] - Getting value of type Function1<Ty4, Unit>
2021-03-11 20:38:20,146 [main:302] - generating value of type = Function1<Ty4, Unit> false depth = 0
2021-03-11 20:38:20,152 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:38:20,361 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:38:20,368 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:38:21,078 [main:302] - generating value of type = Int true depth = 4
2021-03-11 20:38:21,084 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 20:38:21,090 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 20:38:21,099 [main:95] - GENERATED = repeat(-239788918, {a: Int -> println()})
2021-03-11 20:38:21,099 [main:58] - GENERATED VALUE OF TYPE Function1<Ty4, Unit> = {a: Ty4 -> repeat(-239788918, {a: Int -> println()})}
2021-03-11 20:38:21,099 [main:61] - GENERATED IS CALL =false
2021-03-11 20:38:21,859 [main:67] - randomType = Sequence<Function1<OutputWorkScreenView, Sequence<String>>>
2021-03-11 20:38:21,861 [main:106] - GETTING Function1<Ty4, Unit> from OutputWorkScreenView
2021-03-11 20:38:21,869 [main:106] - GETTING Function1<Ty4, Unit> from Kla0<List<Long>>
2021-03-11 20:38:21,882 [main:106] - GETTING Function1<Ty4, Unit> from CoroutineContext
2021-03-11 20:38:21,888 [main:106] - GETTING Function1<Ty4, Unit> from Boolean
2021-03-11 20:38:21,897 [main:106] - GETTING Function1<Ty4, Unit> from CoroutineContext
2021-03-11 20:38:21,899 [main:106] - GETTING Function1<Ty4, Unit> from Boolean
2021-03-11 20:38:21,900 [main:106] - GETTING Function1<Ty4, Unit> from Continuation<Any?>
2021-03-11 20:38:21,908 [main:106] - GETTING Function1<Ty4, Unit> from Kla0<Nothing?>
2021-03-11 20:38:21,921 [main:106] - GETTING Function1<Ty4, Unit> from CoroutineContext
2021-03-11 20:38:21,922 [main:106] - GETTING Function1<Ty4, Unit> from Any?
2021-03-11 20:38:21,927 [main:106] - GETTING Function1<Ty4, Unit> from Continuation<UByte?>
2021-03-11 20:38:21,936 [main:106] - GETTING Function1<Ty4, Unit> from Function0<Unit>
2021-03-11 20:38:21,945 [main:106] - GETTING Function1<Ty4, Unit> from Long
2021-03-11 20:38:21,975 [main:106] - GETTING Function1<Ty4, Unit> from OutputWorkScreenView
2021-03-11 20:38:21,976 [main:106] - GETTING Function1<Ty4, Unit> from Int
2021-03-11 20:38:22,007 [main:106] - GETTING Function1<Ty4, Unit> from OutputWorkScreenView
2021-03-11 20:38:22,008 [main:106] - GETTING Function1<Ty4, Unit> from EmptyCoroutineContext
2021-03-11 20:38:22,024 [main:106] - GETTING Function1<Ty4, Unit> from SuspendFunction0<Long>
2021-03-11 20:38:22,032 [main:114] - replacement of x of type Function1<Ty4, Unit> is {a: Ty4 -> repeat(-239788918, {a: Int -> println()})}
2021-03-11 20:38:22,238 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:38:22,238 [main:66] - Compilation checking started
2021-03-11 20:38:22,817 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}

inline class Kla8(val s: Any)

interface Kla9<Ty4> {
    suspend fun fu17(): Ty4
}

class Kla10 : Kla9<Kla8> {
    override suspend fun fu17(): Kla8 = suspendCoroutine { it.resume(Kla8("vgnrl")) }
}

fun fu14(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box355(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
var prope12: String? = null
    fu14 {
        val prope19: Kla9<*> = Kla10()
        prope12 = Kla8("pklwo").s as String
    }
    return prope12!!
}

fun <Ty4> fu15(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
{a: Ty4 -> repeat(-239788918, {a: Int -> println()})}(prope13.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla13<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu18(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu18(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla14 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu20() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu20(it)
    }

    fun fu20(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu21(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error(((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toString(-1875328712) +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu22(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { (0.2892320221306368).toChar().isHighSurrogate() } ?: error("bkthx" +
                prope14.joinToString(separator = "\n"))
    }
}

val prope10 = Kla14()

class Kla15 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu23() {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = (linkedMapOf<Byte, Byte>()).size.coerceAtLeast((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false))
        prope16 = false
        prope17 = {}
    }

    suspend fun fu24() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu25(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((OutputWorkScreenView(TODO())).equals(Kla2().prope4).equals(Kla2().prope4)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope11.prope17 = {
            prope11.prope16 = true
        }
    }

    override fun fu18(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:38:22,821 [main:107] - replacing (prope16, Boolean)
2021-03-11 20:38:22,821 [main:50] - replacing prope16 Boolean
2021-03-11 20:38:22,821 [main:54] - Getting value of type Boolean
2021-03-11 20:38:23,038 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:38:23,044 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:38:23,045 [main:61] - GENERATED IS CALL =false
2021-03-11 20:38:24,097 [main:67] - randomType = Pair<Kla12?, Long?>?
2021-03-11 20:38:24,302 [main:302] - generating value of type = Pair<Kla12?, Long?> false depth = 0
2021-03-11 20:38:24,488 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla12?, second: Long?): Pair<Kla12?, Long?> = TODO()
2021-03-11 20:38:24,495 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla12?, second: Long?): Pair<Kla12?, Long?> = TODO()
2021-03-11 20:38:24,722 [main:302] - generating value of type = Kla12 false depth = 3
2021-03-11 20:38:24,731 [main:112] - generating klass Kla12 text = class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}
2021-03-11 20:38:24,732 [main:302] - generating value of type = Long true depth = 3
2021-03-11 20:38:24,738 [main:95] - GENERATED = Pair<Kla12?, Long?>(Kla12(), -4325937659338837671)
2021-03-11 20:38:24,757 [main:149] - GENERATING call of type public final fun copy(first: Kla12? = ..., second: kotlin.Long? = ...): kotlin.Pair<Kla12?, kotlin.Long?> defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor@3df48ab8]
2021-03-11 20:38:25,141 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:38:25,147 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor@1ed60a3e]
2021-03-11 20:38:25,147 [main:78] - Generated call from random type = (Pair<Kla12?, Long?>(Kla12(), -4325937659338837671))?.copy(null, -2370947395490253006).equals(Kla2().prope4)
2021-03-11 20:38:25,147 [main:114] - replacement of prope16 of type Boolean is (Pair<Kla12?, Long?>(Kla12(), -4325937659338837671))?.copy(null, -2370947395490253006).equals(Kla2().prope4)
2021-03-11 20:38:25,350 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:38:25,351 [main:66] - Compilation checking started
2021-03-11 20:38:26,194 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}

inline class Kla8(val s: Any)

interface Kla9<Ty4> {
    suspend fun fu17(): Ty4
}

class Kla10 : Kla9<Kla8> {
    override suspend fun fu17(): Kla8 = suspendCoroutine { it.resume(Kla8("vgnrl")) }
}

fun fu14(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box355(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
var prope12: String? = null
    fu14 {
        val prope19: Kla9<*> = Kla10()
        prope12 = Kla8("pklwo").s as String
    }
    return prope12!!
}

fun <Ty4> fu15(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
x(prope13.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla13<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu18(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu18(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla14 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu20() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu20(it)
    }

    fun fu20(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu21(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error(((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toString(-1875328712) +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu22(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { (0.2892320221306368).toChar().isHighSurrogate() } ?: error("bkthx" +
                prope14.joinToString(separator = "\n"))
    }
}

val prope10 = Kla14()

class Kla15 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu23() {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = (linkedMapOf<Byte, Byte>()).size.coerceAtLeast((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false))
        prope16 = false
        prope17 = {}
    }

    suspend fun fu24() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu25(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((OutputWorkScreenView(TODO())).equals(Kla2().prope4).equals(Kla2().prope4)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !(Pair<Kla12?, Long?>(Kla12(), -4325937659338837671))?.copy(null, -2370947395490253006).equals(Kla2().prope4)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope11.prope17 = {
            prope11.prope16 = true
        }
    }

    override fun fu18(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:38:26,196 [main:107] - replacing (" is not subtype of CoroutineStackFrame", String)
2021-03-11 20:38:26,198 [main:50] - replacing " is not subtype of CoroutineStackFrame" String
2021-03-11 20:38:26,198 [main:54] - Getting value of type String
2021-03-11 20:38:26,416 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:38:26,422 [main:58] - GENERATED VALUE OF TYPE String = "wwrzy"
2021-03-11 20:38:26,422 [main:61] - GENERATED IS CALL =false
2021-03-11 20:38:26,915 [main:67] - randomType = List<Kla13<Kla4>>
2021-03-11 20:38:26,916 [main:106] - GETTING String from Any?
2021-03-11 20:38:26,920 [main:113] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@7540dc57]]
2021-03-11 20:38:26,920 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@7540dc57]
2021-03-11 20:38:26,921 [main:117] - GENERATED CALL = (Kla2().prope4).toString()
2021-03-11 20:38:26,921 [main:114] - replacement of " is not subtype of CoroutineStackFrame" of type String is (Kla2().prope4).toString()
2021-03-11 20:38:27,128 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:38:27,129 [main:66] - Compilation checking started
2021-03-11 20:38:28,003 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}

inline class Kla8(val s: Any)

interface Kla9<Ty4> {
    suspend fun fu17(): Ty4
}

class Kla10 : Kla9<Kla8> {
    override suspend fun fu17(): Kla8 = suspendCoroutine { it.resume(Kla8("vgnrl")) }
}

fun fu14(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box355(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
var prope12: String? = null
    fu14 {
        val prope19: Kla9<*> = Kla10()
        prope12 = Kla8("pklwo").s as String
    }
    return prope12!!
}

fun <Ty4> fu15(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
x(prope13.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla13<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu18(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu18(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla14 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu20() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu20(it)
    }

    fun fu20(c: Continuation<*>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla2().prope4).toString())
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu21(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error(((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toString(-1875328712) +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu22(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { (0.2892320221306368).toChar().isHighSurrogate() } ?: error("bkthx" +
                prope14.joinToString(separator = "\n"))
    }
}

val prope10 = Kla14()

class Kla15 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu23() {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = (linkedMapOf<Byte, Byte>()).size.coerceAtLeast((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false))
        prope16 = false
        prope17 = {}
    }

    suspend fun fu24() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu25(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((OutputWorkScreenView(TODO())).equals(Kla2().prope4).equals(Kla2().prope4)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !(Pair<Kla12?, Long?>(Kla12(), -4325937659338837671))?.copy(null, -2370947395490253006).equals(Kla2().prope4)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope11.prope17 = {
            prope11.prope16 = true
        }
    }

    override fun fu18(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:38:28,006 [main:107] - replacing (prope15, Int)
2021-03-11 20:38:28,007 [main:50] - replacing prope15 Int
2021-03-11 20:38:28,007 [main:54] - Getting value of type Int
2021-03-11 20:38:28,261 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:38:28,268 [main:58] - GENERATED VALUE OF TYPE Int = 1674831426
2021-03-11 20:38:28,268 [main:61] - GENERATED IS CALL =false
2021-03-11 20:38:28,515 [main:67] - randomType = Short
2021-03-11 20:38:28,694 [main:302] - generating value of type = Short true depth = 0
2021-03-11 20:38:28,735 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@9dbcc95]
2021-03-11 20:38:28,943 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:38:28,950 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@40dfe4e0]
2021-03-11 20:38:28,950 [main:78] - Generated call from random type = (-21307).compareTo(-40).inv()
2021-03-11 20:38:28,951 [main:106] - GETTING Int from OutputWorkScreenView
2021-03-11 20:38:28,958 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3a87ff62]]
2021-03-11 20:38:28,958 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a]
2021-03-11 20:38:28,958 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3a87ff62]
2021-03-11 20:38:29,166 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:38:29,172 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals(Kla2().prope4).compareTo(false)
2021-03-11 20:38:29,172 [main:114] - replacement of prope15 of type Int is 1674831426
2021-03-11 20:38:29,353 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 20:38:29,354 [main:66] - Compilation checking started
2021-03-11 20:38:30,179 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}

inline class Kla8(val s: Any)

interface Kla9<Ty4> {
    suspend fun fu17(): Ty4
}

class Kla10 : Kla9<Kla8> {
    override suspend fun fu17(): Kla8 = suspendCoroutine { it.resume(Kla8("vgnrl")) }
}

fun fu14(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box355(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
var prope12: String? = null
    fu14 {
        val prope19: Kla9<*> = Kla10()
        prope12 = Kla8("pklwo").s as String
    }
    return prope12!!
}

fun <Ty4> fu15(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
x(prope13.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla13<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu18(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu18(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla14 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu20() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu20(it)
    }

    fun fu20(c: Continuation<*>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla2().prope4).toString())
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu21(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error(((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toString(-1875328712) +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu22(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { (0.2892320221306368).toChar().isHighSurrogate() } ?: error("bkthx" +
                prope14.joinToString(separator = "\n"))
    }
}

val prope10 = Kla14()

class Kla15 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu23() {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = (linkedMapOf<Byte, Byte>()).size.coerceAtLeast((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false))
        prope16 = false
        prope17 = {}
    }

    suspend fun fu24() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu25(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((OutputWorkScreenView(TODO())).equals(Kla2().prope4).equals(Kla2().prope4)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1674831426)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !(Pair<Kla12?, Long?>(Kla12(), -4325937659338837671))?.copy(null, -2370947395490253006).equals(Kla2().prope4)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope11.prope17 = {
            prope11.prope16 = true
        }
    }

    override fun fu18(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:38:30,181 [main:107] - replacing (prope11, Kla15)
2021-03-11 20:38:30,182 [main:50] - replacing prope11 Kla15
2021-03-11 20:38:30,183 [main:54] - Getting value of type Kla15
2021-03-11 20:38:30,396 [main:302] - generating value of type = Kla15 false depth = 0
2021-03-11 20:38:30,402 [main:112] - generating klass Kla15 text = class Kla15 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu23() {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = (linkedMapOf<Byte, Byte>()).size.coerceAtLeast((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false))
        prope16 = false
        prope17 = {}
    }

    suspend fun fu24() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu25(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((OutputWorkScreenView(TODO())).equals(Kla2().prope4).equals(Kla2().prope4)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1674831426)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !(Pair<Kla12?, Long?>(Kla12(), -4325937659338837671))?.copy(null, -2370947395490253006).equals(Kla2().prope4)) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 20:38:30,402 [main:58] - GENERATED VALUE OF TYPE Kla15 = Kla15()
2021-03-11 20:38:30,402 [main:61] - GENERATED IS CALL =true
2021-03-11 20:38:30,415 [main:67] - randomType = UByte
2021-03-11 20:38:30,621 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 20:38:30,669 [main:106] - GETTING Kla15 from Continuation<Any?>
2021-03-11 20:38:30,679 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-11 20:38:30,689 [main:106] - GETTING Kla15 from Kla0<Nothing?>
2021-03-11 20:38:30,704 [main:106] - GETTING Kla15 from Long
2021-03-11 20:38:30,746 [main:106] - GETTING Kla15 from Function0<Unit>
2021-03-11 20:38:30,754 [main:106] - GETTING Kla15 from OutputWorkScreenView
2021-03-11 20:38:30,759 [main:106] - GETTING Kla15 from OutputWorkScreenView
2021-03-11 20:38:30,759 [main:106] - GETTING Kla15 from Boolean
2021-03-11 20:38:30,768 [main:106] - GETTING Kla15 from Kla0<List<Long>>
2021-03-11 20:38:30,779 [main:106] - GETTING Kla15 from Boolean
2021-03-11 20:38:30,780 [main:106] - GETTING Kla15 from OutputWorkScreenView
2021-03-11 20:38:30,781 [main:106] - GETTING Kla15 from EmptyCoroutineContext
2021-03-11 20:38:30,795 [main:106] - GETTING Kla15 from Continuation<UByte?>
2021-03-11 20:38:30,804 [main:106] - GETTING Kla15 from Any?
2021-03-11 20:38:30,807 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-11 20:38:30,808 [main:106] - GETTING Kla15 from SuspendFunction0<Long>
2021-03-11 20:38:30,817 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-11 20:38:30,817 [main:106] - GETTING Kla15 from Int
2021-03-11 20:38:30,847 [main:114] - replacement of prope11 of type Kla15 is Kla15()
2021-03-11 20:38:31,059 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:38:31,060 [main:66] - Compilation checking started
2021-03-11 20:38:31,926 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}

inline class Kla8(val s: Any)

interface Kla9<Ty4> {
    suspend fun fu17(): Ty4
}

class Kla10 : Kla9<Kla8> {
    override suspend fun fu17(): Kla8 = suspendCoroutine { it.resume(Kla8("vgnrl")) }
}

fun fu14(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box355(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
var prope12: String? = null
    fu14 {
        val prope19: Kla9<*> = Kla10()
        prope12 = Kla8("pklwo").s as String
    }
    return prope12!!
}

fun <Ty4> fu15(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
x(prope13.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla13<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu18(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu18(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla14 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu20() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu20(it)
    }

    fun fu20(c: Continuation<*>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla2().prope4).toString())
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu21(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error(((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toString(-1875328712) +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu22(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { (0.2892320221306368).toChar().isHighSurrogate() } ?: error("bkthx" +
                prope14.joinToString(separator = "\n"))
    }
}

val prope10 = Kla14()

class Kla15 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu23() {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = (linkedMapOf<Byte, Byte>()).size.coerceAtLeast((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false))
        prope16 = false
        prope17 = {}
    }

    suspend fun fu24() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu25(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((OutputWorkScreenView(TODO())).equals(Kla2().prope4).equals(Kla2().prope4)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1674831426)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !(Pair<Kla12?, Long?>(Kla12(), -4325937659338837671))?.copy(null, -2370947395490253006).equals(Kla2().prope4)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
Kla15().prope17 = {
            prope11.prope16 = true
        }
    }

    override fun fu18(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:38:31,929 [main:107] - replacing (prope13, Any?)
2021-03-11 20:38:31,929 [main:50] - replacing prope13 Any?
2021-03-11 20:38:31,929 [main:54] - Getting value of type Any?
2021-03-11 20:38:32,131 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:38:32,132 [main:58] - GENERATED VALUE OF TYPE Any? = "ppqbq"
2021-03-11 20:38:32,132 [main:61] - GENERATED IS CALL =false
2021-03-11 20:38:32,144 [main:67] - randomType = Int
2021-03-11 20:38:32,346 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:38:32,403 [main:106] - GETTING Any? from OutputWorkScreenView
2021-03-11 20:38:32,410 [main:106] - GETTING Any? from Boolean
2021-03-11 20:38:32,423 [main:106] - GETTING Any? from Any?
2021-03-11 20:38:32,429 [main:106] - GETTING Any? from OutputWorkScreenView
2021-03-11 20:38:32,429 [main:106] - GETTING Any? from CoroutineContext
2021-03-11 20:38:32,439 [main:106] - GETTING Any? from Continuation<UByte?>
2021-03-11 20:38:32,451 [main:106] - GETTING Any? from SuspendFunction0<Long>
2021-03-11 20:38:32,465 [main:106] - GETTING Any? from Kla0<Nothing?>
2021-03-11 20:38:32,477 [main:106] - GETTING Any? from Boolean
2021-03-11 20:38:32,478 [main:106] - GETTING Any? from Function0<Unit>
2021-03-11 20:38:32,486 [main:106] - GETTING Any? from CoroutineContext
2021-03-11 20:38:32,487 [main:106] - GETTING Any? from Int
2021-03-11 20:38:32,519 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-11 20:38:32,532 [main:106] - GETTING Any? from CoroutineContext
2021-03-11 20:38:32,533 [main:106] - GETTING Any? from Kla0<List<Long>>
2021-03-11 20:38:32,544 [main:106] - GETTING Any? from OutputWorkScreenView
2021-03-11 20:38:32,545 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-11 20:38:32,552 [main:106] - GETTING Any? from Long
2021-03-11 20:38:32,581 [main:114] - replacement of prope13 of type Any? is "ppqbq"
2021-03-11 20:38:32,781 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:38:32,781 [main:66] - Compilation checking started
2021-03-11 20:38:33,347 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}

inline class Kla8(val s: Any)

interface Kla9<Ty4> {
    suspend fun fu17(): Ty4
}

class Kla10 : Kla9<Kla8> {
    override suspend fun fu17(): Kla8 = suspendCoroutine { it.resume(Kla8("vgnrl")) }
}

fun fu14(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box355(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
var prope12: String? = null
    fu14 {
        val prope19: Kla9<*> = Kla10()
        prope12 = Kla8("pklwo").s as String
    }
    return prope12!!
}

fun <Ty4> fu15(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
x(prope13.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
this."ppqbq" = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla13<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu18(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu18(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla14 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu20() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu20(it)
    }

    fun fu20(c: Continuation<*>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla2().prope4).toString())
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu21(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error(((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toString(-1875328712) +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu22(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { (0.2892320221306368).toChar().isHighSurrogate() } ?: error("bkthx" +
                prope14.joinToString(separator = "\n"))
    }
}

val prope10 = Kla14()

class Kla15 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu23() {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = (linkedMapOf<Byte, Byte>()).size.coerceAtLeast((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false))
        prope16 = false
        prope17 = {}
    }

    suspend fun fu24() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu25(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((OutputWorkScreenView(TODO())).equals(Kla2().prope4).equals(Kla2().prope4)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1674831426)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !(Pair<Kla12?, Long?>(Kla12(), -4325937659338837671))?.copy(null, -2370947395490253006).equals(Kla2().prope4)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
Kla15().prope17 = {
            prope11.prope16 = true
        }
    }

    override fun fu18(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:38:33,350 [main:107] - replacing (prope13.exceptionOrNull(), Throwable?)
2021-03-11 20:38:33,351 [main:50] - replacing prope13.exceptionOrNull() Throwable?
2021-03-11 20:38:33,351 [main:54] - Getting value of type Throwable?
2021-03-11 20:38:33,572 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 20:38:33,792 [main:43] - GENERATING CALL OF fun ClassCastException(message: kotlin.String?): Throwable = TODO()
2021-03-11 20:38:33,799 [main:61] - WITHOUT TYPE PARAMS = fun ClassCastException(message: kotlin.String?): Throwable = TODO()
2021-03-11 20:38:34,253 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:38:34,260 [main:95] - GENERATED = ClassCastException("ashik")
2021-03-11 20:38:34,260 [main:58] - GENERATED VALUE OF TYPE Throwable? = ClassCastException("ashik")
2021-03-11 20:38:34,260 [main:61] - GENERATED IS CALL =true
2021-03-11 20:38:34,272 [main:67] - randomType = UShort
2021-03-11 20:38:34,483 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 20:38:34,530 [main:106] - GETTING Throwable? from OutputWorkScreenView
2021-03-11 20:38:34,537 [main:106] - GETTING Throwable? from Continuation<Any?>
2021-03-11 20:38:34,547 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-11 20:38:34,556 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-11 20:38:34,557 [main:106] - GETTING Throwable? from OutputWorkScreenView
2021-03-11 20:38:34,558 [main:106] - GETTING Throwable? from Long
2021-03-11 20:38:34,590 [main:106] - GETTING Throwable? from EmptyCoroutineContext
2021-03-11 20:38:34,603 [main:106] - GETTING Throwable? from Continuation<UByte?>
2021-03-11 20:38:34,612 [main:106] - GETTING Throwable? from Kla0<Nothing?>
2021-03-11 20:38:34,623 [main:106] - GETTING Throwable? from SuspendFunction0<Long>
2021-03-11 20:38:34,632 [main:106] - GETTING Throwable? from Int
2021-03-11 20:38:34,663 [main:106] - GETTING Throwable? from Any?
2021-03-11 20:38:34,666 [main:106] - GETTING Throwable? from Kla0<List<Long>>
2021-03-11 20:38:34,677 [main:106] - GETTING Throwable? from Boolean
2021-03-11 20:38:34,686 [main:106] - GETTING Throwable? from OutputWorkScreenView
2021-03-11 20:38:34,686 [main:106] - GETTING Throwable? from Boolean
2021-03-11 20:38:34,687 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-11 20:38:34,688 [main:106] - GETTING Throwable? from Function0<Unit>
2021-03-11 20:38:34,696 [main:114] - replacement of prope13.exceptionOrNull() of type Throwable? is ClassCastException("ashik")
2021-03-11 20:38:34,909 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:38:34,909 [main:66] - Compilation checking started
2021-03-11 20:38:35,797 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}

inline class Kla8(val s: Any)

interface Kla9<Ty4> {
    suspend fun fu17(): Ty4
}

class Kla10 : Kla9<Kla8> {
    override suspend fun fu17(): Kla8 = suspendCoroutine { it.resume(Kla8("vgnrl")) }
}

fun fu14(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box355(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
var prope12: String? = null
    fu14 {
        val prope19: Kla9<*> = Kla10()
        prope12 = Kla8("pklwo").s as String
    }
    return prope12!!
}

fun <Ty4> fu15(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
x(prope13.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
ClassCastException("ashik")?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla13<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu18(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu18(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla14 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu20() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu20(it)
    }

    fun fu20(c: Continuation<*>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla2().prope4).toString())
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu21(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error(((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toString(-1875328712) +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu22(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { (0.2892320221306368).toChar().isHighSurrogate() } ?: error("bkthx" +
                prope14.joinToString(separator = "\n"))
    }
}

val prope10 = Kla14()

class Kla15 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu23() {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = (linkedMapOf<Byte, Byte>()).size.coerceAtLeast((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false))
        prope16 = false
        prope17 = {}
    }

    suspend fun fu24() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu25(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((OutputWorkScreenView(TODO())).equals(Kla2().prope4).equals(Kla2().prope4)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1674831426)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !(Pair<Kla12?, Long?>(Kla12(), -4325937659338837671))?.copy(null, -2370947395490253006).equals(Kla2().prope4)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
Kla15().prope17 = {
            prope11.prope16 = true
        }
    }

    override fun fu18(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:38:35,799 [main:107] - replacing (prope13.isSuccess, Boolean)
2021-03-11 20:38:35,801 [main:50] - replacing prope13.isSuccess Boolean
2021-03-11 20:38:35,801 [main:54] - Getting value of type Boolean
2021-03-11 20:38:36,029 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:38:36,035 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:38:36,036 [main:61] - GENERATED IS CALL =false
2021-03-11 20:38:36,307 [main:67] - randomType = Array<Kla12>
2021-03-11 20:38:36,491 [main:302] - generating value of type = Array<Kla12> false depth = 0
2021-03-11 20:38:36,717 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<Kla12> = TODO()
2021-03-11 20:38:36,725 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<Kla12> = TODO()
2021-03-11 20:38:36,948 [main:95] - GENERATED = enumValues<Kla12>()
2021-03-11 20:38:36,964 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public infix fun <T> kotlin.Array<out T>.contentDeepEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3d65fbab]
2021-03-11 20:38:37,156 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 20:38:37,377 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 20:38:37,385 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 20:38:37,603 [main:302] - generating value of type = T false depth = 3
2021-03-11 20:38:37,808 [main:43] - GENERATING CALL OF fun <T> maxOf(a: UByte, b: UByte, comparator: kotlin.Comparator<UByte>): T = TODO()
2021-03-11 20:38:37,816 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: UByte, b: UByte, comparator: kotlin.Comparator<UByte>): T = TODO()
2021-03-11 20:38:38,310 [main:302] - generating value of type = UByte true depth = 6
2021-03-11 20:38:38,316 [main:302] - generating value of type = UByte true depth = 6
2021-03-11 20:38:38,322 [main:302] - generating value of type = Comparator<UByte> false depth = 6
2021-03-11 20:38:38,512 [main:43] - GENERATING CALL OF fun <T> nullsFirst(comparator: kotlin.Comparator<UByte>): Comparator<UByte> = TODO()
2021-03-11 20:38:38,519 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsFirst(comparator: kotlin.Comparator<UByte>): Comparator<UByte> = TODO()
2021-03-11 20:38:39,009 [main:302] - generating value of type = Comparator<UByte> false depth = 9
2021-03-11 20:38:39,479 [main:43] - GENERATING CALL OF fun <T, K> compareBy(comparator: kotlin.Comparator<Double?>, selector: (UByte)->Double?): Comparator<UByte> = TODO()
2021-03-11 20:38:39,487 [main:61] - WITHOUT TYPE PARAMS = fun <T, K> compareBy(comparator: kotlin.Comparator<Double?>, selector: (UByte)->Double?): Comparator<UByte> = TODO()
2021-03-11 20:38:40,226 [main:302] - generating value of type = Comparator<Double?> false depth = 12
2021-03-11 20:38:40,443 [main:43] - GENERATING CALL OF fun <T> naturalOrder(): Comparator<Double?> = TODO()
2021-03-11 20:38:40,451 [main:61] - WITHOUT TYPE PARAMS = fun <T> naturalOrder(): Comparator<Double?> = TODO()
2021-03-11 20:38:40,650 [main:95] - GENERATED = naturalOrder<Double?>()
2021-03-11 20:38:40,650 [main:302] - generating value of type = Function1<UByte, Double?> false depth = 12
2021-03-11 20:38:40,656 [main:302] - generating value of type = Double true depth = 13
2021-03-11 20:38:40,662 [main:95] - GENERATED = compareBy<UByte, Double?>(naturalOrder<Double?>(), {a: UByte -> 0.900601614479873})
2021-03-11 20:38:40,663 [main:95] - GENERATED = nullsFirst<UByte>(compareBy<UByte, Double?>(naturalOrder<Double?>(), {a: UByte -> 0.900601614479873}))
2021-03-11 20:38:40,663 [main:95] - GENERATED = maxOf<UByte>(48.toUByte(), 107.toUByte(), nullsFirst<UByte>(compareBy<UByte, Double?>(naturalOrder<Double?>(), {a: UByte -> 0.900601614479873})))
2021-03-11 20:38:40,663 [main:95] - GENERATED = arrayOf<T>(maxOf<UByte>(48.toUByte(), 107.toUByte(), nullsFirst<UByte>(compareBy<UByte, Double?>(naturalOrder<Double?>(), {a: UByte -> 0.900601614479873}))))
2021-03-11 20:38:40,663 [main:78] - Generated call from random type = (enumValues<Kla12>()).contentDeepEquals(arrayOf<T>(maxOf<UByte>(48.toUByte(), 107.toUByte(), nullsFirst<UByte>(compareBy<UByte, Double?>(naturalOrder<Double?>(), {a: UByte -> 0.900601614479873})))))
2021-03-11 20:38:40,664 [main:106] - GETTING Boolean from Continuation<UByte?>
2021-03-11 20:38:40,673 [main:113] - Case = [public abstract fun resumeWith(result: kotlin.Result<kotlin.UByte?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@2464c605], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@46e11c01]]
2021-03-11 20:38:40,673 [main:149] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<kotlin.UByte?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@2464c605]
2021-03-11 20:38:40,895 [main:302] - generating value of type = Result<UByte?> false depth = 0
2021-03-11 20:38:41,110 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->UByte?): Result<UByte?> = TODO()
2021-03-11 20:38:41,118 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->UByte?): Result<UByte?> = TODO()
2021-03-11 20:38:41,590 [main:302] - generating value of type = Function0<UByte?> false depth = 3
2021-03-11 20:38:41,596 [main:302] - generating value of type = UByte true depth = 4
2021-03-11 20:38:41,603 [main:95] - GENERATED = runCatching<UByte?>({ 53.toUByte()})
2021-03-11 20:38:41,603 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@46e11c01]
2021-03-11 20:38:41,603 [main:117] - GENERATED CALL = (fu3<UByte?>({a: UByte? -> require(true, { "pxayf"})})).resumeWith(runCatching<UByte?>({ 53.toUByte()})).equals(Kla2().prope4)
2021-03-11 20:38:41,603 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1ac71443], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]]
2021-03-11 20:38:41,603 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1ac71443]
2021-03-11 20:38:41,810 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:38:41,810 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 20:38:41,811 [main:117] - GENERATED CALL = (fu3<UByte?>({a: UByte? -> require(true, { "pxayf"})})).equals("bwhmx").and((OutputWorkScreenView(TODO())).equals("rzbvt"))
2021-03-11 20:38:41,811 [main:113] - Case = [public abstract val context: kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.Continuation[DeserializedPropertyDescriptor@6a2bce55], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@327a85b0]]
2021-03-11 20:38:41,811 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@327a85b0]
2021-03-11 20:38:41,999 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:38:41,999 [main:117] - GENERATED CALL = (fu3<UByte?>({a: UByte? -> require(true, { "pxayf"})})).context.equals("otycc")
2021-03-11 20:38:42,000 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1ac71443], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]]
2021-03-11 20:38:42,000 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1ac71443]
2021-03-11 20:38:42,000 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]
2021-03-11 20:38:42,000 [main:117] - GENERATED CALL = (fu3<UByte?>({a: UByte? -> require(true, { "pxayf"})})).equals(Kla2().prope4).or(Kla5().prope7)
2021-03-11 20:38:42,000 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1ac71443], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]]
2021-03-11 20:38:42,000 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1ac71443]
2021-03-11 20:38:42,206 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:38:42,206 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]
2021-03-11 20:38:42,206 [main:117] - GENERATED CALL = (fu3<UByte?>({a: UByte? -> require(true, { "pxayf"})})).equals("geoiv").xor((OutputWorkScreenView(TODO())).equals("rzbvt"))
2021-03-11 20:38:42,206 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1ac71443], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]]
2021-03-11 20:38:42,206 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1ac71443]
2021-03-11 20:38:42,207 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]
2021-03-11 20:38:42,207 [main:117] - GENERATED CALL = (fu3<UByte?>({a: UByte? -> require(true, { "pxayf"})})).equals(Kla2().prope4).not()
2021-03-11 20:38:42,207 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1ac71443]]
2021-03-11 20:38:42,207 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1ac71443]
2021-03-11 20:38:42,207 [main:117] - GENERATED CALL = (fu3<UByte?>({a: UByte? -> require(true, { "pxayf"})})).equals(Kla2().prope4)
2021-03-11 20:38:42,207 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1ac71443], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]]
2021-03-11 20:38:42,207 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1ac71443]
2021-03-11 20:38:42,207 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]
2021-03-11 20:38:42,422 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:38:42,422 [main:117] - GENERATED CALL = (fu3<UByte?>({a: UByte? -> require(true, { "pxayf"})})).equals(Kla2().prope4).equals("zgryp")
2021-03-11 20:38:42,422 [main:114] - replacement of prope13.isSuccess of type Boolean is (enumValues<Kla12>()).contentDeepEquals(arrayOf<T>(maxOf<UByte>(48.toUByte(), 107.toUByte(), nullsFirst<UByte>(compareBy<UByte, Double?>(naturalOrder<Double?>(), {a: UByte -> 0.900601614479873})))))
2021-03-11 20:38:42,609 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:38:42,609 [main:66] - Compilation checking started
2021-03-11 20:38:43,258 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}

inline class Kla8(val s: Any)

interface Kla9<Ty4> {
    suspend fun fu17(): Ty4
}

class Kla10 : Kla9<Kla8> {
    override suspend fun fu17(): Kla8 = suspendCoroutine { it.resume(Kla8("vgnrl")) }
}

fun fu14(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box355(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
var prope12: String? = null
    fu14 {
        val prope19: Kla9<*> = Kla10()
        prope12 = Kla8("pklwo").s as String
    }
    return prope12!!
}

fun <Ty4> fu15(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
x(prope13.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
ClassCastException("ashik")?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla13<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
if ((enumValues<Kla12>()).contentDeepEquals(arrayOf<T>(maxOf<UByte>(48.toUByte(), 107.toUByte(), nullsFirst<UByte>(compareBy<UByte, Double?>(naturalOrder<Double?>(), {a: UByte -> 0.900601614479873})))))) {
            resume(prope13.getOrThrow())
        } else {
            fu18(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu18(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla14 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu20() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu20(it)
    }

    fun fu20(c: Continuation<*>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla2().prope4).toString())
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu21(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error(((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toString(-1875328712) +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu22(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { (0.2892320221306368).toChar().isHighSurrogate() } ?: error("bkthx" +
                prope14.joinToString(separator = "\n"))
    }
}

val prope10 = Kla14()

class Kla15 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu23() {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = (linkedMapOf<Byte, Byte>()).size.coerceAtLeast((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false))
        prope16 = false
        prope17 = {}
    }

    suspend fun fu24() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu25(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((OutputWorkScreenView(TODO())).equals(Kla2().prope4).equals(Kla2().prope4)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1674831426)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !(Pair<Kla12?, Long?>(Kla12(), -4325937659338837671))?.copy(null, -2370947395490253006).equals(Kla2().prope4)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
Kla15().prope17 = {
            prope11.prope16 = true
        }
    }

    override fun fu18(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:38:43,260 [main:107] - replacing (i, Int)
2021-03-11 20:38:43,261 [main:50] - replacing i Int
2021-03-11 20:38:43,261 [main:54] - Getting value of type Int
2021-03-11 20:38:43,531 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:38:43,541 [main:58] - GENERATED VALUE OF TYPE Int = 1885523791
2021-03-11 20:38:43,542 [main:61] - GENERATED IS CALL =false
2021-03-11 20:38:45,258 [main:67] - randomType = Function2<HashSet<Long>, Array<Function1<Int, List<Double>>>?, ULong>
2021-03-11 20:38:45,260 [main:106] - GETTING Int from OutputWorkScreenView
2021-03-11 20:38:45,267 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3a87ff62]]
2021-03-11 20:38:45,267 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a]
2021-03-11 20:38:45,267 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3a87ff62]
2021-03-11 20:38:45,267 [main:117] - GENERATED CALL = ((OutputWorkScreenView(TODO()))).equals(Kla2().prope4).compareTo((OutputWorkScreenView(TODO())).equals("rzbvt"))
2021-03-11 20:38:45,267 [main:114] - replacement of i of type Int is 1885523791
2021-03-11 20:38:45,464 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 20:38:45,465 [main:66] - Compilation checking started
2021-03-11 20:38:46,326 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}

inline class Kla8(val s: Any)

interface Kla9<Ty4> {
    suspend fun fu17(): Ty4
}

class Kla10 : Kla9<Kla8> {
    override suspend fun fu17(): Kla8 = suspendCoroutine { it.resume(Kla8("vgnrl")) }
}

fun fu14(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box355(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
var prope12: String? = null
    fu14 {
        val prope19: Kla9<*> = Kla10()
        prope12 = Kla8("pklwo").s as String
    }
    return prope12!!
}

fun <Ty4> fu15(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
x(prope13.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
ClassCastException("ashik")?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla13<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu18(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu18(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla14 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu20() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu20(it)
    }

    fun fu20(c: Continuation<*>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla2().prope4).toString())
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu21(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error(((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toString(-1875328712) +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu22(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { (0.2892320221306368).toChar().isHighSurrogate() } ?: error("bkthx" +
                prope14.joinToString(separator = "\n"))
    }
}

val prope10 = Kla14()

class Kla15 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu23() {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = (linkedMapOf<Byte, Byte>()).size.coerceAtLeast((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false))
        prope16 = false
        prope17 = {}
    }

    suspend fun fu24() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu25(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((OutputWorkScreenView(TODO())).equals(Kla2().prope4).equals(Kla2().prope4)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + 1885523791 + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1674831426)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !(Pair<Kla12?, Long?>(Kla12(), -4325937659338837671))?.copy(null, -2370947395490253006).equals(Kla2().prope4)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
Kla15().prope17 = {
            prope11.prope16 = true
        }
    }

    override fun fu18(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:38:46,329 [main:107] - replacing ({ error(((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toString(-1875328712) +
                prope14.joinToString(separator = "\n")) }, Function0<Nothing>)
2021-03-11 20:38:46,329 [main:50] - replacing { error(((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toString(-1875328712) +
                prope14.joinToString(separator = "\n")) } Function0<Nothing>
2021-03-11 20:38:46,329 [main:54] - Getting value of type Function0<Nothing>
2021-03-11 20:38:46,566 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-11 20:38:46,572 [main:302] - generating value of type = Nothing false depth = 1
2021-03-11 20:38:46,581 [main:58] - GENERATED VALUE OF TYPE Function0<Nothing> = { TODO()}
2021-03-11 20:38:46,581 [main:61] - GENERATED IS CALL =false
2021-03-11 20:38:46,595 [main:67] - randomType = UShort
2021-03-11 20:38:46,808 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 20:38:46,854 [main:106] - GETTING Function0<Nothing> from OutputWorkScreenView
2021-03-11 20:38:46,861 [main:106] - GETTING Function0<Nothing> from Continuation<UByte?>
2021-03-11 20:38:46,872 [main:106] - GETTING Function0<Nothing> from CoroutineContext
2021-03-11 20:38:46,882 [main:106] - GETTING Function0<Nothing> from OutputWorkScreenView
2021-03-11 20:38:46,883 [main:106] - GETTING Function0<Nothing> from Function0<Unit>
2021-03-11 20:38:46,892 [main:106] - GETTING Function0<Nothing> from EmptyCoroutineContext
2021-03-11 20:38:46,907 [main:106] - GETTING Function0<Nothing> from Long
2021-03-11 20:38:46,936 [main:106] - GETTING Function0<Nothing> from Boolean
2021-03-11 20:38:46,945 [main:106] - GETTING Function0<Nothing> from Boolean
2021-03-11 20:38:46,946 [main:106] - GETTING Function0<Nothing> from Int
2021-03-11 20:38:46,977 [main:106] - GETTING Function0<Nothing> from Continuation<Any?>
2021-03-11 20:38:46,984 [main:106] - GETTING Function0<Nothing> from CoroutineContext
2021-03-11 20:38:46,985 [main:106] - GETTING Function0<Nothing> from OutputWorkScreenView
2021-03-11 20:38:46,986 [main:106] - GETTING Function0<Nothing> from Kla0<List<Long>>
2021-03-11 20:38:46,999 [main:106] - GETTING Function0<Nothing> from SuspendFunction0<Long>
2021-03-11 20:38:47,009 [main:106] - GETTING Function0<Nothing> from CoroutineContext
2021-03-11 20:38:47,010 [main:106] - GETTING Function0<Nothing> from Kla0<Nothing?>
2021-03-11 20:38:47,022 [main:106] - GETTING Function0<Nothing> from Any?
2021-03-11 20:38:47,025 [main:114] - replacement of { error(((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false)).toString(-1875328712) +
                prope14.joinToString(separator = "\n")) } of type Function0<Nothing> is { TODO()}
2021-03-11 20:38:47,242 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:38:47,243 [main:66] - Compilation checking started
2021-03-11 20:38:48,147 [main:53] - Result = true
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}

inline class Kla8(val s: Any)

interface Kla9<Ty4> {
    suspend fun fu17(): Ty4
}

class Kla10 : Kla9<Kla8> {
    override suspend fun fu17(): Kla8 = suspendCoroutine { it.resume(Kla8("vgnrl")) }
}

fun fu14(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box355(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
var prope12: String? = null
    fu14 {
        val prope19: Kla9<*> = Kla10()
        prope12 = Kla8("pklwo").s as String
    }
    return prope12!!
}

fun <Ty4> fu15(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
x(prope13.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
ClassCastException("ashik")?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla13<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu18(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu18(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla14 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu20() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu20(it)
    }

    fun fu20(c: Continuation<*>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla2().prope4).toString())
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu21(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu22(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { (0.2892320221306368).toChar().isHighSurrogate() } ?: error("bkthx" +
                prope14.joinToString(separator = "\n"))
    }
}

val prope10 = Kla14()

class Kla15 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu23() {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = (linkedMapOf<Byte, Byte>()).size.coerceAtLeast((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false))
        prope16 = false
        prope17 = {}
    }

    suspend fun fu24() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu25(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((OutputWorkScreenView(TODO())).equals(Kla2().prope4).equals(Kla2().prope4)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + 1885523791 + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1674831426)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !(Pair<Kla12?, Long?>(Kla12(), -4325937659338837671))?.copy(null, -2370947395490253006).equals(Kla2().prope4)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
Kla15().prope17 = {
            prope11.prope16 = true
        }
    }

    override fun fu18(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:38:48,149 [main:107] - replacing (c, Continuation<*>)
2021-03-11 20:38:48,149 [main:50] - replacing c Continuation<*>
2021-03-11 20:38:48,150 [main:54] - Getting value of type Continuation<*>
2021-03-11 20:38:48,354 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 20:38:48,565 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:38:48,573 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:38:49,284 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 20:38:49,473 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:38:49,481 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:38:49,983 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 20:38:50,181 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:38:50,189 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:38:50,925 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 20:38:51,176 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:38:51,184 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:38:51,941 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 12
2021-03-11 20:38:52,198 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:38:52,206 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:38:52,955 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:38:52,955 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:38:52,955 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:38:52,955 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:38:52,955 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:38:52,955 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 20:38:53,731 [main:67] - randomType = Array<HashMap<Kla8, Kla4>>?
2021-03-11 20:38:53,913 [main:302] - generating value of type = Array<HashMap<Kla8, Kla4>> false depth = 0
2021-03-11 20:38:54,161 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<HashMap<Kla8, Kla4>> = TODO()
2021-03-11 20:38:54,169 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<HashMap<Kla8, Kla4>> = TODO()
2021-03-11 20:38:54,615 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:38:54,621 [main:95] - GENERATED = arrayOfNulls<HashMap<Kla8, Kla4>>(-1172358814)
2021-03-11 20:38:54,645 [main:106] - GETTING Continuation<*> from Any?
2021-03-11 20:38:54,649 [main:106] - GETTING Continuation<*> from EmptyCoroutineContext
2021-03-11 20:38:54,663 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-11 20:38:54,668 [main:106] - GETTING Continuation<*> from Function0<Unit>
2021-03-11 20:38:54,678 [main:106] - GETTING Continuation<*> from OutputWorkScreenView
2021-03-11 20:38:54,683 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-11 20:38:54,683 [main:106] - GETTING Continuation<*> from Boolean
2021-03-11 20:38:54,692 [main:106] - GETTING Continuation<*> from Kla0<List<Long>>
2021-03-11 20:38:54,703 [main:106] - GETTING Continuation<*> from Continuation<UByte?>
2021-03-11 20:38:54,712 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-11 20:38:54,713 [main:106] - GETTING Continuation<*> from Boolean
2021-03-11 20:38:54,713 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:38:54,745 [main:106] - GETTING Continuation<*> from OutputWorkScreenView
2021-03-11 20:38:54,746 [main:106] - GETTING Continuation<*> from Continuation<Any?>
2021-03-11 20:38:54,753 [main:106] - GETTING Continuation<*> from OutputWorkScreenView
2021-03-11 20:38:54,754 [main:106] - GETTING Continuation<*> from Kla0<Nothing?>
2021-03-11 20:38:54,766 [main:106] - GETTING Continuation<*> from SuspendFunction0<Long>
2021-03-11 20:38:54,775 [main:106] - GETTING Continuation<*> from Long
2021-03-11 20:38:54,804 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 20:38:54,804 [main:107] - replacing (isSuccess, Boolean)
2021-03-11 20:38:54,804 [main:50] - replacing isSuccess Boolean
2021-03-11 20:38:54,804 [main:54] - Getting value of type Boolean
2021-03-11 20:38:54,986 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:38:54,992 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:38:54,992 [main:61] - GENERATED IS CALL =false
2021-03-11 20:38:55,005 [main:67] - randomType = Long
2021-03-11 20:38:55,188 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:38:55,229 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@76e29136]
2021-03-11 20:38:55,229 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@798b3281]
2021-03-11 20:38:55,230 [main:78] - Generated call from random type = (4308226143976601828).toLong().equals(Kla2().prope4)
2021-03-11 20:38:55,230 [main:106] - GETTING Boolean from OutputWorkScreenView
2021-03-11 20:38:55,234 [main:113] - Case = [public final val root: kotlin.Unit defined in OutputWorkScreenView[PropertyDescriptorImpl@5a71d402], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]]
2021-03-11 20:38:55,234 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3627e490]
2021-03-11 20:38:55,417 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:38:55,417 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).root.equals("zhcsf")
2021-03-11 20:38:55,418 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]]
2021-03-11 20:38:55,418 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a]
2021-03-11 20:38:55,599 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:38:55,599 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10be08b6]
2021-03-11 20:38:55,599 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("caoog").not()
2021-03-11 20:38:55,599 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]]
2021-03-11 20:38:55,599 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a]
2021-03-11 20:38:55,599 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77eb3242]
2021-03-11 20:38:55,779 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:38:55,786 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals(Kla2().prope4).xor(true)
2021-03-11 20:38:55,786 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]]
2021-03-11 20:38:55,786 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a]
2021-03-11 20:38:55,786 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3969b65b]
2021-03-11 20:38:55,966 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:38:55,967 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals(Kla2().prope4).equals("faebx")
2021-03-11 20:38:55,970 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]]
2021-03-11 20:38:55,971 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a]
2021-03-11 20:38:55,971 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5775f993]
2021-03-11 20:38:55,971 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals(Kla2().prope4).and(Kla5().prope7)
2021-03-11 20:38:55,971 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]]
2021-03-11 20:38:55,971 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a]
2021-03-11 20:38:55,971 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1547992c]
2021-03-11 20:38:55,971 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals(Kla2().prope4).or(Kla5().prope7)
2021-03-11 20:38:55,971 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a]]
2021-03-11 20:38:55,971 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in OutputWorkScreenView[DeserializedSimpleFunctionDescriptor@732bcb3a]
2021-03-11 20:38:55,972 [main:117] - GENERATED CALL = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals(Kla2().prope4)
2021-03-11 20:38:55,972 [main:114] - replacement of isSuccess of type Boolean is (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals(Kla2().prope4).or(Kla5().prope7)
2021-03-11 20:38:56,161 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:38:56,162 [main:66] - Compilation checking started
2021-03-11 20:38:56,763 [main:49] - Result = false
Text:


import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

interface SomeOutputScreenCallbacks {
    fun ontest()
}

class OutputWorkScreenView(callbacks: SomeOutputScreenCallbacks) {
    val root = vBox {
        button(callbacks::ontest)
    }
}

inline fun vBox(crossinline action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    return { action() }()
}

inline fun button(onAction: () -> Unit) {
    onAction()
}

fun box(): String {
    var res = "FAIL"
    OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })
    return res
}

class Kla0<Ty0>(val t: suspend () -> Ty0) {
    suspend fun fu5() = t()
}

fun <Ty0> fu0(block: suspend () -> Ty0) = Kla0({ null})

inline fun <Ty1, Ty2, Ty3> fu1(source1: Kla0<Ty1>, source2: Kla0<Ty2>, crossinline zipper: (Ty1, Ty2) -> Ty3) =
    Kla0<List<Long>>({ MutableList<Long>(278442175, {a: Int -> 2873252555121437490})})

fun fu2(c: suspend () -> Unit) {
    var res = "FAIL"
c.startCoroutine(Kla1)
}

fun box544(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
    val prope3 = Kla0 { 2 }
    var prope4 = -1
    fu2 { println()}
    return if ((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false) == 3) "OK" else "FAIL $prope4"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
{a: Ty0 -> check(true)}(prope4.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
runCatching<Any?>({ "dcqsf"}).exceptionOrNull()?.let({a: Throwable -> println("lafvb")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var res = "FAIL"
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var res = "FAIL"
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu6(UnsupportedOperationException(NotImplementedError("mtmbo")))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        var res = "FAIL"
if (c !is CoroutineStackFrame) error("gepls")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu9(method: String) {
        var res = "FAIL"
prope5.find { (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf").or(false) }?.let { error("lwdnk")}
    }

    fun fu10(method: String) {
        var res = "FAIL"
prope5.find { equals("ugjdf")} ?: error("zyqds")
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (ArrayDeque<HashSet<Long>>(prope6))?.subList(1688603679, 3).add(linkedSetOf<Long>())

    var prope8: () -> Unit = {}

    fun fu11() {
        var res = "FAIL"
prope6 = 0
        prope7 = (OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))
        prope8 = { require(true, { "nqnav"})}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "etbhc"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (OutputWorkScreenView(TODO())).equals("builr").not()) {
        var res = "FAIL"
for (i in -44343276..numberOfSuspensions) {
            if ((6.toUByte()).toUShort().equals("tnwpo")) error("uqbxr")
            prope8()
        }
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("oyegs").compareTo((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("trzey").and((6.toUByte()).toUShort().equals("tnwpo"))) != numberOfSuspensions)
            error("boagh" + prope6)
        if (prope7) error("jqrwr")
        prope8()
        if ((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("gpkuh").and(true)) error("nocrd")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
prope1.prope8 = {
            prope1.prope7 = (Kla1()).equals("vmrgv").or((OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals("ugjdf"))
        }
    }

    override fun fu6(exception: Throwable) {
        var res = "FAIL"
throw ConcurrentModificationException("jfuot", ConcurrentModificationException("gpsum", IllegalStateException("wksnp", NumberFormatException())))
    }
}

inline class Kla8(val s: Any)

interface Kla9<Ty4> {
    suspend fun fu17(): Ty4
}

class Kla10 : Kla9<Kla8> {
    override suspend fun fu17(): Kla8 = suspendCoroutine { it.resume(Kla8("vgnrl")) }
}

fun fu14(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box355(): String {
    var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
var prope12: String? = null
    fu14 {
        val prope19: Kla9<*> = Kla10()
        prope12 = Kla8("pklwo").s as String
    }
    return prope12!!
}

fun <Ty4> fu15(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
x(prope13.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
ClassCastException("ashik")?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla13<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty4>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
if (prope13.(OutputWorkScreenView(object : SomeOutputScreenCallbacks {
        override fun ontest() {
            res = "OK"
        }
    })).equals(Kla2().prope4).or(Kla5().prope7)) {
            resume(prope13.getOrThrow())
        } else {
            fu18(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu18(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla14 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu20() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu20(it)
    }

    fun fu20(c: Continuation<*>) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla2().prope4).toString())
        prope14.clear()
        var prope18: CoroutineStackFrame? = c
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu21(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu22(method: String) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope14.find { (0.2892320221306368).toChar().isHighSurrogate() } ?: error("bkthx" +
                prope14.joinToString(separator = "\n"))
    }
}

val prope10 = Kla14()

class Kla15 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu23() {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
prope15 = (linkedMapOf<Byte, Byte>()).size.coerceAtLeast((OutputWorkScreenView(TODO())).equals("rzbvt").compareTo(false))
        prope16 = false
        prope17 = {}
    }

    suspend fun fu24() = suspendCoroutine<Unit> { c ->
        prope15++
        prope17 = { c.resume(Unit) }
    }

    fun fu25(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
for (i in 1..numberOfSuspensions) {
            if ((OutputWorkScreenView(TODO())).equals(Kla2().prope4).equals(Kla2().prope4)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + 1885523791 + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1674831426)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !(Pair<Kla12?, Long?>(Kla12(), -4325937659338837671))?.copy(null, -2370947395490253006).equals(Kla2().prope4)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var res = "FAIL"
val prope2 = Kla0<Int>({ -916515383})
val prope3 = Kla0 { 2 }
var prope4 = -1
val prope0 = Kla4()
val prope1 = Kla5()
Kla15().prope17 = {
            prope11.prope16 = true
        }
    }

    override fun fu18(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:38:56,766 [main:107] - replacing ("\n", String)
2021-03-11 20:38:56,766 [main:50] - replacing "\n" String
2021-03-11 20:38:56,766 [main:54] - Getting value of type String
2021-03-11 20:38:56,956 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:38:56,962 [main:58] - GENERATED VALUE OF TYPE String = "urorb"
2021-03-11 20:38:56,962 [main:61] - GENERATED IS CALL =false
2021-03-11 20:38:57,205 [main:67] - randomType = ArrayDeque<Kla4>
2021-03-11 20:38:57,385 [main:302] - generating value of type = ArrayDeque<Kla4> false depth = 0
2021-03-11 20:38:57,574 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Kla4> = TODO()
2021-03-11 20:38:57,581 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Kla4> = TODO()
2021-03-11 20:38:57,990 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:38:57,996 [main:95] - GENERATED = ArrayDeque<Kla4>(730271884)
2021-03-11 20:38:58,124 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@5c8b9904]
2021-03-11 20:38:58,124 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@ea4252]
2021-03-11 20:38:58,304 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:38:58,493 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:38:58,697 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:38:58,922 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 20:38:58,930 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 20:38:59,381 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 20:38:59,567 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 20:38:59,575 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 20:38:59,978 [main:302] - generating value of type = Int true depth = 6
2021-03-11 20:38:59,984 [main:95] - GENERATED = StringBuilder(359477411)
2021-03-11 20:38:59,984 [main:95] - GENERATED = StringBuilder(StringBuilder(359477411))
2021-03-11 20:39:00,176 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:39:00,400 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 20:39:00,406 [main:302] - generating value of type = CharSequence false depth = 1
