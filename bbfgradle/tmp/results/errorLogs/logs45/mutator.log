2021-03-11 23:34:21,300 [main:66] - Compilation checking started
2021-03-11 23:34:22,809 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:34:22,813 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 23:34:22,825 [main:66] - Compilation checking started
2021-03-11 23:34:23,486 [main:53] - Result = true
Text:
open class A {
    open fun foo(a: String = "zxvvu", b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}
2021-03-11 23:34:23,487 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:34:23,489 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 23:34:23,490 [main:66] - Compilation checking started
2021-03-11 23:34:24,134 [main:53] - Result = true
Text:
open class A {
    open fun foo(a: String = "zxvvu", b: String  = "uayvp") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}
2021-03-11 23:34:24,135 [main:50] - replacing a: String String
2021-03-11 23:34:24,135 [main:54] - Getting value of type String
2021-03-11 23:34:24,280 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:34:24,281 [main:58] - GENERATED VALUE OF TYPE String = "uwimd"
2021-03-11 23:34:24,282 [main:61] - GENERATED IS CALL =false
2021-03-11 23:34:24,789 [main:67] - randomType = UByte
2021-03-11 23:34:24,930 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 23:34:25,094 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@31ea8b0e]
2021-03-11 23:34:25,096 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b22c9cb]
2021-03-11 23:34:25,225 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:25,227 [main:78] - Generated call from random type = (102.toUByte()).toUShort().toString(2033044406)
2021-03-11 23:34:25,227 [main:106] - GETTING String from String
2021-03-11 23:34:25,292 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eba77a7]]
2021-03-11 23:34:25,293 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eba77a7]
2021-03-11 23:34:25,295 [main:117] - GENERATED CALL = (a).capitalize()
2021-03-11 23:34:25,296 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cc909f5]]
2021-03-11 23:34:25,296 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8]
2021-03-11 23:34:25,495 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:25,497 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cc909f5]
2021-03-11 23:34:25,499 [main:117] - GENERATED CALL = (a).get(1554859556).uppercase()
2021-03-11 23:34:25,499 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ff4677f]]
2021-03-11 23:34:25,499 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ff4677f]
2021-03-11 23:34:25,631 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:25,633 [main:117] - GENERATED CALL = (a).drop(-784462584)
2021-03-11 23:34:25,633 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33e99277]]
2021-03-11 23:34:25,633 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33e99277]
2021-03-11 23:34:25,752 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:25,880 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:26,005 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:34:26,134 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:34:26,139 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:34:26,410 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:34:26,411 [main:95] - GENERATED = StringBuilder("lplku")
2021-03-11 23:34:26,412 [main:117] - GENERATED CALL = (a).replaceRange(-1357424486, 1970968375, StringBuilder("lplku"))
2021-03-11 23:34:26,412 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7572d8b3]]
2021-03-11 23:34:26,412 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7572d8b3]
2021-03-11 23:34:26,413 [main:117] - GENERATED CALL = (a).trim()
2021-03-11 23:34:26,413 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66ac212]]
2021-03-11 23:34:26,413 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66ac212]
2021-03-11 23:34:26,514 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:34:26,630 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 23:34:26,634 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 23:34:26,863 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:34:26,864 [main:95] - GENERATED = StringBuilder(667823684)
2021-03-11 23:34:26,865 [main:117] - GENERATED CALL = (a).removePrefix(StringBuilder(667823684))
2021-03-11 23:34:26,865 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3358de38]]
2021-03-11 23:34:26,865 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3358de38]
2021-03-11 23:34:26,960 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:27,080 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:27,082 [main:117] - GENERATED CALL = (a).removeRange(-2054195678, -1489339961)
2021-03-11 23:34:27,082 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b6b484c]]
2021-03-11 23:34:27,082 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b6b484c]
2021-03-11 23:34:27,184 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:34:27,322 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 23:34:27,326 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 23:34:27,587 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 23:34:27,592 [main:95] - GENERATED = StringBuilder("cmlvq")
2021-03-11 23:34:27,593 [main:117] - GENERATED CALL = (a).removeSuffix(StringBuilder("cmlvq"))
2021-03-11 23:34:27,594 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b881cae]]
2021-03-11 23:34:27,595 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b881cae]
2021-03-11 23:34:27,688 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:34:27,688 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:34:27,690 [main:117] - GENERATED CALL = (a).takeWhile({a: Char -> false})
2021-03-11 23:34:27,691 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b5f4a37]]
2021-03-11 23:34:27,691 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:34:27,819 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:27,914 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:27,916 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b5f4a37]
2021-03-11 23:34:28,005 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:28,107 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:28,109 [main:117] - GENERATED CALL = (a).subSequence(1675356945, -2013699293).substring(-1395046566, 930393774)
2021-03-11 23:34:28,109 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 23:34:28,110 [main:66] - Compilation checking started
2021-03-11 23:34:28,491 [main:49] - Result = false
Text:
open class A {
    open fun foo(a: String = "zxvvu", b: String  = "uayvp") = b + a
}

class B : A() {
    override fun foo(a: String = (a).removePrefix(StringBuilder(667823684)), b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}


2021-03-11 23:34:28,492 [main:50] - replacing b: String String
2021-03-11 23:34:28,492 [main:54] - Getting value of type String
2021-03-11 23:34:28,589 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:34:28,590 [main:58] - GENERATED VALUE OF TYPE String = "pjsay"
2021-03-11 23:34:28,590 [main:61] - GENERATED IS CALL =false
2021-03-11 23:34:28,594 [main:67] - randomType = A
2021-03-11 23:34:28,688 [main:302] - generating value of type = A false depth = 0
2021-03-11 23:34:28,688 [main:112] - generating klass A text = open class A {
    open fun foo(a: String = "zxvvu", b: String  = "uayvp") = b + a
}
2021-03-11 23:34:28,704 [main:149] - GENERATING call of type public open fun foo(a: kotlin.String, b: kotlin.String = ...): kotlin.String defined in A[SimpleFunctionDescriptorImpl@1d696b35]
2021-03-11 23:34:28,799 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:34:28,800 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dfaff72]
2021-03-11 23:34:28,801 [main:78] - Generated call from random type = (A()).foo(a, "ctbyu").trimStart()
2021-03-11 23:34:28,801 [main:106] - GETTING String from String
2021-03-11 23:34:28,845 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57afba56]]
2021-03-11 23:34:28,845 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57afba56]
2021-03-11 23:34:28,846 [main:117] - GENERATED CALL = (b).uppercase()
2021-03-11 23:34:28,846 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ed92e21]]
2021-03-11 23:34:28,846 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ed92e21]
2021-03-11 23:34:28,847 [main:117] - GENERATED CALL = (b).toUpperCase()
2021-03-11 23:34:28,847 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7023f6c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@147cbdb6]]
2021-03-11 23:34:28,847 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@147cbdb6]
2021-03-11 23:34:28,949 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:28,951 [main:117] - GENERATED CALL = (b).length.toString(-1324365633)
2021-03-11 23:34:28,951 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33e99277]]
2021-03-11 23:34:28,951 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33e99277]
2021-03-11 23:34:29,038 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:29,137 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:29,262 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:34:29,271 [main:117] - GENERATED CALL = (b).replaceRange(-1661980995, -1782942276, "rmxiv")
2021-03-11 23:34:29,271 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dfaff72]]
2021-03-11 23:34:29,271 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dfaff72]
2021-03-11 23:34:29,272 [main:117] - GENERATED CALL = (b).trimStart()
2021-03-11 23:34:29,272 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58527ba7]]
2021-03-11 23:34:29,272 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58527ba7]
2021-03-11 23:34:29,273 [main:117] - GENERATED CALL = (b).trimIndent()
2021-03-11 23:34:29,274 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d6746b]]
2021-03-11 23:34:29,274 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d6746b]
2021-03-11 23:34:29,382 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:34:29,384 [main:117] - GENERATED CALL = (b).replaceBeforeLast('ꖛ', b, a)
2021-03-11 23:34:29,385 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ff4677f]]
2021-03-11 23:34:29,385 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ff4677f]
2021-03-11 23:34:29,473 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:29,474 [main:117] - GENERATED CALL = (b).drop(-367456186)
2021-03-11 23:34:29,474 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7572d8b3]]
2021-03-11 23:34:29,474 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7572d8b3]
2021-03-11 23:34:29,475 [main:117] - GENERATED CALL = (b).trim()
2021-03-11 23:34:29,475 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13d69158]]
2021-03-11 23:34:29,475 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13d69158]
2021-03-11 23:34:29,565 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:34:29,567 [main:117] - GENERATED CALL = (b).replaceIndentByMargin(a, "dqhpa")
2021-03-11 23:34:29,567 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 23:34:29,568 [main:66] - Compilation checking started
2021-03-11 23:34:29,847 [main:49] - Result = false
Text:
open class A {
    open fun foo(a: String = "zxvvu", b: String  = "uayvp") = b + a
}

class B : A() {
    override fun foo(a: String, b: String = (b).replaceIndentByMargin(a, "dqhpa")) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}


2021-03-11 23:34:30,034 [main:112] - generating klass A text = open class A {
    open fun foo(a: String, b: String = "b") = b + a
}
2021-03-11 23:34:30,035 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:34:30,233 [main:45] - Trying to change 17 nodes
2021-03-11 23:34:30,236 [main:53] - replacing (B(), B)
2021-03-11 23:34:30,237 [main:50] - replacing B() B
2021-03-11 23:34:30,237 [main:54] - Getting value of type B
2021-03-11 23:34:30,362 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:34:30,362 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:34:30,363 [main:58] - GENERATED VALUE OF TYPE B = B()
2021-03-11 23:34:30,363 [main:61] - GENERATED IS CALL =true
2021-03-11 23:34:30,679 [main:67] - randomType = HashMap<UShort?, A>
2021-03-11 23:34:30,762 [main:302] - generating value of type = HashMap<UShort?, A> false depth = 0
2021-03-11 23:34:30,872 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<UShort?, A>): HashMap<UShort?, A> = TODO()
2021-03-11 23:34:30,875 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<UShort?, A>): HashMap<UShort?, A> = TODO()
2021-03-11 23:34:30,988 [main:302] - generating value of type = Pair<UShort?, A> false depth = 3
2021-03-11 23:34:31,081 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UShort?, second: A): Pair<UShort?, A> = TODO()
2021-03-11 23:34:31,084 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UShort?, second: A): Pair<UShort?, A> = TODO()
2021-03-11 23:34:31,173 [main:302] - generating value of type = UShort true depth = 6
2021-03-11 23:34:31,173 [main:302] - generating value of type = A false depth = 6
2021-03-11 23:34:31,173 [main:112] - generating klass A text = open class A {
    open fun foo(a: String, b: String = "b") = b + a
}
2021-03-11 23:34:31,174 [main:95] - GENERATED = Pair<UShort?, A>(17677.toUShort(), A())
2021-03-11 23:34:31,174 [main:95] - GENERATED = hashMapOf<UShort?, A>(Pair<UShort?, A>(17677.toUShort(), A()))
2021-03-11 23:34:31,344 [main:106] - GETTING B from String
2021-03-11 23:34:31,380 [main:106] - GETTING B from String
2021-03-11 23:34:31,381 [main:106] - GETTING B from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:34:31,474 [main:61] - replacement of B() of type B is B()
2021-03-11 23:34:31,588 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:34:31,589 [main:53] - replacing (B(), B)
2021-03-11 23:34:31,589 [main:50] - replacing B() B
2021-03-11 23:34:31,590 [main:54] - Getting value of type B
2021-03-11 23:34:31,695 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:34:31,695 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:34:31,696 [main:58] - GENERATED VALUE OF TYPE B = B()
2021-03-11 23:34:31,696 [main:61] - GENERATED IS CALL =true
2021-03-11 23:34:31,790 [main:67] - randomType = Long
2021-03-11 23:34:31,897 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:34:31,954 [main:106] - GETTING B from String
2021-03-11 23:34:31,982 [main:106] - GETTING B from String
2021-03-11 23:34:31,982 [main:61] - replacement of B() of type B is B()
2021-03-11 23:34:32,071 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:34:32,072 [main:53] - replacing ("OK", String)
2021-03-11 23:34:32,073 [main:50] - replacing "OK" String
2021-03-11 23:34:32,073 [main:54] - Getting value of type String
2021-03-11 23:34:32,165 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:34:32,165 [main:58] - GENERATED VALUE OF TYPE String = "wowqa"
2021-03-11 23:34:32,166 [main:61] - GENERATED IS CALL =false
2021-03-11 23:34:32,960 [main:67] - randomType = Triple<Double?, MutableMap<UByte, Char?>?, A>
2021-03-11 23:34:33,042 [main:302] - generating value of type = Triple<Double?, MutableMap<UByte, Char?>?, A> false depth = 0
2021-03-11 23:34:33,134 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Double?, second: MutableMap<UByte, Char?>?, third: A): Triple<Double?, MutableMap<UByte, Char?>?, A> = TODO()
2021-03-11 23:34:33,137 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Double?, second: MutableMap<UByte, Char?>?, third: A): Triple<Double?, MutableMap<UByte, Char?>?, A> = TODO()
2021-03-11 23:34:33,264 [main:302] - generating value of type = Double true depth = 3
2021-03-11 23:34:33,266 [main:302] - generating value of type = MutableMap<UByte, Char?> false depth = 3
2021-03-11 23:34:33,358 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): MutableMap<UByte, Char?> = TODO()
2021-03-11 23:34:33,360 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): MutableMap<UByte, Char?> = TODO()
2021-03-11 23:34:33,442 [main:95] - GENERATED = linkedMapOf<UByte, Char?>()
2021-03-11 23:34:33,442 [main:302] - generating value of type = A false depth = 3
2021-03-11 23:34:33,442 [main:112] - generating klass A text = open class A {
    open fun foo(a: String, b: String = "b") = b + a
}
2021-03-11 23:34:33,443 [main:95] - GENERATED = Triple<Double?, MutableMap<UByte, Char?>?, A>(0.5622433271135331, linkedMapOf<UByte, Char?>(), A())
2021-03-11 23:34:33,468 [main:149] - GENERATING call of type public open fun foo(a: kotlin.String, b: kotlin.String = ...): kotlin.String defined in A[SimpleFunctionDescriptorImpl@3e8ef038]
2021-03-11 23:34:33,469 [main:78] - Generated call from random type = (Triple<Double?, MutableMap<UByte, Char?>?, A>(0.5622433271135331, linkedMapOf<UByte, Char?>(), A())).third.foo(A().foo(), A().foo())
2021-03-11 23:34:33,471 [main:106] - GETTING String from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:34:33,566 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@15855e97], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10620908]]
2021-03-11 23:34:33,566 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10620908]
2021-03-11 23:34:33,649 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:34:33,732 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:34:33,844 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:34:33,846 [main:117] - GENERATED CALL = (f).name.replaceFirst('䥶', '律', true)
2021-03-11 23:34:33,847 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@2adfbd78], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33e99277]]
2021-03-11 23:34:33,847 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@2adfbd78]
2021-03-11 23:34:33,935 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:34:33,936 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:34:34,016 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:34:34,103 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:34:34,111 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@2adfbd78]
2021-03-11 23:34:34,112 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@15855e97], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b881cae]]
2021-03-11 23:34:34,112 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b881cae]
2021-03-11 23:34:34,220 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:34:34,220 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:34:34,222 [main:117] - GENERATED CALL = (f).name.takeWhile({a: Char -> false})
2021-03-11 23:34:34,222 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@15855e97], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@731990b2]]
2021-03-11 23:34:34,222 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@731990b2]
2021-03-11 23:34:34,328 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:34,329 [main:117] - GENERATED CALL = (f).name.take(1351332190)
2021-03-11 23:34:34,329 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@15855e97], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45805c5b]]
2021-03-11 23:34:34,329 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45805c5b]
2021-03-11 23:34:34,416 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:34:34,417 [main:117] - GENERATED CALL = (f).name.substringAfterLast('⚴', A().foo())
2021-03-11 23:34:34,417 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@15855e97], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67931d83]]
2021-03-11 23:34:34,417 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67931d83]
2021-03-11 23:34:34,418 [main:117] - GENERATED CALL = (f).name.trimMargin(A().foo())
2021-03-11 23:34:34,418 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@15855e97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57afba56]]
2021-03-11 23:34:34,418 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57afba56]
2021-03-11 23:34:34,418 [main:117] - GENERATED CALL = (f).name.uppercase()
2021-03-11 23:34:34,418 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@15855e97], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44eb9b9]]
2021-03-11 23:34:34,419 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44eb9b9]
2021-03-11 23:34:34,506 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:34,507 [main:117] - GENERATED CALL = (f).name.takeLast(-1997500929)
2021-03-11 23:34:34,507 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@15855e97], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b17d139]]
2021-03-11 23:34:34,507 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b17d139]
2021-03-11 23:34:34,588 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:34:34,588 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:34:34,590 [main:117] - GENERATED CALL = (f).name.filterNot({a: Char -> true})
2021-03-11 23:34:34,590 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@2adfbd78], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44eb9b9]]
2021-03-11 23:34:34,591 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@2adfbd78]
2021-03-11 23:34:34,691 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:34:34,691 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:34:34,804 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:34:34,907 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:34:34,916 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@2adfbd78]
2021-03-11 23:34:34,917 [main:61] - replacement of "OK" of type String is (f).name.take(1351332190)
2021-03-11 23:34:35,001 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:34:35,002 [main:66] - Compilation checking started
2021-03-11 23:34:35,461 [main:53] - Result = true
Text:
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return (f).name.take(1351332190)
}


2021-03-11 23:34:35,462 [main:53] - replacing (it.name == "a", Boolean)
2021-03-11 23:34:35,462 [main:50] - replacing it.name == "a" Boolean
2021-03-11 23:34:35,462 [main:54] - Getting value of type Boolean
2021-03-11 23:34:35,546 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:34:35,547 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 23:34:35,547 [main:61] - GENERATED IS CALL =false
2021-03-11 23:34:35,549 [main:67] - randomType = A
2021-03-11 23:34:35,641 [main:302] - generating value of type = A false depth = 0
2021-03-11 23:34:35,641 [main:112] - generating klass A text = open class A {
    open fun foo(a: String, b: String = "b") = b + a
}
2021-03-11 23:34:35,649 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@77ba79b7]
2021-03-11 23:34:35,734 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:34:35,734 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3aa2c4f4]
2021-03-11 23:34:35,735 [main:78] - Generated call from random type = (A()).equals("qiitw").not()
2021-03-11 23:34:35,737 [main:106] - GETTING Boolean from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:34:35,811 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ac6b7ae]]
2021-03-11 23:34:35,812 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e]
2021-03-11 23:34:35,904 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ac6b7ae]
2021-03-11 23:34:35,993 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:34:35,994 [main:117] - GENERATED CALL = (f).equals(null).or(false)
2021-03-11 23:34:35,994 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@7d663ea0], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d688fab]]
2021-03-11 23:34:35,994 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@7d663ea0]
2021-03-11 23:34:36,080 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:34:36,081 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:34:36,180 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:34:36,291 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:34:36,311 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@7d663ea0]
2021-03-11 23:34:36,311 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@7d663ea0], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb29618]]
2021-03-11 23:34:36,311 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@7d663ea0]
2021-03-11 23:34:36,399 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:34:36,399 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:34:36,481 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:34:36,572 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:34:36,580 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@7d663ea0]
2021-03-11 23:34:36,580 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3aa2c4f4]]
2021-03-11 23:34:36,581 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e]
2021-03-11 23:34:36,662 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:34:36,663 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3aa2c4f4]
2021-03-11 23:34:36,663 [main:117] - GENERATED CALL = (f).equals("kjroq").not()
2021-03-11 23:34:36,663 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@54480bcc]]
2021-03-11 23:34:36,663 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e]
2021-03-11 23:34:36,772 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:34:36,773 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@54480bcc]
2021-03-11 23:34:36,902 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:34:36,903 [main:117] - GENERATED CALL = (f).equals("uthsv").equals("lvyud")
2021-03-11 23:34:36,903 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@7d663ea0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4f53f1b1]]
2021-03-11 23:34:36,903 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@7d663ea0]
2021-03-11 23:34:36,988 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:34:36,989 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:34:37,075 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:34:37,175 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:34:37,183 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@7d663ea0]
2021-03-11 23:34:37,183 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e]]
2021-03-11 23:34:37,184 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e]
2021-03-11 23:34:37,315 [main:117] - GENERATED CALL = (f).equals(null)
2021-03-11 23:34:37,316 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@7d663ea0], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3175fe]]
2021-03-11 23:34:37,316 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@7d663ea0]
2021-03-11 23:34:37,415 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:34:37,416 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:34:37,510 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:34:37,598 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:34:37,606 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@7d663ea0]
2021-03-11 23:34:37,607 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@15855e97], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d688fab]]
2021-03-11 23:34:37,607 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d688fab]
2021-03-11 23:34:37,689 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:34:37,690 [main:117] - GENERATED CALL = (f).name.endsWith(B().foo(), false)
2021-03-11 23:34:37,690 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17d8267c]]
2021-03-11 23:34:37,690 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e]
2021-03-11 23:34:37,774 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:34:37,774 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17d8267c]
2021-03-11 23:34:37,872 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:34:37,873 [main:117] - GENERATED CALL = (f).equals("vrntw").and(true)
2021-03-11 23:34:37,873 [main:61] - replacement of it.name == "a" of type Boolean is (A()).equals("qiitw").not()
2021-03-11 23:34:37,970 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:34:37,970 [main:66] - Compilation checking started
2021-03-11 23:34:38,423 [main:53] - Result = true
Text:
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { (A()).equals("qiitw").not() } to "a"
    )))

    return (f).name.take(1351332190)
}


2021-03-11 23:34:38,424 [main:53] - replacing (b + a, String)
2021-03-11 23:34:38,424 [main:50] - replacing b + a String
2021-03-11 23:34:38,424 [main:54] - Getting value of type String
2021-03-11 23:34:38,505 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:34:38,505 [main:58] - GENERATED VALUE OF TYPE String = "cisfu"
2021-03-11 23:34:38,506 [main:61] - GENERATED IS CALL =false
2021-03-11 23:34:38,700 [main:67] - randomType = Collection<Double>
2021-03-11 23:34:38,700 [main:106] - GETTING String from String
2021-03-11 23:34:38,722 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eba77a7]]
2021-03-11 23:34:38,722 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eba77a7]
2021-03-11 23:34:38,723 [main:117] - GENERATED CALL = (A().foo()).capitalize()
2021-03-11 23:34:38,723 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ef6b1a]]
2021-03-11 23:34:38,723 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ef6b1a]
2021-03-11 23:34:38,804 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 23:34:38,894 [main:43] - GENERATING CALL OF fun <T> listOf(): Iterable<Int> = TODO()
2021-03-11 23:34:38,896 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(): Iterable<Int> = TODO()
2021-03-11 23:34:38,982 [main:95] - GENERATED = listOf<Int>()
2021-03-11 23:34:38,982 [main:117] - GENERATED CALL = (A().foo()).slice(listOf<Int>())
2021-03-11 23:34:38,982 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f8e36a1]]
2021-03-11 23:34:38,982 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f8e36a1]
2021-03-11 23:34:39,066 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:34:39,152 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:34:39,154 [main:117] - GENERATED CALL = (A().foo()).substringAfter('㕍', "rjzef")
2021-03-11 23:34:39,154 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66e5b9ad]]
2021-03-11 23:34:39,154 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66e5b9ad]
2021-03-11 23:34:39,269 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:34:39,368 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 23:34:39,370 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 23:34:39,554 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:34:39,555 [main:95] - GENERATED = StringBuilder(5720153)
2021-03-11 23:34:39,659 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:34:39,660 [main:117] - GENERATED CALL = (A().foo()).commonPrefixWith(StringBuilder(5720153), false)
2021-03-11 23:34:39,660 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50873dfc]]
2021-03-11 23:34:39,661 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50873dfc]
2021-03-11 23:34:39,746 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:34:39,747 [main:117] - GENERATED CALL = (A().foo()).substringBefore('皳', a)
2021-03-11 23:34:39,747 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13d69158]]
2021-03-11 23:34:39,747 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13d69158]
2021-03-11 23:34:39,845 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:34:39,846 [main:117] - GENERATED CALL = (A().foo()).replaceIndentByMargin(A().foo(), "enyta")
2021-03-11 23:34:39,846 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7572d8b3]]
2021-03-11 23:34:39,846 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7572d8b3]
2021-03-11 23:34:39,846 [main:117] - GENERATED CALL = (A().foo()).trim()
2021-03-11 23:34:39,846 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60a399c4]]
2021-03-11 23:34:39,846 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60a399c4]
2021-03-11 23:34:39,933 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:34:39,934 [main:117] - GENERATED CALL = (A().foo()).replaceBefore('텳', B().foo(), b)
2021-03-11 23:34:39,934 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c602ae4]]
2021-03-11 23:34:39,934 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8]
2021-03-11 23:34:40,014 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:40,014 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c602ae4]
2021-03-11 23:34:40,015 [main:117] - GENERATED CALL = (A().foo()).get(1987441854).titlecase()
2021-03-11 23:34:40,015 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45805c5b]]
2021-03-11 23:34:40,015 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45805c5b]
2021-03-11 23:34:40,112 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:34:40,114 [main:117] - GENERATED CALL = (A().foo()).substringAfterLast('', B().foo())
2021-03-11 23:34:40,114 [main:61] - replacement of b + a of type String is (A().foo()).replaceIndentByMargin(A().foo(), "enyta")
2021-03-11 23:34:40,209 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:34:40,209 [main:66] - Compilation checking started
2021-03-11 23:34:40,469 [main:49] - Result = false
Text:
open class A {
    open fun foo(a: String, b: String = "b") = (A().foo()).replaceIndentByMargin(A().foo(), "enyta")
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { (A()).equals("qiitw").not() } to "a"
    )))

    return (f).name.take(1351332190)
}


2021-03-11 23:34:40,470 [main:53] - replacing ("OK", String)
2021-03-11 23:34:40,470 [main:50] - replacing "OK" String
2021-03-11 23:34:40,470 [main:54] - Getting value of type String
2021-03-11 23:34:40,575 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:34:40,576 [main:58] - GENERATED VALUE OF TYPE String = "jhyri"
2021-03-11 23:34:40,576 [main:61] - GENERATED IS CALL =false
2021-03-11 23:34:40,681 [main:67] - randomType = Byte
2021-03-11 23:34:40,762 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:34:40,812 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304b2629]
2021-03-11 23:34:40,812 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@147cbdb6]
2021-03-11 23:34:40,896 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:40,897 [main:78] - Generated call from random type = (114).toInt().toString(1005770075)
2021-03-11 23:34:40,898 [main:106] - GETTING String from String
2021-03-11 23:34:40,926 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70f4305c]]
2021-03-11 23:34:40,926 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70f4305c]
2021-03-11 23:34:41,007 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:34:41,007 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:34:41,010 [main:117] - GENERATED CALL = (B().foo()).takeLastWhile({a: Char -> true})
2021-03-11 23:34:41,010 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36621221]]
2021-03-11 23:34:41,010 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36621221]
2021-03-11 23:34:41,010 [main:117] - GENERATED CALL = (B().foo()).reversed()
2021-03-11 23:34:41,010 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d90f169]]
2021-03-11 23:34:41,010 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d90f169]
2021-03-11 23:34:41,093 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:34:41,094 [main:117] - GENERATED CALL = (B().foo()).plus("tlree")
2021-03-11 23:34:41,094 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41e3146c]]
2021-03-11 23:34:41,094 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41e3146c]
2021-03-11 23:34:41,204 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:34:41,302 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:34:41,304 [main:117] - GENERATED CALL = (B().foo()).replaceAfter('?', "hrimm", A().foo())
2021-03-11 23:34:41,304 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7572d8b3]]
2021-03-11 23:34:41,304 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7572d8b3]
2021-03-11 23:34:41,305 [main:117] - GENERATED CALL = (B().foo()).trim()
2021-03-11 23:34:41,305 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74d674d]]
2021-03-11 23:34:41,305 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74d674d]
2021-03-11 23:34:41,389 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:41,391 [main:117] - GENERATED CALL = (B().foo()).dropLast(-660009930)
2021-03-11 23:34:41,391 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@614f598d]]
2021-03-11 23:34:41,391 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:34:41,508 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:41,591 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:41,592 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@614f598d]
2021-03-11 23:34:41,690 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 23:34:41,800 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 23:34:41,802 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 23:34:42,064 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:34:42,065 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-11 23:34:42,148 [main:43] - GENERATING CALL OF fun <T> setOf(element: RegexOption): Set<RegexOption> = TODO()
2021-03-11 23:34:42,149 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(element: RegexOption): Set<RegexOption> = TODO()
2021-03-11 23:34:42,264 [main:302] - generating value of type = RegexOption false depth = 6
2021-03-11 23:34:42,268 [main:95] - GENERATED = setOf<RegexOption>(kotlin.text.RegexOption.MULTILINE)
2021-03-11 23:34:42,268 [main:95] - GENERATED = Regex("ddamd", setOf<RegexOption>(kotlin.text.RegexOption.MULTILINE))
2021-03-11 23:34:42,355 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 23:34:42,355 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 23:34:42,359 [main:117] - GENERATED CALL = (B().foo()).subSequence(440328952, 1142406080).replace(Regex("ddamd", setOf<RegexOption>(kotlin.text.RegexOption.MULTILINE)), {a: MatchResult -> "sgxdg"})
2021-03-11 23:34:42,360 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@731990b2]]
2021-03-11 23:34:42,360 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@731990b2]
2021-03-11 23:34:42,442 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:42,442 [main:117] - GENERATED CALL = (B().foo()).take(1310374652)
2021-03-11 23:34:42,443 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44eb9b9]]
2021-03-11 23:34:42,443 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44eb9b9]
2021-03-11 23:34:42,525 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:42,526 [main:117] - GENERATED CALL = (B().foo()).takeLast(1803997848)
2021-03-11 23:34:42,526 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63f31c07]]
2021-03-11 23:34:42,526 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:34:42,614 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:42,720 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:42,721 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63f31c07]
2021-03-11 23:34:42,849 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:34:42,938 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 23:34:42,940 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 23:34:43,113 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 23:34:43,117 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-11 23:34:43,197 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:34:43,198 [main:117] - GENERATED CALL = (B().foo()).subSequence(216610274, -2000650912).commonSuffixWith(StringBuilder(StringBuilder()), true)
2021-03-11 23:34:43,198 [main:61] - replacement of "OK" of type String is (B().foo()).dropLast(-660009930)
2021-03-11 23:34:43,292 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:34:43,295 [main:53] - replacing ("a", String)
2021-03-11 23:34:43,296 [main:50] - replacing "a" String
2021-03-11 23:34:43,296 [main:54] - Getting value of type String
2021-03-11 23:34:43,397 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:34:43,398 [main:58] - GENERATED VALUE OF TYPE String = "byrxz"
2021-03-11 23:34:43,398 [main:61] - GENERATED IS CALL =false
2021-03-11 23:34:43,503 [main:67] - randomType = Long
2021-03-11 23:34:43,583 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:34:43,637 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304b2629]
2021-03-11 23:34:43,637 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@147cbdb6]
2021-03-11 23:34:43,727 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:43,728 [main:78] - Generated call from random type = (6237968466995678272).toInt().toString(-1431287013)
2021-03-11 23:34:43,728 [main:106] - GETTING String from String
2021-03-11 23:34:43,758 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7094e6f3]]
2021-03-11 23:34:43,758 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7094e6f3]
2021-03-11 23:34:43,758 [main:117] - GENERATED CALL = (A().foo()).toLowerCase()
2021-03-11 23:34:43,758 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50873dfc]]
2021-03-11 23:34:43,759 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50873dfc]
2021-03-11 23:34:43,843 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:34:43,844 [main:117] - GENERATED CALL = (A().foo()).substringBefore('俷', A().foo())
2021-03-11 23:34:43,844 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10620908]]
2021-03-11 23:34:43,844 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10620908]
2021-03-11 23:34:43,943 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:34:44,032 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:34:44,115 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:34:44,116 [main:117] - GENERATED CALL = (A().foo()).replaceFirst('鲀', '겜', false)
2021-03-11 23:34:44,116 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b17d139]]
2021-03-11 23:34:44,117 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b17d139]
2021-03-11 23:34:44,205 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:34:44,206 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:34:44,206 [main:117] - GENERATED CALL = (A().foo()).filterNot({a: Char -> false})
2021-03-11 23:34:44,207 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63f31c07]]
2021-03-11 23:34:44,207 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:34:44,291 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:44,374 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:44,375 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63f31c07]
2021-03-11 23:34:44,473 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:34:44,569 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:34:44,570 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:34:44,738 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:34:44,739 [main:95] - GENERATED = StringBuilder("niexy")
2021-03-11 23:34:44,818 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:34:44,818 [main:117] - GENERATED CALL = (A().foo()).subSequence(-775188785, -1122722317).commonSuffixWith(StringBuilder("niexy"), true)
2021-03-11 23:34:44,819 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45805c5b]]
2021-03-11 23:34:44,819 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45805c5b]
2021-03-11 23:34:44,899 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:34:44,900 [main:117] - GENERATED CALL = (A().foo()).substringAfterLast('୆', B().foo())
2021-03-11 23:34:44,900 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ed92e21]]
2021-03-11 23:34:44,900 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ed92e21]
2021-03-11 23:34:44,900 [main:117] - GENERATED CALL = (A().foo()).toUpperCase()
2021-03-11 23:34:44,900 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58527ba7]]
2021-03-11 23:34:44,900 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58527ba7]
2021-03-11 23:34:44,901 [main:117] - GENERATED CALL = (A().foo()).trimIndent()
2021-03-11 23:34:44,901 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44eb9b9]]
2021-03-11 23:34:44,901 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44eb9b9]
2021-03-11 23:34:45,005 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:45,006 [main:117] - GENERATED CALL = (A().foo()).takeLast(1457141433)
2021-03-11 23:34:45,006 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ef6b1a]]
2021-03-11 23:34:45,007 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ef6b1a]
2021-03-11 23:34:45,089 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 23:34:45,170 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-11 23:34:45,172 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-11 23:34:45,266 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:34:45,267 [main:95] - GENERATED = hashSetOf<Int>(1970412955)
2021-03-11 23:34:45,267 [main:117] - GENERATED CALL = (A().foo()).slice(hashSetOf<Int>(1970412955))
2021-03-11 23:34:45,267 [main:61] - replacement of "a" of type String is (A().foo()).slice(hashSetOf<Int>(1970412955))
2021-03-11 23:34:45,342 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:34:45,343 [main:66] - Compilation checking started
2021-03-11 23:34:45,609 [main:49] - Result = false
Text:
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { (A()).equals("qiitw").not() } to (A().foo()).slice(hashSetOf<Int>(1970412955))
    )))

    return (f).name.take(1351332190)
}


2021-03-11 23:34:45,610 [main:53] - replacing ("b", String)
2021-03-11 23:34:45,610 [main:50] - replacing "b" String
2021-03-11 23:34:45,610 [main:54] - Getting value of type String
2021-03-11 23:34:45,700 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:34:45,700 [main:58] - GENERATED VALUE OF TYPE String = "xvxfw"
2021-03-11 23:34:45,701 [main:61] - GENERATED IS CALL =false
2021-03-11 23:34:45,806 [main:67] - randomType = Double
2021-03-11 23:34:45,892 [main:302] - generating value of type = Double true depth = 0
2021-03-11 23:34:45,943 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5e6b07c8]
2021-03-11 23:34:45,943 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cc909f5]
2021-03-11 23:34:45,944 [main:78] - Generated call from random type = (0.8250706225355988).toChar().uppercase()
2021-03-11 23:34:45,944 [main:61] - replacement of "b" of type String is (0.8250706225355988).toChar().uppercase()
2021-03-11 23:34:46,023 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:34:46,025 [main:66] - Compilation checking started
2021-03-11 23:34:46,496 [main:53] - Result = true
Text:
open class A {
    open fun foo(a: String, b: String = (0.8250706225355988).toChar().uppercase()) = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { (A()).equals("qiitw").not() } to "a"
    )))

    return (f).name.take(1351332190)
}


2021-03-11 23:34:46,496 [main:53] - replacing (b, String)
2021-03-11 23:34:46,496 [main:50] - replacing b String
2021-03-11 23:34:46,496 [main:54] - Getting value of type String
2021-03-11 23:34:46,577 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:34:46,577 [main:58] - GENERATED VALUE OF TYPE String = "wtdlh"
2021-03-11 23:34:46,578 [main:61] - GENERATED IS CALL =false
2021-03-11 23:34:46,663 [main:67] - randomType = Float
2021-03-11 23:34:46,743 [main:302] - generating value of type = Float true depth = 0
2021-03-11 23:34:46,792 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7aca8561]
2021-03-11 23:34:46,792 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4eeab8d1]
2021-03-11 23:34:46,889 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:46,890 [main:78] - Generated call from random type = (0.70558745f).toShort().toString(-1365597802)
2021-03-11 23:34:46,890 [main:106] - GETTING String from String
2021-03-11 23:34:46,914 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d6746b]]
2021-03-11 23:34:46,914 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d6746b]
2021-03-11 23:34:46,993 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:34:47,080 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:34:47,081 [main:117] - GENERATED CALL = (B().foo()).replaceBeforeLast('쫢', "wxnkj", b)
2021-03-11 23:34:47,081 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7071f8e8]]
2021-03-11 23:34:47,081 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7071f8e8]
2021-03-11 23:34:47,168 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:34:47,252 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:34:47,254 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:34:47,456 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:34:47,457 [main:95] - GENERATED = StringBuilder("rfpub")
2021-03-11 23:34:47,457 [main:117] - GENERATED CALL = (B().foo()).removeSurrounding(StringBuilder("rfpub"))
2021-03-11 23:34:47,458 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bb92537]]
2021-03-11 23:34:47,458 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bb92537]
2021-03-11 23:34:47,555 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:34:47,556 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:34:47,557 [main:117] - GENERATED CALL = (B().foo()).dropLastWhile({a: Char -> false})
2021-03-11 23:34:47,557 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@162090bf]]
2021-03-11 23:34:47,557 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@162090bf]
2021-03-11 23:34:47,635 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:34:47,717 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:34:47,718 [main:117] - GENERATED CALL = (B().foo()).substringBeforeLast('橡', "phbcw")
2021-03-11 23:34:47,718 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13df2251]]
2021-03-11 23:34:47,718 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13df2251]
2021-03-11 23:34:47,794 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 23:34:47,794 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:34:47,795 [main:117] - GENERATED CALL = (B().foo()).filterIndexed({a: Int, b: Char -> true})
2021-03-11 23:34:47,795 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b63442e]]
2021-03-11 23:34:47,795 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b63442e]
2021-03-11 23:34:47,796 [main:117] - GENERATED CALL = (B().foo()).lowercase()
2021-03-11 23:34:47,796 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50873dfc]]
2021-03-11 23:34:47,796 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50873dfc]
2021-03-11 23:34:47,870 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:34:47,871 [main:117] - GENERATED CALL = (B().foo()).substringBefore('杶', A().foo())
2021-03-11 23:34:47,871 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a3fc977]]
2021-03-11 23:34:47,872 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a3fc977]
2021-03-11 23:34:47,872 [main:117] - GENERATED CALL = (B().foo()).prependIndent(b)
2021-03-11 23:34:47,872 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a199c82]]
2021-03-11 23:34:47,872 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:34:47,947 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:48,038 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:48,039 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a199c82]
2021-03-11 23:34:48,160 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:34:48,161 [main:117] - GENERATED CALL = (B().foo()).subSequence(1434735471, -7949629).repeat(106111419)
2021-03-11 23:34:48,161 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66ac212]]
2021-03-11 23:34:48,161 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66ac212]
2021-03-11 23:34:48,247 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:34:48,330 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 23:34:48,331 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 23:34:48,490 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 23:34:48,493 [main:95] - GENERATED = StringBuilder("dpyiy")
2021-03-11 23:34:48,494 [main:117] - GENERATED CALL = (B().foo()).removePrefix(StringBuilder("dpyiy"))
2021-03-11 23:34:48,494 [main:61] - replacement of b of type String is (B().foo()).lowercase()
2021-03-11 23:34:48,588 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:34:48,588 [main:66] - Compilation checking started
2021-03-11 23:34:48,835 [main:49] - Result = false
Text:
open class A {
    open fun foo(a: String, b: String = (0.8250706225355988).toChar().uppercase()) = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + (B().foo()).lowercase()
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { (A()).equals("qiitw").not() } to "a"
    )))

    return (f).name.take(1351332190)
}


2021-03-11 23:34:48,836 [main:53] - replacing (mapOf(
        f.parameters.first() to B(),
        f.parameters.single { (A()).equals("qiitw").not() } to "a"
    ), Map<org.jetbrains.kotlin.types.ErrorUtils$UninferredParameterTypeConstructor@298f4f99, org.jetbrains.kotlin.types.ErrorUtils$UninferredParameterTypeConstructor@6bf5fc5d>)
2021-03-11 23:34:48,836 [main:50] - replacing mapOf(
        f.parameters.first() to B(),
        f.parameters.single { (A()).equals("qiitw").not() } to "a"
    ) Map<org.jetbrains.kotlin.types.ErrorUtils$UninferredParameterTypeConstructor@298f4f99, org.jetbrains.kotlin.types.ErrorUtils$UninferredParameterTypeConstructor@6bf5fc5d>
2021-03-11 23:34:48,836 [main:54] - Getting value of type Map<org.jetbrains.kotlin.types.ErrorUtils$UninferredParameterTypeConstructor@298f4f99, org.jetbrains.kotlin.types.ErrorUtils$UninferredParameterTypeConstructor@6bf5fc5d>
2021-03-11 23:34:48,917 [main:302] - generating value of type = Map<org.jetbrains.kotlin.types.ErrorUtils$UninferredParameterTypeConstructor@298f4f99, org.jetbrains.kotlin.types.ErrorUtils$UninferredParameterTypeConstructor@6bf5fc5d> false depth = 0
2021-03-11 23:34:48,917 [main:309] - RECREATED ERROR TYPE = null
2021-03-11 23:34:48,917 [main:58] - GENERATED VALUE OF TYPE Map<org.jetbrains.kotlin.types.ErrorUtils$UninferredParameterTypeConstructor@298f4f99, org.jetbrains.kotlin.types.ErrorUtils$UninferredParameterTypeConstructor@6bf5fc5d> = 
2021-03-11 23:34:48,998 [main:67] - randomType = B?
2021-03-11 23:34:49,074 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:34:49,074 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:34:49,149 [main:106] - GETTING Map<org.jetbrains.kotlin.types.ErrorUtils$UninferredParameterTypeConstructor@298f4f99, org.jetbrains.kotlin.types.ErrorUtils$UninferredParameterTypeConstructor@6bf5fc5d> from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:34:49,221 [main:106] - GETTING Map<org.jetbrains.kotlin.types.ErrorUtils$UninferredParameterTypeConstructor@298f4f99, org.jetbrains.kotlin.types.ErrorUtils$UninferredParameterTypeConstructor@6bf5fc5d> from String
2021-03-11 23:34:49,252 [main:106] - GETTING Map<org.jetbrains.kotlin.types.ErrorUtils$UninferredParameterTypeConstructor@298f4f99, org.jetbrains.kotlin.types.ErrorUtils$UninferredParameterTypeConstructor@6bf5fc5d> from String
2021-03-11 23:34:49,252 [main:58] - Cant find and generate replacement for mapOf(
        f.parameters.first() to B(),
        f.parameters.single { (A()).equals("qiitw").not() } to "a"
    ) type Map<org.jetbrains.kotlin.types.ErrorUtils$UninferredParameterTypeConstructor@298f4f99, org.jetbrains.kotlin.types.ErrorUtils$UninferredParameterTypeConstructor@6bf5fc5d>
2021-03-11 23:34:49,350 [main:119] - TRYING TO REPLACE CONSTANT 1351332190
2021-03-11 23:34:49,426 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 23:34:49,426 [main:66] - Compilation checking started
2021-03-11 23:34:49,807 [main:119] - TRYING TO REPLACE CONSTANT 0.8250706225355988
2021-03-11 23:34:49,883 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-11 23:34:49,884 [main:66] - Compilation checking started
2021-03-11 23:34:50,290 [main:41] - AFTER TRY 0 res = open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}
2021-03-11 23:34:50,461 [main:112] - generating klass A text = open class A {
    open fun foo(a: String, b: String = "b") = b + a
}
2021-03-11 23:34:50,461 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:34:50,625 [main:43] - Try №0
2021-03-11 23:34:59,703 [main:48] - Already checked
2021-03-11 23:35:03,455 [main:69] - Trying to insert fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }
2021-03-11 23:35:03,638 [main:66] - Compilation checking started
2021-03-11 23:35:04,812 [main:103] - Trying to change 142 nodes
2021-03-11 23:35:04,812 [main:107] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-11 23:35:04,813 [main:50] - replacing c !is CoroutineStackFrame Boolean
2021-03-11 23:35:04,813 [main:54] - Getting value of type Boolean
2021-03-11 23:35:04,974 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:35:04,976 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 23:35:04,977 [main:61] - GENERATED IS CALL =false
2021-03-11 23:35:05,355 [main:67] - randomType = List<Short>
2021-03-11 23:35:05,356 [main:106] - GETTING Boolean from String
2021-03-11 23:35:05,389 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d2e2b8d]]
2021-03-11 23:35:05,389 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d2e2b8d]
2021-03-11 23:35:05,390 [main:117] - GENERATED CALL = (B().foo()).isNotEmpty()
2021-03-11 23:35:05,390 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@390d048]]
2021-03-11 23:35:05,390 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:35:05,537 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:05,729 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:05,732 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@390d048]
2021-03-11 23:35:05,732 [main:117] - GENERATED CALL = (B().foo()).subSequence(698443339, 1865875973).isEmpty()
2021-03-11 23:35:05,732 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7f3c1e]]
2021-03-11 23:35:05,732 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:35:05,901 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:06,061 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:06,063 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7f3c1e]
2021-03-11 23:35:06,063 [main:117] - GENERATED CALL = (B().foo()).subSequence(-684873689, -1246406836).isNotBlank()
2021-03-11 23:35:06,063 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bbf9da6]]
2021-03-11 23:35:06,063 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:35:06,214 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:06,362 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:06,364 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bbf9da6]
2021-03-11 23:35:06,522 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:35:06,525 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:35:06,528 [main:117] - GENERATED CALL = (B().foo()).subSequence(749366208, 124124111).all({a: Char -> false})
2021-03-11 23:35:06,528 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33dd68ef]]
2021-03-11 23:35:06,529 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:35:06,687 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:06,871 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:06,874 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33dd68ef]
2021-03-11 23:35:07,039 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:07,181 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:35:07,315 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:07,458 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:07,594 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:35:07,596 [main:117] - GENERATED CALL = (B().foo()).subSequence(-162444693, 462807926).regionMatches(-2103692439, "kkuob", -480117439, -431380412, true)
2021-03-11 23:35:07,596 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a698622]]
2021-03-11 23:35:07,596 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8]
2021-03-11 23:35:07,744 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:07,747 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a698622]
2021-03-11 23:35:07,747 [main:117] - GENERATED CALL = (B().foo()).get(-786917735).isDigit()
2021-03-11 23:35:07,747 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1667221a]]
2021-03-11 23:35:07,747 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1667221a]
2021-03-11 23:35:07,747 [main:117] - GENERATED CALL = (B().foo()).any()
2021-03-11 23:35:07,747 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d688fab]]
2021-03-11 23:35:07,747 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d688fab]
2021-03-11 23:35:07,926 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:35:07,929 [main:117] - GENERATED CALL = (B().foo()).endsWith(A().foo(), true)
2021-03-11 23:35:07,929 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44cd55d3]]
2021-03-11 23:35:07,929 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8]
2021-03-11 23:35:08,095 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:08,097 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44cd55d3]
2021-03-11 23:35:08,097 [main:117] - GENERATED CALL = (B().foo()).get(-1777688488).isWhitespace()
2021-03-11 23:35:08,098 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4f53f1b1], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ac6b7ae]]
2021-03-11 23:35:08,098 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4f53f1b1]
2021-03-11 23:35:08,239 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ac6b7ae]
2021-03-11 23:35:08,400 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:35:08,403 [main:117] - GENERATED CALL = (B().foo()).equals(null).or(true)
2021-03-11 23:35:08,403 [main:114] - replacement of c !is CoroutineStackFrame of type Boolean is (B().foo()).subSequence(749366208, 124124111).all({a: Char -> false})
2021-03-11 23:35:08,548 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:35:08,548 [main:66] - Compilation checking started
2021-03-11 23:35:09,003 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if ((B().foo()).subSequence(749366208, 124124111).all({a: Char -> false})) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:35:09,006 [main:107] - replacing ("tail-call optimization hit: method ", String)
2021-03-11 23:35:09,007 [main:50] - replacing "tail-call optimization hit: method " String
2021-03-11 23:35:09,007 [main:54] - Getting value of type String
2021-03-11 23:35:09,160 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:35:09,162 [main:58] - GENERATED VALUE OF TYPE String = "zwnit"
2021-03-11 23:35:09,162 [main:61] - GENERATED IS CALL =false
2021-03-11 23:35:09,170 [main:67] - randomType = B
2021-03-11 23:35:09,354 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:35:09,355 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:35:09,370 [main:149] - GENERATING call of type public open fun foo(a: kotlin.String, b: kotlin.String): kotlin.String defined in B[SimpleFunctionDescriptorImpl@2c3af0ae]
2021-03-11 23:35:09,371 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13d1448f]
2021-03-11 23:35:09,499 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:35:09,501 [main:78] - Generated call from random type = (B()).foo(B().foo(), A().foo()).replaceAfterLast('સ', B().foo(), A().foo())
2021-03-11 23:35:09,501 [main:114] - replacement of "tail-call optimization hit: method " of type String is (B()).foo(B().foo(), A().foo()).replaceAfterLast('સ', B().foo(), A().foo())
2021-03-11 23:35:09,630 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:35:09,631 [main:66] - Compilation checking started
2021-03-11 23:35:10,183 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((B()).foo(B().foo(), A().foo()).replaceAfterLast('સ', B().foo(), A().foo()) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:35:10,185 [main:107] - replacing ({
            prope1.prope5 = true
        }, Function0<Unit>)
2021-03-11 23:35:10,188 [main:50] - replacing {
            prope1.prope5 = true
        } Function0<Unit>
2021-03-11 23:35:10,188 [main:54] - Getting value of type Function0<Unit>
2021-03-11 23:35:10,319 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 23:35:10,321 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:35:10,464 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:35:10,468 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:35:10,909 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 23:35:10,911 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 23:35:10,913 [main:302] - generating value of type = Any false depth = 5
2021-03-11 23:35:10,914 [main:95] - GENERATED = check(false, { "aqmzb"})
2021-03-11 23:35:10,914 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "aqmzb"})}
2021-03-11 23:35:10,914 [main:61] - GENERATED IS CALL =false
2021-03-11 23:35:11,060 [main:67] - randomType = UInt
2021-03-11 23:35:11,193 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 23:35:11,241 [main:106] - GETTING Function0<Unit> from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:35:11,319 [main:106] - GETTING Function0<Unit> from String
2021-03-11 23:35:11,342 [main:106] - GETTING Function0<Unit> from String
2021-03-11 23:35:11,343 [main:114] - replacement of {
            prope1.prope5 = true
        } of type Function0<Unit> is { check(false, { "aqmzb"})}
2021-03-11 23:35:11,465 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 23:35:11,466 [main:66] - Compilation checking started
2021-03-11 23:35:12,104 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:35:12,107 [main:107] - replacing ("tail-call optimization miss: method at " + it + " has state-machine ", String)
2021-03-11 23:35:12,107 [main:50] - replacing "tail-call optimization miss: method at " + it + " has state-machine " String
2021-03-11 23:35:12,108 [main:54] - Getting value of type String
2021-03-11 23:35:12,246 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:35:12,248 [main:58] - GENERATED VALUE OF TYPE String = "ohige"
2021-03-11 23:35:12,248 [main:61] - GENERATED IS CALL =false
2021-03-11 23:35:12,395 [main:67] - randomType = UShort
2021-03-11 23:35:12,514 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 23:35:12,546 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b22c9cb]
2021-03-11 23:35:12,669 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:12,671 [main:78] - Generated call from random type = (2820.toUShort()).toString(-139758094)
2021-03-11 23:35:12,672 [main:106] - GETTING String from String
2021-03-11 23:35:12,701 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ed92e21]]
2021-03-11 23:35:12,701 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ed92e21]
2021-03-11 23:35:12,702 [main:117] - GENERATED CALL = (A().foo()).toUpperCase()
2021-03-11 23:35:12,702 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b5f4a37]]
2021-03-11 23:35:12,702 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:35:12,823 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:12,944 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:12,946 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b5f4a37]
2021-03-11 23:35:13,067 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:13,191 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:13,193 [main:117] - GENERATED CALL = (A().foo()).subSequence(1337974566, 323960395).substring(1782172771, 1724338443)
2021-03-11 23:35:13,193 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50873dfc]]
2021-03-11 23:35:13,193 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50873dfc]
2021-03-11 23:35:13,338 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:35:13,341 [main:117] - GENERATED CALL = (A().foo()).substringBefore('∐', B().foo())
2021-03-11 23:35:13,341 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ff4677f]]
2021-03-11 23:35:13,341 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ff4677f]
2021-03-11 23:35:13,478 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:13,480 [main:117] - GENERATED CALL = (A().foo()).drop(-908472238)
2021-03-11 23:35:13,481 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b17d139]]
2021-03-11 23:35:13,481 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b17d139]
2021-03-11 23:35:13,600 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:35:13,602 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:35:13,604 [main:117] - GENERATED CALL = (A().foo()).filterNot({a: Char -> true})
2021-03-11 23:35:13,604 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ef6b1a]]
2021-03-11 23:35:13,604 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ef6b1a]
2021-03-11 23:35:13,724 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 23:35:13,855 [main:43] - GENERATING CALL OF fun UIntArray(size: kotlin.Int): Iterable<Int> = TODO()
2021-03-11 23:35:13,858 [main:61] - WITHOUT TYPE PARAMS = fun UIntArray(size: kotlin.Int): Iterable<Int> = TODO()
2021-03-11 23:35:14,122 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:35:14,124 [main:95] - GENERATED = UIntArray(898617756)
2021-03-11 23:35:14,125 [main:117] - GENERATED CALL = (A().foo()).slice(UIntArray(898617756))
2021-03-11 23:35:14,125 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60a399c4]]
2021-03-11 23:35:14,125 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60a399c4]
2021-03-11 23:35:14,251 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:35:14,254 [main:117] - GENERATED CALL = (A().foo()).replaceBefore('?', B().foo(), A().foo())
2021-03-11 23:35:14,254 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52044aa7]]
2021-03-11 23:35:14,254 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52044aa7]
2021-03-11 23:35:14,443 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:14,446 [main:117] - GENERATED CALL = (A().foo()).substring(-1730604551)
2021-03-11 23:35:14,446 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@731990b2]]
2021-03-11 23:35:14,446 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@731990b2]
2021-03-11 23:35:14,583 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:14,585 [main:117] - GENERATED CALL = (A().foo()).take(-466983345)
2021-03-11 23:35:14,585 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d0d25e9]]
2021-03-11 23:35:14,585 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d0d25e9]
2021-03-11 23:35:14,704 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:14,834 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:35:14,837 [main:117] - GENERATED CALL = (A().foo()).padStart(2031927706, '?')
2021-03-11 23:35:14,837 [main:114] - replacement of "tail-call optimization miss: method at " + it + " has state-machine " of type String is (A().foo()).slice(UIntArray(898617756))
2021-03-11 23:35:14,962 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:35:14,962 [main:66] - Compilation checking started
2021-03-11 23:35:15,378 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error((A().foo()).slice(UIntArray(898617756)) +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:35:15,381 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-11 23:35:15,381 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-11 23:35:15,381 [main:54] - Getting value of type Boolean
2021-03-11 23:35:15,565 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:35:15,569 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 23:35:15,569 [main:61] - GENERATED IS CALL =false
2021-03-11 23:35:16,310 [main:67] - randomType = List<Kla2<List<UInt>>?>
2021-03-11 23:35:16,312 [main:106] - GETTING Boolean from String
2021-03-11 23:35:16,357 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15d50d64]]
2021-03-11 23:35:16,357 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8]
2021-03-11 23:35:16,497 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:16,500 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15d50d64]
2021-03-11 23:35:16,500 [main:117] - GENERATED CALL = (A().foo()).get(1492080795).isSurrogate()
2021-03-11 23:35:16,500 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22fab3d5]]
2021-03-11 23:35:16,500 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22fab3d5]
2021-03-11 23:35:16,649 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:16,652 [main:117] - GENERATED CALL = (A().foo()).hasSurrogatePairAt(2100253419)
2021-03-11 23:35:16,653 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559727bb]]
2021-03-11 23:35:16,653 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559727bb]
2021-03-11 23:35:16,790 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:35:16,793 [main:117] - GENERATED CALL = (A().foo()).startsWith(B().foo(), false)
2021-03-11 23:35:16,793 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1667221a]]
2021-03-11 23:35:16,793 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1667221a]
2021-03-11 23:35:16,794 [main:117] - GENERATED CALL = (A().foo()).any()
2021-03-11 23:35:16,794 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b1122b6]]
2021-03-11 23:35:16,794 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b1122b6]
2021-03-11 23:35:16,794 [main:117] - GENERATED CALL = (A().foo()).none()
2021-03-11 23:35:16,794 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4f53f1b1], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3aa2c4f4]]
2021-03-11 23:35:16,794 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4f53f1b1]
2021-03-11 23:35:16,910 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:35:16,910 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3aa2c4f4]
2021-03-11 23:35:16,911 [main:117] - GENERATED CALL = (A().foo()).equals("ernri").not()
2021-03-11 23:35:16,911 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33dd68ef]]
2021-03-11 23:35:16,911 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33dd68ef]
2021-03-11 23:35:17,036 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:17,166 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:35:17,291 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 23:35:17,294 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 23:35:17,580 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 23:35:17,586 [main:95] - GENERATED = StringBuilder("gtqkb")
2021-03-11 23:35:17,719 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:17,840 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:17,961 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:35:17,963 [main:117] - GENERATED CALL = (A().foo()).regionMatches(-153731108, StringBuilder("gtqkb"), 1337469285, 1608449097, true)
2021-03-11 23:35:17,964 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7f3c1e]]
2021-03-11 23:35:17,964 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:35:18,079 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:18,195 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:18,197 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7f3c1e]
2021-03-11 23:35:18,197 [main:117] - GENERATED CALL = (A().foo()).subSequence(269267386, 1165268517).isNotBlank()
2021-03-11 23:35:18,197 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bbf9da6]]
2021-03-11 23:35:18,197 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:35:18,345 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:18,481 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:18,483 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bbf9da6]
2021-03-11 23:35:18,605 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:35:18,607 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:35:18,609 [main:117] - GENERATED CALL = (A().foo()).subSequence(718342748, 1654703613).all({a: Char -> true})
2021-03-11 23:35:18,609 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1667221a]]
2021-03-11 23:35:18,609 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:35:18,728 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:18,845 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:18,847 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1667221a]
2021-03-11 23:35:18,847 [main:117] - GENERATED CALL = (A().foo()).subSequence(1643996644, 2005164184).any()
2021-03-11 23:35:18,847 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (A().foo()).get(1492080795).isSurrogate()
2021-03-11 23:35:18,963 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:35:18,964 [main:66] - Compilation checking started
2021-03-11 23:35:19,364 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { (A().foo()).get(1492080795).isSurrogate() } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:35:19,366 [main:107] - replacing (prope2, Result<Ty0>)
2021-03-11 23:35:19,366 [main:50] - replacing prope2 Result<Ty0>
2021-03-11 23:35:19,366 [main:54] - Getting value of type Result<Ty0>
2021-03-11 23:35:19,486 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 23:35:19,604 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 23:35:19,607 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 23:35:19,861 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 23:35:19,861 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 23:35:19,868 [main:67] - randomType = Kla0
2021-03-11 23:35:19,987 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 23:35:19,989 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-11 23:35:20,113 [main:194] - Type params = []
2021-03-11 23:35:20,241 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 23:35:20,404 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:35:20,407 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:35:20,724 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 23:35:20,855 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:35:20,860 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:35:21,287 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:35:21,287 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:35:21,315 [main:106] - GETTING Result<Ty0> from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:35:21,401 [main:106] - GETTING Result<Ty0> from String
2021-03-11 23:35:21,421 [main:106] - GETTING Result<Ty0> from String
2021-03-11 23:35:21,422 [main:111] - Cant find and generate replacement for prope2 type Result<Ty0>
2021-03-11 23:35:21,422 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-11 23:35:21,422 [main:50] - replacing numberOfSuspensions Int
2021-03-11 23:35:21,422 [main:54] - Getting value of type Int
2021-03-11 23:35:21,550 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:21,552 [main:58] - GENERATED VALUE OF TYPE Int = 377311015
2021-03-11 23:35:21,552 [main:61] - GENERATED IS CALL =false
2021-03-11 23:35:21,556 [main:67] - randomType = String
2021-03-11 23:35:21,688 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:35:21,717 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6]
2021-03-11 23:35:21,839 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:35:21,841 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@34993f6d]
2021-03-11 23:35:21,957 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:35:21,959 [main:78] - Generated call from random type = ("hhali").compareTo("zmjxi").times(-35)
2021-03-11 23:35:21,960 [main:106] - GETTING Int from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:35:22,025 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28c7466]]
2021-03-11 23:35:22,025 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28c7466]
2021-03-11 23:35:22,025 [main:117] - GENERATED CALL = (f).name.toInt()
2021-03-11 23:35:22,025 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7023f6c]]
2021-03-11 23:35:22,025 [main:117] - GENERATED CALL = (f).name.length
2021-03-11 23:35:22,025 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@404e385], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51135391]]
2021-03-11 23:35:22,025 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@404e385]
2021-03-11 23:35:22,139 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:35:22,141 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:35:22,254 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:22,378 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:22,387 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@404e385]
2021-03-11 23:35:22,387 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@404e385], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7023f6c]]
2021-03-11 23:35:22,388 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@404e385]
2021-03-11 23:35:22,515 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:35:22,517 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:35:22,631 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:22,753 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:22,763 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@404e385]
2021-03-11 23:35:22,763 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51135391]]
2021-03-11 23:35:22,763 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51135391]
2021-03-11 23:35:22,877 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:35:22,879 [main:117] - GENERATED CALL = (f).name.compareTo(A().foo(), true)
2021-03-11 23:35:22,880 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@404e385], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28c7466]]
2021-03-11 23:35:22,880 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@404e385]
2021-03-11 23:35:22,997 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:35:22,999 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:35:23,117 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:23,246 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:23,255 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@404e385]
2021-03-11 23:35:23,256 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2ac140be]]
2021-03-11 23:35:23,256 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e]
2021-03-11 23:35:23,404 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:35:23,404 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2ac140be]
2021-03-11 23:35:23,533 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:35:23,535 [main:117] - GENERATED CALL = (f).equals("jovxv").compareTo(true)
2021-03-11 23:35:23,535 [main:114] - replacement of numberOfSuspensions of type Int is (f).equals("jovxv").compareTo(true)
2021-03-11 23:35:23,654 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:35:23,654 [main:66] - Compilation checking started
2021-03-11 23:35:24,336 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:35:24,338 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got ", String)
2021-03-11 23:35:24,338 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " String
2021-03-11 23:35:24,338 [main:54] - Getting value of type String
2021-03-11 23:35:24,454 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:35:24,456 [main:58] - GENERATED VALUE OF TYPE String = "azrhi"
2021-03-11 23:35:24,456 [main:61] - GENERATED IS CALL =false
2021-03-11 23:35:24,759 [main:67] - randomType = Array<Kla1>
2021-03-11 23:35:24,881 [main:302] - generating value of type = Array<Kla1> false depth = 0
2021-03-11 23:35:25,004 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Kla1): Array<Kla1> = TODO()
2021-03-11 23:35:25,008 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Kla1): Array<Kla1> = TODO()
2021-03-11 23:35:25,126 [main:302] - generating value of type = Kla1 false depth = 3
2021-03-11 23:35:25,128 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-11 23:35:25,129 [main:95] - GENERATED = arrayOf<Kla1>(Kla1())
2021-03-11 23:35:25,145 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@147cbdb6]
2021-03-11 23:35:25,266 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:25,268 [main:78] - Generated call from random type = (arrayOf<Kla1>(Kla1())).size.toString(2036864593)
2021-03-11 23:35:25,268 [main:106] - GETTING String from String
2021-03-11 23:35:25,287 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45d9ec36]]
2021-03-11 23:35:25,287 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:35:25,399 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:25,515 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:25,517 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45d9ec36]
2021-03-11 23:35:25,631 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 23:35:25,804 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 23:35:25,808 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 23:35:26,210 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:35:26,212 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-11 23:35:26,330 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Set<RegexOption> = TODO()
2021-03-11 23:35:26,333 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Set<RegexOption> = TODO()
2021-03-11 23:35:26,752 [main:302] - generating value of type = Int true depth = 6
2021-03-11 23:35:26,754 [main:302] - generating value of type = Float true depth = 6
2021-03-11 23:35:26,757 [main:95] - GENERATED = LinkedHashSet<RegexOption>(904411473, 0.48645705f)
2021-03-11 23:35:26,757 [main:95] - GENERATED = Regex("iihpg", LinkedHashSet<RegexOption>(904411473, 0.48645705f))
2021-03-11 23:35:26,891 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:35:26,893 [main:117] - GENERATED CALL = (B().foo()).subSequence(-1447617140, -479766785).replaceFirst(Regex("iihpg", LinkedHashSet<RegexOption>(904411473, 0.48645705f)), "atuyp")
2021-03-11 23:35:26,893 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74d674d]]
2021-03-11 23:35:26,893 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74d674d]
2021-03-11 23:35:27,011 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:27,013 [main:117] - GENERATED CALL = (B().foo()).dropLast(-176792358)
2021-03-11 23:35:27,013 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a2c48be]]
2021-03-11 23:35:27,014 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a2c48be]
2021-03-11 23:35:27,014 [main:117] - GENERATED CALL = (B().foo()).trimEnd()
2021-03-11 23:35:27,014 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37180f7a]]
2021-03-11 23:35:27,014 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37180f7a]
2021-03-11 23:35:27,137 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 23:35:27,139 [main:302] - generating value of type = Char true depth = 1
2021-03-11 23:35:27,141 [main:117] - GENERATED CALL = (B().foo()).replaceFirstChar({a: Char -> '潊'})
2021-03-11 23:35:27,141 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cbfc0f8]]
2021-03-11 23:35:27,141 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cbfc0f8]
2021-03-11 23:35:27,142 [main:117] - GENERATED CALL = (B().foo()).replaceIndent(A().foo())
2021-03-11 23:35:27,142 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66e5b9ad]]
2021-03-11 23:35:27,142 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:35:27,264 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:27,395 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:27,397 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66e5b9ad]
2021-03-11 23:35:27,513 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:35:27,689 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:35:27,692 [main:117] - GENERATED CALL = (B().foo()).subSequence(240902302, -1575526794).commonPrefixWith("uosox", false)
2021-03-11 23:35:27,693 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7023f6c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@147cbdb6]]
2021-03-11 23:35:27,693 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@147cbdb6]
2021-03-11 23:35:27,856 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:27,858 [main:117] - GENERATED CALL = (B().foo()).length.toString(1775171452)
2021-03-11 23:35:27,858 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cc909f5]]
2021-03-11 23:35:27,858 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8]
2021-03-11 23:35:27,971 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:27,974 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cc909f5]
2021-03-11 23:35:27,974 [main:117] - GENERATED CALL = (B().foo()).get(-585182457).uppercase()
2021-03-11 23:35:27,974 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eee599b]]
2021-03-11 23:35:27,974 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eee599b]
2021-03-11 23:35:28,086 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:35:28,088 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:35:28,090 [main:117] - GENERATED CALL = (B().foo()).dropWhile({a: Char -> false})
2021-03-11 23:35:28,091 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dfaff72]]
2021-03-11 23:35:28,091 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dfaff72]
2021-03-11 23:35:28,091 [main:117] - GENERATED CALL = (B().foo()).trimStart()
2021-03-11 23:35:28,091 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " of type String is (B().foo()).subSequence(240902302, -1575526794).commonPrefixWith("uosox", false)
2021-03-11 23:35:28,204 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:35:28,205 [main:66] - Compilation checking started
2021-03-11 23:35:28,572 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error((B().foo()).subSequence(240902302, -1575526794).commonPrefixWith("uosox", false) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:35:28,574 [main:107] - replacing (isSuccess, Boolean)
2021-03-11 23:35:28,575 [main:50] - replacing isSuccess Boolean
2021-03-11 23:35:28,575 [main:54] - Getting value of type Boolean
2021-03-11 23:35:28,709 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:35:28,711 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 23:35:28,712 [main:61] - GENERATED IS CALL =false
2021-03-11 23:35:28,721 [main:67] - randomType = B
2021-03-11 23:35:28,853 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:35:28,856 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:35:28,870 [main:149] - GENERATING call of type public open fun foo(a: kotlin.String, b: kotlin.String): kotlin.String defined in B[SimpleFunctionDescriptorImpl@7cd899cb]
2021-03-11 23:35:28,993 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:35:29,117 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:35:29,121 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3175fe]
2021-03-11 23:35:29,121 [main:78] - Generated call from random type = (B()).foo("ufixf", "mqlue").toBoolean()
2021-03-11 23:35:29,122 [main:106] - GETTING Boolean from String
2021-03-11 23:35:29,143 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1667221a]]
2021-03-11 23:35:29,143 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:35:29,266 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:29,385 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:29,388 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1667221a]
2021-03-11 23:35:29,388 [main:117] - GENERATED CALL = (B().foo()).subSequence(1735894951, 639824375).any()
2021-03-11 23:35:29,388 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559727bb]]
2021-03-11 23:35:29,388 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559727bb]
2021-03-11 23:35:29,505 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:35:29,507 [main:117] - GENERATED CALL = (B().foo()).startsWith(B().foo(), false)
2021-03-11 23:35:29,507 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f8e0e3c]]
2021-03-11 23:35:29,507 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:35:29,637 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:29,764 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:29,766 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f8e0e3c]
2021-03-11 23:35:29,876 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:35:30,004 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:35:30,007 [main:117] - GENERATED CALL = (B().foo()).subSequence(-263264560, -144757053).contains('⟱', true)
2021-03-11 23:35:30,007 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e0862f2]]
2021-03-11 23:35:30,007 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:35:30,130 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:30,258 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:30,260 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e0862f2]
2021-03-11 23:35:30,397 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:35:30,534 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:35:30,536 [main:117] - GENERATED CALL = (B().foo()).subSequence(1855266493, 229720482).startsWith('዁', true)
2021-03-11 23:35:30,536 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dbfcd07]]
2021-03-11 23:35:30,536 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:35:30,647 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:30,758 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:30,760 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dbfcd07]
2021-03-11 23:35:30,870 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 23:35:30,986 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 23:35:30,989 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 23:35:31,416 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:35:31,418 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-11 23:35:31,536 [main:43] - GENERATING CALL OF fun <E> HashSet(elements: kotlin.collections.Collection<RegexOption>): Set<RegexOption> = TODO()
2021-03-11 23:35:31,539 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(elements: kotlin.collections.Collection<RegexOption>): Set<RegexOption> = TODO()
2021-03-11 23:35:31,786 [main:302] - generating value of type = Collection<RegexOption> false depth = 6
2021-03-11 23:35:31,938 [main:43] - GENERATING CALL OF fun <T> setOf(): Collection<RegexOption> = TODO()
2021-03-11 23:35:31,942 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(): Collection<RegexOption> = TODO()
2021-03-11 23:35:32,072 [main:95] - GENERATED = setOf<RegexOption>()
2021-03-11 23:35:32,072 [main:95] - GENERATED = HashSet<RegexOption>(setOf<RegexOption>())
2021-03-11 23:35:32,072 [main:95] - GENERATED = Regex("bjrqp", HashSet<RegexOption>(setOf<RegexOption>()))
2021-03-11 23:35:32,073 [main:117] - GENERATED CALL = (B().foo()).subSequence(-1549840328, 1513607006).matches(Regex("bjrqp", HashSet<RegexOption>(setOf<RegexOption>())))
2021-03-11 23:35:32,073 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7f3c1e]]
2021-03-11 23:35:32,073 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:35:32,185 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:32,297 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:32,299 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7f3c1e]
2021-03-11 23:35:32,299 [main:117] - GENERATED CALL = (B().foo()).subSequence(-1052677403, -1808636565).isNotBlank()
2021-03-11 23:35:32,299 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68487247]]
2021-03-11 23:35:32,300 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8]
2021-03-11 23:35:32,411 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:32,413 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68487247]
2021-03-11 23:35:32,413 [main:117] - GENERATED CALL = (B().foo()).get(-1294872396).isDefined()
2021-03-11 23:35:32,413 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22f5b073]]
2021-03-11 23:35:32,413 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8]
2021-03-11 23:35:32,524 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:32,526 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22f5b073]
2021-03-11 23:35:32,526 [main:117] - GENERATED CALL = (B().foo()).get(1982408353).isISOControl()
2021-03-11 23:35:32,526 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@366f5df4]]
2021-03-11 23:35:32,526 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8]
2021-03-11 23:35:32,658 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:32,660 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@366f5df4]
2021-03-11 23:35:32,660 [main:117] - GENERATED CALL = (B().foo()).get(-1880100325).isLowerCase()
2021-03-11 23:35:32,660 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1667221a]]
2021-03-11 23:35:32,660 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1667221a]
2021-03-11 23:35:32,661 [main:117] - GENERATED CALL = (B().foo()).any()
2021-03-11 23:35:32,661 [main:114] - replacement of isSuccess of type Boolean is (B().foo()).any()
2021-03-11 23:35:32,794 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:35:32,795 [main:66] - Compilation checking started
2021-03-11 23:35:33,149 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.(B().foo()).any()) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:35:33,151 [main:107] - replacing (prope4, Int)
2021-03-11 23:35:33,151 [main:50] - replacing prope4 Int
2021-03-11 23:35:33,151 [main:54] - Getting value of type Int
2021-03-11 23:35:33,266 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:33,268 [main:58] - GENERATED VALUE OF TYPE Int = 1592058711
2021-03-11 23:35:33,268 [main:61] - GENERATED IS CALL =false
2021-03-11 23:35:33,533 [main:67] - randomType = ArrayList<UInt>
2021-03-11 23:35:33,657 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-11 23:35:33,774 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: UInt): ArrayList<UInt> = TODO()
2021-03-11 23:35:33,777 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: UInt): ArrayList<UInt> = TODO()
2021-03-11 23:35:33,902 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 23:35:33,904 [main:95] - GENERATED = arrayListOf<UInt>(393352641.toUInt())
2021-03-11 23:35:34,057 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@517aa2d7]
2021-03-11 23:35:34,058 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e0986ed]
2021-03-11 23:35:34,058 [main:78] - Generated call from random type = (arrayListOf<UInt>(393352641.toUInt())).toArray().contentHashCode()
2021-03-11 23:35:34,059 [main:106] - GETTING Int from String
2021-03-11 23:35:34,076 [main:113] - Case = [public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28c7466]]
2021-03-11 23:35:34,076 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28c7466]
2021-03-11 23:35:34,077 [main:117] - GENERATED CALL = (B().foo()).toInt()
2021-03-11 23:35:34,077 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7023f6c], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2796d7f7]]
2021-03-11 23:35:34,077 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2796d7f7]
2021-03-11 23:35:34,077 [main:117] - GENERATED CALL = (B().foo()).length.toInt()
2021-03-11 23:35:34,077 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7023f6c], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6943732d]]
2021-03-11 23:35:34,077 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6943732d]
2021-03-11 23:35:34,193 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:34,196 [main:117] - GENERATED CALL = (B().foo()).length.coerceAtLeast(-923002570)
2021-03-11 23:35:34,196 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d87951]]
2021-03-11 23:35:34,196 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6]
2021-03-11 23:35:34,196 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d87951]
2021-03-11 23:35:34,197 [main:117] - GENERATED CALL = (B().foo()).compareTo(B().foo()).unaryPlus()
2021-03-11 23:35:34,197 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@352f969e]]
2021-03-11 23:35:34,197 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@352f969e]
2021-03-11 23:35:34,318 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 23:35:34,319 [main:302] - generating value of type = Int true depth = 1
2021-03-11 23:35:34,322 [main:117] - GENERATED CALL = (B().foo()).sumOf({a: Char -> -1118828483})
2021-03-11 23:35:34,322 [main:113] - Case = [public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6de580aa]]
2021-03-11 23:35:34,322 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6de580aa]
2021-03-11 23:35:34,452 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:35:34,582 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:34,755 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:35:34,757 [main:117] - GENERATED CALL = (B().foo()).lastIndexOf('ⴊ', 938366749, true)
2021-03-11 23:35:34,757 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public abstract val length: kotlin.Int defined in kotlin.CharSequence[DeserializedPropertyDescriptor@2890e234]]
2021-03-11 23:35:34,758 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:35:34,903 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:35,025 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:35,027 [main:117] - GENERATED CALL = (B().foo()).subSequence(-1559028150, 34304049).length
2021-03-11 23:35:35,027 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7023f6c], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d87951]]
2021-03-11 23:35:35,027 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d87951]
2021-03-11 23:35:35,027 [main:117] - GENERATED CALL = (B().foo()).length.unaryPlus()
2021-03-11 23:35:35,027 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9635e6]]
2021-03-11 23:35:35,027 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6]
2021-03-11 23:35:35,138 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:35:35,140 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c9635e6]
2021-03-11 23:35:35,249 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:35:35,251 [main:117] - GENERATED CALL = (B().foo()).compareTo("datat").compareTo(4)
2021-03-11 23:35:35,251 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@9155b2d]]
2021-03-11 23:35:35,251 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6]
2021-03-11 23:35:35,251 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@9155b2d]
2021-03-11 23:35:35,361 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:35,363 [main:117] - GENERATED CALL = (B().foo()).compareTo(B().foo()).ushr(1033337919)
2021-03-11 23:35:35,364 [main:114] - replacement of prope4 of type Int is (B().foo()).lastIndexOf('ⴊ', 938366749, true)
2021-03-11 23:35:35,497 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:35:35,498 [main:66] - Compilation checking started
2021-03-11 23:35:35,878 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (B().foo()).lastIndexOf('ⴊ', 938366749, true))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:35:35,880 [main:107] - replacing (method, String)
2021-03-11 23:35:35,880 [main:50] - replacing method String
2021-03-11 23:35:35,880 [main:54] - Getting value of type String
2021-03-11 23:35:36,003 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:35:36,005 [main:58] - GENERATED VALUE OF TYPE String = "eouab"
2021-03-11 23:35:36,006 [main:61] - GENERATED IS CALL =false
2021-03-11 23:35:36,136 [main:67] - randomType = Kla4?
2021-03-11 23:35:36,246 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 23:35:36,248 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 23:35:36,259 [main:106] - GETTING String from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:35:36,325 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52044aa7]]
2021-03-11 23:35:36,325 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52044aa7]
2021-03-11 23:35:36,438 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:36,440 [main:117] - GENERATED CALL = (f).name.substring(1193415467)
2021-03-11 23:35:36,441 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@67a323b2], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d90f169]]
2021-03-11 23:35:36,441 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@67a323b2]
2021-03-11 23:35:36,567 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:35:36,569 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:35:36,679 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:36,802 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:36,811 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@67a323b2]
2021-03-11 23:35:36,811 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45805c5b]]
2021-03-11 23:35:36,812 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45805c5b]
2021-03-11 23:35:36,921 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:35:36,923 [main:117] - GENERATED CALL = (f).name.substringAfterLast('ꛓ', B().foo())
2021-03-11 23:35:36,923 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ed92e21]]
2021-03-11 23:35:36,923 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ed92e21]
2021-03-11 23:35:36,924 [main:117] - GENERATED CALL = (f).name.toUpperCase()
2021-03-11 23:35:36,924 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37180f7a]]
2021-03-11 23:35:36,924 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37180f7a]
2021-03-11 23:35:37,035 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 23:35:37,037 [main:302] - generating value of type = Char true depth = 1
2021-03-11 23:35:37,041 [main:117] - GENERATED CALL = (f).name.replaceFirstChar({a: Char -> '?'})
2021-03-11 23:35:37,042 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@67a323b2], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eba77a7]]
2021-03-11 23:35:37,042 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@67a323b2]
2021-03-11 23:35:37,153 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:35:37,155 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:35:37,267 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:37,388 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:37,399 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@67a323b2]
2021-03-11 23:35:37,399 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c2f70a9]]
2021-03-11 23:35:37,400 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c2f70a9]
2021-03-11 23:35:37,400 [main:117] - GENERATED CALL = (f).name.concat(A().foo())
2021-03-11 23:35:37,400 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@67a323b2], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b6b484c]]
2021-03-11 23:35:37,400 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@67a323b2]
2021-03-11 23:35:37,543 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:35:37,545 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:35:37,679 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:37,803 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:37,812 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@67a323b2]
2021-03-11 23:35:37,812 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@67a323b2], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bb92537]]
2021-03-11 23:35:37,812 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@67a323b2]
2021-03-11 23:35:37,921 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:35:37,923 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:35:38,035 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:38,156 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:38,166 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@67a323b2]
2021-03-11 23:35:38,166 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d90f169]]
2021-03-11 23:35:38,166 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d90f169]
2021-03-11 23:35:38,281 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:35:38,281 [main:117] - GENERATED CALL = (f).name.plus("encnz")
2021-03-11 23:35:38,281 [main:114] - replacement of method of type String is (f).name.substring(1193415467)
2021-03-11 23:35:38,420 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:35:38,420 [main:66] - Compilation checking started
2021-03-11 23:35:39,068 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:35:39,070 [main:107] - replacing (prope2, Result<Any?>)
2021-03-11 23:35:39,071 [main:50] - replacing prope2 Result<Any?>
2021-03-11 23:35:39,071 [main:54] - Getting value of type Result<Any?>
2021-03-11 23:35:39,208 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 23:35:39,330 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 23:35:39,333 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 23:35:39,590 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 23:35:39,592 [main:302] - generating value of type = Any false depth = 4
2021-03-11 23:35:39,592 [main:95] - GENERATED = runCatching<Any?>({ "loejn"})
2021-03-11 23:35:39,592 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "loejn"})
2021-03-11 23:35:39,592 [main:61] - GENERATED IS CALL =true
2021-03-11 23:35:39,599 [main:67] - randomType = Kla3
2021-03-11 23:35:39,722 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 23:35:39,724 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-11 23:35:39,730 [main:106] - GETTING Result<Any?> from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:35:39,799 [main:106] - GETTING Result<Any?> from String
2021-03-11 23:35:39,819 [main:106] - GETTING Result<Any?> from String
2021-03-11 23:35:39,819 [main:114] - replacement of prope2 of type Result<Any?> is runCatching<Any?>({ "loejn"})
2021-03-11 23:35:39,936 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:35:39,936 [main:66] - Compilation checking started
2021-03-11 23:35:40,643 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:35:40,644 [main:107] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-11 23:35:40,644 [main:50] - replacing c !is CoroutineStackFrame Boolean
2021-03-11 23:35:40,644 [main:54] - Getting value of type Boolean
2021-03-11 23:35:40,773 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:35:40,775 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 23:35:40,776 [main:61] - GENERATED IS CALL =false
2021-03-11 23:35:40,903 [main:67] - randomType = Byte
2021-03-11 23:35:41,018 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:35:41,066 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@37db2c4e]
2021-03-11 23:35:41,199 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:35:41,202 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@230214e0]
2021-03-11 23:35:41,314 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:41,316 [main:78] - Generated call from random type = (68).rangeTo(-123).contains(1348555909)
2021-03-11 23:35:41,317 [main:106] - GETTING Boolean from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:35:41,390 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb29618]]
2021-03-11 23:35:41,390 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb29618]
2021-03-11 23:35:41,509 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:35:41,511 [main:117] - GENERATED CALL = (f).name.matches("wesmy")
2021-03-11 23:35:41,511 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4f53f1b1]]
2021-03-11 23:35:41,511 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4f53f1b1]
2021-03-11 23:35:41,626 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:35:41,627 [main:117] - GENERATED CALL = (f).name.equals("nugvk")
2021-03-11 23:35:41,627 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ac6b7ae]]
2021-03-11 23:35:41,627 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e]
2021-03-11 23:35:41,739 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:35:41,739 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ac6b7ae]
2021-03-11 23:35:41,849 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:35:41,852 [main:117] - GENERATED CALL = (f).equals("buwfd").or(false)
2021-03-11 23:35:41,852 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@751b885b], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3175fe]]
2021-03-11 23:35:41,852 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@751b885b]
2021-03-11 23:35:41,968 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:35:41,971 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:35:42,083 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:42,224 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:42,234 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@751b885b]
2021-03-11 23:35:42,234 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@751b885b], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d688fab]]
2021-03-11 23:35:42,234 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@751b885b]
2021-03-11 23:35:42,363 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:35:42,365 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:35:42,478 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:42,597 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:42,606 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@751b885b]
2021-03-11 23:35:42,606 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3aa2c4f4]]
2021-03-11 23:35:42,606 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e]
2021-03-11 23:35:42,718 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:35:42,718 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3aa2c4f4]
2021-03-11 23:35:42,718 [main:117] - GENERATED CALL = (f).equals("uzoqa").not()
2021-03-11 23:35:42,719 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@751b885b], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb29618]]
2021-03-11 23:35:42,719 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@751b885b]
2021-03-11 23:35:42,829 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:35:42,831 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:35:42,940 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:43,079 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:43,089 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@751b885b]
2021-03-11 23:35:43,089 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559727bb]]
2021-03-11 23:35:43,089 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559727bb]
2021-03-11 23:35:43,213 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:35:43,215 [main:117] - GENERATED CALL = (f).name.startsWith(B().foo(), false)
2021-03-11 23:35:43,216 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@751b885b], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559727bb]]
2021-03-11 23:35:43,216 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@751b885b]
2021-03-11 23:35:43,325 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:35:43,327 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:35:43,437 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:43,556 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:43,565 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@751b885b]
2021-03-11 23:35:43,566 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3175fe]]
2021-03-11 23:35:43,566 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3175fe]
2021-03-11 23:35:43,566 [main:117] - GENERATED CALL = (f).name.toBoolean()
2021-03-11 23:35:43,566 [main:114] - replacement of c !is CoroutineStackFrame of type Boolean is (f).name.matches("wesmy")
2021-03-11 23:35:43,678 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:35:43,679 [main:66] - Compilation checking started
2021-03-11 23:35:44,042 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if ((f).name.matches("wesmy")) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:35:44,045 [main:107] - replacing (i, Int)
2021-03-11 23:35:44,045 [main:50] - replacing i Int
2021-03-11 23:35:44,045 [main:54] - Getting value of type Int
2021-03-11 23:35:44,189 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:44,191 [main:58] - GENERATED VALUE OF TYPE Int = 1803140113
2021-03-11 23:35:44,191 [main:61] - GENERATED IS CALL =false
2021-03-11 23:35:44,829 [main:67] - randomType = MutableMap<UInt, LinkedHashMap<Boolean, Long?>>
2021-03-11 23:35:44,830 [main:106] - GETTING Int from String
2021-03-11 23:35:44,850 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28a58685]]
2021-03-11 23:35:44,851 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6]
2021-03-11 23:35:44,851 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28a58685]
2021-03-11 23:35:44,961 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:35:44,963 [main:117] - GENERATED CALL = (A().foo()).compareTo(A().foo()).minus(63)
2021-03-11 23:35:44,963 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7023f6c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-11 23:35:44,963 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-11 23:35:44,963 [main:117] - GENERATED CALL = (A().foo()).length.countTrailingZeroBits()
2021-03-11 23:35:44,963 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50b55fc8]]
2021-03-11 23:35:44,963 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:35:45,072 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:45,214 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:45,216 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50b55fc8]
2021-03-11 23:35:45,344 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:35:45,457 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:45,574 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:35:45,577 [main:117] - GENERATED CALL = (A().foo()).subSequence(-1963246814, -114843533).indexOf('뵠', -1789033576, false)
2021-03-11 23:35:45,577 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@41a74ba8]]
2021-03-11 23:35:45,577 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6]
2021-03-11 23:35:45,577 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@41a74ba8]
2021-03-11 23:35:45,577 [main:117] - GENERATED CALL = (A().foo()).compareTo(B().foo()).inc()
2021-03-11 23:35:45,577 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7023f6c], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@67b8b68b]]
2021-03-11 23:35:45,577 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@67b8b68b]
2021-03-11 23:35:45,687 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:45,690 [main:117] - GENERATED CALL = (A().foo()).length.coerceAtMost(-462308155)
2021-03-11 23:35:45,690 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@9155b2d]]
2021-03-11 23:35:45,690 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6]
2021-03-11 23:35:45,690 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@9155b2d]
2021-03-11 23:35:45,799 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:45,801 [main:117] - GENERATED CALL = (A().foo()).compareTo(B().foo()).ushr(1343362966)
2021-03-11 23:35:45,801 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6de580aa]]
2021-03-11 23:35:45,801 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:35:45,911 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:46,021 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:46,023 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6de580aa]
2021-03-11 23:35:46,169 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:35:46,312 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:46,437 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:35:46,440 [main:117] - GENERATED CALL = (A().foo()).subSequence(-691170354, 1551338852).lastIndexOf('篻', -1353977921, false)
2021-03-11 23:35:46,441 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@5230426b]]
2021-03-11 23:35:46,441 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8]
2021-03-11 23:35:46,562 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:46,564 [main:117] - GENERATED CALL = (A().foo()).get(938090600).code
2021-03-11 23:35:46,565 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@21431d8a]]
2021-03-11 23:35:46,565 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6]
2021-03-11 23:35:46,565 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@21431d8a]
2021-03-11 23:35:46,686 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:46,806 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:46,809 [main:117] - GENERATED CALL = (A().foo()).compareTo(A().foo()).coerceIn(-1908916175, -1803667327)
2021-03-11 23:35:46,809 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c239953]]
2021-03-11 23:35:46,809 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6]
2021-03-11 23:35:46,809 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c239953]
2021-03-11 23:35:46,925 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:46,927 [main:117] - GENERATED CALL = (A().foo()).compareTo(B().foo()).shr(1879690677)
2021-03-11 23:35:46,927 [main:114] - replacement of i of type Int is (A().foo()).length.coerceAtMost(-462308155)
2021-03-11 23:35:47,061 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:35:47,062 [main:66] - Compilation checking started
2021-03-11 23:35:47,660 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != (A().foo()).length.coerceAtMost(-462308155)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:35:47,662 [main:107] - replacing (runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x), Unit?)
2021-03-11 23:35:47,662 [main:50] - replacing runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x) Unit?
2021-03-11 23:35:47,662 [main:54] - Getting value of type Unit?
2021-03-11 23:35:47,783 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 23:35:47,906 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:35:47,909 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:35:48,314 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 23:35:48,316 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-11 23:35:48,318 [main:302] - generating value of type = Any false depth = 4
2021-03-11 23:35:48,319 [main:95] - GENERATED = require(false, { "kqbky"})
2021-03-11 23:35:48,319 [main:58] - GENERATED VALUE OF TYPE Unit? = require(false, { "kqbky"})
2021-03-11 23:35:48,319 [main:61] - GENERATED IS CALL =true
2021-03-11 23:35:48,442 [main:67] - randomType = Long
2021-03-11 23:35:48,567 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:35:48,607 [main:106] - GETTING Unit? from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:35:48,679 [main:106] - GETTING Unit? from String
2021-03-11 23:35:48,696 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1993d968]]
2021-03-11 23:35:48,696 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1993d968]
2021-03-11 23:35:48,808 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 23:35:48,810 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:35:48,815 [main:117] - GENERATED CALL = (A().foo())?.forEachIndexed({a: Int, b: Char -> println()})
2021-03-11 23:35:48,816 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@413406a8]]
2021-03-11 23:35:48,816 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@413406a8]
2021-03-11 23:35:48,927 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 23:35:48,929 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:35:48,935 [main:117] - GENERATED CALL = (A().foo())?.forEach({a: Char -> println()})
2021-03-11 23:35:48,936 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1993d968]]
2021-03-11 23:35:48,936 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:35:49,045 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:49,157 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:49,159 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1993d968]
2021-03-11 23:35:49,271 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 23:35:49,273 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:35:49,391 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:35:49,394 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:35:49,681 [main:302] - generating value of type = Any false depth = 4
2021-03-11 23:35:49,681 [main:95] - GENERATED = println("zfvxo")
2021-03-11 23:35:49,681 [main:117] - GENERATED CALL = (A().foo())?.subSequence(1237457321, 581495531).forEachIndexed({a: Int, b: Char -> println("zfvxo")})
2021-03-11 23:35:49,682 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@413406a8]]
2021-03-11 23:35:49,682 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:35:49,837 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:49,964 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:49,968 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@413406a8]
2021-03-11 23:35:50,088 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 23:35:50,090 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:35:50,212 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:35:50,215 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:35:50,605 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 23:35:50,607 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 23:35:50,609 [main:302] - generating value of type = Any false depth = 5
2021-03-11 23:35:50,609 [main:95] - GENERATED = check(true, { "glgks"})
2021-03-11 23:35:50,610 [main:117] - GENERATED CALL = (A().foo())?.subSequence(160216036, 906078421).forEach({a: Char -> check(true, { "glgks"})})
2021-03-11 23:35:50,610 [main:114] - replacement of runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x) of type Unit? is (A().foo())?.forEachIndexed({a: Int, b: Char -> println()})
2021-03-11 23:35:50,767 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 23:35:50,768 [main:66] - Compilation checking started
2021-03-11 23:35:51,164 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
(A().foo())?.forEachIndexed({a: Int, b: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:35:51,166 [main:107] - replacing (getOrThrow(), Any?)
2021-03-11 23:35:51,167 [main:50] - replacing getOrThrow() Any?
2021-03-11 23:35:51,167 [main:54] - Getting value of type Any?
2021-03-11 23:35:51,283 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:35:51,284 [main:58] - GENERATED VALUE OF TYPE Any? = "tphxb"
2021-03-11 23:35:51,284 [main:61] - GENERATED IS CALL =false
2021-03-11 23:35:51,421 [main:67] - randomType = UInt
2021-03-11 23:35:51,543 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 23:35:51,588 [main:106] - GETTING Any? from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:35:51,652 [main:106] - GETTING Any? from String
2021-03-11 23:35:51,669 [main:106] - GETTING Any? from String
2021-03-11 23:35:51,669 [main:114] - replacement of getOrThrow() of type Any? is "tphxb"
2021-03-11 23:35:51,779 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 23:35:51,780 [main:66] - Compilation checking started
2021-03-11 23:35:52,131 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2."tphxb"
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:35:52,133 [main:107] - replacing (prope4++, Int)
2021-03-11 23:35:52,133 [main:50] - replacing prope4++ Int
2021-03-11 23:35:52,133 [main:54] - Getting value of type Int
2021-03-11 23:35:52,258 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:52,261 [main:58] - GENERATED VALUE OF TYPE Int = -817926910
2021-03-11 23:35:52,261 [main:61] - GENERATED IS CALL =false
2021-03-11 23:35:52,542 [main:67] - randomType = ArrayDeque<Kla4?>
2021-03-11 23:35:52,653 [main:302] - generating value of type = ArrayDeque<Kla4?> false depth = 0
2021-03-11 23:35:52,770 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Kla4?>): ArrayDeque<Kla4?> = TODO()
2021-03-11 23:35:52,773 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Kla4?>): ArrayDeque<Kla4?> = TODO()
2021-03-11 23:35:53,024 [main:302] - generating value of type = Collection<Kla4?> false depth = 3
2021-03-11 23:35:53,142 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Kla4?): Collection<Kla4?> = TODO()
2021-03-11 23:35:53,145 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Kla4?): Collection<Kla4?> = TODO()
2021-03-11 23:35:53,299 [main:302] - generating value of type = Kla4 false depth = 6
2021-03-11 23:35:53,301 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 23:35:53,301 [main:95] - GENERATED = arrayListOf<Kla4?>(Kla4())
2021-03-11 23:35:53,302 [main:95] - GENERATED = ArrayDeque<Kla4?>(arrayListOf<Kla4?>(Kla4()))
2021-03-11 23:35:53,469 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2417f69f]
2021-03-11 23:35:53,469 [main:78] - Generated call from random type = (ArrayDeque<Kla4?>(arrayListOf<Kla4?>(Kla4()))).count()
2021-03-11 23:35:53,470 [main:106] - GETTING Int from String
2021-03-11 23:35:53,487 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6943732d]]
2021-03-11 23:35:53,487 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6]
2021-03-11 23:35:53,487 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6943732d]
2021-03-11 23:35:53,598 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:53,600 [main:117] - GENERATED CALL = (B().foo()).compareTo(A().foo()).coerceAtLeast(-891822343)
2021-03-11 23:35:53,600 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@9155b2d]]
2021-03-11 23:35:53,600 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6]
2021-03-11 23:35:53,600 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@9155b2d]
2021-03-11 23:35:53,714 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:53,716 [main:117] - GENERATED CALL = (B().foo()).compareTo(A().foo()).ushr(1914525456)
2021-03-11 23:35:53,716 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@352f969e]]
2021-03-11 23:35:53,716 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@352f969e]
2021-03-11 23:35:53,831 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 23:35:53,832 [main:302] - generating value of type = Int true depth = 1
2021-03-11 23:35:53,835 [main:117] - GENERATED CALL = (B().foo()).sumOf({a: Char -> 1955315122})
2021-03-11 23:35:53,835 [main:113] - Case = [public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28c7466]]
2021-03-11 23:35:53,835 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28c7466]
2021-03-11 23:35:53,835 [main:117] - GENERATED CALL = (B().foo()).toInt()
2021-03-11 23:35:53,835 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public abstract val length: kotlin.Int defined in kotlin.CharSequence[DeserializedPropertyDescriptor@2890e234]]
2021-03-11 23:35:53,835 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:35:53,946 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:54,058 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:54,061 [main:117] - GENERATED CALL = (B().foo()).subSequence(-1388309415, 1118032884).length
2021-03-11 23:35:54,061 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2c8f94f6]]
2021-03-11 23:35:54,061 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6]
2021-03-11 23:35:54,170 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:35:54,173 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2c8f94f6]
2021-03-11 23:35:54,289 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:54,291 [main:117] - GENERATED CALL = (B().foo()).compareTo("rduci").rotateRight(479667892)
2021-03-11 23:35:54,291 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7023f6c], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2796d7f7]]
2021-03-11 23:35:54,291 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2796d7f7]
2021-03-11 23:35:54,291 [main:117] - GENERATED CALL = (B().foo()).length.toInt()
2021-03-11 23:35:54,291 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27d85add]]
2021-03-11 23:35:54,291 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:35:54,433 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:54,567 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:54,569 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27d85add]
2021-03-11 23:35:54,688 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 23:35:54,803 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 23:35:54,806 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 23:35:54,928 [main:302] - generating value of type = Char true depth = 3
2021-03-11 23:35:54,930 [main:95] - GENERATED = charArrayOf('빬')
2021-03-11 23:35:55,044 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:35:55,156 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:35:55,158 [main:117] - GENERATED CALL = (B().foo()).subSequence(765334194, -1423467408).indexOfAny(charArrayOf('빬'), 1243606970, true)
2021-03-11 23:35:55,159 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7023f6c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@d32713]]
2021-03-11 23:35:55,159 [main:117] - GENERATED CALL = (B().foo()).length.absoluteValue
2021-03-11 23:35:55,159 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28a58685]]
2021-03-11 23:35:55,159 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6]
2021-03-11 23:35:55,271 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:35:55,273 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28a58685]
2021-03-11 23:35:55,386 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:35:55,388 [main:117] - GENERATED CALL = (B().foo()).compareTo("xeujb").minus(-80)
2021-03-11 23:35:55,388 [main:114] - replacement of prope4++ of type Int is (B().foo()).length.toInt()
2021-03-11 23:35:55,547 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:35:55,548 [main:66] - Compilation checking started
2021-03-11 23:35:55,917 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (B().foo()).length.toInt()
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:35:55,919 [main:107] - replacing ("OK", String)
2021-03-11 23:35:55,920 [main:50] - replacing "OK" String
2021-03-11 23:35:55,920 [main:54] - Getting value of type String
2021-03-11 23:35:56,034 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:35:56,036 [main:58] - GENERATED VALUE OF TYPE String = "lxhsg"
2021-03-11 23:35:56,036 [main:61] - GENERATED IS CALL =false
2021-03-11 23:35:56,164 [main:67] - randomType = Kla5
2021-03-11 23:35:56,275 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 23:35:56,277 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 23:35:56,298 [main:106] - GETTING String from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:35:56,360 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c4ccdc4], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3358de38]]
2021-03-11 23:35:56,360 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c4ccdc4]
2021-03-11 23:35:56,475 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:35:56,477 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:35:56,593 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:56,717 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:56,727 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c4ccdc4]
2021-03-11 23:35:56,727 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7071f8e8]]
2021-03-11 23:35:56,728 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7071f8e8]
2021-03-11 23:35:56,856 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:35:56,862 [main:117] - GENERATED CALL = (f).name.removeSurrounding(StringBuilder())
2021-03-11 23:35:56,862 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50873dfc]]
2021-03-11 23:35:56,862 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50873dfc]
2021-03-11 23:35:56,976 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:35:56,978 [main:117] - GENERATED CALL = (f).name.substringBefore('楹', A().foo())
2021-03-11 23:35:56,979 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c4ccdc4], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@731990b2]]
2021-03-11 23:35:56,979 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c4ccdc4]
2021-03-11 23:35:57,088 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:35:57,089 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:35:57,198 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:57,319 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:57,328 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c4ccdc4]
2021-03-11 23:35:57,329 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c4ccdc4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b63442e]]
2021-03-11 23:35:57,329 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c4ccdc4]
2021-03-11 23:35:57,441 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:35:57,443 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:35:57,552 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:57,673 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:57,683 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c4ccdc4]
2021-03-11 23:35:57,683 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fcc302c]]
2021-03-11 23:35:57,684 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fcc302c]
2021-03-11 23:35:57,798 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:35:57,911 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:35:58,048 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:35:58,050 [main:117] - GENERATED CALL = (f).name.replace('驡', 'Ẏ', true)
2021-03-11 23:35:58,051 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c4ccdc4], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10620908]]
2021-03-11 23:35:58,051 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c4ccdc4]
2021-03-11 23:35:58,179 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:35:58,182 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:35:58,316 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:58,439 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:58,449 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c4ccdc4]
2021-03-11 23:35:58,449 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57afba56]]
2021-03-11 23:35:58,449 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57afba56]
2021-03-11 23:35:58,449 [main:117] - GENERATED CALL = (f).name.uppercase()
2021-03-11 23:35:58,449 [main:113] - Case = [public abstract fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.reflect.KFunction3[FunctionInvokeDescriptor@3ccaa05d]]
2021-03-11 23:35:58,449 [main:149] - GENERATING call of type public abstract fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.reflect.KFunction3[FunctionInvokeDescriptor@3ccaa05d]
2021-03-11 23:35:58,560 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:35:58,562 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:35:58,672 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:58,795 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:58,805 [main:158] - CANT GENERATE PARAMS FOR public abstract fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.reflect.KFunction3[FunctionInvokeDescriptor@3ccaa05d]
2021-03-11 23:35:58,805 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c4ccdc4], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ef6b1a]]
2021-03-11 23:35:58,805 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c4ccdc4]
2021-03-11 23:35:58,914 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:35:58,916 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:35:59,026 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:59,174 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:35:59,184 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c4ccdc4]
2021-03-11 23:35:59,184 [main:114] - replacement of "OK" of type String is (f).name.uppercase()
2021-03-11 23:35:59,312 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:35:59,313 [main:66] - Compilation checking started
2021-03-11 23:35:59,997 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:35:59,999 [main:107] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-11 23:35:59,999 [main:50] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-11 23:35:59,999 [main:54] - Getting value of type Function0<Boolean>
2021-03-11 23:36:00,117 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 23:36:00,119 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:36:00,121 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-11 23:36:00,121 [main:61] - GENERATED IS CALL =false
2021-03-11 23:36:00,256 [main:67] - randomType = Byte
2021-03-11 23:36:00,368 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:36:00,403 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 23:36:00,421 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 23:36:00,422 [main:106] - GETTING Function0<Boolean> from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:36:00,486 [main:114] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { true}
2021-03-11 23:36:00,597 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 23:36:00,598 [main:66] - Compilation checking started
2021-03-11 23:36:01,222 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:36:01,224 [main:107] - replacing (prope4, Int)
2021-03-11 23:36:01,224 [main:50] - replacing prope4 Int
2021-03-11 23:36:01,224 [main:54] - Getting value of type Int
2021-03-11 23:36:01,336 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:01,338 [main:58] - GENERATED VALUE OF TYPE Int = 581874396
2021-03-11 23:36:01,338 [main:61] - GENERATED IS CALL =false
2021-03-11 23:36:01,635 [main:67] - randomType = Set<Kla4>
2021-03-11 23:36:01,636 [main:106] - GETTING Int from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:36:01,702 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@1e4d7c85], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51135391]]
2021-03-11 23:36:01,702 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@1e4d7c85]
2021-03-11 23:36:01,812 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:36:01,814 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:36:01,925 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:02,046 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:02,056 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@1e4d7c85]
2021-03-11 23:36:02,056 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7023f6c]]
2021-03-11 23:36:02,056 [main:117] - GENERATED CALL = (f).name.length
2021-03-11 23:36:02,056 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2ac140be]]
2021-03-11 23:36:02,056 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e]
2021-03-11 23:36:02,167 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:36:02,167 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2ac140be]
2021-03-11 23:36:02,296 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:02,298 [main:117] - GENERATED CALL = (f).equals("nsths").compareTo(false)
2021-03-11 23:36:02,298 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@1e4d7c85], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28c7466]]
2021-03-11 23:36:02,298 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@1e4d7c85]
2021-03-11 23:36:02,410 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:36:02,412 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:36:02,521 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:02,642 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:02,652 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@1e4d7c85]
2021-03-11 23:36:02,653 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@1e4d7c85], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7023f6c]]
2021-03-11 23:36:02,653 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@1e4d7c85]
2021-03-11 23:36:02,770 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:36:02,772 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:36:02,886 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:03,005 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:03,015 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@1e4d7c85]
2021-03-11 23:36:03,015 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51135391]]
2021-03-11 23:36:03,015 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51135391]
2021-03-11 23:36:03,123 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:36:03,234 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:03,236 [main:117] - GENERATED CALL = (f).name.compareTo("bdoot", false)
2021-03-11 23:36:03,236 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28c7466]]
2021-03-11 23:36:03,236 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28c7466]
2021-03-11 23:36:03,236 [main:117] - GENERATED CALL = (f).name.toInt()
2021-03-11 23:36:03,236 [main:114] - replacement of prope4 of type Int is (f).name.length
2021-03-11 23:36:03,345 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:36:03,346 [main:66] - Compilation checking started
2021-03-11 23:36:03,716 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (f).name.length++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:36:03,717 [main:107] - replacing ("\n", String)
2021-03-11 23:36:03,718 [main:50] - replacing "\n" String
2021-03-11 23:36:03,718 [main:54] - Getting value of type String
2021-03-11 23:36:03,834 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:36:03,836 [main:58] - GENERATED VALUE OF TYPE String = "ardna"
2021-03-11 23:36:03,836 [main:61] - GENERATED IS CALL =false
2021-03-11 23:36:03,844 [main:67] - randomType = Kla0
2021-03-11 23:36:03,959 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 23:36:03,961 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-11 23:36:04,072 [main:194] - Type params = []
2021-03-11 23:36:04,191 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 23:36:04,307 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:36:04,310 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:36:04,556 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 23:36:04,673 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:36:04,676 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:36:05,089 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-11 23:36:05,211 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 23:36:05,214 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 23:36:05,587 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 23:36:05,587 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:36:05,587 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:36:05,606 [main:106] - GETTING String from String
2021-03-11 23:36:05,634 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c2f70a9]]
2021-03-11 23:36:05,634 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c2f70a9]
2021-03-11 23:36:05,634 [main:117] - GENERATED CALL = (A().foo()).concat(A().foo())
2021-03-11 23:36:05,634 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45805c5b]]
2021-03-11 23:36:05,634 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45805c5b]
2021-03-11 23:36:05,750 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:36:05,753 [main:117] - GENERATED CALL = (A().foo()).substringAfterLast('', A().foo())
2021-03-11 23:36:05,753 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b6b484c]]
2021-03-11 23:36:05,753 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b6b484c]
2021-03-11 23:36:05,878 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:36:05,884 [main:117] - GENERATED CALL = (A().foo()).removeSuffix("ybisj")
2021-03-11 23:36:05,884 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37180f7a]]
2021-03-11 23:36:05,884 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37180f7a]
2021-03-11 23:36:05,997 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 23:36:05,999 [main:302] - generating value of type = Char true depth = 1
2021-03-11 23:36:06,001 [main:117] - GENERATED CALL = (A().foo()).replaceFirstChar({a: Char -> '嵂'})
2021-03-11 23:36:06,001 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@420de0f5]]
2021-03-11 23:36:06,001 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@420de0f5]
2021-03-11 23:36:06,001 [main:117] - GENERATED CALL = (A().foo()).decapitalize()
2021-03-11 23:36:06,001 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41e3146c]]
2021-03-11 23:36:06,001 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41e3146c]
2021-03-11 23:36:06,112 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:36:06,226 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:36:06,229 [main:117] - GENERATED CALL = (A().foo()).replaceAfter('ꜙ', "tlldl", A().foo())
2021-03-11 23:36:06,229 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74d674d]]
2021-03-11 23:36:06,229 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74d674d]
2021-03-11 23:36:06,364 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:06,366 [main:117] - GENERATED CALL = (A().foo()).dropLast(616298301)
2021-03-11 23:36:06,366 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7023f6c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@147cbdb6]]
2021-03-11 23:36:06,367 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@147cbdb6]
2021-03-11 23:36:06,478 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:06,480 [main:117] - GENERATED CALL = (A().foo()).length.toString(463675728)
2021-03-11 23:36:06,480 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a199c82]]
2021-03-11 23:36:06,481 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:36:06,594 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:06,712 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:06,715 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a199c82]
2021-03-11 23:36:06,836 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:06,838 [main:117] - GENERATED CALL = (A().foo()).subSequence(-817981268, 233799089).repeat(-479468398)
2021-03-11 23:36:06,838 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dfaff72]]
2021-03-11 23:36:06,838 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dfaff72]
2021-03-11 23:36:06,838 [main:117] - GENERATED CALL = (A().foo()).trimStart()
2021-03-11 23:36:06,838 [main:114] - replacement of "\n" of type String is (A().foo()).subSequence(-817981268, 233799089).repeat(-479468398)
2021-03-11 23:36:06,959 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:36:06,959 [main:66] - Compilation checking started
2021-03-11 23:36:07,304 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (A().foo()).subSequence(-817981268, 233799089).repeat(-479468398))) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:36:07,305 [main:107] - replacing (prope6, Function0<Unit>)
2021-03-11 23:36:07,306 [main:50] - replacing prope6 Function0<Unit>
2021-03-11 23:36:07,306 [main:54] - Getting value of type Function0<Unit>
2021-03-11 23:36:07,416 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 23:36:07,418 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:36:07,531 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:36:07,534 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:36:07,775 [main:302] - generating value of type = Any false depth = 4
2021-03-11 23:36:07,776 [main:95] - GENERATED = println("howtw")
2021-03-11 23:36:07,776 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("howtw")}
2021-03-11 23:36:07,776 [main:61] - GENERATED IS CALL =false
2021-03-11 23:36:07,784 [main:67] - randomType = Kla4
2021-03-11 23:36:07,892 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 23:36:07,894 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 23:36:07,902 [main:78] - Generated call from random type = (Kla4()).prope6
2021-03-11 23:36:07,903 [main:106] - GETTING Function0<Unit> from String
2021-03-11 23:36:07,920 [main:106] - GETTING Function0<Unit> from String
2021-03-11 23:36:07,922 [main:106] - GETTING Function0<Unit> from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:36:07,996 [main:114] - replacement of prope6 of type Function0<Unit> is { println("howtw")}
2021-03-11 23:36:08,107 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 23:36:08,107 [main:66] - Compilation checking started
2021-03-11 23:36:08,454 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
prope4 = 0
        prope5 = false
        { println("howtw")} = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:36:08,455 [main:107] - replacing (prope5, Boolean)
2021-03-11 23:36:08,456 [main:50] - replacing prope5 Boolean
2021-03-11 23:36:08,456 [main:54] - Getting value of type Boolean
2021-03-11 23:36:08,570 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:08,571 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 23:36:08,572 [main:61] - GENERATED IS CALL =false
2021-03-11 23:36:08,695 [main:67] - randomType = Double
2021-03-11 23:36:08,808 [main:302] - generating value of type = Double true depth = 0
2021-03-11 23:36:08,844 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5e6b07c8]
2021-03-11 23:36:08,844 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22f5b073]
2021-03-11 23:36:08,844 [main:78] - Generated call from random type = (0.901979325314315).toChar().isISOControl()
2021-03-11 23:36:08,845 [main:106] - GETTING Boolean from String
2021-03-11 23:36:08,866 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4f53f1b1]]
2021-03-11 23:36:08,866 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4f53f1b1]
2021-03-11 23:36:08,976 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:36:08,976 [main:117] - GENERATED CALL = (A().foo()).equals("dmxzq")
2021-03-11 23:36:08,977 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@366f5df4]]
2021-03-11 23:36:08,977 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8]
2021-03-11 23:36:09,085 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:09,087 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@366f5df4]
2021-03-11 23:36:09,088 [main:117] - GENERATED CALL = (A().foo()).get(-195655971).isLowerCase()
2021-03-11 23:36:09,088 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68487247]]
2021-03-11 23:36:09,088 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8]
2021-03-11 23:36:09,197 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:09,199 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68487247]
2021-03-11 23:36:09,199 [main:117] - GENERATED CALL = (A().foo()).get(-1310394773).isDefined()
2021-03-11 23:36:09,199 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a698622]]
2021-03-11 23:36:09,199 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8]
2021-03-11 23:36:09,308 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:09,310 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a698622]
2021-03-11 23:36:09,311 [main:117] - GENERATED CALL = (A().foo()).get(1075895167).isDigit()
2021-03-11 23:36:09,311 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@649b39d6]]
2021-03-11 23:36:09,311 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8]
2021-03-11 23:36:09,423 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:09,425 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@649b39d6]
2021-03-11 23:36:09,425 [main:117] - GENERATED CALL = (A().foo()).get(776323766).isLetter()
2021-03-11 23:36:09,425 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7f390098]]
2021-03-11 23:36:09,425 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6]
2021-03-11 23:36:09,425 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7f390098]
2021-03-11 23:36:09,551 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:36:09,551 [main:117] - GENERATED CALL = (A().foo()).compareTo(A().foo()).equals("mnvyr")
2021-03-11 23:36:09,551 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b1122b6]]
2021-03-11 23:36:09,551 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b1122b6]
2021-03-11 23:36:09,551 [main:117] - GENERATED CALL = (A().foo()).none()
2021-03-11 23:36:09,551 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7f3c1e]]
2021-03-11 23:36:09,552 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:36:09,661 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:09,772 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:09,774 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7f3c1e]
2021-03-11 23:36:09,774 [main:117] - GENERATED CALL = (A().foo()).subSequence(-412666784, 1944296292).isNotBlank()
2021-03-11 23:36:09,774 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4f53f1b1], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1d6efd58]]
2021-03-11 23:36:09,775 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4f53f1b1]
2021-03-11 23:36:09,883 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:36:09,883 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1d6efd58]
2021-03-11 23:36:09,992 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:09,994 [main:117] - GENERATED CALL = (A().foo()).equals("cgqui").xor(true)
2021-03-11 23:36:09,994 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d2e2b8d]]
2021-03-11 23:36:09,994 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d2e2b8d]
2021-03-11 23:36:09,995 [main:117] - GENERATED CALL = (A().foo()).isNotEmpty()
2021-03-11 23:36:09,995 [main:114] - replacement of prope5 of type Boolean is (0.901979325314315).toChar().isISOControl()
2021-03-11 23:36:10,104 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:36:10,104 [main:66] - Compilation checking started
2021-03-11 23:36:10,752 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !(0.901979325314315).toChar().isISOControl()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:36:10,754 [main:107] - replacing ({ c.resume(Unit) }, Function0<Unit>)
2021-03-11 23:36:10,754 [main:50] - replacing { c.resume(Unit) } Function0<Unit>
2021-03-11 23:36:10,754 [main:54] - Getting value of type Function0<Unit>
2021-03-11 23:36:10,884 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 23:36:10,886 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:36:11,011 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:36:11,014 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:36:11,251 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 23:36:11,253 [main:95] - GENERATED = check(true)
2021-03-11 23:36:11,254 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-11 23:36:11,254 [main:61] - GENERATED IS CALL =false
2021-03-11 23:36:11,648 [main:67] - randomType = Set<UInt?>
2021-03-11 23:36:11,649 [main:106] - GETTING Function0<Unit> from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:36:11,712 [main:106] - GETTING Function0<Unit> from String
2021-03-11 23:36:11,729 [main:106] - GETTING Function0<Unit> from String
2021-03-11 23:36:11,730 [main:114] - replacement of { c.resume(Unit) } of type Function0<Unit> is { check(true)}
2021-03-11 23:36:11,839 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 23:36:11,839 [main:66] - Compilation checking started
2021-03-11 23:36:12,466 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { check(true)}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !(0.901979325314315).toChar().isISOControl()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:36:12,468 [main:107] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-11 23:36:12,468 [main:50] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-11 23:36:12,468 [main:54] - Getting value of type String
2021-03-11 23:36:12,581 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:36:12,583 [main:58] - GENERATED VALUE OF TYPE String = "nlgvq"
2021-03-11 23:36:12,583 [main:61] - GENERATED IS CALL =false
2021-03-11 23:36:12,709 [main:67] - randomType = UByte
2021-03-11 23:36:12,819 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 23:36:12,848 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7504b368]
2021-03-11 23:36:12,958 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 23:36:12,960 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@147cbdb6]
2021-03-11 23:36:13,070 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:13,072 [main:78] - Generated call from random type = (31.toUByte()).compareTo(72.toUByte()).toString(-1251154998)
2021-03-11 23:36:13,072 [main:106] - GETTING String from String
2021-03-11 23:36:13,090 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57afba56]]
2021-03-11 23:36:13,090 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57afba56]
2021-03-11 23:36:13,090 [main:117] - GENERATED CALL = (B().foo()).uppercase()
2021-03-11 23:36:13,090 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b881cae]]
2021-03-11 23:36:13,090 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b881cae]
2021-03-11 23:36:13,200 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:36:13,202 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:36:13,204 [main:117] - GENERATED CALL = (B().foo()).takeWhile({a: Char -> false})
2021-03-11 23:36:13,204 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cc909f5]]
2021-03-11 23:36:13,204 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8]
2021-03-11 23:36:13,328 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:13,330 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cc909f5]
2021-03-11 23:36:13,330 [main:117] - GENERATED CALL = (B().foo()).get(-427132332).uppercase()
2021-03-11 23:36:13,330 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41e3146c]]
2021-03-11 23:36:13,330 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41e3146c]
2021-03-11 23:36:13,442 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:36:13,563 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:36:13,565 [main:117] - GENERATED CALL = (B().foo()).replaceAfter('庲', "jxeiw", A().foo())
2021-03-11 23:36:13,566 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bb92537]]
2021-03-11 23:36:13,566 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bb92537]
2021-03-11 23:36:13,678 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:36:13,680 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:36:13,683 [main:117] - GENERATED CALL = (B().foo()).dropLastWhile({a: Char -> true})
2021-03-11 23:36:13,683 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ed92e21]]
2021-03-11 23:36:13,683 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ed92e21]
2021-03-11 23:36:13,683 [main:117] - GENERATED CALL = (B().foo()).toUpperCase()
2021-03-11 23:36:13,683 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b63442e]]
2021-03-11 23:36:13,683 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b63442e]
2021-03-11 23:36:13,683 [main:117] - GENERATED CALL = (B().foo()).lowercase()
2021-03-11 23:36:13,683 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63f31c07]]
2021-03-11 23:36:13,683 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:36:13,795 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:13,907 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:13,909 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63f31c07]
2021-03-11 23:36:14,018 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:36:14,132 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:14,134 [main:117] - GENERATED CALL = (B().foo()).subSequence(1340808526, -2117858306).commonSuffixWith("wtlwh", false)
2021-03-11 23:36:14,134 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1321c72b]]
2021-03-11 23:36:14,134 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8]
2021-03-11 23:36:14,244 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:14,246 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1321c72b]
2021-03-11 23:36:14,246 [main:117] - GENERATED CALL = (B().foo()).get(-1816998465).plus(B().foo())
2021-03-11 23:36:14,246 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cbfc0f8]]
2021-03-11 23:36:14,246 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cbfc0f8]
2021-03-11 23:36:14,246 [main:117] - GENERATED CALL = (B().foo()).replaceIndent(A().foo())
2021-03-11 23:36:14,246 [main:114] - replacement of "Wrong state-machine generated: it is finished early" of type String is "nlgvq"
2021-03-11 23:36:14,356 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 23:36:14,356 [main:66] - Compilation checking started
2021-03-11 23:36:14,914 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if (fu0() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { check(true)}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("nlgvq")
        prope6()
        if (checkFinished && !(0.901979325314315).toChar().isISOControl()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:36:14,916 [main:107] - replacing (fu0(), String)
2021-03-11 23:36:14,916 [main:50] - replacing fu0() String
2021-03-11 23:36:14,916 [main:54] - Getting value of type String
2021-03-11 23:36:15,045 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:36:15,047 [main:58] - GENERATED VALUE OF TYPE String = "iozch"
2021-03-11 23:36:15,047 [main:61] - GENERATED IS CALL =false
2021-03-11 23:36:15,056 [main:67] - randomType = Kla3
2021-03-11 23:36:15,195 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 23:36:15,197 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-11 23:36:15,203 [main:106] - GETTING String from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:36:15,265 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b63442e]]
2021-03-11 23:36:15,265 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b63442e]
2021-03-11 23:36:15,265 [main:117] - GENERATED CALL = (f).name.lowercase()
2021-03-11 23:36:15,266 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52044aa7]]
2021-03-11 23:36:15,266 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52044aa7]
2021-03-11 23:36:15,375 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:15,377 [main:117] - GENERATED CALL = (f).name.substring(-1563694127)
2021-03-11 23:36:15,377 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d6746b]]
2021-03-11 23:36:15,377 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d6746b]
2021-03-11 23:36:15,485 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:36:15,595 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:36:15,597 [main:117] - GENERATED CALL = (f).name.replaceBeforeLast('', B().foo(), "nknby")
2021-03-11 23:36:15,597 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@66b42011], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52044aa7]]
2021-03-11 23:36:15,597 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@66b42011]
2021-03-11 23:36:15,705 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:36:15,707 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:36:15,815 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:15,935 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:15,945 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@66b42011]
2021-03-11 23:36:15,945 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b17d139]]
2021-03-11 23:36:15,945 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b17d139]
2021-03-11 23:36:16,053 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:36:16,055 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:36:16,057 [main:117] - GENERATED CALL = (f).name.filterNot({a: Char -> true})
2021-03-11 23:36:16,057 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@66b42011], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a3fc977]]
2021-03-11 23:36:16,057 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@66b42011]
2021-03-11 23:36:16,166 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:36:16,168 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:36:16,277 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:16,395 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:16,405 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@66b42011]
2021-03-11 23:36:16,405 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@66b42011], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67931d83]]
2021-03-11 23:36:16,405 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@66b42011]
2021-03-11 23:36:16,520 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:36:16,522 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:36:16,631 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:16,773 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:16,783 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@66b42011]
2021-03-11 23:36:16,783 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@66b42011], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b63442e]]
2021-03-11 23:36:16,783 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@66b42011]
2021-03-11 23:36:16,918 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:36:16,920 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:36:17,045 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:17,162 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:17,172 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@66b42011]
2021-03-11 23:36:17,172 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@66b42011], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7572d8b3]]
2021-03-11 23:36:17,173 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@66b42011]
2021-03-11 23:36:17,282 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:36:17,284 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:36:17,391 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:17,510 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:17,520 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@66b42011]
2021-03-11 23:36:17,520 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@66b42011], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58527ba7]]
2021-03-11 23:36:17,520 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@66b42011]
2021-03-11 23:36:17,633 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:36:17,635 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:36:17,750 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:17,869 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:17,879 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@66b42011]
2021-03-11 23:36:18,031 [main:114] - replacement of fu0() of type String is (f).name.lowercase()
2021-03-11 23:36:18,142 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:36:18,142 [main:66] - Compilation checking started
2021-03-11 23:36:18,782 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if ((f).name.lowercase() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { check(true)}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("nlgvq")
        prope6()
        if (checkFinished && !(0.901979325314315).toChar().isISOControl()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:36:18,784 [main:107] - replacing ("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n"), String)
2021-03-11 23:36:18,784 [main:50] - replacing "tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n") String
2021-03-11 23:36:18,784 [main:54] - Getting value of type String
2021-03-11 23:36:18,901 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:36:18,903 [main:58] - GENERATED VALUE OF TYPE String = "iolyf"
2021-03-11 23:36:18,903 [main:61] - GENERATED IS CALL =false
2021-03-11 23:36:18,907 [main:67] - randomType = Boolean
2021-03-11 23:36:19,021 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:19,032 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2ac140be]
2021-03-11 23:36:19,143 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:19,146 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@147cbdb6]
2021-03-11 23:36:19,255 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:19,257 [main:78] - Generated call from random type = (false).compareTo(false).toString(394533385)
2021-03-11 23:36:19,257 [main:106] - GETTING String from String
2021-03-11 23:36:19,275 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ed92e21]]
2021-03-11 23:36:19,275 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ed92e21]
2021-03-11 23:36:19,275 [main:117] - GENERATED CALL = (B().foo()).toUpperCase()
2021-03-11 23:36:19,275 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60a399c4]]
2021-03-11 23:36:19,275 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60a399c4]
2021-03-11 23:36:19,383 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:36:19,385 [main:117] - GENERATED CALL = (B().foo()).replaceBefore('즩', A().foo(), A().foo())
2021-03-11 23:36:19,385 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13df2251]]
2021-03-11 23:36:19,385 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13df2251]
2021-03-11 23:36:19,493 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 23:36:19,495 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:36:19,497 [main:117] - GENERATED CALL = (B().foo()).filterIndexed({a: Int, b: Char -> false})
2021-03-11 23:36:19,498 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a2c48be]]
2021-03-11 23:36:19,498 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a2c48be]
2021-03-11 23:36:19,498 [main:117] - GENERATED CALL = (B().foo()).trimEnd()
2021-03-11 23:36:19,498 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d440ac6]]
2021-03-11 23:36:19,498 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d440ac6]
2021-03-11 23:36:19,616 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:36:19,618 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:36:19,620 [main:117] - GENERATED CALL = (B().foo()).filter({a: Char -> true})
2021-03-11 23:36:19,620 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63f31c07]]
2021-03-11 23:36:19,620 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63f31c07]
2021-03-11 23:36:19,729 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:36:19,844 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 23:36:19,847 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 23:36:20,082 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 23:36:20,088 [main:95] - GENERATED = StringBuilder("ouxqw")
2021-03-11 23:36:20,229 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:20,231 [main:117] - GENERATED CALL = (B().foo()).commonSuffixWith(StringBuilder("ouxqw"), false)
2021-03-11 23:36:20,231 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a199c82]]
2021-03-11 23:36:20,231 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:36:20,376 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:20,500 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:20,502 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a199c82]
2021-03-11 23:36:20,613 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:20,615 [main:117] - GENERATED CALL = (B().foo()).subSequence(231739583, 1666611256).repeat(-689001410)
2021-03-11 23:36:20,615 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d90f169]]
2021-03-11 23:36:20,615 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d90f169]
2021-03-11 23:36:20,724 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:36:20,725 [main:117] - GENERATED CALL = (B().foo()).plus("rqjev")
2021-03-11 23:36:20,725 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cbfc0f8]]
2021-03-11 23:36:20,725 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cbfc0f8]
2021-03-11 23:36:20,833 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:36:20,835 [main:117] - GENERATED CALL = (B().foo()).replaceIndent("esthh")
2021-03-11 23:36:20,835 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7572d8b3]]
2021-03-11 23:36:20,835 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7572d8b3]
2021-03-11 23:36:20,835 [main:117] - GENERATED CALL = (B().foo()).trim()
2021-03-11 23:36:20,835 [main:114] - replacement of "tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n") of type String is (B().foo()).trim()
2021-03-11 23:36:20,945 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:36:20,946 [main:66] - Compilation checking started
2021-03-11 23:36:21,312 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if ((f).name.lowercase() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error((B().foo()).trim()) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { check(true)}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("nlgvq")
        prope6()
        if (checkFinished && !(0.901979325314315).toChar().isISOControl()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:36:21,314 [main:107] - replacing (exception, Throwable)
2021-03-11 23:36:21,315 [main:50] - replacing exception Throwable
2021-03-11 23:36:21,315 [main:54] - Getting value of type Throwable
2021-03-11 23:36:21,442 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 23:36:21,448 [main:58] - GENERATED VALUE OF TYPE Throwable = UninitializedPropertyAccessException()
2021-03-11 23:36:21,448 [main:61] - GENERATED IS CALL =true
2021-03-11 23:36:21,853 [main:67] - randomType = Collection<Array<Char>>
2021-03-11 23:36:21,854 [main:106] - GETTING Throwable from String
2021-03-11 23:36:21,872 [main:106] - GETTING Throwable from String
2021-03-11 23:36:21,873 [main:106] - GETTING Throwable from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:36:21,936 [main:114] - replacement of exception of type Throwable is UninitializedPropertyAccessException()
2021-03-11 23:36:22,048 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:36:22,049 [main:66] - Compilation checking started
2021-03-11 23:36:22,633 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if ((f).name.lowercase() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { check(true)}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("nlgvq")
        prope6()
        if (checkFinished && !(0.901979325314315).toChar().isISOControl()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        val f = B::foo
throw UninitializedPropertyAccessException()
    }
}


2021-03-11 23:36:22,635 [main:107] - replacing ("Continuation ", String)
2021-03-11 23:36:22,635 [main:50] - replacing "Continuation " String
2021-03-11 23:36:22,635 [main:54] - Getting value of type String
2021-03-11 23:36:22,766 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:36:22,768 [main:58] - GENERATED VALUE OF TYPE String = "fzeow"
2021-03-11 23:36:22,768 [main:61] - GENERATED IS CALL =false
2021-03-11 23:36:22,776 [main:67] - randomType = Kla4
2021-03-11 23:36:22,893 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 23:36:22,896 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { check(true)}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("nlgvq")
        prope6()
        if (checkFinished && !(0.901979325314315).toChar().isISOControl()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 23:36:22,907 [main:106] - GETTING String from String
2021-03-11 23:36:22,938 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@731990b2]]
2021-03-11 23:36:22,938 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@731990b2]
2021-03-11 23:36:23,053 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:23,055 [main:117] - GENERATED CALL = (A().foo()).take(-1644899770)
2021-03-11 23:36:23,055 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d6746b]]
2021-03-11 23:36:23,055 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d6746b]
2021-03-11 23:36:23,164 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:36:23,166 [main:117] - GENERATED CALL = (A().foo()).replaceBeforeLast('ڧ', A().foo(), B().foo())
2021-03-11 23:36:23,166 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c2f70a9]]
2021-03-11 23:36:23,167 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c2f70a9]
2021-03-11 23:36:23,167 [main:117] - GENERATED CALL = (A().foo()).concat(A().foo())
2021-03-11 23:36:23,167 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b17d139]]
2021-03-11 23:36:23,167 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b17d139]
2021-03-11 23:36:23,276 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:36:23,278 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:36:23,280 [main:117] - GENERATED CALL = (A().foo()).filterNot({a: Char -> true})
2021-03-11 23:36:23,280 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74d674d]]
2021-03-11 23:36:23,280 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74d674d]
2021-03-11 23:36:23,389 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:23,391 [main:117] - GENERATED CALL = (A().foo()).dropLast(1207889977)
2021-03-11 23:36:23,392 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b881cae]]
2021-03-11 23:36:23,392 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b881cae]
2021-03-11 23:36:23,501 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:36:23,503 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:36:23,506 [main:117] - GENERATED CALL = (A().foo()).takeWhile({a: Char -> false})
2021-03-11 23:36:23,506 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7071f8e8]]
2021-03-11 23:36:23,506 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7071f8e8]
2021-03-11 23:36:23,630 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:36:23,743 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:36:23,746 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:36:23,983 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:36:23,985 [main:95] - GENERATED = StringBuilder("ayxcd")
2021-03-11 23:36:23,985 [main:117] - GENERATED CALL = (A().foo()).removeSurrounding(StringBuilder("ayxcd"))
2021-03-11 23:36:23,985 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ef6b1a]]
2021-03-11 23:36:23,985 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ef6b1a]
2021-03-11 23:36:24,095 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 23:36:24,210 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): Iterable<Int> = TODO()
2021-03-11 23:36:24,213 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): Iterable<Int> = TODO()
2021-03-11 23:36:24,570 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:36:24,572 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:36:24,574 [main:95] - GENERATED = IntRange(-598652808, -2114842671)
2021-03-11 23:36:24,575 [main:117] - GENERATED CALL = (A().foo()).slice(IntRange(-598652808, -2114842671))
2021-03-11 23:36:24,575 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45805c5b]]
2021-03-11 23:36:24,575 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45805c5b]
2021-03-11 23:36:24,685 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:36:24,687 [main:117] - GENERATED CALL = (A().foo()).substringAfterLast('컠', A().foo())
2021-03-11 23:36:24,687 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eee599b]]
2021-03-11 23:36:24,687 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eee599b]
2021-03-11 23:36:24,799 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:36:24,801 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:36:24,804 [main:117] - GENERATED CALL = (A().foo()).dropWhile({a: Char -> true})
2021-03-11 23:36:24,804 [main:114] - replacement of "Continuation " of type String is (A().foo()).slice(IntRange(-598652808, -2114842671))
2021-03-11 23:36:24,913 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:36:24,913 [main:66] - Compilation checking started
2021-03-11 23:36:25,275 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if ((f).name.lowercase() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error((A().foo()).slice(IntRange(-598652808, -2114842671)) + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { check(true)}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("nlgvq")
        prope6()
        if (checkFinished && !(0.901979325314315).toChar().isISOControl()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        val f = B::foo
throw UninitializedPropertyAccessException()
    }
}


2021-03-11 23:36:25,277 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-11 23:36:25,277 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-11 23:36:25,277 [main:54] - Getting value of type Throwable?
2021-03-11 23:36:25,389 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 23:36:25,503 [main:43] - GENERATING CALL OF fun NoSuchElementException(message: kotlin.String?): Throwable = TODO()
2021-03-11 23:36:25,506 [main:61] - WITHOUT TYPE PARAMS = fun NoSuchElementException(message: kotlin.String?): Throwable = TODO()
2021-03-11 23:36:25,757 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:36:25,759 [main:95] - GENERATED = NoSuchElementException("wnyhx")
2021-03-11 23:36:25,759 [main:58] - GENERATED VALUE OF TYPE Throwable? = NoSuchElementException("wnyhx")
2021-03-11 23:36:25,759 [main:61] - GENERATED IS CALL =true
2021-03-11 23:36:25,886 [main:67] - randomType = Long
2021-03-11 23:36:25,997 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:36:26,044 [main:106] - GETTING Throwable? from String
2021-03-11 23:36:26,066 [main:106] - GETTING Throwable? from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:36:26,129 [main:106] - GETTING Throwable? from String
2021-03-11 23:36:26,129 [main:114] - replacement of exceptionOrNull() of type Throwable? is NoSuchElementException("wnyhx")
2021-03-11 23:36:26,238 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:36:26,238 [main:66] - Compilation checking started
2021-03-11 23:36:26,576 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if ((f).name.lowercase() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).NoSuchElementException("wnyhx")?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { check(true)}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("nlgvq")
        prope6()
        if (checkFinished && !(0.901979325314315).toChar().isISOControl()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        val f = B::foo
throw UninitializedPropertyAccessException()
    }
}


2021-03-11 23:36:26,578 [main:107] - replacing (", got ", String)
2021-03-11 23:36:26,578 [main:50] - replacing ", got " String
2021-03-11 23:36:26,578 [main:54] - Getting value of type String
2021-03-11 23:36:26,691 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:36:26,693 [main:58] - GENERATED VALUE OF TYPE String = "fzgqb"
2021-03-11 23:36:26,693 [main:61] - GENERATED IS CALL =false
2021-03-11 23:36:26,701 [main:67] - randomType = A
2021-03-11 23:36:26,813 [main:302] - generating value of type = A false depth = 0
2021-03-11 23:36:26,815 [main:112] - generating klass A text = open class A {
    open fun foo(a: String, b: String = "b") = b + a
}
2021-03-11 23:36:26,820 [main:149] - GENERATING call of type public open fun foo(a: kotlin.String, b: kotlin.String = ...): kotlin.String defined in A[SimpleFunctionDescriptorImpl@4dbb4161]
2021-03-11 23:36:26,820 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45805c5b]
2021-03-11 23:36:26,948 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:36:26,950 [main:78] - Generated call from random type = (A()).foo(A().foo(), A().foo()).substringAfterLast('ꪼ', B().foo())
2021-03-11 23:36:26,950 [main:106] - GETTING String from String
2021-03-11 23:36:26,968 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57afba56]]
2021-03-11 23:36:26,968 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57afba56]
2021-03-11 23:36:26,968 [main:117] - GENERATED CALL = (B().foo()).uppercase()
2021-03-11 23:36:26,968 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50873dfc]]
2021-03-11 23:36:26,968 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50873dfc]
2021-03-11 23:36:27,079 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:36:27,197 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:36:27,199 [main:117] - GENERATED CALL = (B().foo()).substringBefore('㭊', "szwmg")
2021-03-11 23:36:27,199 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b17d139]]
2021-03-11 23:36:27,199 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b17d139]
2021-03-11 23:36:27,307 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:36:27,309 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:36:27,311 [main:117] - GENERATED CALL = (B().foo()).filterNot({a: Char -> true})
2021-03-11 23:36:27,311 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b881cae]]
2021-03-11 23:36:27,312 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b881cae]
2021-03-11 23:36:27,421 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:36:27,423 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:36:27,425 [main:117] - GENERATED CALL = (B().foo()).takeWhile({a: Char -> true})
2021-03-11 23:36:27,425 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37180f7a]]
2021-03-11 23:36:27,425 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37180f7a]
2021-03-11 23:36:27,533 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 23:36:27,535 [main:302] - generating value of type = Char true depth = 1
2021-03-11 23:36:27,537 [main:117] - GENERATED CALL = (B().foo()).replaceFirstChar({a: Char -> 'ɳ'})
2021-03-11 23:36:27,537 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a3fc977]]
2021-03-11 23:36:27,537 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a3fc977]
2021-03-11 23:36:27,538 [main:117] - GENERATED CALL = (B().foo()).prependIndent(B().foo())
2021-03-11 23:36:27,538 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66ac212]]
2021-03-11 23:36:27,538 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66ac212]
2021-03-11 23:36:27,647 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:36:27,652 [main:117] - GENERATED CALL = (B().foo()).removePrefix("nlrob")
2021-03-11 23:36:27,652 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45d9ec36]]
2021-03-11 23:36:27,652 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:36:27,761 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:27,871 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:27,873 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45d9ec36]
2021-03-11 23:36:27,983 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 23:36:28,096 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 23:36:28,099 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 23:36:28,333 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:36:28,335 [main:95] - GENERATED = Regex("khfxa")
2021-03-11 23:36:28,335 [main:117] - GENERATED CALL = (B().foo()).subSequence(1205127612, 1487031222).replaceFirst(Regex("khfxa"), B().foo())
2021-03-11 23:36:28,335 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@162090bf]]
2021-03-11 23:36:28,335 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@162090bf]
2021-03-11 23:36:28,475 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:36:28,477 [main:117] - GENERATED CALL = (B().foo()).substringBeforeLast('懗', B().foo())
2021-03-11 23:36:28,477 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70f4305c]]
2021-03-11 23:36:28,477 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70f4305c]
2021-03-11 23:36:28,615 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:36:28,618 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:36:28,622 [main:117] - GENERATED CALL = (B().foo()).takeLastWhile({a: Char -> false})
2021-03-11 23:36:28,622 [main:114] - replacement of ", got " of type String is "fzgqb"
2021-03-11 23:36:28,735 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 23:36:28,735 [main:66] - Compilation checking started
2021-03-11 23:36:29,328 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if ((f).name.lowercase() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { check(true)}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "fzgqb" + prope4)
        if (prope5) error("nlgvq")
        prope6()
        if (checkFinished && !(0.901979325314315).toChar().isISOControl()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        val f = B::foo
throw UninitializedPropertyAccessException()
    }
}


2021-03-11 23:36:29,330 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-11 23:36:29,330 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-11 23:36:29,330 [main:54] - Getting value of type String
2021-03-11 23:36:29,459 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:36:29,461 [main:58] - GENERATED VALUE OF TYPE String = "eqklk"
2021-03-11 23:36:29,461 [main:61] - GENERATED IS CALL =false
2021-03-11 23:36:29,598 [main:67] - randomType = Kla5
2021-03-11 23:36:29,718 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 23:36:29,720 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        val f = B::foo
throw UninitializedPropertyAccessException()
    }
}
2021-03-11 23:36:29,748 [main:106] - GETTING String from String
2021-03-11 23:36:29,767 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45805c5b]]
2021-03-11 23:36:29,767 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45805c5b]
2021-03-11 23:36:29,876 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:36:29,986 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:36:29,989 [main:117] - GENERATED CALL = (A().foo()).substringAfterLast('層', "smrjf")
2021-03-11 23:36:29,989 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37180f7a]]
2021-03-11 23:36:29,989 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37180f7a]
2021-03-11 23:36:30,097 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 23:36:30,099 [main:302] - generating value of type = Char true depth = 1
2021-03-11 23:36:30,101 [main:117] - GENERATED CALL = (A().foo()).replaceFirstChar({a: Char -> 'Ӂ'})
2021-03-11 23:36:30,101 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52044aa7]]
2021-03-11 23:36:30,101 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52044aa7]
2021-03-11 23:36:30,214 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:30,216 [main:117] - GENERATED CALL = (A().foo()).substring(-1735840190)
2021-03-11 23:36:30,216 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a199c82]]
2021-03-11 23:36:30,216 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a199c82]
2021-03-11 23:36:30,353 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:30,355 [main:117] - GENERATED CALL = (A().foo()).repeat(-774265782)
2021-03-11 23:36:30,355 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45d9ec36]]
2021-03-11 23:36:30,355 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:36:30,469 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:30,589 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:30,591 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45d9ec36]
2021-03-11 23:36:30,709 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 23:36:30,823 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 23:36:30,826 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 23:36:31,194 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:36:31,196 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-11 23:36:31,312 [main:43] - GENERATING CALL OF fun <T> mutableSetOf(): Set<RegexOption> = TODO()
2021-03-11 23:36:31,315 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableSetOf(): Set<RegexOption> = TODO()
2021-03-11 23:36:31,434 [main:95] - GENERATED = mutableSetOf<RegexOption>()
2021-03-11 23:36:31,434 [main:95] - GENERATED = Regex("civaz", mutableSetOf<RegexOption>())
2021-03-11 23:36:31,434 [main:117] - GENERATED CALL = (A().foo()).subSequence(905045714, -2131091362).replaceFirst(Regex("civaz", mutableSetOf<RegexOption>()), A().foo())
2021-03-11 23:36:31,435 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eba77a7]]
2021-03-11 23:36:31,435 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eba77a7]
2021-03-11 23:36:31,435 [main:117] - GENERATED CALL = (A().foo()).capitalize()
2021-03-11 23:36:31,435 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7094e6f3]]
2021-03-11 23:36:31,435 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7094e6f3]
2021-03-11 23:36:31,435 [main:117] - GENERATED CALL = (A().foo()).toLowerCase()
2021-03-11 23:36:31,435 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cc909f5]]
2021-03-11 23:36:31,435 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8]
2021-03-11 23:36:31,546 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:31,548 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cc909f5]
2021-03-11 23:36:31,549 [main:117] - GENERATED CALL = (A().foo()).get(714851296).uppercase()
2021-03-11 23:36:31,549 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@162090bf]]
2021-03-11 23:36:31,549 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@162090bf]
2021-03-11 23:36:31,659 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:36:31,662 [main:117] - GENERATED CALL = (A().foo()).substringBeforeLast('ⶕ', A().foo())
2021-03-11 23:36:31,662 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d0d25e9]]
2021-03-11 23:36:31,662 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d0d25e9]
2021-03-11 23:36:31,772 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:31,913 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:36:31,915 [main:117] - GENERATED CALL = (A().foo()).padStart(-1945699127, '곍')
2021-03-11 23:36:31,916 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is "eqklk"
2021-03-11 23:36:32,050 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 23:36:32,051 [main:66] - Compilation checking started
2021-03-11 23:36:32,711 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if ((f).name.lowercase() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { check(true)}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "fzgqb" + prope4)
        if (prope5) error("nlgvq")
        prope6()
        if (checkFinished && !(0.901979325314315).toChar().isISOControl()) error("eqklk")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        val f = B::foo
throw UninitializedPropertyAccessException()
    }
}


2021-03-11 23:36:32,713 [main:107] - replacing (prope6, Function0<Unit>)
2021-03-11 23:36:32,713 [main:50] - replacing prope6 Function0<Unit>
2021-03-11 23:36:32,713 [main:54] - Getting value of type Function0<Unit>
2021-03-11 23:36:32,832 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 23:36:32,834 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:36:32,954 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:36:32,956 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:36:33,335 [main:302] - generating value of type = Int true depth = 4
2021-03-11 23:36:33,337 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 23:36:33,339 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 23:36:33,454 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:36:33,457 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:36:33,693 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 23:36:33,695 [main:95] - GENERATED = check(true)
2021-03-11 23:36:33,695 [main:95] - GENERATED = repeat(250651139, {a: Int -> check(true)})
2021-03-11 23:36:33,695 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(250651139, {a: Int -> check(true)})}
2021-03-11 23:36:33,695 [main:61] - GENERATED IS CALL =false
2021-03-11 23:36:33,699 [main:67] - randomType = Boolean
2021-03-11 23:36:33,829 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:33,844 [main:106] - GETTING Function0<Unit> from String
2021-03-11 23:36:33,865 [main:106] - GETTING Function0<Unit> from String
2021-03-11 23:36:33,866 [main:106] - GETTING Function0<Unit> from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:36:33,928 [main:114] - replacement of prope6 of type Function0<Unit> is { repeat(250651139, {a: Int -> check(true)})}
2021-03-11 23:36:34,039 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 23:36:34,039 [main:66] - Compilation checking started
2021-03-11 23:36:34,396 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if ((f).name.lowercase() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
prope4 = 0
        prope5 = false
        { repeat(250651139, {a: Int -> check(true)})} = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { check(true)}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "fzgqb" + prope4)
        if (prope5) error("nlgvq")
        prope6()
        if (checkFinished && !(0.901979325314315).toChar().isISOControl()) error("eqklk")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        val f = B::foo
throw UninitializedPropertyAccessException()
    }
}


2021-03-11 23:36:34,398 [main:107] - replacing (prope6, Function0<Unit>)
2021-03-11 23:36:34,398 [main:50] - replacing prope6 Function0<Unit>
2021-03-11 23:36:34,398 [main:54] - Getting value of type Function0<Unit>
2021-03-11 23:36:34,510 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 23:36:34,512 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:36:34,627 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:36:34,630 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:36:34,868 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 23:36:34,871 [main:95] - GENERATED = check(false)
2021-03-11 23:36:34,871 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-11 23:36:34,871 [main:61] - GENERATED IS CALL =false
2021-03-11 23:36:35,119 [main:67] - randomType = Float?
2021-03-11 23:36:35,228 [main:302] - generating value of type = Float true depth = 0
2021-03-11 23:36:35,269 [main:106] - GETTING Function0<Unit> from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:36:35,332 [main:106] - GETTING Function0<Unit> from String
2021-03-11 23:36:35,349 [main:106] - GETTING Function0<Unit> from String
2021-03-11 23:36:35,349 [main:114] - replacement of prope6 of type Function0<Unit> is { check(false)}
2021-03-11 23:36:35,459 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 23:36:35,459 [main:66] - Compilation checking started
2021-03-11 23:36:35,823 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if ((f).name.lowercase() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { check(true)}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "fzgqb" + prope4)
        if (prope5) error("nlgvq")
        prope6()
        if (checkFinished && !(0.901979325314315).toChar().isISOControl()) error("eqklk")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
prope1.{ check(false)} = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        val f = B::foo
throw UninitializedPropertyAccessException()
    }
}


2021-03-11 23:36:35,825 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 23:36:35,825 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 23:36:35,825 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 23:36:35,942 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 23:36:35,947 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 23:36:36,075 [main:67] - randomType = Float
2021-03-11 23:36:36,190 [main:302] - generating value of type = Float true depth = 0
2021-03-11 23:36:36,236 [main:106] - GETTING EmptyCoroutineContext from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:36:36,299 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 23:36:36,316 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 23:36:36,316 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 23:36:36,316 [main:107] - replacing (prope1, Kla4)
2021-03-11 23:36:36,316 [main:50] - replacing prope1 Kla4
2021-03-11 23:36:36,316 [main:54] - Getting value of type Kla4
2021-03-11 23:36:36,424 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 23:36:36,426 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { check(true)}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "fzgqb" + prope4)
        if (prope5) error("nlgvq")
        prope6()
        if (checkFinished && !(0.901979325314315).toChar().isISOControl()) error("eqklk")
    }
}
2021-03-11 23:36:36,426 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-11 23:36:36,426 [main:61] - GENERATED IS CALL =true
2021-03-11 23:36:36,805 [main:67] - randomType = ArrayDeque<UInt?>
2021-03-11 23:36:36,914 [main:302] - generating value of type = ArrayDeque<UInt?> false depth = 0
2021-03-11 23:36:37,029 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<UInt?>): ArrayDeque<UInt?> = TODO()
2021-03-11 23:36:37,032 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<UInt?>): ArrayDeque<UInt?> = TODO()
2021-03-11 23:36:37,314 [main:302] - generating value of type = Collection<UInt?> false depth = 3
2021-03-11 23:36:37,430 [main:43] - GENERATING CALL OF fun <T> listOf(element: UInt?): Collection<UInt?> = TODO()
2021-03-11 23:36:37,433 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(element: UInt?): Collection<UInt?> = TODO()
2021-03-11 23:36:37,545 [main:302] - generating value of type = UInt true depth = 6
2021-03-11 23:36:37,547 [main:95] - GENERATED = listOf<UInt?>(317632788.toUInt())
2021-03-11 23:36:37,547 [main:95] - GENERATED = ArrayDeque<UInt?>(listOf<UInt?>(317632788.toUInt()))
2021-03-11 23:36:37,670 [main:106] - GETTING Kla4 from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:36:37,733 [main:106] - GETTING Kla4 from String
2021-03-11 23:36:37,750 [main:106] - GETTING Kla4 from String
2021-03-11 23:36:37,750 [main:114] - replacement of prope1 of type Kla4 is Kla4()
2021-03-11 23:36:37,857 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:36:37,857 [main:66] - Compilation checking started
2021-03-11 23:36:38,392 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if ((f).name.lowercase() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { check(true)}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "fzgqb" + prope4)
        if (prope5) error("nlgvq")
        prope6()
        if (checkFinished && !(0.901979325314315).toChar().isISOControl()) error("eqklk")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
Kla4().prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        val f = B::foo
throw UninitializedPropertyAccessException()
    }
}


2021-03-11 23:36:38,395 [main:107] - replacing (prope4 != i, Boolean)
2021-03-11 23:36:38,395 [main:50] - replacing prope4 != i Boolean
2021-03-11 23:36:38,395 [main:54] - Getting value of type Boolean
2021-03-11 23:36:38,523 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:38,525 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 23:36:38,525 [main:61] - GENERATED IS CALL =false
2021-03-11 23:36:38,901 [main:67] - randomType = Sequence<UByte>
2021-03-11 23:36:38,902 [main:106] - GETTING Boolean from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:36:38,968 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17d8267c]]
2021-03-11 23:36:38,968 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e]
2021-03-11 23:36:39,101 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:36:39,101 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17d8267c]
2021-03-11 23:36:39,209 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:39,211 [main:117] - GENERATED CALL = (f).equals("kcilk").and(true)
2021-03-11 23:36:39,211 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@3fc9cd27], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d688fab]]
2021-03-11 23:36:39,211 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@3fc9cd27]
2021-03-11 23:36:39,321 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:36:39,323 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:36:39,435 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:39,552 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:39,562 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@3fc9cd27]
2021-03-11 23:36:39,562 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@3fc9cd27], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb29618]]
2021-03-11 23:36:39,562 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@3fc9cd27]
2021-03-11 23:36:39,671 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:36:39,673 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:36:39,782 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:39,901 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:39,911 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@3fc9cd27]
2021-03-11 23:36:39,911 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb29618]]
2021-03-11 23:36:39,911 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb29618]
2021-03-11 23:36:39,911 [main:117] - GENERATED CALL = (f).name.matches(B().foo())
2021-03-11 23:36:39,911 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3aa2c4f4]]
2021-03-11 23:36:39,911 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e]
2021-03-11 23:36:40,020 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:36:40,020 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3aa2c4f4]
2021-03-11 23:36:40,020 [main:117] - GENERATED CALL = (f).equals("ymirb").not()
2021-03-11 23:36:40,021 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1d6efd58]]
2021-03-11 23:36:40,021 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e]
2021-03-11 23:36:40,129 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:36:40,129 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1d6efd58]
2021-03-11 23:36:40,239 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:40,241 [main:117] - GENERATED CALL = (f).equals("wfgkg").xor(false)
2021-03-11 23:36:40,241 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@3fc9cd27], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4f53f1b1]]
2021-03-11 23:36:40,241 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@3fc9cd27]
2021-03-11 23:36:40,352 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:36:40,354 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:36:40,464 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:40,581 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:40,591 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@3fc9cd27]
2021-03-11 23:36:40,591 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@54480bcc]]
2021-03-11 23:36:40,591 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e]
2021-03-11 23:36:40,731 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:36:40,731 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@54480bcc]
2021-03-11 23:36:40,862 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:36:40,863 [main:117] - GENERATED CALL = (f).equals("fbeec").equals("ooyff")
2021-03-11 23:36:40,863 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d688fab]]
2021-03-11 23:36:40,863 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d688fab]
2021-03-11 23:36:40,979 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:40,981 [main:117] - GENERATED CALL = (f).name.endsWith(B().foo(), true)
2021-03-11 23:36:40,981 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3175fe]]
2021-03-11 23:36:40,981 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3175fe]
2021-03-11 23:36:40,981 [main:117] - GENERATED CALL = (f).name.toBoolean()
2021-03-11 23:36:40,981 [main:114] - replacement of prope4 != i of type Boolean is (f).name.matches(B().foo())
2021-03-11 23:36:41,093 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:36:41,094 [main:66] - Compilation checking started
2021-03-11 23:36:41,434 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if ((f).name.lowercase() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { check(true)}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if ((f).name.matches(B().foo())) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "fzgqb" + prope4)
        if (prope5) error("nlgvq")
        prope6()
        if (checkFinished && !(0.901979325314315).toChar().isISOControl()) error("eqklk")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
Kla4().prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        val f = B::foo
throw UninitializedPropertyAccessException()
    }
}


2021-03-11 23:36:41,436 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got ", String)
2021-03-11 23:36:41,436 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " String
2021-03-11 23:36:41,436 [main:54] - Getting value of type String
2021-03-11 23:36:41,545 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:36:41,547 [main:58] - GENERATED VALUE OF TYPE String = "dztqi"
2021-03-11 23:36:41,548 [main:61] - GENERATED IS CALL =false
2021-03-11 23:36:41,793 [main:67] - randomType = Kla5?
2021-03-11 23:36:41,901 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 23:36:41,903 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
Kla4().prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        val f = B::foo
throw UninitializedPropertyAccessException()
    }
}
2021-03-11 23:36:41,930 [main:106] - GETTING String from String
2021-03-11 23:36:41,955 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@162090bf]]
2021-03-11 23:36:41,956 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@162090bf]
2021-03-11 23:36:42,064 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:36:42,066 [main:117] - GENERATED CALL = (A().foo()).substringBeforeLast('̿', A().foo())
2021-03-11 23:36:42,066 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dfaff72]]
2021-03-11 23:36:42,066 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dfaff72]
2021-03-11 23:36:42,066 [main:117] - GENERATED CALL = (A().foo()).trimStart()
2021-03-11 23:36:42,066 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7071f8e8]]
2021-03-11 23:36:42,066 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7071f8e8]
2021-03-11 23:36:42,175 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:36:42,287 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:36:42,290 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:36:42,555 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:36:42,557 [main:95] - GENERATED = StringBuilder("vsrlo")
2021-03-11 23:36:42,557 [main:117] - GENERATED CALL = (A().foo()).removeSurrounding(StringBuilder("vsrlo"))
2021-03-11 23:36:42,557 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50873dfc]]
2021-03-11 23:36:42,557 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50873dfc]
2021-03-11 23:36:42,670 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:36:42,673 [main:117] - GENERATED CALL = (A().foo()).substringBefore('䘳', B().foo())
2021-03-11 23:36:42,673 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58527ba7]]
2021-03-11 23:36:42,673 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58527ba7]
2021-03-11 23:36:42,673 [main:117] - GENERATED CALL = (A().foo()).trimIndent()
2021-03-11 23:36:42,673 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7094e6f3]]
2021-03-11 23:36:42,673 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7094e6f3]
2021-03-11 23:36:42,673 [main:117] - GENERATED CALL = (A().foo()).toLowerCase()
2021-03-11 23:36:42,673 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36621221]]
2021-03-11 23:36:42,673 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36621221]
2021-03-11 23:36:42,674 [main:117] - GENERATED CALL = (A().foo()).reversed()
2021-03-11 23:36:42,674 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@731990b2]]
2021-03-11 23:36:42,674 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@731990b2]
2021-03-11 23:36:42,783 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:42,785 [main:117] - GENERATED CALL = (A().foo()).take(-1400437575)
2021-03-11 23:36:42,785 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1321c72b]]
2021-03-11 23:36:42,785 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8]
2021-03-11 23:36:42,903 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:42,905 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1321c72b]
2021-03-11 23:36:42,905 [main:117] - GENERATED CALL = (A().foo()).get(-543707548).plus(A().foo())
2021-03-11 23:36:42,906 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b63442e]]
2021-03-11 23:36:42,906 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b63442e]
2021-03-11 23:36:42,906 [main:117] - GENERATED CALL = (A().foo()).lowercase()
2021-03-11 23:36:42,906 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " of type String is (A().foo()).lowercase()
2021-03-11 23:36:43,012 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:36:43,013 [main:66] - Compilation checking started
2021-03-11 23:36:43,368 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if ((f).name.lowercase() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { check(true)}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error((A().foo()).lowercase() + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "fzgqb" + prope4)
        if (prope5) error("nlgvq")
        prope6()
        if (checkFinished && !(0.901979325314315).toChar().isISOControl()) error("eqklk")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
Kla4().prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        val f = B::foo
throw UninitializedPropertyAccessException()
    }
}


2021-03-11 23:36:43,369 [main:107] - replacing (false, Boolean)
2021-03-11 23:36:43,370 [main:50] - replacing false Boolean
2021-03-11 23:36:43,370 [main:54] - Getting value of type Boolean
2021-03-11 23:36:43,482 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:43,484 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 23:36:43,484 [main:61] - GENERATED IS CALL =false
2021-03-11 23:36:43,613 [main:67] - randomType = Kla1?
2021-03-11 23:36:43,722 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 23:36:43,724 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-11 23:36:43,745 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@1088a4f0]
2021-03-11 23:36:43,854 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:36:43,855 [main:78] - Generated call from random type = (Kla1())?.prope2?.equals("scidr")!!
2021-03-11 23:36:43,856 [main:106] - GETTING Boolean from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:36:43,920 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb29618]]
2021-03-11 23:36:43,920 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb29618]
2021-03-11 23:36:43,920 [main:117] - GENERATED CALL = (f).name.matches(B().foo())
2021-03-11 23:36:43,920 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c86dc3d], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb29618]]
2021-03-11 23:36:43,920 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c86dc3d]
2021-03-11 23:36:44,028 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:36:44,030 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:36:44,140 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:44,286 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:44,296 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c86dc3d]
2021-03-11 23:36:44,296 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1d6efd58]]
2021-03-11 23:36:44,296 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e]
2021-03-11 23:36:44,412 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1d6efd58]
2021-03-11 23:36:44,522 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:44,524 [main:117] - GENERATED CALL = (f).equals(null).xor(true)
2021-03-11 23:36:44,524 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17d8267c]]
2021-03-11 23:36:44,524 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e]
2021-03-11 23:36:44,632 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:36:44,633 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17d8267c]
2021-03-11 23:36:44,740 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:44,742 [main:117] - GENERATED CALL = (f).equals("gdrcf").and(false)
2021-03-11 23:36:44,742 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ac6b7ae]]
2021-03-11 23:36:44,742 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e]
2021-03-11 23:36:44,850 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:36:44,851 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ac6b7ae]
2021-03-11 23:36:44,960 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:44,962 [main:117] - GENERATED CALL = (f).equals("sngqy").or(false)
2021-03-11 23:36:44,962 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d688fab]]
2021-03-11 23:36:44,962 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d688fab]
2021-03-11 23:36:45,074 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:45,076 [main:117] - GENERATED CALL = (f).name.endsWith(A().foo(), true)
2021-03-11 23:36:45,076 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c86dc3d], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3175fe]]
2021-03-11 23:36:45,076 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c86dc3d]
2021-03-11 23:36:45,184 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:36:45,187 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:36:45,294 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:45,415 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:45,425 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c86dc3d]
2021-03-11 23:36:45,426 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e]]
2021-03-11 23:36:45,426 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e]
2021-03-11 23:36:45,538 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:36:45,539 [main:117] - GENERATED CALL = (f).equals("obaxb")
2021-03-11 23:36:45,539 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c86dc3d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4f53f1b1]]
2021-03-11 23:36:45,539 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c86dc3d]
2021-03-11 23:36:45,647 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:36:45,649 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:36:45,757 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:45,914 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:45,924 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c86dc3d]
2021-03-11 23:36:45,925 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c86dc3d], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d688fab]]
2021-03-11 23:36:45,925 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c86dc3d]
2021-03-11 23:36:46,054 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:36:46,056 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:36:46,176 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:46,298 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:46,308 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@4c86dc3d]
2021-03-11 23:36:46,308 [main:114] - replacement of false of type Boolean is (f).name.endsWith(A().foo(), true)
2021-03-11 23:36:46,419 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:36:46,420 [main:66] - Compilation checking started
2021-03-11 23:36:46,769 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if ((f).name.lowercase() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
prope4 = 0
        prope5 = (f).name.endsWith(A().foo(), true)
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { check(true)}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "fzgqb" + prope4)
        if (prope5) error("nlgvq")
        prope6()
        if (checkFinished && !(0.901979325314315).toChar().isISOControl()) error("eqklk")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
Kla4().prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        val f = B::foo
throw UninitializedPropertyAccessException()
    }
}


2021-03-11 23:36:46,770 [main:107] - replacing (prope4, Int)
2021-03-11 23:36:46,771 [main:50] - replacing prope4 Int
2021-03-11 23:36:46,771 [main:54] - Getting value of type Int
2021-03-11 23:36:46,879 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:46,881 [main:58] - GENERATED VALUE OF TYPE Int = -484102158
2021-03-11 23:36:46,881 [main:61] - GENERATED IS CALL =false
2021-03-11 23:36:47,003 [main:67] - randomType = Float
2021-03-11 23:36:47,114 [main:302] - generating value of type = Float true depth = 0
2021-03-11 23:36:47,154 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304b2629]
2021-03-11 23:36:47,154 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@41a74ba8]
2021-03-11 23:36:47,154 [main:78] - Generated call from random type = (0.15925753f).toInt().inc()
2021-03-11 23:36:47,155 [main:106] - GETTING Int from String
2021-03-11 23:36:47,171 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5adaa8a5]]
2021-03-11 23:36:47,171 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8]
2021-03-11 23:36:47,279 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:47,281 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5adaa8a5]
2021-03-11 23:36:47,388 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:36:47,390 [main:117] - GENERATED CALL = (A().foo()).get(-2080933817).minus('麶')
2021-03-11 23:36:47,390 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1147cab]]
2021-03-11 23:36:47,391 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:36:47,506 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:47,636 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:47,638 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1147cab]
2021-03-11 23:36:47,638 [main:117] - GENERATED CALL = (A().foo()).subSequence(-1062890130, 1205396641).count()
2021-03-11 23:36:47,638 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7023f6c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-11 23:36:47,638 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-11 23:36:47,638 [main:117] - GENERATED CALL = (A().foo()).length.countTrailingZeroBits()
2021-03-11 23:36:47,639 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12905ebe]]
2021-03-11 23:36:47,639 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6]
2021-03-11 23:36:47,639 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12905ebe]
2021-03-11 23:36:47,747 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:36:47,749 [main:117] - GENERATED CALL = (A().foo()).compareTo(B().foo()).div(31)
2021-03-11 23:36:47,749 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d08af83]]
2021-03-11 23:36:47,750 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:36:47,858 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:47,967 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:47,969 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d08af83]
2021-03-11 23:36:48,077 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:36:48,079 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:36:48,082 [main:117] - GENERATED CALL = (A().foo()).subSequence(-2128043349, 746572196).indexOfFirst({a: Char -> true})
2021-03-11 23:36:48,082 [main:113] - Case = [public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50b55fc8]]
2021-03-11 23:36:48,082 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50b55fc8]
2021-03-11 23:36:48,191 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:36:48,300 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:48,410 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:48,412 [main:117] - GENERATED CALL = (A().foo()).indexOf('ᨄ', 23501218, true)
2021-03-11 23:36:48,412 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4f53f1b1], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2ac140be]]
2021-03-11 23:36:48,412 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4f53f1b1]
2021-03-11 23:36:48,520 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:36:48,520 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2ac140be]
2021-03-11 23:36:48,631 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:48,634 [main:117] - GENERATED CALL = (A().foo()).equals("vxkdr").compareTo(false)
2021-03-11 23:36:48,634 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7023f6c], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5cba3d39]]
2021-03-11 23:36:48,634 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5cba3d39]
2021-03-11 23:36:48,634 [main:117] - GENERATED CALL = (A().foo()).length.unaryMinus()
2021-03-11 23:36:48,634 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6de580aa]]
2021-03-11 23:36:48,634 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:36:48,741 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:48,850 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:48,853 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6de580aa]
2021-03-11 23:36:48,967 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:36:49,078 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:49,215 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:49,217 [main:117] - GENERATED CALL = (A().foo()).subSequence(474404040, 1525553158).lastIndexOf('', 160155761, false)
2021-03-11 23:36:49,217 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7023f6c], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4de6beac]]
2021-03-11 23:36:49,217 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4de6beac]
2021-03-11 23:36:49,217 [main:117] - GENERATED CALL = (A().foo()).length.countLeadingZeroBits()
2021-03-11 23:36:49,218 [main:114] - replacement of prope4 of type Int is (A().foo()).length.countLeadingZeroBits()
2021-03-11 23:36:49,335 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:36:49,335 [main:66] - Compilation checking started
2021-03-11 23:36:49,710 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if ((f).name.lowercase() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (A().foo()).length.countLeadingZeroBits()++
        prope6 = { check(true)}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "fzgqb" + prope4)
        if (prope5) error("nlgvq")
        prope6()
        if (checkFinished && !(0.901979325314315).toChar().isISOControl()) error("eqklk")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
Kla4().prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        val f = B::foo
throw UninitializedPropertyAccessException()
    }
}


2021-03-11 23:36:49,712 [main:107] - replacing (prope4, Int)
2021-03-11 23:36:49,712 [main:50] - replacing prope4 Int
2021-03-11 23:36:49,712 [main:54] - Getting value of type Int
2021-03-11 23:36:49,821 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:49,823 [main:58] - GENERATED VALUE OF TYPE Int = 540799685
2021-03-11 23:36:49,823 [main:61] - GENERATED IS CALL =false
2021-03-11 23:36:49,945 [main:67] - randomType = ULong
2021-03-11 23:36:50,053 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 23:36:50,081 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@2b5f6344]
2021-03-11 23:36:50,190 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 23:36:50,192 [main:78] - Generated call from random type = (2850869950519758759.toULong()).compareTo(51.toUByte()).absoluteValue
2021-03-11 23:36:50,193 [main:106] - GETTING Int from String
2021-03-11 23:36:50,213 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360], public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2fe277]]
2021-03-11 23:36:50,213 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@302e1360]
2021-03-11 23:36:50,320 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:50,429 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:50,431 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2fe277]
2021-03-11 23:36:50,540 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 23:36:50,542 [main:302] - generating value of type = Int true depth = 1
2021-03-11 23:36:50,544 [main:117] - GENERATED CALL = (A().foo()).subSequence(-10282241, -1915178063).sumBy({a: Char -> -867890474})
2021-03-11 23:36:50,545 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7023f6c], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@21431d8a]]
2021-03-11 23:36:50,545 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@21431d8a]
2021-03-11 23:36:50,653 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:50,764 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:50,766 [main:117] - GENERATED CALL = (A().foo()).length.coerceIn(1709351721, -2098134293)
2021-03-11 23:36:50,766 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@23f7b16]]
2021-03-11 23:36:50,766 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6]
2021-03-11 23:36:50,876 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:36:50,878 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@23f7b16]
2021-03-11 23:36:50,878 [main:117] - GENERATED CALL = (A().foo()).compareTo("kvccp").countOneBits()
2021-03-11 23:36:50,878 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7023f6c], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@306e9bf0]]
2021-03-11 23:36:50,878 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@306e9bf0]
2021-03-11 23:36:51,011 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:36:51,013 [main:117] - GENERATED CALL = (A().foo()).length.plus(-50)
2021-03-11 23:36:51,013 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7023f6c], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2c8f94f6]]
2021-03-11 23:36:51,013 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2c8f94f6]
2021-03-11 23:36:51,121 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:51,123 [main:117] - GENERATED CALL = (A().foo()).length.rotateRight(895553940)
2021-03-11 23:36:51,123 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7023f6c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2f48414d]]
2021-03-11 23:36:51,123 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2f48414d]
2021-03-11 23:36:51,123 [main:117] - GENERATED CALL = (A().foo()).length.takeLowestOneBit()
2021-03-11 23:36:51,123 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@72866288]]
2021-03-11 23:36:51,123 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6]
2021-03-11 23:36:51,123 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@72866288]
2021-03-11 23:36:51,230 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:51,232 [main:117] - GENERATED CALL = (A().foo()).compareTo(B().foo()).and(701052029)
2021-03-11 23:36:51,232 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@5230426b]]
2021-03-11 23:36:51,232 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ee513d8]
2021-03-11 23:36:51,341 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:51,343 [main:117] - GENERATED CALL = (A().foo()).get(987803976).code
2021-03-11 23:36:51,343 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7023f6c]]
2021-03-11 23:36:51,343 [main:117] - GENERATED CALL = (A().foo()).length
2021-03-11 23:36:51,344 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@9155b2d]]
2021-03-11 23:36:51,344 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7266e2e6]
2021-03-11 23:36:51,455 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:36:51,458 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@9155b2d]
2021-03-11 23:36:51,565 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:36:51,568 [main:117] - GENERATED CALL = (A().foo()).compareTo("thhhb").ushr(1119904509)
2021-03-11 23:36:51,568 [main:114] - replacement of prope4 of type Int is (A().foo()).compareTo("thhhb").ushr(1119904509)
2021-03-11 23:36:51,676 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:36:51,676 [main:66] - Compilation checking started
2021-03-11 23:36:52,016 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if ((f).name.lowercase() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
(A().foo()).compareTo("thhhb").ushr(1119904509) = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { check(true)}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "fzgqb" + prope4)
        if (prope5) error("nlgvq")
        prope6()
        if (checkFinished && !(0.901979325314315).toChar().isISOControl()) error("eqklk")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
Kla4().prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        val f = B::foo
throw UninitializedPropertyAccessException()
    }
}


2021-03-11 23:36:52,019 [main:107] - replacing (false, Boolean)
2021-03-11 23:36:52,019 [main:50] - replacing false Boolean
2021-03-11 23:36:52,019 [main:54] - Getting value of type Boolean
2021-03-11 23:36:52,144 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:52,146 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 23:36:52,146 [main:61] - GENERATED IS CALL =false
2021-03-11 23:36:52,282 [main:67] - randomType = B?
2021-03-11 23:36:52,391 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:36:52,393 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:36:52,407 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@4c8bfc0b]
2021-03-11 23:36:52,518 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:36:52,519 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1d6efd58]
2021-03-11 23:36:52,628 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:52,630 [main:78] - Generated call from random type = (B())?.equals("yrvte").xor(true)
2021-03-11 23:36:52,631 [main:106] - GETTING Boolean from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:36:52,697 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4f53f1b1]]
2021-03-11 23:36:52,697 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4f53f1b1]
2021-03-11 23:36:52,804 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:36:52,805 [main:117] - GENERATED CALL = (f).name.equals("ightz")
2021-03-11 23:36:52,805 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@54480bcc]]
2021-03-11 23:36:52,805 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e]
2021-03-11 23:36:52,939 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:36:52,939 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@54480bcc]
2021-03-11 23:36:53,047 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:36:53,047 [main:117] - GENERATED CALL = (f).equals("zcogu").equals("semdd")
2021-03-11 23:36:53,047 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@45100f37], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb29618]]
2021-03-11 23:36:53,048 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@45100f37]
2021-03-11 23:36:53,154 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:36:53,156 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:36:53,264 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:53,381 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:53,390 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@45100f37]
2021-03-11 23:36:53,390 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@45100f37], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559727bb]]
2021-03-11 23:36:53,390 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@45100f37]
2021-03-11 23:36:53,499 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:36:53,501 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:36:53,609 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:53,727 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:53,737 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@45100f37]
2021-03-11 23:36:53,737 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d688fab]]
2021-03-11 23:36:53,737 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d688fab]
2021-03-11 23:36:53,845 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:53,847 [main:117] - GENERATED CALL = (f).name.endsWith(B().foo(), false)
2021-03-11 23:36:53,847 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb29618]]
2021-03-11 23:36:53,847 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb29618]
2021-03-11 23:36:53,848 [main:117] - GENERATED CALL = (f).name.matches(A().foo())
2021-03-11 23:36:53,848 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1d6efd58]]
2021-03-11 23:36:53,848 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e]
2021-03-11 23:36:53,961 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:36:53,961 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1d6efd58]
2021-03-11 23:36:54,068 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:54,070 [main:117] - GENERATED CALL = (f).equals("gdukw").xor(true)
2021-03-11 23:36:54,070 [main:113] - Case = [public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@45100f37], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3175fe]]
2021-03-11 23:36:54,070 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@45100f37]
2021-03-11 23:36:54,177 [main:302] - generating value of type = B false depth = 0
2021-03-11 23:36:54,179 [main:112] - generating klass B text = class B : A() {
    override fun foo(a: String, b: String) = a + b
}
2021-03-11 23:36:54,286 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:54,404 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-11 23:36:54,416 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun invoke(p1: B, a: kotlin.String, b: kotlin.String): kotlin.String defined in kotlin.Function3[FunctionInvokeDescriptor@45100f37]
2021-03-11 23:36:54,416 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e]]
2021-03-11 23:36:54,416 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction3[DeserializedSimpleFunctionDescriptor@75f34a3e]
2021-03-11 23:36:54,569 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:36:54,569 [main:117] - GENERATED CALL = (f).equals("uphhn")
2021-03-11 23:36:54,570 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction3[DeserializedPropertyDescriptor@61725518], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559727bb]]
2021-03-11 23:36:54,570 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559727bb]
2021-03-11 23:36:54,710 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:36:54,713 [main:117] - GENERATED CALL = (f).name.startsWith(B().foo(), false)
2021-03-11 23:36:54,713 [main:114] - replacement of false of type Boolean is (f).equals("zcogu").equals("semdd")
2021-03-11 23:36:54,827 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:36:54,827 [main:66] - Compilation checking started
2021-03-11 23:36:55,157 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if ((f).name.lowercase() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = (f).equals("zcogu").equals("semdd")

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { check(true)}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "fzgqb" + prope4)
        if (prope5) error("nlgvq")
        prope6()
        if (checkFinished && !(0.901979325314315).toChar().isISOControl()) error("eqklk")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
Kla4().prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        val f = B::foo
throw UninitializedPropertyAccessException()
    }
}


2021-03-11 23:36:55,159 [main:107] - replacing (this, Kla1)
2021-03-11 23:36:55,159 [main:50] - replacing this Kla1
2021-03-11 23:36:55,159 [main:54] - Getting value of type Kla1
2021-03-11 23:36:55,270 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 23:36:55,272 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-11 23:36:55,272 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1()
2021-03-11 23:36:55,272 [main:61] - GENERATED IS CALL =true
2021-03-11 23:36:55,394 [main:67] - randomType = UShort
2021-03-11 23:36:55,502 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 23:36:55,531 [main:106] - GETTING Kla1 from KFunction3<B, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, String>
2021-03-11 23:36:55,594 [main:106] - GETTING Kla1 from String
2021-03-11 23:36:55,611 [main:106] - GETTING Kla1 from String
2021-03-11 23:36:55,611 [main:114] - replacement of this of type Kla1 is Kla1()
2021-03-11 23:36:55,718 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:36:55,719 [main:66] - Compilation checking started
2021-03-11 23:36:56,274 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun foo(a: String, b: String = "b") = b + a
}

class B : A() {
    override fun foo(a: String, b: String) = a + b
}

fun box(): String {
    val f = B::foo

    assert("ab" == f.callBy(mapOf(
        f.parameters.first() to B(),
        f.parameters.single { it.name == "a" } to "a"
    )))

    return "OK"
}

suspend fun fu0() = ""

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box938(): String {

    val f = B::foo
for (i in 1..3) {
        fu1 {
            if ((f).name.lowercase() != "OK") throw java.lang.RuntimeException("fail 1")
        }
    }

    return (f).name.uppercase()
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
runCatching<Any?>({ "loejn"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val f = B::foo
Kla1().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val f = B::foo
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val f = B::foo
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu7(method: String) {
        val f = B::foo
prope3.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val f = B::foo
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (f).name.substring(1193415467) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu9() {
        val f = B::foo
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { check(true)}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val f = B::foo
for (i in 1..(f).equals("jovxv").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "fzgqb" + prope4)
        if (prope5) error("nlgvq")
        prope6()
        if (checkFinished && !(0.901979325314315).toChar().isISOControl()) error("eqklk")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val f = B::foo
Kla4().prope6 = { check(false, { "aqmzb"})}
    }

    override fun fu4(exception: Throwable) {
        val f = B::foo
throw UninitializedPropertyAccessException()
    }
}


2021-03-11 23:36:56,276 [main:107] - replacing (prope4, Int)
2021-03-11 23:36:56,277 [main:50] - replacing prope4 Int
2021-03-11 23:36:56,277 [main:54] - Getting value of type Int
